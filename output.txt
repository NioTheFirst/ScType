Switched global version to 0.8.4
Analyzed_contracts_count: 1
total compilations: 7, contracts: 1
contract name: LibMath
Mark functions Adding: LibMath, toInt256, False
[*]Marked
Mark functions Adding: LibMath, abs, False
[*]Marked
Mark functions Adding: LibMath, sum, False
[*]Marked
Mark functions Adding: LibMath, sumN, False
[*]Marked
Mark functions Adding: LibMath, mean, False
[X]No Binary
Mark functions Adding: LibMath, meanN, False
[X]No Binary
Mark functions Adding: LibMath, min, False
[*]Marked
Mark functions Adding: LibMath, signedMin, False
[*]Marked
Mark functions Adding: LibMath, slitherConstructorConstantVariables, False
[X]No Binary
State_var: POSITIVE_INT256_MAX
Finding type for POSITIVE_INT256_MAX(uint256 ... )
Value: u
Source address: u
Running check on LibMath
Reading Function: toInt256
Checking funcion...



toInt256
Function name: toInt256
Finding type for x(uint256 ... )
Value: u
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u']]
FIND RETURN
ENTRY_POINT
toInt256(uint256)


POSITIVE_INT256_MAX_1(uint256) := ϕ(['POSITIVE_INT256_MAX_0'])
TMP_0(bool) = x_1 <= POSITIVE_INT256_MAX_1
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,uint256 overflow)
TMP_2 = CONVERT x_1 to int256
RETURN TMP_2


Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: POSITIVE_INT256_MAX_1, name: POSITIVE_INT256_MAX

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: POSITIVE_INT256_MAX, Num: 1
Globalname: POSITIVE_INT256_MAX, contract_name: LibMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
POSITIVE_INT256_MAX_1(uint256) := ϕ(['POSITIVE_INT256_MAX_0'])
Phi
[i]Type for POSITIVE_INT256_MAX

Name: POSITIVE_INT256_MAX Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_0 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_1, name: x

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: x_1 Function: toInt256
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: x, Num: 1
Globalname: x, contract_name: LibMath
Ssa_name: POSITIVE_INT256_MAX_1, name: POSITIVE_INT256_MAX

Name: POSITIVE_INT256_MAX Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: POSITIVE_INT256_MAX_1, name: POSITIVE_INT256_MAX

Name: POSITIVE_INT256_MAX Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x_1 Function: toInt256
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: x_1 Function: toInt256
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: x, Num: 1
Globalname: x, contract_name: LibMath
End popogation
TMP_0(bool) = x_1 <= POSITIVE_INT256_MAX_1
lnorm: u rnorm: u
Source address: u
Source address: u
[i]Type for TMP_0

Name: TMP_0 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,uint256 overflow)
[i]Type for TMP_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_2 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_1, name: x

Name: x_1 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x_1 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_2 = CONVERT x_1 to int256
Converting x_1

Name: x_1 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_2

Name: TMP_2 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_2
RETURN

Name: TMP_2 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


POSITIVE_INT256_MAX_1(uint256) := ϕ(['POSITIVE_INT256_MAX_0'])
TMP_0(bool) = x_1 <= POSITIVE_INT256_MAX_1
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,uint256 overflow)
TMP_2 = CONVERT x_1 to int256
RETURN TMP_2


Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: POSITIVE_INT256_MAX_1, name: POSITIVE_INT256_MAX

Name: POSITIVE_INT256_MAX Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
POSITIVE_INT256_MAX_1(uint256) := ϕ(['POSITIVE_INT256_MAX_0'])
Phi
[i]Type for POSITIVE_INT256_MAX

Name: POSITIVE_INT256_MAX Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_0 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_1, name: x

Name: x_1 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: POSITIVE_INT256_MAX_1, name: POSITIVE_INT256_MAX

Name: POSITIVE_INT256_MAX Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: POSITIVE_INT256_MAX_1, name: POSITIVE_INT256_MAX

Name: POSITIVE_INT256_MAX Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x_1 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_0(bool) = x_1 <= POSITIVE_INT256_MAX_1
lnorm: u rnorm: u
[i]Type for TMP_0

Name: TMP_0 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,uint256 overflow)
[i]Type for TMP_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_2 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_1, name: x

Name: x_1 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x_1 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_2 = CONVERT x_1 to int256
Converting x_1

Name: x_1 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_2

Name: TMP_2 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_2
RETURN

Name: TMP_2 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


POSITIVE_INT256_MAX_1(uint256) := ϕ(['POSITIVE_INT256_MAX_0'])
TMP_0(bool) = x_1 <= POSITIVE_INT256_MAX_1
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,uint256 overflow)
TMP_2 = CONVERT x_1 to int256
RETURN TMP_2


Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: POSITIVE_INT256_MAX_1, name: POSITIVE_INT256_MAX

Name: POSITIVE_INT256_MAX Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
POSITIVE_INT256_MAX_1(uint256) := ϕ(['POSITIVE_INT256_MAX_0'])
Phi
[i]Type for POSITIVE_INT256_MAX

Name: POSITIVE_INT256_MAX Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: x_1, name: x

Name: x_1 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: POSITIVE_INT256_MAX_1, name: POSITIVE_INT256_MAX

Name: POSITIVE_INT256_MAX Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: POSITIVE_INT256_MAX_1, name: POSITIVE_INT256_MAX

Name: POSITIVE_INT256_MAX Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x_1 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_0(bool) = x_1 <= POSITIVE_INT256_MAX_1
lnorm: u rnorm: u
[i]Type for TMP_0

Name: TMP_0 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,uint256 overflow)
[i]Type for TMP_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: x_1, name: x

Name: x_1 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x_1 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_2 = CONVERT x_1 to int256
Converting x_1

Name: x_1 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_2

Name: TMP_2 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_2
RETURN

Name: TMP_2 Function: toInt256
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Reading Function: abs
Checking funcion...



abs
Function name: abs
Finding type for x(int256 ... )
Value: u
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u']]
FIND RETURN
ENTRY_POINT
abs(int256)


TMP_3(bool) = x_1 > 0
CONDITION TMP_3
TMP_5(uint256) = 0 (c)- 1
TMP_6(uint256) = TMP_5 (c)* x_1
TMP_7 = CONVERT TMP_6 to int256
RETURN TMP_7
TMP_4 = CONVERT x_1 to int256
RETURN TMP_4


Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_3 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_1, name: x

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: x_1 Function: abs
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: x, Num: 1
Globalname: x, contract_name: LibMath
Ssa_name: x_1, name: x

Name: x_1 Function: abs
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: x_1 Function: abs
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: x, Num: 1
Globalname: x, contract_name: LibMath
End popogation
TMP_3(bool) = x_1 > 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_3

Name: TMP_3 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_5 cleared
[i] TMP_6 cleared
[i] TMP_7 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_1, name: x

Name: x_1 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x_1 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_5(uint256) = 0 (c)- 1
Source address: u
[i]Type for TMP_5

Name: TMP_5 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
TMP_6(uint256) = TMP_5 (c)* x_1
lnorm: 0 rnorm: u
Source address: u
[i]Type for TMP_6

Name: TMP_6 Function: abs
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
TMP_7 = CONVERT TMP_6 to int256
Converting TMP_6

Name: TMP_6 Function: abs
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_7

Name: TMP_7 Function: abs
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
RETURN TMP_7
RETURN

Name: TMP_7 Function: abs
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
[i] TMP_4 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_1, name: x

Name: x_1 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x_1 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_4 = CONVERT x_1 to int256
Converting x_1

Name: x_1 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_4

Name: TMP_4 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_4
RETURN

Name: TMP_4 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


TMP_3(bool) = x_1 > 0
CONDITION TMP_3
TMP_5(uint256) = 0 (c)- 1
TMP_6(uint256) = TMP_5 (c)* x_1
TMP_7 = CONVERT TMP_6 to int256
RETURN TMP_7
TMP_4 = CONVERT x_1 to int256
RETURN TMP_4


Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_3 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_1, name: x

Name: x_1 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x_1 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_3(bool) = x_1 > 0
lnorm: u rnorm: 0
[i]Type for TMP_3

Name: TMP_3 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_5 cleared
[i] TMP_6 cleared
[i] TMP_7 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_1, name: x

Name: x_1 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x_1 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_5(uint256) = 0 (c)- 1
Source address: u
[i]Type for TMP_5

Name: TMP_5 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
TMP_6(uint256) = TMP_5 (c)* x_1
lnorm: 0 rnorm: u
Source address: u
[i]Type for TMP_6

Name: TMP_6 Function: abs
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
TMP_7 = CONVERT TMP_6 to int256
Converting TMP_6

Name: TMP_6 Function: abs
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_7

Name: TMP_7 Function: abs
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
RETURN TMP_7
RETURN

Name: TMP_7 Function: abs
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
[i] TMP_4 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_1, name: x

Name: x_1 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x_1 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_4 = CONVERT x_1 to int256
Converting x_1

Name: x_1 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_4

Name: TMP_4 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_4
RETURN

Name: TMP_4 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


TMP_3(bool) = x_1 > 0
CONDITION TMP_3
TMP_5(uint256) = 0 (c)- 1
TMP_6(uint256) = TMP_5 (c)* x_1
TMP_7 = CONVERT TMP_6 to int256
RETURN TMP_7
TMP_4 = CONVERT x_1 to int256
RETURN TMP_4


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Ssa_name: x_1, name: x

Name: x_1 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x_1 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_3(bool) = x_1 > 0
lnorm: u rnorm: 0
[i]Type for TMP_3

Name: TMP_3 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: x_1, name: x

Name: x_1 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x_1 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_5(uint256) = 0 (c)- 1
Source address: u
[i]Type for TMP_5

Name: TMP_5 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
TMP_6(uint256) = TMP_5 (c)* x_1
lnorm: 0 rnorm: u
Source address: u
[i]Type for TMP_6

Name: TMP_6 Function: abs
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
TMP_7 = CONVERT TMP_6 to int256
Converting TMP_6

Name: TMP_6 Function: abs
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_7

Name: TMP_7 Function: abs
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
RETURN TMP_7
RETURN

Name: TMP_7 Function: abs
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
Ssa_name: x_1, name: x

Name: x_1 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x_1 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_4 = CONVERT x_1 to int256
Converting x_1

Name: x_1 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_4

Name: TMP_4 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_4
RETURN

Name: TMP_4 Function: abs
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Reading Function: sum
Checking funcion...



sum
Function name: sum
Finding type for arr(uint256[] ... )
Value: u
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u']]
FIND RETURN
ENTRY_POINT
sum(uint256[])


arr_1(uint256[]) := ϕ(['arr_1'])
REF_0 -> LENGTH arr_1
n_1(uint256) := REF_0(uint256)
total_1(uint256) := 0(uint256)
i_1(uint256) := 0(uint256)
total_2(uint256) := ϕ(['total_3', 'total_1'])
i_2(uint256) := ϕ(['i_1', 'i_3'])
TMP_8(bool) = i_2 < n_1
CONDITION TMP_8
REF_1(uint256) -> arr_1[i_2]
total_3(uint256) = total_2 (c)+ REF_1
TMP_9(uint256) := i_2(uint256)
i_3(uint256) = i_2 (c)+ 1
RETURN total_2


[i] arr cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: arr_1, name: arr

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: arr_1 Function: sum
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: arr, Num: 1
Globalname: arr, contract_name: LibMath
arr_1(uint256[]) := ϕ(['arr_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for arr

Name: arr Function: sum
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] n cleared
Propogating parameters and globals to SSA variables...
Ssa_name: arr_1, name: arr

Name: arr Function: sum
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: arr_1 Function: sum
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: arr, Num: 1
Globalname: arr, contract_name: LibMath
Ssa_name: arr_1, name: arr

Name: arr_1 Function: sum
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: arr_1 Function: sum
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: arr, Num: 1
Globalname: arr, contract_name: LibMath
Ssa_name: n_1, name: n

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: n, Num: 1
Globalname: n, contract_name: LibMath
End popogation
REF_0 -> LENGTH arr_1
[i]Type for REF_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
n_1(uint256) := REF_0(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for n

Name: n Function: sum
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] total cleared
Propogating parameters and globals to SSA variables...
Ssa_name: total_1, name: total

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: total, Num: 1
Globalname: total, contract_name: LibMath
End popogation
total_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for total

Name: total Function: sum
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_1, name: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 1
Globalname: i, contract_name: LibMath
End popogation
i_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: sum
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] total cleared
[i] i cleared
[i] TMP_8 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: n_1, name: n

Name: n Function: sum
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: n, Num: 1
Globalname: n, contract_name: LibMath
Ssa_name: i_2, name: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: LibMath
Ssa_name: n_1, name: n

Name: n Function: sum
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: n, Num: 1
Globalname: n, contract_name: LibMath
Ssa_name: i_2, name: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: LibMath
Ssa_name: total_2, name: total

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: total, Num: 2
Globalname: total, contract_name: LibMath
Ssa_name: i_2, name: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: LibMath
End popogation
Ssa_name: total_2, name: total

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: total, Num: 2
Globalname: total, contract_name: LibMath
Ssa_name: i_2, name: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: LibMath
total_2(uint256) := ϕ(['total_3', 'total_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: total Function: sum
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for total

Name: total Function: sum
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
i_2(uint256) := ϕ(['i_1', 'i_3'])
Phi

Name: i Function: sum
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for i

Name: i Function: sum
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_8(bool) = i_2 < n_1
lnorm: u rnorm: u
Source address: u
Source address: u
[i]Type for TMP_8

Name: TMP_8 Function: sum
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
[i] total cleared
Propogating parameters and globals to SSA variables...
Ssa_name: arr_1, name: arr

Name: arr_1 Function: sum
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: arr_1 Function: sum
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: arr, Num: 1
Globalname: arr, contract_name: LibMath
Ssa_name: total_2, name: total

Name: total Function: sum
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: i_2, name: i

Name: i Function: sum
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: arr_1, name: arr

Name: arr_1 Function: sum
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: arr_1 Function: sum
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: arr, Num: 1
Globalname: arr, contract_name: LibMath
Ssa_name: total_2, name: total

Name: total Function: sum
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: i_2, name: i

Name: i Function: sum
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: total_3, name: total

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: total, Num: 3
Globalname: total, contract_name: LibMath
End popogation
REF_1(uint256) -> arr_1[i_2]
INDEX
REf tuple: arr
arr
Currently ommitted
Executing Group 4
[*] Tested 1 warning for Tracer
Group 4 complete
Testing complete
