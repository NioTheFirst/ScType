Switched global version to 0.8.4
Checking ConcentratedLiquidityPool
Checking IBentoBoxMinimal
Checking IMasterDeployer
Checking IPool
Checking IPositionManager
Checking ITridentCallee
Checking ITridentRouter
Checking RebaseLibrary
Checking DyDxMath
Checking FullMath
Checking SwapLib
Checking TickMath
Checking Ticks
Checking UnsafeMath
Finance file: ConcentratedLiquidityPool_ftypes.txt
Add to address_to_label {'global:token0': 1}
Add to address_to_label {'global:token0': 1, 'global:token1': 2}
Add to address_to_label {'global:token0': 1, 'global:token1': 2, 'global:barFeeTo': 3}
Add to address_to_label {'global:token0': 1, 'global:token1': 2, 'global:barFeeTo': 3, 'constructor:_token0': -999}
Add to address_to_label {'global:token0': 1, 'global:token1': 2, 'global:barFeeTo': 3, 'constructor:_token0': -999, 'constructor:_token1': -998}
Add to address_to_label {'global:token0': 1, 'global:token1': 2, 'global:barFeeTo': 3, 'constructor:_token0': -999, 'constructor:_token1': -998, 'burn:recipient': -997}
Add to address_to_label {'global:token0': 1, 'global:token1': 2, 'global:barFeeTo': 3, 'constructor:_token0': -999, 'constructor:_token1': -998, 'burn:recipient': -997, 'collect:recipient': -996}
Add to address_to_label {'global:token0': 1, 'global:token1': 2, 'global:barFeeTo': 3, 'constructor:_token0': -999, 'constructor:_token1': -998, 'burn:recipient': -997, 'collect:recipient': -996, 'swap:recipient': -995}
Reading f file...
['[*c]', 'ConcentratedLiquidityPool']
['[sefa]', 'DyDxMath', 'getDy', '1', "{c, -1, -1, 0, 'u', f:0}"]
['[sefa]', 'DyDxMath', 'getDx', '1', "{c, -1, -1, 0, 'u', f:0}"]
['[t]', 'global', 'feeGrowthGlobal0', 'f:10']
['[t]', 'global', 'feeGrowthGlobal1', 'f:10']
['[t]', 'burn', 'amount', 'f: 0']
{'global:token0': 1, 'global:token1': 2, 'global:barFeeTo': 3, 'constructor:_token0': -999, 'constructor:_token1': -998, 'burn:recipient': -997, 'collect:recipient': -996, 'swap:recipient': -995}
Finding type for token0ProtocolFee(uint128 ... )
Finding type for token1ProtocolFee(uint128 ... )
Finding type for masterDeployer(IMasterDeployer ... )
Finding type for reserve0(uint128 ... )
Finding type for reserve1(uint128 ... )
Finding type for feeGrowthGlobal0(uint256 ... )
{'global:token0': 1, 'global:token1': 2, 'global:barFeeTo': 3, 'constructor:_token0': -999, 'constructor:_token1': -998, 'burn:recipient': -997, 'collect:recipient': -996, 'swap:recipient': -995}
(-1, -1, 'u', None, -1, 10)
Finding type for feeGrowthGlobal1(uint256 ... )
{'global:token0': 1, 'global:token1': 2, 'global:barFeeTo': 3, 'constructor:_token0': -999, 'constructor:_token1': -998, 'burn:recipient': -997, 'collect:recipient': -996, 'swap:recipient': -995}
(-1, -1, 'u', None, -1, 10)
Finding type for nearestTick(int24 ... )
Finding type for ticks(mapping(int24 => Ticks.Tick) ... )
global
ticks
previousTick
OUT KEY: global_ticks_previousTick
global
ticks
nextTick
OUT KEY: global_ticks_nextTick
global
ticks
liquidity
OUT KEY: global_ticks_liquidity
global
ticks
feeGrowthOutside0
OUT KEY: global_ticks_feeGrowthOutside0
global
ticks
feeGrowthOutside1
OUT KEY: global_ticks_feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
OUT KEY: global_ticks_secondsPerLiquidityOutside
Finding type for MAX_TICK_LIQUIDITY(uint128 ... )
Finding type for liquidity(uint128 ... )
Finding type for price(uint160 ... )
Finding type for secondsPerLiquidity(uint160 ... )
Finding type for token0(address ... )
prev address? u
Head Addr: 1
    Norm: 6
    Set: {1}
    Fin: NULL
Finding type for token1(address ... )
prev address? u
Head Addr: 2
    Norm: 18
    Set: {2}
    Fin: NULL
Finding type for bento(IBentoBoxMinimal ... )
Finding type for barFeeTo(address ... )
prev address? u
Head Addr: 3
    Norm: 0
    Set: {3}
    Fin: NULL
Finding type for unlocked(uint256 ... )
Finding type for swapFee(uint24 ... )
Finding type for tickSpacing(uint24 ... )
Finding type for barFee(uint256 ... )
Finding type for lastObservation(uint32 ... )
Finding type for MAX_TICK(int24 ... )
Finding type for MAX_FEE(uint24 ... )
Finding type for positions(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) ... )
global
positions
liquidity
OUT KEY: global_positions_liquidity
global
positions
feeGrowthInside0Last
OUT KEY: global_positions_feeGrowthInside0Last
global
positions
feeGrowthInside1Last
OUT KEY: global_positions_feeGrowthInside1Last



constructor
Finding type for _deployData(bytes ... )
Finding type for _masterDeployer(IMasterDeployer ... )
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


MAX_FEE_1(uint24) := ϕ(['MAX_FEE_0'])
TUPLE_0(address,address,uint24,uint160,uint24) = SOLIDITY_CALL abi.decode()(_deployData_1(address,address,uint24,uint160,uint24))
_token0_1(address)= UNPACK TUPLE_0 index: 0 
_token1_1(address)= UNPACK TUPLE_0 index: 1 
_swapFee_1(uint24)= UNPACK TUPLE_0 index: 2 
_price_1(uint160)= UNPACK TUPLE_0 index: 3 
_tickSpacing_1(uint24)= UNPACK TUPLE_0 index: 4 
TMP_0 = CONVERT 0 to address
TMP_1(bool) = _token0_1 != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool,string)(TMP_1,ZERO_ADDRESS)
TMP_3 = CONVERT this to address
TMP_4(bool) = _token0_1 != TMP_3
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,INVALID_TOKEN0)
TMP_6 = CONVERT this to address
TMP_7(bool) = _token1_1 != TMP_6
TMP_8(None) = SOLIDITY_CALL require(bool,string)(TMP_7,INVALID_TOKEN1)
TMP_9(bool) = _swapFee_1 <= MAX_FEE_1
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,INVALID_SWAP_FEE)
token0_1(address) := _token0_1(address)
token1_1(address) := _token1_1(address)
swapFee_1(uint24) := _swapFee_1(uint24)
price_1(uint160) := _price_1(uint160)
tickSpacing_1(uint24) := _tickSpacing_1(uint24)
TMP_11(uint128) = LIBRARY_CALL, dest:Ticks, function:Ticks.getMaxLiquidity(uint24), arguments:['_tickSpacing_1'] 
MAX_TICK_LIQUIDITY_1(uint128) := TMP_11(uint128)
REF_2(int24) -> TickMath.MIN_TICK
REF_3(Ticks.Tick) -> ticks_0[REF_2]
REF_5(int24) -> TickMath.MIN_TICK
REF_6(int24) -> TickMath.MAX_TICK
TMP_12 = CONVERT 0 to uint128
TMP_13 = new Tick(REF_5,REF_6,TMP_12,0,0,0)
ticks_1(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_0'])
REF_3 (->ticks_1) := TMP_13(Ticks.Tick)
REF_7(int24) -> TickMath.MAX_TICK
REF_8(Ticks.Tick) -> ticks_1[REF_7]
REF_10(int24) -> TickMath.MIN_TICK
REF_11(int24) -> TickMath.MAX_TICK
TMP_14 = CONVERT 0 to uint128
TMP_15 = new Tick(REF_10,REF_11,TMP_14,0,0,0)
ticks_2(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_1'])
REF_8 (->ticks_2) := TMP_15(Ticks.Tick)
REF_12(int24) -> TickMath.MIN_TICK
nearestTick_1(int24) := REF_12(int24)
TMP_16(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:bento, arguments:[]  
TMP_17 = CONVERT TMP_16 to IBentoBoxMinimal
bento_1(IBentoBoxMinimal) := TMP_17(IBentoBoxMinimal)
TMP_18(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFeeTo, arguments:[]  
barFeeTo_1(address) := TMP_18(address)
TMP_19(uint256) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFee, arguments:[]  
barFee_1(uint256) := TMP_19(uint256)
masterDeployer_1(IMasterDeployer) := _masterDeployer_1(IMasterDeployer)
unlocked_1(uint256) := 1(uint256)


Propogating parameters and globals to SSA variables...
End popogation
Name: MAX_FEE, Num: 1
MAX_FEE_1(uint24) := ϕ(['MAX_FEE_0'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _deployData, Num: 1
Name: _price, Num: 1
Name: _token0, Num: 1
Name: _swapFee, Num: 1
Name: _tickSpacing, Num: 1
Name: _token1, Num: 1
End popogation
TUPLE_0(address,address,uint24,uint160,uint24) = SOLIDITY_CALL abi.decode()(_deployData_1(address,address,uint24,uint160,uint24))
[i]Type for TUPLE_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_token0_1(address)= UNPACK TUPLE_0 index: 0 
Finding type for _token0(address ... )
prev address? u
Head Addr: -999
    Norm: 6
    Set: {-999}
    Fin: NULL
[i]Type for _token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -999
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_token1_1(address)= UNPACK TUPLE_0 index: 1 
Finding type for _token1(address ... )
prev address? u
Head Addr: -998
    Norm: 18
    Set: {-998}
    Fin: NULL
[i]Type for _token1

Name: _token1 Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_swapFee_1(uint24)= UNPACK TUPLE_0 index: 2 
Finding type for _swapFee(uint24 ... )
[i]Type for _swapFee

Name: _swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_price_1(uint160)= UNPACK TUPLE_0 index: 3 
Finding type for _price(uint160 ... )
[i]Type for _price

Name: _price Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_tickSpacing_1(uint24)= UNPACK TUPLE_0 index: 4 
Finding type for _tickSpacing(uint24 ... )
[i]Type for _tickSpacing

Name: _tickSpacing Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_0 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_0

Name: TMP_0 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_1(bool) = _token0_1 != TMP_0
[i]Type for TMP_1

Name: TMP_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_2(None) = SOLIDITY_CALL require(bool,string)(TMP_1,ZERO_ADDRESS)
[i]Type for TMP_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_3 = CONVERT this to address
Converting this
new address made for this
prev address? u
global assignment: 4
4
4
[i]Type for TMP_3

Name: TMP_3 Function: constructor
Num: -1
Den: -1
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_4(bool) = _token0_1 != TMP_3
[i]Type for TMP_4

Name: TMP_4 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,INVALID_TOKEN0)
[i]Type for TMP_5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_6 = CONVERT this to address
Converting this
4
[i]Type for TMP_6

Name: TMP_6 Function: constructor
Num: -1
Den: -1
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_7(bool) = _token1_1 != TMP_6
[i]Type for TMP_7

Name: TMP_7 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_8(None) = SOLIDITY_CALL require(bool,string)(TMP_7,INVALID_TOKEN1)
[i]Type for TMP_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_9(bool) = _swapFee_1 <= MAX_FEE_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_9

Name: TMP_9 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,INVALID_SWAP_FEE)
[i]Type for TMP_10

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: token0, Num: 1
End popogation
token0_1(address) := _token0_1(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for token0

Name: token0 Function: constructor
Num: -1
Den: -1
Address: -999
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: token1, Num: 1
End popogation
token1_1(address) := _token1_1(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for token1

Name: token1 Function: constructor
Num: -1
Den: -1
Address: -998
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: swapFee, Num: 1
End popogation
swapFee_1(uint24) := _swapFee_1(uint24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for swapFee

Name: swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
End popogation
price_1(uint160) := _price_1(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for price

Name: price Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: tickSpacing, Num: 1
End popogation
tickSpacing_1(uint24) := _tickSpacing_1(uint24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for tickSpacing

Name: tickSpacing Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: MAX_TICK_LIQUIDITY, Num: 1
End popogation
TMP_11(uint128) = LIBRARY_CALL, dest:Ticks, function:Ticks.getMaxLiquidity(uint24), arguments:['_tickSpacing_1'] 
Written func info: Ticks, getMaxLiquidity
[i]Type for TMP_11

Name: TMP_11 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_TICK_LIQUIDITY_1(uint128) := TMP_11(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: ticks, Num: 1
End popogation
REF_2(int24) -> TickMath.MIN_TICK
MEMBER
init
init
end
OUT KEY: global_TickMath_MIN_TICK
OUT KEY: global_TickMath_MIN_TICK
No field found
[i]Type for REF_2

Name: TickMath.MIN_TICK Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MIN_TICK
init
end
Finance type key: (-1, -1)
XXXX
REF_3(Ticks.Tick) -> ticks_0[REF_2]
INDEX
[i]Type for REF_3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_5(int24) -> TickMath.MIN_TICK
MEMBER
init
init
end
[i]Type for REF_5

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MIN_TICK
init
end
Finance type key: (-1, -1)
XXXX
REF_6(int24) -> TickMath.MAX_TICK
MEMBER
init
init
end
OUT KEY: global_TickMath_MAX_TICK
OUT KEY: global_TickMath_MAX_TICK
No field found
[i]Type for REF_6

Name: TickMath.MAX_TICK Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MAX_TICK
init
end
Finance type key: (-1, -1)
XXXX
TMP_12 = CONVERT 0 to uint128
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_12

Name: TMP_12 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_13 = new Tick(REF_5,REF_6,TMP_12,0,0,0)
[i]Type for TMP_13

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_1(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_0'])
Phi
[i]Type for ticks

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_3 (->ticks_1) := TMP_13(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_3

Name: REF_3 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: ticks, Num: 2
End popogation
REF_7(int24) -> TickMath.MAX_TICK
MEMBER
init
init
end
[i]Type for REF_7

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MAX_TICK
init
end
Finance type key: (-1, -1)
XXXX
REF_8(Ticks.Tick) -> ticks_1[REF_7]
INDEX
[i]Type for REF_8

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_10(int24) -> TickMath.MIN_TICK
MEMBER
init
init
end
[i]Type for REF_10

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MIN_TICK
init
end
Finance type key: (-1, -1)
XXXX
REF_11(int24) -> TickMath.MAX_TICK
MEMBER
init
init
end
[i]Type for REF_11

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MAX_TICK
init
end
Finance type key: (-1, -1)
XXXX
TMP_14 = CONVERT 0 to uint128
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_14

Name: TMP_14 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_15 = new Tick(REF_10,REF_11,TMP_14,0,0,0)
[i]Type for TMP_15

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_2(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_1'])
Phi
[i]Type for ticks

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_8 (->ticks_2) := TMP_15(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_8

Name: REF_8 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: nearestTick, Num: 1
End popogation
REF_12(int24) -> TickMath.MIN_TICK
MEMBER
init
init
end
[i]Type for REF_12

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MIN_TICK
init
end
Finance type key: (-1, -1)
XXXX
nearestTick_1(int24) := REF_12(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for nearestTick

Name: nearestTick Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _masterDeployer, Num: 1
Name: bento, Num: 1
End popogation
TMP_16(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:bento, arguments:[]  
High Call: bento
Running querryfc
Written func info: MasterDeployer, bento
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_16

Name: TMP_16 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_17 = CONVERT TMP_16 to IBentoBoxMinimal
Converting TMP_16

Name: TMP_16 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
BentoBoxMinimal
[i]Type for TMP_17

Name: TMP_17 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
bento_1(IBentoBoxMinimal) := TMP_17(IBentoBoxMinimal)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bento

Name: bento Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _masterDeployer, Num: 1
Name: barFeeTo, Num: 1
End popogation
TMP_18(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFeeTo, arguments:[]  
High Call: barFeeTo
Running querryfc
Written func info: MasterDeployer, barFeeTo
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_18

Name: TMP_18 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_1(address) := TMP_18(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for barFeeTo

Name: barFeeTo Function: constructor
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _masterDeployer, Num: 1
Name: barFee, Num: 1
End popogation
TMP_19(uint256) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFee, arguments:[]  
High Call: barFee
Running querryfc
Written func info: MasterDeployer, barFee
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_19

Name: TMP_19 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_1(uint256) := TMP_19(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for barFee

Name: barFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _masterDeployer, Num: 1
Name: masterDeployer, Num: 1
End popogation
masterDeployer_1(IMasterDeployer) := _masterDeployer_1(IMasterDeployer)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for masterDeployer

Name: masterDeployer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: unlocked, Num: 1
End popogation
unlocked_1(uint256) := 1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for unlocked

Name: unlocked Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX


MAX_FEE_1(uint24) := ϕ(['MAX_FEE_0'])
TUPLE_0(address,address,uint24,uint160,uint24) = SOLIDITY_CALL abi.decode()(_deployData_1(address,address,uint24,uint160,uint24))
_token0_1(address)= UNPACK TUPLE_0 index: 0 
_token1_1(address)= UNPACK TUPLE_0 index: 1 
_swapFee_1(uint24)= UNPACK TUPLE_0 index: 2 
_price_1(uint160)= UNPACK TUPLE_0 index: 3 
_tickSpacing_1(uint24)= UNPACK TUPLE_0 index: 4 
TMP_0 = CONVERT 0 to address
TMP_1(bool) = _token0_1 != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool,string)(TMP_1,ZERO_ADDRESS)
TMP_3 = CONVERT this to address
TMP_4(bool) = _token0_1 != TMP_3
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,INVALID_TOKEN0)
TMP_6 = CONVERT this to address
TMP_7(bool) = _token1_1 != TMP_6
TMP_8(None) = SOLIDITY_CALL require(bool,string)(TMP_7,INVALID_TOKEN1)
TMP_9(bool) = _swapFee_1 <= MAX_FEE_1
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,INVALID_SWAP_FEE)
token0_1(address) := _token0_1(address)
token1_1(address) := _token1_1(address)
swapFee_1(uint24) := _swapFee_1(uint24)
price_1(uint160) := _price_1(uint160)
tickSpacing_1(uint24) := _tickSpacing_1(uint24)
TMP_11(uint128) = LIBRARY_CALL, dest:Ticks, function:Ticks.getMaxLiquidity(uint24), arguments:['_tickSpacing_1'] 
MAX_TICK_LIQUIDITY_1(uint128) := TMP_11(uint128)
REF_2(int24) -> TickMath.MIN_TICK
REF_3(Ticks.Tick) -> ticks_0[REF_2]
REF_5(int24) -> TickMath.MIN_TICK
REF_6(int24) -> TickMath.MAX_TICK
TMP_12 = CONVERT 0 to uint128
TMP_13 = new Tick(REF_5,REF_6,TMP_12,0,0,0)
ticks_1(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_0'])
REF_3 (->ticks_1) := TMP_13(Ticks.Tick)
REF_7(int24) -> TickMath.MAX_TICK
REF_8(Ticks.Tick) -> ticks_1[REF_7]
REF_10(int24) -> TickMath.MIN_TICK
REF_11(int24) -> TickMath.MAX_TICK
TMP_14 = CONVERT 0 to uint128
TMP_15 = new Tick(REF_10,REF_11,TMP_14,0,0,0)
ticks_2(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_1'])
REF_8 (->ticks_2) := TMP_15(Ticks.Tick)
REF_12(int24) -> TickMath.MIN_TICK
nearestTick_1(int24) := REF_12(int24)
TMP_16(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:bento, arguments:[]  
TMP_17 = CONVERT TMP_16 to IBentoBoxMinimal
bento_1(IBentoBoxMinimal) := TMP_17(IBentoBoxMinimal)
TMP_18(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFeeTo, arguments:[]  
barFeeTo_1(address) := TMP_18(address)
TMP_19(uint256) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFee, arguments:[]  
barFee_1(uint256) := TMP_19(uint256)
masterDeployer_1(IMasterDeployer) := _masterDeployer_1(IMasterDeployer)
unlocked_1(uint256) := 1(uint256)


Propogating parameters and globals to SSA variables...
End popogation
MAX_FEE_1(uint24) := ϕ(['MAX_FEE_0'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _deployData, Num: 1
Name: _price, Num: 1
Name: _token0, Num: 1
Name: _swapFee, Num: 1
Name: _tickSpacing, Num: 1
Name: _token1, Num: 1
End popogation
TUPLE_0(address,address,uint24,uint160,uint24) = SOLIDITY_CALL abi.decode()(_deployData_1(address,address,uint24,uint160,uint24))
[i]Type for TUPLE_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_token0_1(address)= UNPACK TUPLE_0 index: 0 
Finding type for _token0(address ... )
prev address? u
Head Addr: -999
    Norm: 6
    Set: {-999}
    Fin: NULL
[i]Type for _token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -999
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_token1_1(address)= UNPACK TUPLE_0 index: 1 
Finding type for _token1(address ... )
prev address? u
Head Addr: -998
    Norm: 18
    Set: {-998}
    Fin: NULL
[i]Type for _token1

Name: _token1 Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_swapFee_1(uint24)= UNPACK TUPLE_0 index: 2 
Finding type for _swapFee(uint24 ... )
[i]Type for _swapFee

Name: _swapFee Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_price_1(uint160)= UNPACK TUPLE_0 index: 3 
Finding type for _price(uint160 ... )
[i]Type for _price

Name: _price Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_tickSpacing_1(uint24)= UNPACK TUPLE_0 index: 4 
Finding type for _tickSpacing(uint24 ... )
[i]Type for _tickSpacing

Name: _tickSpacing Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_0 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_0

Name: TMP_0 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_1(bool) = _token0_1 != TMP_0
[i]Type for TMP_1

Name: TMP_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_2(None) = SOLIDITY_CALL require(bool,string)(TMP_1,ZERO_ADDRESS)
[i]Type for TMP_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_3 = CONVERT this to address
Converting this
4
[i]Type for TMP_3

Name: TMP_3 Function: constructor
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_4(bool) = _token0_1 != TMP_3
[i]Type for TMP_4

Name: TMP_4 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,INVALID_TOKEN0)
[i]Type for TMP_5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_6 = CONVERT this to address
Converting this
4
[i]Type for TMP_6

Name: TMP_6 Function: constructor
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_7(bool) = _token1_1 != TMP_6
[i]Type for TMP_7

Name: TMP_7 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_8(None) = SOLIDITY_CALL require(bool,string)(TMP_7,INVALID_TOKEN1)
[i]Type for TMP_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _swapFee, Num: 1
End popogation
TMP_9(bool) = _swapFee_1 <= MAX_FEE_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_9

Name: TMP_9 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,INVALID_SWAP_FEE)
[i]Type for TMP_10

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
token0_1(address) := _token0_1(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for token0

Name: token0 Function: constructor
Num: -1
Den: -1
Address: -999
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
token1_1(address) := _token1_1(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for token1

Name: token1 Function: constructor
Num: -1
Den: -1
Address: -998
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
swapFee_1(uint24) := _swapFee_1(uint24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for swapFee

Name: swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _price, Num: 1
End popogation
price_1(uint160) := _price_1(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for price

Name: price Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _tickSpacing, Num: 1
End popogation
tickSpacing_1(uint24) := _tickSpacing_1(uint24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for tickSpacing

Name: tickSpacing Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _tickSpacing, Num: 1
End popogation
TMP_11(uint128) = LIBRARY_CALL, dest:Ticks, function:Ticks.getMaxLiquidity(uint24), arguments:['_tickSpacing_1'] 
Written func info: Ticks, getMaxLiquidity
[i]Type for TMP_11

Name: TMP_11 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_TICK_LIQUIDITY_1(uint128) := TMP_11(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_2(int24) -> TickMath.MIN_TICK
MEMBER
init
init
end
init
end
[i]Type for REF_2

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MIN_TICK
init
end
Finance type key: (-1, -1)
XXXX
REF_3(Ticks.Tick) -> ticks_0[REF_2]
INDEX
[i]Type for REF_3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_5(int24) -> TickMath.MIN_TICK
MEMBER
init
init
end
init
end
[i]Type for REF_5

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MIN_TICK
init
end
Finance type key: (-1, -1)
XXXX
REF_6(int24) -> TickMath.MAX_TICK
MEMBER
init
init
end
init
end
[i]Type for REF_6

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MAX_TICK
init
end
Finance type key: (-1, -1)
XXXX
TMP_12 = CONVERT 0 to uint128
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_12

Name: TMP_12 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_13 = new Tick(REF_5,REF_6,TMP_12,0,0,0)
[i]Type for TMP_13

Name: TMP_13 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_1(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_0'])
Phi
[i]Type for ticks

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_3 (->ticks_1) := TMP_13(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_3

Name: REF_3 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_7(int24) -> TickMath.MAX_TICK
MEMBER
init
init
end
init
end
[i]Type for REF_7

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MAX_TICK
init
end
Finance type key: (-1, -1)
XXXX
REF_8(Ticks.Tick) -> ticks_1[REF_7]
INDEX
[i]Type for REF_8

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_10(int24) -> TickMath.MIN_TICK
MEMBER
init
init
end
init
end
[i]Type for REF_10

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MIN_TICK
init
end
Finance type key: (-1, -1)
XXXX
REF_11(int24) -> TickMath.MAX_TICK
MEMBER
init
init
end
init
end
[i]Type for REF_11

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MAX_TICK
init
end
Finance type key: (-1, -1)
XXXX
TMP_14 = CONVERT 0 to uint128
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_14

Name: TMP_14 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_15 = new Tick(REF_10,REF_11,TMP_14,0,0,0)
[i]Type for TMP_15

Name: TMP_15 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_2(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_1'])
Phi
[i]Type for ticks

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_8 (->ticks_2) := TMP_15(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_8

Name: REF_8 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_12(int24) -> TickMath.MIN_TICK
MEMBER
init
init
end
init
end
[i]Type for REF_12

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MIN_TICK
init
end
Finance type key: (-1, -1)
XXXX
nearestTick_1(int24) := REF_12(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for nearestTick

Name: nearestTick Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _masterDeployer, Num: 1
End popogation
TMP_16(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:bento, arguments:[]  
High Call: bento
Running querryfc
Written func info: MasterDeployer, bento
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_16

Name: TMP_16 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_17 = CONVERT TMP_16 to IBentoBoxMinimal
Converting TMP_16

Name: TMP_16 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
BentoBoxMinimal
[i]Type for TMP_17

Name: TMP_17 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
bento_1(IBentoBoxMinimal) := TMP_17(IBentoBoxMinimal)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bento

Name: bento Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _masterDeployer, Num: 1
End popogation
TMP_18(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFeeTo, arguments:[]  
High Call: barFeeTo
Running querryfc
Written func info: MasterDeployer, barFeeTo
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_18

Name: TMP_18 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_1(address) := TMP_18(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for barFeeTo

Name: barFeeTo Function: constructor
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _masterDeployer, Num: 1
End popogation
TMP_19(uint256) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFee, arguments:[]  
High Call: barFee
Running querryfc
Written func info: MasterDeployer, barFee
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_19

Name: TMP_19 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_1(uint256) := TMP_19(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for barFee

Name: barFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _masterDeployer, Num: 1
End popogation
masterDeployer_1(IMasterDeployer) := _masterDeployer_1(IMasterDeployer)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for masterDeployer

Name: masterDeployer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
unlocked_1(uint256) := 1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for unlocked

Name: unlocked Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX



mint
Finding type for data(bytes ... )
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


MAX_TICK_LIQUIDITY_2(uint128) := ϕ(['MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_3', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_1'])
token0_2(address) := ϕ(['token0_28', 'token0_10', 'token0_22', 'token0_19', 'token0_9', 'token0_25', 'token0_27', 'token0_23', 'token0_14', 'token0_20', 'token0_0', 'token0_1'])
token1_2(address) := ϕ(['token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_24', 'token1_0', 'token1_15', 'token1_21', 'token1_11', 'token1_1', 'token1_25', 'token1_27', 'token1_10', 'token1_23'])
liquidity_1(uint128) := ϕ(['liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9', 'liquidity_4', 'liquidity_3', 'liquidity_5', 'liquidity_0', 'liquidity_6'])
secondsPerLiquidity_1(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
feeGrowthGlobal0_1(uint256) := ϕ(['feeGrowthGlobal0_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_0'])
feeGrowthGlobal1_1(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_6', 'feeGrowthGlobal1_0'])
reserve0_1(uint128) := ϕ(['reserve0_21', 'reserve0_23', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_30', 'reserve0_9', 'reserve0_0'])
reserve1_1(uint128) := ϕ(['reserve1_0', 'reserve1_9', 'reserve1_12', 'reserve1_25', 'reserve1_26', 'reserve1_22', 'reserve1_32', 'reserve1_17', 'reserve1_24', 'reserve1_10'])
price_2(uint160) := ϕ(['price_5', 'price_0', 'price_8', 'price_3', 'price_1'])
nearestTick_2(int24) := ϕ(['nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17', 'nearestTick_16'])
ticks_3(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_0', 'ticks_2', 'ticks_8', 'ticks_17', 'ticks_15', 'ticks_16', 'ticks_13'])
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
TMP_20(ConcentratedLiquidityPool.MintParams) = SOLIDITY_CALL abi.decode()(data_1,MintParams)
mintParams_1(ConcentratedLiquidityPool.MintParams) := TMP_20(ConcentratedLiquidityPool.MintParams)
REF_18(int24) -> mintParams_1.lower
TMP_21(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_18'] 
TMP_22 = CONVERT TMP_21 to uint256
priceLower_1(uint256) := TMP_22(uint256)
REF_20(int24) -> mintParams_1.upper
TMP_23(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_20'] 
TMP_24 = CONVERT TMP_23 to uint256
priceUpper_1(uint256) := TMP_24(uint256)
TMP_25 = CONVERT price_3 to uint256
currentPrice_1(uint256) := TMP_25(uint256)
REF_22(uint256) -> mintParams_1.amount1Desired
REF_23(uint256) -> mintParams_1.amount0Desired
TMP_26(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getLiquidityForAmounts(uint256,uint256,uint256,uint256,uint256), arguments:['priceLower_1', 'priceUpper_1', 'currentPrice_1', 'REF_22', 'REF_23'] 
_liquidity_1(uint256) := TMP_26(uint256)
TMP_27(bool) = _liquidity_1 <= MAX_TICK_LIQUIDITY_3
TMP_28(None) = SOLIDITY_CALL require(bool,string)(TMP_27,LIQUIDITY_OVERFLOW)
REF_24(address) -> mintParams_1.positionOwner
REF_25(int24) -> mintParams_1.lower
REF_26(int24) -> mintParams_1.upper
TMP_29 = CONVERT _liquidity_1 to uint128
TMP_30 = CONVERT TMP_29 to int128
TUPLE_1(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(REF_24,REF_25,REF_26,TMP_30)
amount0fees_1(uint256)= UNPACK TUPLE_1 index: 0 
amount1fees_1(uint256)= UNPACK TUPLE_1 index: 1 
TMP_31(bool) = amount0fees_1 > 0
CONDITION TMP_31
REF_27(address) -> mintParams_1.positionOwner
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_4,amount0fees_1,REF_27,False)
TMP_34(bool) = amount1fees_1 > 0
CONDITION TMP_34
TMP_33 = CONVERT amount0fees_1 to uint128
reserve0_5(uint128) = reserve0_4 (c)- TMP_33
REF_28(address) -> mintParams_1.positionOwner
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_5,amount1fees_1,REF_28,False)
TMP_36 = CONVERT amount1fees_1 to uint128
reserve1_6(uint128) = reserve1_5 (c)- TMP_36
TMP_37(bool) = priceLower_1 < currentPrice_1
TMP_38(bool) = currentPrice_1 < priceUpper_1
TMP_39(bool) = TMP_37 && TMP_38
CONDITION TMP_39
TMP_40 = CONVERT _liquidity_1 to uint128
liquidity_6(uint128) = liquidity_5 (c)+ TMP_40
REF_29(int24) -> mintParams_1.lower
REF_30(int24) -> mintParams_1.upper
INTERNAL_CALL, ConcentratedLiquidityPool._ensureTickSpacing(int24,int24)(REF_29,REF_30)
REF_32(int24) -> mintParams_1.lowerOld
REF_33(int24) -> mintParams_1.lower
REF_34(int24) -> mintParams_1.upperOld
REF_35(int24) -> mintParams_1.upper
TMP_42 = CONVERT _liquidity_1 to uint128
TMP_43 = CONVERT currentPrice_1 to uint160
TMP_44(int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.insert(mapping(int24 => Ticks.Tick),uint256,uint256,uint160,int24,int24,int24,int24,uint128,int24,uint160), arguments:['ticks_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal1_6', 'secondsPerLiquidity_6', 'REF_32', 'REF_33', 'REF_34', 'REF_35', 'TMP_42', 'nearestTick_7', 'TMP_43'] 
nearestTick_8(int24) := TMP_44(int24)
TUPLE_2(uint128,uint128) = INTERNAL_CALL, ConcentratedLiquidityPool._getAmountsForLiquidity(uint256,uint256,uint256,uint256)(priceLower_1,priceUpper_1,currentPrice_1,_liquidity_1)
amount0Actual_1(uint128)= UNPACK TUPLE_2 index: 0 
amount1Actual_1(uint128)= UNPACK TUPLE_2 index: 1 
TMP_46 = new ITridentRouter.TokenInput[](2)
callbackData_1(ITridentRouter.TokenInput[]) := TMP_46(ITridentRouter.TokenInput)
REF_36(ITridentRouter.TokenInput) -> callbackData_1[0]
REF_38(bool) -> mintParams_1.token0native
TMP_47 = new TokenInput(token0_8,REF_38,amount0Actual_1)
callbackData_2(ITridentRouter.TokenInput[]) := ϕ(['callbackData_1'])
REF_36 (->callbackData_2) := TMP_47(ITridentRouter.TokenInput)
REF_39(ITridentRouter.TokenInput) -> callbackData_2[1]
REF_41(bool) -> mintParams_1.token1native
TMP_48 = new TokenInput(token1_8,REF_41,amount1Actual_1)
callbackData_3(ITridentRouter.TokenInput[]) := ϕ(['callbackData_2'])
REF_39 (->callbackData_3) := TMP_48(ITridentRouter.TokenInput)
TMP_49 = CONVERT msg.sender to ITridentCallee
TMP_50(bytes) = SOLIDITY_CALL abi.encode()(callbackData_3)
HIGH_LEVEL_CALL, dest:TMP_49(ITridentCallee), function:tridentMintCallback, arguments:['TMP_50']  
token0_9(address) := ϕ(['token0_28', 'token0_10', 'token0_22', 'token0_19', 'token0_8', 'token0_9', 'token0_27', 'token0_23', 'token0_14', 'token0_20', 'token0_25', 'token0_1'])
token1_9(address) := ϕ(['token1_20', 'token1_30', 'token1_9', 'token1_8', 'token1_32', 'token1_24', 'token1_15', 'token1_21', 'token1_11', 'token1_1', 'token1_25', 'token1_27', 'token1_10', 'token1_23'])
reserve0_9(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_30', 'reserve0_9', 'reserve0_8'])
reserve1_9(uint128) := ϕ(['reserve1_8', 'reserve1_9', 'reserve1_12', 'reserve1_25', 'reserve1_26', 'reserve1_22', 'reserve1_32', 'reserve1_17', 'reserve1_24', 'reserve1_10'])
TMP_52(bool) = amount0Actual_1 != 0
CONDITION TMP_52
TMP_53(uint128) = amount0Actual_1 (c)+ reserve0_9
TMP_54(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_9)
TMP_55(bool) = TMP_53 <= TMP_54
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,TOKEN0_MISSING)
reserve0_11(uint128) = reserve0_10 (c)+ amount0Actual_1
TMP_57(bool) = amount1Actual_1 != 0
CONDITION TMP_57
TMP_58(uint128) = amount1Actual_1 (c)+ reserve1_10
TMP_59(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_10)
TMP_60(bool) = TMP_58 <= TMP_59
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,TOKEN1_MISSING)
reserve1_12(uint128) = reserve1_11 (c)+ amount1Actual_1
REF_44(int24) -> mintParams_1.lower
REF_45(int24) -> mintParams_1.upper
TUPLE_3(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(REF_44,REF_45)
feeGrowth0_1(uint256)= UNPACK TUPLE_3 index: 0 
feeGrowth1_1(uint256)= UNPACK TUPLE_3 index: 1 
REF_46(address) -> mintParams_1.positionRecipient
TMP_62 = CONVERT 0 to address
TMP_63(bool) = REF_46 != TMP_62
CONDITION TMP_63
REF_47(address) -> mintParams_1.positionOwner
TMP_64 = CONVERT REF_47 to IPositionManager
REF_49(address) -> mintParams_1.positionRecipient
REF_50(int24) -> mintParams_1.lower
REF_51(int24) -> mintParams_1.upper
TMP_65 = CONVERT _liquidity_1 to uint128
TMP_66(uint256) = HIGH_LEVEL_CALL, dest:TMP_64(IPositionManager), function:positionMintCallback, arguments:['REF_49', 'REF_50', 'REF_51', 'TMP_65', 'feeGrowth0_1', 'feeGrowth1_1']  
REF_52(address) -> mintParams_1.positionOwner
REF_53(address) -> mintParams_1.positionRecipient
Emit Mint(REF_52,amount0Actual_1,amount1Actual_1,REF_53)


Propogating parameters and globals to SSA variables...
End popogation
Name: MAX_TICK_LIQUIDITY, Num: 2
Name: token0, Num: 2
Name: token1, Num: 2
Name: liquidity, Num: 1
Name: secondsPerLiquidity, Num: 1
Name: feeGrowthGlobal0, Num: 1
Name: feeGrowthGlobal1, Num: 1
Name: reserve0, Num: 1
Name: reserve1, Num: 1
Name: price, Num: 2
Name: nearestTick, Num: 2
Name: ticks, Num: 3
MAX_TICK_LIQUIDITY_2(uint128) := ϕ(['MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_3', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_1'])
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_2(address) := ϕ(['token0_28', 'token0_10', 'token0_22', 'token0_19', 'token0_9', 'token0_25', 'token0_27', 'token0_23', 'token0_14', 'token0_20', 'token0_0', 'token0_1'])
Phi
[i]Type for token0

Name: token0 Function: mint
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_2(address) := ϕ(['token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_24', 'token1_0', 'token1_15', 'token1_21', 'token1_11', 'token1_1', 'token1_25', 'token1_27', 'token1_10', 'token1_23'])
Phi
[i]Type for token1

Name: token1 Function: mint
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_1(uint128) := ϕ(['liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9', 'liquidity_4', 'liquidity_3', 'liquidity_5', 'liquidity_0', 'liquidity_6'])
Phi
[i]Type for liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsPerLiquidity_1(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_1(uint256) := ϕ(['feeGrowthGlobal0_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_0'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_1(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_6', 'feeGrowthGlobal1_0'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_1(uint128) := ϕ(['reserve0_21', 'reserve0_23', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_30', 'reserve0_9', 'reserve0_0'])
Phi
[i]Type for reserve0

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_1(uint128) := ϕ(['reserve1_0', 'reserve1_9', 'reserve1_12', 'reserve1_25', 'reserve1_26', 'reserve1_22', 'reserve1_32', 'reserve1_17', 'reserve1_24', 'reserve1_10'])
Phi
[i]Type for reserve1

Name: reserve1 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_2(uint160) := ϕ(['price_5', 'price_0', 'price_8', 'price_3', 'price_1'])
Phi
[i]Type for price

Name: price Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_2(int24) := ϕ(['nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17', 'nearestTick_16'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_3(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_0', 'ticks_2', 'ticks_8', 'ticks_17', 'ticks_15', 'ticks_16', 'ticks_13'])
Phi
[i]Type for ticks

Name: ticks Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Propogating parameters and globals to SSA variables...
End popogation
Name: unlocked, Num: 2
unlocked_2(uint256) := ϕ(['unlocked_0', 'unlocked_4', 'unlocked_1'])
Phi
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_243(bool) = unlocked_2 == 1
[i]Type for TMP_243

Name: TMP_243 Function: lock
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244(None) = SOLIDITY_CALL require(bool,string)(TMP_243,LOCKED)
[i]Type for TMP_244

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: unlocked, Num: 3
End popogation
unlocked_3(uint256) := 2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: unlocked, Num: 4
End popogation
unlocked_4(uint256) := 1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
unlocked_2(uint256) := ϕ(['unlocked_0', 'unlocked_4', 'unlocked_1'])
Phi
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_243(bool) = unlocked_2 == 1
[i]Type for TMP_243

Name: TMP_243 Function: lock
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244(None) = SOLIDITY_CALL require(bool,string)(TMP_243,LOCKED)
[i]Type for TMP_244

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
unlocked_3(uint256) := 2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
unlocked_4(uint256) := 1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: data, Num: 1
Name: mintParams, Num: 1
End popogation
TMP_20(ConcentratedLiquidityPool.MintParams) = SOLIDITY_CALL abi.decode()(data_1,MintParams)
[i]Type for TMP_20

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
mintParams_1(ConcentratedLiquidityPool.MintParams) := TMP_20(ConcentratedLiquidityPool.MintParams)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for mintParams

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: mintParams, Num: 1
Name: priceLower, Num: 1
End popogation
REF_18(int24) -> mintParams_1.lower
MEMBER
init
end
init
end
OUT KEY: mint_mintParams_lower
OUT KEY: mint_mintParams_lower
No field found
[i]Type for REF_18

Name: mintParams.lower Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: lower
init
end
Finance type key: (-1, -1)
XXXX
TMP_21(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_18'] 
Written func info: TickMath, getSqrtRatioAtTick
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_21

Name: TMP_21 Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22 = CONVERT TMP_21 to uint256
Converting TMP_21

Name: TMP_21 Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_22

Name: TMP_22 Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceLower_1(uint256) := TMP_22(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for priceLower

Name: priceLower Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: mintParams, Num: 1
Name: priceUpper, Num: 1
End popogation
REF_20(int24) -> mintParams_1.upper
MEMBER
init
end
init
end
OUT KEY: mint_mintParams_upper
OUT KEY: mint_mintParams_upper
No field found
[i]Type for REF_20

Name: mintParams.upper Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: upper
init
end
Finance type key: (-1, -1)
XXXX
TMP_23(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_20'] 
Written func info: TickMath, getSqrtRatioAtTick
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_23

Name: TMP_23 Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_24 = CONVERT TMP_23 to uint256
Converting TMP_23

Name: TMP_23 Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_24

Name: TMP_24 Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceUpper_1(uint256) := TMP_24(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for priceUpper

Name: priceUpper Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 3
Name: currentPrice, Num: 1
End popogation
TMP_25 = CONVERT price_3 to uint256
Converting price_3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_25

Name: TMP_25 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentPrice_1(uint256) := TMP_25(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentPrice

Name: currentPrice Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: mintParams, Num: 1
Name: _liquidity, Num: 1
End popogation
REF_22(uint256) -> mintParams_1.amount1Desired
MEMBER
init
end
init
end
OUT KEY: mint_mintParams_amount1Desired
OUT KEY: mint_mintParams_amount1Desired
No field found
[i]Type for REF_22

Name: mintParams.amount1Desired Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: amount1Desired
init
end
Finance type key: (-1, -1)
XXXX
REF_23(uint256) -> mintParams_1.amount0Desired
MEMBER
init
end
init
end
OUT KEY: mint_mintParams_amount0Desired
OUT KEY: mint_mintParams_amount0Desired
No field found
[i]Type for REF_23

Name: mintParams.amount0Desired Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: amount0Desired
init
end
Finance type key: (-1, -1)
XXXX
TMP_26(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getLiquidityForAmounts(uint256,uint256,uint256,uint256,uint256), arguments:['priceLower_1', 'priceUpper_1', 'currentPrice_1', 'REF_22', 'REF_23'] 
Written func info: DyDxMath, getLiquidityForAmounts
[i]Type for TMP_26

Name: TMP_26 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_liquidity_1(uint256) := TMP_26(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _liquidity

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: MAX_TICK_LIQUIDITY, Num: 3
End popogation
TMP_27(bool) = _liquidity_1 <= MAX_TICK_LIQUIDITY_3
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_27

Name: TMP_27 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_28(None) = SOLIDITY_CALL require(bool,string)(TMP_27,LIQUIDITY_OVERFLOW)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: mintParams, Num: 1
Name: amount1fees, Num: 1
Name: amount0fees, Num: 1
End popogation
REF_24(address) -> mintParams_1.positionOwner
MEMBER
init
end
init
end
OUT KEY: mint_mintParams_positionOwner
OUT KEY: mint_mintParams_positionOwner
No field found
[i]Type for REF_24

Name: mintParams.positionOwner Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: positionOwner
init
end
Finance type key: (-1, -1)
XXXX
REF_25(int24) -> mintParams_1.lower
MEMBER
init
end
init
end
[i]Type for REF_25

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: lower
init
end
Finance type key: (-1, -1)
XXXX
REF_26(int24) -> mintParams_1.upper
MEMBER
init
end
init
end
[i]Type for REF_26

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: upper
init
end
Finance type key: (-1, -1)
XXXX
TMP_29 = CONVERT _liquidity_1 to uint128
Converting _liquidity_1

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_29

Name: TMP_29 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_30 = CONVERT TMP_29 to int128
Converting TMP_29

Name: TMP_29 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_30

Name: TMP_30 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_1(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(REF_24,REF_25,REF_26,TMP_30)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: MAX_TICK_LIQUIDITY, Num: 4
Name: positions, Num: 1
owner_1(address) := ϕ(['msg.sender', 'REF_24'])
Phi
[i]Type for owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
XXXX
lower_1(int24) := ϕ(['REF_25', 'lower_1', 'lower_1'])
Phi
[i]Type for lower

Name: lower Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upper_1(int24) := ϕ(['upper_1', 'REF_26', 'upper_1'])
Phi
[i]Type for upper

Name: upper Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(int128) := ϕ(['TMP_79', 'TMP_30'])
Phi
[i]Type for amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_TICK_LIQUIDITY_4(uint128) := ϕ(['MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_3', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_1'])
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_1(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(['positions_0', 'positions_4'])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: position, Num: 1 (-> ['positions'])
End popogation
REF_144(mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) -> positions_1[owner_1]
INDEX
[i]Type for REF_144

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_145(mapping(int24 => ConcentratedLiquidityPool.Position)) -> REF_144[lower_1]
INDEX
[i]Type for REF_145

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_146(ConcentratedLiquidityPool.Position) -> REF_145[upper_1]
INDEX
[i]Type for REF_146

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
position_1 (-> ['positions'])(ConcentratedLiquidityPool.Position) := REF_146(ConcentratedLiquidityPool.Position)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: growth0current, Num: 1
Name: growth1current, Num: 1
End popogation
TUPLE_12(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(lower_1,upper_1)
init
end
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: feeGrowthGlobal0, Num: 10
Name: feeGrowthGlobal1, Num: 10
Name: nearestTick, Num: 18
Name: ticks, Num: 16
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Phi
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_0'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_6', 'feeGrowthGlobal1_0'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17', 'nearestTick_16'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_0', 'ticks_2', 'ticks_8', 'ticks_17', 'ticks_15', 'ticks_16', 'ticks_13'])
Phi
[i]Type for ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: currentTick, Num: 1
End popogation
currentTick_1(int24) := nearestTick_18(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: lower, Num: 1 (-> ['ticks'])
End popogation
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
INDEX
[i]Type for REF_165

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: upper, Num: 1 (-> ['ticks'])
End popogation
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
INDEX
[i]Type for REF_166

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _feeGrowthGlobal0, Num: 1
End popogation
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _feeGrowthGlobal1, Num: 1
End popogation
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_224(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthBelow0, Num: 2
End popogation
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end
OUT KEY: rangeFeeGrowth_lower_feeGrowthOutside0
OUT KEY: rangeFeeGrowth_lower_feeGrowthOutside0
No field found
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
init
end
Finance type key: (-1, -1)
XXXX
feeGrowthBelow0_2(uint256) := REF_167(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthBelow0, Num: 1
End popogation
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
init
end
Finance type key: (-1, -1)
XXXX
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthBelow1, Num: 2
End popogation
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end
OUT KEY: rangeFeeGrowth_lower_feeGrowthOutside1
OUT KEY: rangeFeeGrowth_lower_feeGrowthOutside1
No field found
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
init
end
Finance type key: (-1, -1)
XXXX
feeGrowthBelow1_2(uint256) := REF_168(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthBelow1, Num: 1
End popogation
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
init
end
Finance type key: (-1, -1)
XXXX
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: feeGrowthBelow0, Num: 3
Name: feeGrowthBelow1, Num: 3
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Phi
init
end
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
Phi
init
end
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_227(bool) = currentTick_1 < upperTick_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthAbove0, Num: 1
End popogation
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end
OUT KEY: rangeFeeGrowth_upper_feeGrowthOutside0
OUT KEY: rangeFeeGrowth_upper_feeGrowthOutside0
No field found
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
init
end
Finance type key: (-1, -1)
XXXX
feeGrowthAbove0_1(uint256) := REF_171(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthAbove0, Num: 2
End popogation
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
init
end
Finance type key: (-1, -1)
XXXX
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthAbove1, Num: 1
End popogation
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end
OUT KEY: rangeFeeGrowth_upper_feeGrowthOutside1
OUT KEY: rangeFeeGrowth_upper_feeGrowthOutside1
No field found
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
init
end
Finance type key: (-1, -1)
XXXX
feeGrowthAbove1_1(uint256) := REF_172(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthAbove1, Num: 2
End popogation
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
init
end
Finance type key: (-1, -1)
XXXX
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: feeGrowthAbove0, Num: 3
Name: feeGrowthAbove1, Num: 3
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Phi
init
end
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Phi
init
end
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthInside0, Num: 1
End popogation
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside0_1(uint256) := TMP_231(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthInside1, Num: 1
End popogation
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside1_1(uint256) := TMP_233(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN feeGrowthInside0_1,feeGrowthInside1_1
init
end
init
end
Propogating parameters and globals to SSA variables...
End popogation
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Phi
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_0'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_6', 'feeGrowthGlobal1_0'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17', 'nearestTick_16'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_0', 'ticks_2', 'ticks_8', 'ticks_17', 'ticks_15', 'ticks_16', 'ticks_13'])
Phi
[i]Type for ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: currentTick, Num: 1
End popogation
currentTick_1(int24) := nearestTick_18(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: lower, Num: 1 (-> ['ticks'])
End popogation
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
INDEX
[i]Type for REF_165

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: upper, Num: 1 (-> ['ticks'])
End popogation
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
INDEX
[i]Type for REF_166

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _feeGrowthGlobal0, Num: 1
End popogation
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _feeGrowthGlobal1, Num: 1
End popogation
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_224(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthBelow0, Num: 2
End popogation
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end
init
end
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
init
end
Finance type key: (-1, -1)
XXXX
feeGrowthBelow0_2(uint256) := REF_167(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthBelow0, Num: 1
End popogation
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end
init
end
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
init
end
Finance type key: (-1, -1)
XXXX
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthBelow1, Num: 2
End popogation
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end
init
end
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
init
end
Finance type key: (-1, -1)
XXXX
feeGrowthBelow1_2(uint256) := REF_168(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthBelow1, Num: 1
End popogation
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end
init
end
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
init
end
Finance type key: (-1, -1)
XXXX
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: feeGrowthBelow0, Num: 3
Name: feeGrowthBelow1, Num: 3
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Phi
init
end
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
Phi
init
end
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_227(bool) = currentTick_1 < upperTick_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthAbove0, Num: 1
End popogation
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end
init
end
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
init
end
Finance type key: (-1, -1)
XXXX
feeGrowthAbove0_1(uint256) := REF_171(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthAbove0, Num: 2
End popogation
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end
init
end
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
init
end
Finance type key: (-1, -1)
XXXX
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthAbove1, Num: 1
End popogation
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end
init
end
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
init
end
Finance type key: (-1, -1)
XXXX
feeGrowthAbove1_1(uint256) := REF_172(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthAbove1, Num: 2
End popogation
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end
init
end
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
init
end
Finance type key: (-1, -1)
XXXX
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: feeGrowthAbove0, Num: 3
Name: feeGrowthAbove1, Num: 3
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Phi
init
end
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Phi
init
end
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthInside0, Num: 1
End popogation
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside0_1(uint256) := TMP_231(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: feeGrowthInside1, Num: 1
End popogation
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside1_1(uint256) := TMP_233(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN feeGrowthInside0_1,feeGrowthInside1_1
init
end
init
end
[i]Type for TUPLE_12

Name: TUPLE_12 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth0current_1(uint256)= UNPACK TUPLE_12 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth1current_1(uint256)= UNPACK TUPLE_12 index: 1 
([-1], [-1], 'u', None, -1)
[i]Type for growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amount0fees, Num: 1
End popogation
REF_148(uint256) -> position_1 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end
OUT KEY: _updatePosition_position_feeGrowthInside0Last
OUT KEY: _updatePosition_position_feeGrowthInside0Last
No field found
[i]Type for REF_148

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)
XXXX
TMP_202(uint256) = growth0current_1 (c)- REF_148
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_202

Name: TMP_202 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_149(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end
OUT KEY: _updatePosition_position_liquidity
OUT KEY: _updatePosition_position_liquidity
No field found
[i]Type for REF_149

Name: position.liquidity Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
init
end
Finance type key: (-1, -1)
XXXX
TMP_203(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_202', 'REF_149', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_203

Name: TMP_203 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount0fees_1(uint256) := TMP_203(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amount1fees, Num: 1
End popogation
REF_151(uint256) -> position_1 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end
OUT KEY: _updatePosition_position_feeGrowthInside1Last
OUT KEY: _updatePosition_position_feeGrowthInside1Last
No field found
[i]Type for REF_151

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)
XXXX
TMP_204(uint256) = growth1current_1 (c)- REF_151
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_204

Name: TMP_204 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_152(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end
[i]Type for REF_152

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
init
end
Finance type key: (-1, -1)
XXXX
TMP_205(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_204', 'REF_152', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_205

Name: TMP_205 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount1fees_1(uint256) := TMP_205(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(bool) = amount_1 < 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_206

Name: TMP_206 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: position, Num: 3 (-> ['positions'])
position_3 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_2 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
Executing Group 11
[*] Tested 12 warnings for Sushi Trident
Group 11 complete
Testing complete
