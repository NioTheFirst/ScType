Switched global version to 0.8.9
Analyzed_contracts_count: 20
total compilations: 1, contracts: 20
contract name: TwapOracle
Add to address_to_label {'global:_aggregators': 1}
Addr:global__aggregators : 0
Add to address_to_label {'global:_aggregators': 1, 'global:VADER': 2}
Addr:global_VADER : 18
Add to address_to_label {'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3}
Addr:global__owner : 0
Add to address_to_label {'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4}
Addr:global_USDV : 6
Add to address_to_label {'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999}
Addr:pairExists_token0 : 18
Add to address_to_label {'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998}
Addr:pairExists_token1 : 6
Add to address_to_label {'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997}
Addr:consult_token : *
Add to address_to_label {'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996}
Addr:initialize__usdv : 6
Add to address_to_label {'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995}
Addr:initialize__vader : 18
Add to address_to_label {'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994}
Addr:registerAggregator_asset : 6
Add to address_to_label {'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993}
Addr:registerAggregator_aggregator : 6
Add to address_to_label {'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992}
Addr:registerPair_factory : 0
Add to address_to_label {'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991}
Addr:registerPair_token0 : 18
Add to address_to_label {'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Addr:registerPair_token1 : 6
Mark functions Adding: TwapOracle, constructor, True
[X]No Binary
Mark functions Adding: TwapOracle, pairExists, True
[*]Marked
Mark functions Adding: TwapOracle, consult, True
[*]Marked
Mark functions Adding: TwapOracle, getRate, True
[*]Marked
Mark functions Adding: TwapOracle, usdvtoVader, True
[X]No Binary
Mark functions Adding: TwapOracle, vaderToUsdv, True
[X]No Binary
Mark functions Adding: TwapOracle, initialize, True
[*]Marked
Mark functions Adding: TwapOracle, enableUSDV, True
[X]No Binary
Mark functions Adding: TwapOracle, registerAggregator, True
[*]Marked
Mark functions Adding: TwapOracle, registerPair, True
[*]Marked
Mark functions Adding: TwapOracle, update, True
[*]Marked
State_var: VADER
Finding type for VADER(address ... )
prev address? u
Head Addr: 2
    Norm: 18
    Set: {2}
    Fin: NULL
Source address: 2
State_var: _usdvEnabled
Finding type for _usdvEnabled(bool ... )
Source address: u
State_var: _owner
Finding type for _owner(address ... )
prev address? u
Head Addr: 3
    Norm: 0
    Set: {3}
    Fin: NULL
Source address: 3
State_var: _aggregators
Finding type for _aggregators(mapping(address => address) ... )
prev address? u
Head Addr: 1
    Norm: 0
    Set: {1}
    Fin: NULL
Source address: 1
State_var: _pairs
Finding type for _pairs(TwapOracle.PairData[] ... )
global
_pairs
pair
OUT KEY: global__pairs_pair
global
_pairs
token0
OUT KEY: global__pairs_token0
global
_pairs
token1
OUT KEY: global__pairs_token1
global
_pairs
price0CumulativeLast
OUT KEY: global__pairs_price0CumulativeLast
global
_pairs
price1CumulativeLast
OUT KEY: global__pairs_price1CumulativeLast
global
_pairs
blockTimestampLast
OUT KEY: global__pairs_blockTimestampLast
global
_pairs
price0Average
OUT KEY: global__pairs_price0Average
global
_pairs
price1Average
OUT KEY: global__pairs_price1Average
Value: u
Source address: u
State_var: USDV
Finding type for USDV(address ... )
prev address? u
Head Addr: 4
    Norm: 6
    Set: {4}
    Fin: NULL
Source address: 4
State_var: _vaderPool
Finding type for _vaderPool(IVaderPoolV2 ... )
Value: u
Source address: u
State_var: _updatePeriod
Finding type for _updatePeriod(uint256 ... )
Value: u
Source address: u
State_var: _pairExists
Finding type for _pairExists(mapping(bytes32 => bool) ... )
Value: u
Source address: u
contract name: AggregatorV3Interface
contract name: IUniswapV2ERC20
contract name: IUniswapV2Factory
contract name: IUniswapV2Pair
contract name: Babylonian
contract name: BitMath
contract name: FixedPoint
contract name: FullMath
contract name: UniswapV2Library
contract name: UniswapV2OracleLibrary
contract name: IBasePoolV2
contract name: IVaderPoolV2
contract name: Ownable
contract name: IERC20
contract name: IERC20Metadata
contract name: IERC721
contract name: Context
contract name: IERC165
contract name: SafeMath
Running check on TwapOracle
Reading Function: constructor
Function constructor not marked
Reading Function: pairExists
Checking funcion...



pairExists
Function name: pairExists
Finding type for token0(address ... )
prev address? u
Head Addr: -999
    Norm: 18
    Set: {-999}
    Fin: NULL
Finding type for token1(address ... )
prev address? u
Head Addr: -998
    Norm: 6
    Set: {-998}
    Fin: NULL
New param cache [[[], [], 18, 'token0', [], -1, -999, 'u'], [[], [], 6, 'token1', [], -1, -998, 'u']]
FIND RETURN
ENTRY_POINT
pairExists(address,address)


token0_1(address) := ϕ(['token0_1'])
token1_1(address) := ϕ(['token1_1'])
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_1', '_pairExists_0', '_pairExists_2'])
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
pairHash0_1(bytes32) := TMP_18(bytes32)
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
pairHash1_1(bytes32) := TMP_20(bytes32)
REF_2(bool) -> _pairExists_1[pairHash0_1]
REF_3(bool) -> _pairExists_1[pairHash1_1]
TMP_21(bool) = REF_2 || REF_3
RETURN TMP_21


clearing ir...?
token0_1(address) := ϕ(['token0_1'])
[i] token0 cleared
clearing ir...?
token1_1(address) := ϕ(['token1_1'])
[i] token1 cleared
clearing ir...?
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_1', '_pairExists_0', '_pairExists_2'])
[i] _pairExists cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: token0_1, name: token0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -999

Name: token0_1 Function: pairExists
Num: 
Den: 
Address: -999
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: token1_1, name: token1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: token1_1 Function: pairExists
Num: 
Den: 
Address: -998
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _pairExists_1, name: _pairExists

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairExists, Num: 1
Globalname: _pairExists, contract_name: TwapOracle
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
token0_1(address) := ϕ(['token0_1'])
Phi
[i]Type for token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -999
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_1(address) := ϕ(['token1_1'])
Phi
[i]Type for token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -998
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_1', '_pairExists_0', '_pairExists_2'])
Phi
[i]Type for _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
clearing ir...?
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
clearing ir...?
pairHash0_1(bytes32) := TMP_18(bytes32)
[i] pairHash0 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -998
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -999
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -998
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -999
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash0_1, name: pairHash0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash0, Num: 1
Globalname: pairHash0, contract_name: TwapOracle
End popogation
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
[i]Type for TMP_18

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairHash0_1(bytes32) := TMP_18(bytes32)
asgn
Finance type key: (-1, -1)
[i]Type for pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
clearing ir...?
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
clearing ir...?
pairHash1_1(bytes32) := TMP_20(bytes32)
[i] pairHash1 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -998
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -999
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -998
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -999
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash1_1, name: pairHash1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash1, Num: 1
Globalname: pairHash1, contract_name: TwapOracle
End popogation
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
[i]Type for TMP_19

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
[i]Type for TMP_20

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairHash1_1(bytes32) := TMP_20(bytes32)
asgn
Finance type key: (-1, -1)
[i]Type for pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_2(bool) -> _pairExists_1[pairHash0_1]
[i] REF_2 cleared
clearing ir...?
REF_3(bool) -> _pairExists_1[pairHash1_1]
[i] REF_3 cleared
clearing ir...?
TMP_21(bool) = REF_2 || REF_3
[i] TMP_21 cleared
clearing ir...?
RETURN TMP_21
Propogating parameters and globals to SSA variables...
Ssa_name: pairHash1_1, name: pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash1, Num: 1
Globalname: pairHash1, contract_name: TwapOracle
Ssa_name: pairHash0_1, name: pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash0, Num: 1
Globalname: pairHash0, contract_name: TwapOracle
Ssa_name: _pairExists_1, name: _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash1_1, name: pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash1, Num: 1
Globalname: pairHash1, contract_name: TwapOracle
Ssa_name: _pairExists_1, name: _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash0_1, name: pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash0, Num: 1
Globalname: pairHash0, contract_name: TwapOracle
End popogation
REF_2(bool) -> _pairExists_1[pairHash0_1]
INDEX
[i]Type for REF_2

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_3(bool) -> _pairExists_1[pairHash1_1]
INDEX
[i]Type for REF_3

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_21(bool) = REF_2 || REF_3
[i]Type for TMP_21

Name: TMP_21 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_21
RETURN

Name: TMP_21 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


token0_1(address) := ϕ(['token0_1'])
token1_1(address) := ϕ(['token1_1'])
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_1', '_pairExists_0', '_pairExists_2'])
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
pairHash0_1(bytes32) := TMP_18(bytes32)
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
pairHash1_1(bytes32) := TMP_20(bytes32)
REF_2(bool) -> _pairExists_1[pairHash0_1]
REF_3(bool) -> _pairExists_1[pairHash1_1]
TMP_21(bool) = REF_2 || REF_3
RETURN TMP_21


clearing ir...?
token0_1(address) := ϕ(['token0_1'])
[i] token0 cleared
clearing ir...?
token1_1(address) := ϕ(['token1_1'])
[i] token1 cleared
clearing ir...?
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_1', '_pairExists_0', '_pairExists_2'])
[i] _pairExists cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
Source address: -999

Name: token0_1 Function: pairExists
Num: 
Den: 
Address: -999
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: token1_1 Function: pairExists
Num: 
Den: 
Address: -998
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _pairExists_1, name: _pairExists

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairExists, Num: 1
Globalname: _pairExists, contract_name: TwapOracle
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
token0_1(address) := ϕ(['token0_1'])
Phi
[i]Type for token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -999
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_1(address) := ϕ(['token1_1'])
Phi
[i]Type for token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -998
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_1', '_pairExists_0', '_pairExists_2'])
Phi
[i]Type for _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
clearing ir...?
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
clearing ir...?
pairHash0_1(bytes32) := TMP_18(bytes32)
[i] pairHash0 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -998
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -999
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -998
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -999
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash0_1, name: pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash0, Num: 1
Globalname: pairHash0, contract_name: TwapOracle
End popogation
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
[i]Type for TMP_18

Name: TMP_18 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairHash0_1(bytes32) := TMP_18(bytes32)
asgn
Finance type key: (-1, -1)
[i]Type for pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
clearing ir...?
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
clearing ir...?
pairHash1_1(bytes32) := TMP_20(bytes32)
[i] pairHash1 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -998
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -999
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -998
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -999
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash1_1, name: pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash1, Num: 1
Globalname: pairHash1, contract_name: TwapOracle
End popogation
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
[i]Type for TMP_19

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
[i]Type for TMP_20

Name: TMP_20 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairHash1_1(bytes32) := TMP_20(bytes32)
asgn
Finance type key: (-1, -1)
[i]Type for pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_2(bool) -> _pairExists_1[pairHash0_1]
[i] REF_2 cleared
clearing ir...?
REF_3(bool) -> _pairExists_1[pairHash1_1]
[i] REF_3 cleared
clearing ir...?
TMP_21(bool) = REF_2 || REF_3
[i] TMP_21 cleared
clearing ir...?
RETURN TMP_21
Propogating parameters and globals to SSA variables...
Ssa_name: pairHash1_1, name: pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash1, Num: 1
Globalname: pairHash1, contract_name: TwapOracle
Ssa_name: pairHash0_1, name: pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash0, Num: 1
Globalname: pairHash0, contract_name: TwapOracle
Ssa_name: _pairExists_1, name: _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash1_1, name: pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash1, Num: 1
Globalname: pairHash1, contract_name: TwapOracle
Ssa_name: _pairExists_1, name: _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash0_1, name: pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash0, Num: 1
Globalname: pairHash0, contract_name: TwapOracle
End popogation
REF_2(bool) -> _pairExists_1[pairHash0_1]
INDEX
[i]Type for REF_2

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_3(bool) -> _pairExists_1[pairHash1_1]
INDEX
[i]Type for REF_3

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_21(bool) = REF_2 || REF_3
[i]Type for TMP_21

Name: TMP_21 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_21
RETURN

Name: TMP_21 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Reading Function: consult
Checking funcion...



consult
Function name: consult
Finding type for token(address ... )
prev address? u
Head Addr: -997
    Norm: *
    Set: {-997}
    Fin: NULL
New param cache [[[], [], '*', 'token', [], -1, -997, 'u']]
FIND RETURN
ENTRY_POINT
consult(address)


token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
REF_4 -> LENGTH _pairs_1
pairCount_1(uint256) := REF_4(uint256)
sumNative_1(uint256) := 0(uint256)
sumUSD_1(uint256) := 0(uint256)
i_1(uint256) := 0(uint256)
i_2(uint256) := ϕ(['i_3', 'i_1'])
TMP_22(bool) = i_2 < pairCount_1
CONDITION TMP_22
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
REF_6(address) -> pairData_1.token0
TMP_23(bool) = token_1 == REF_6
CONDITION TMP_23
TMP_50(bool) = sumNative_1 != 0
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
TMP_43(bool) = sumNative_3 != 0
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
TMP_45 = CONVERT token_1 to IERC20Metadata
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
result_3(uint256) := TMP_48(uint256)
TMP_52 = CONVERT token_1 to IERC20Metadata
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
result_1(uint256) := TMP_55(uint256)
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
REF_11(uint224) -> REF_10._x
TMP_26(bool) = REF_11 != 0
CONDITION TMP_26
TMP_49(uint256) := i_2(uint256)
i_3(uint256) = i_2 (c)+ 1
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
TMP_27(bool) = sumNative_2 != 0
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
REF_12(address) -> pairData_1.token1
REF_13(address) -> _aggregators_1[REF_12]
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
price_1(int256)= UNPACK TUPLE_0 index: 1 
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
TMP_30(bool) = answeredInRound_1 >= roundID_1
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
TMP_32(bool) = price_1 != 0
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
TMP_34 = CONVERT price_1 to uint256
TMP_35(uint256) = 10 (c)** 10
TMP_36(uint256) = TMP_34 (c)* TMP_35
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
TMP_37(bool) = sumNative_2 != 0
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
TMP_39 = CONVERT token_1 to IERC20Metadata
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
result_2(uint256) := TMP_42(uint256)


clearing ir...?
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
[i] token cleared
clearing ir...?
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: token_1, name: token

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -997

Name: token_1 Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _aggregators_1, name: _aggregators

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 1
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_1, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 1
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
Phi
[i]Type for token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_4 -> LENGTH _pairs_1
clearing ir...?
pairCount_1(uint256) := REF_4(uint256)
[i] pairCount cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairCount_1, name: pairCount

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
End popogation
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairCount_1(uint256) := REF_4(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_1(uint256) := 0(uint256)
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 1
Globalname: sumNative, contract_name: TwapOracle
End popogation
sumNative_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_1(uint256) := 0(uint256)
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumUSD, Num: 1
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
i_1(uint256) := 0(uint256)
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_1, name: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 1
Globalname: i, contract_name: TwapOracle
End popogation
i_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
i_2(uint256) := ϕ(['i_3', 'i_1'])
[i] i cleared
clearing ir...?
TMP_22(bool) = i_2 < pairCount_1
[i] TMP_22 cleared
clearing ir...?
CONDITION TMP_22
Propogating parameters and globals to SSA variables...
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
End popogation
Ssa_name: i_2, name: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
i_2(uint256) := ϕ(['i_3', 'i_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(bool) = i_2 < pairCount_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i] REF_5 cleared
clearing ir...?
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
[i] pairData cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
End popogation
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
INDEX
[i]Type for REF_5

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_6(address) -> pairData_1.token0
[i] REF_6 cleared
clearing ir...?
TMP_23(bool) = token_1 == REF_6
[i] TMP_23 cleared
clearing ir...?
CONDITION TMP_23
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
End popogation
REF_6(address) -> pairData_1.token0
MEMBER
OUT KEY: consult_pairData_token0
OUT KEY: consult_pairData_token0
FTT: None
No field found
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token0
#################
Member: 
Name: pairData Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: token0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(bool) = sumNative_1 != 0
[i] TMP_50 cleared
clearing ir...?
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i] sumNative cleared
clearing ir...?
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: sumNative_3, name: sumNative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumUSD, Num: 4
Globalname: sumUSD, contract_name: TwapOracle
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
Phi

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_43(bool) = sumNative_3 != 0
[i] TMP_43 cleared
clearing ir...?
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
End popogation
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_7 cleared
clearing ir...?
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i] TMP_24 cleared
clearing ir...?
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i] TMP_25 cleared
clearing ir...?
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 2
Globalname: sumNative, contract_name: TwapOracle
End popogation
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0
Finance Type: undef
Fieldf: 
Name: price1Average Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
Found: None
Written func info: FixedPoint, decode144
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
([-1], [-1, -1], 0, "'u'", 'u', -1)
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
Source address: u
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_45 = CONVERT token_1 to IERC20Metadata
[i] TMP_45 cleared
clearing ir...?
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_46 cleared
clearing ir...?
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
[i] TMP_47 cleared
clearing ir...?
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
[i] TMP_48 cleared
clearing ir...?
result_3(uint256) := TMP_48(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumUSD, Num: 4
Globalname: sumUSD, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumUSD, Num: 4
Globalname: sumUSD, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_3, name: result

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: result, Num: 3
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_4, name: _aggregators

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 4
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_4, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 4
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_45 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Source address: -997
ERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
A: u B: *
lnorm: u rnorm: *
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
A: * B: u
lnorm: * rnorm: u
Source address: u
A: * B: u
lnorm: * rnorm: u
Error with TMP_48 in function consult
Error with: TMP_48 in function consult
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
result_3(uint256) := TMP_48(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_52 = CONVERT token_1 to IERC20Metadata
[i] TMP_52 cleared
clearing ir...?
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
[i] TMP_55 cleared
clearing ir...?
result_1(uint256) := TMP_55(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: result, Num: 1
Globalname: result, contract_name: TwapOracle
End popogation
TMP_52 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Source address: -997
ERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
A: u B: *
lnorm: u rnorm: *
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
A: * B: u
lnorm: * rnorm: u
A: * B: u
lnorm: * rnorm: u
Error with TMP_55 in function consult
Error with: TMP_55 in function consult
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_1(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_10 cleared
clearing ir...?
REF_11(uint224) -> REF_10._x
[i] REF_11 cleared
clearing ir...?
TMP_26(bool) = REF_11 != 0
[i] TMP_26 cleared
clearing ir...?
CONDITION TMP_26
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average
Finance Type: undef
End popogation
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average
Finance Type: undef
Fieldf: 
Name: price1Average Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_11(uint224) -> REF_10._x
MEMBER
OUT KEY: consult_REF_10__x
OUT KEY: consult_REF__x
FTT: None
No field found
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_10, Field: _x
#################
Member: 
Name: pairData Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average
Finance Type: undef
Fieldf: 
Name: _x Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(uint256) := i_2(uint256)
[i] TMP_49 cleared
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_3, name: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 3
Globalname: i, contract_name: TwapOracle
End popogation
TMP_49(uint256) := i_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_3(uint256) = i_2 (c)+ 1
Source address: u
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_2, name: sumUSD

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumUSD, Num: 2
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_27(bool) = sumNative_2 != 0
[i] TMP_27 cleared
clearing ir...?
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_12(address) -> pairData_1.token1
[i] REF_12 cleared
clearing ir...?
REF_13(address) -> _aggregators_1[REF_12]
[i] REF_13 cleared
clearing ir...?
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i] TMP_29 cleared
clearing ir...?
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i] TUPLE_0 cleared
clearing ir...?
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i] _pairs cleared
clearing ir...?
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i] roundID cleared
clearing ir...?
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i] price cleared
clearing ir...?
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i] answeredInRound cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x
Finance Type: undef
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x
Finance Type: undef
Ssa_name: price_1, name: price

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: price, Num: 1
Globalname: price, contract_name: TwapOracle
Ssa_name: answeredInRound_1, name: answeredInRound

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: answeredInRound, Num: 1
Globalname: answeredInRound, contract_name: TwapOracle
Ssa_name: roundID_1, name: roundID

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: roundID, Num: 1
Globalname: roundID, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_2, name: _aggregators

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 2
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_2, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 2
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
REF_12(address) -> pairData_1.token1
MEMBER
OUT KEY: consult_pairData_token1
OUT KEY: consult_pairData_token1
FTT: None
No field found
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token1
#################
Member: 
Name: pairData Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x
Finance Type: undef
Fieldf: 
Name: token1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
REF_13(address) -> _aggregators_1[REF_12]
INDEX
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
Converting REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
UNKNOWN
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Found: None
Written func info: AggregatorV3Interface, latestRoundData
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
([2], [4], 12, "'u'", 'u', -1)
[i]Type for price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i] TMP_30 cleared
clearing ir...?
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
Propogating parameters and globals to SSA variables...
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_32(bool) = price_1 != 0
[i] TMP_32 cleared
clearing ir...?
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_34 = CONVERT price_1 to uint256
[i] TMP_34 cleared
clearing ir...?
TMP_35(uint256) = 10 (c)** 10
[i] TMP_35 cleared
clearing ir...?
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i] TMP_36 cleared
clearing ir...?
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumUSD, Num: 3
Globalname: sumUSD, contract_name: TwapOracle
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: -1
Den: -1
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_36(uint256) = TMP_34 (c)* TMP_35
A: 12 B: 10
lnorm: 12 rnorm: 10
Source address: u
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 2
Den: 4
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_37(bool) = sumNative_2 != 0
[i] TMP_37 cleared
clearing ir...?
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_39 = CONVERT token_1 to IERC20Metadata
[i] TMP_39 cleared
clearing ir...?
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_40 cleared
clearing ir...?
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
[i] _pairs cleared
clearing ir...?
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
[i] TMP_41 cleared
clearing ir...?
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i] TMP_42 cleared
clearing ir...?
result_2(uint256) := TMP_42(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_2, name: result

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: result, Num: 2
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_3, name: _aggregators

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 3
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_3, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 3
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_39 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Source address: -997
ERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
A: u B: *
lnorm: 10 rnorm: *
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 2
Den: 4
Address: u
Norm: *
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
A: * B: u
lnorm: 10 rnorm: u
Source address: u
A: * B: u
lnorm: 10 rnorm: u
2
4
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_2(uint256) := TMP_42(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX


token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
REF_4 -> LENGTH _pairs_1
pairCount_1(uint256) := REF_4(uint256)
sumNative_1(uint256) := 0(uint256)
sumUSD_1(uint256) := 0(uint256)
i_1(uint256) := 0(uint256)
i_2(uint256) := ϕ(['i_3', 'i_1'])
TMP_22(bool) = i_2 < pairCount_1
CONDITION TMP_22
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
REF_6(address) -> pairData_1.token0
TMP_23(bool) = token_1 == REF_6
CONDITION TMP_23
TMP_50(bool) = sumNative_1 != 0
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
TMP_43(bool) = sumNative_3 != 0
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
TMP_45 = CONVERT token_1 to IERC20Metadata
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
result_3(uint256) := TMP_48(uint256)
TMP_52 = CONVERT token_1 to IERC20Metadata
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
result_1(uint256) := TMP_55(uint256)
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
REF_11(uint224) -> REF_10._x
TMP_26(bool) = REF_11 != 0
CONDITION TMP_26
TMP_49(uint256) := i_2(uint256)
i_3(uint256) = i_2 (c)+ 1
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
TMP_27(bool) = sumNative_2 != 0
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
REF_12(address) -> pairData_1.token1
REF_13(address) -> _aggregators_1[REF_12]
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
price_1(int256)= UNPACK TUPLE_0 index: 1 
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
TMP_30(bool) = answeredInRound_1 >= roundID_1
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
TMP_32(bool) = price_1 != 0
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
TMP_34 = CONVERT price_1 to uint256
TMP_35(uint256) = 10 (c)** 10
TMP_36(uint256) = TMP_34 (c)* TMP_35
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
TMP_37(bool) = sumNative_2 != 0
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
TMP_39 = CONVERT token_1 to IERC20Metadata
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
result_2(uint256) := TMP_42(uint256)


clearing ir...?
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
[i] token cleared
clearing ir...?
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: token
Value: u
Fields: 
Finance Type: undef
Source address: -997

Name: token_1 Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 1
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 1
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
Phi
[i]Type for token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_4 -> LENGTH _pairs_1
clearing ir...?
pairCount_1(uint256) := REF_4(uint256)
[i] pairCount cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
End popogation
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: REF_4 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairCount_1(uint256) := REF_4(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_1(uint256) := 0(uint256)
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumNative, Num: 1
Globalname: sumNative, contract_name: TwapOracle
End popogation
sumNative_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_1(uint256) := 0(uint256)
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumUSD, Num: 1
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
i_1(uint256) := 0(uint256)
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_1, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: i, Num: 1
Globalname: i, contract_name: TwapOracle
End popogation
i_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
i_2(uint256) := ϕ(['i_3', 'i_1'])
[i] i cleared
clearing ir...?
TMP_22(bool) = i_2 < pairCount_1
[i] TMP_22 cleared
clearing ir...?
CONDITION TMP_22
Propogating parameters and globals to SSA variables...
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
End popogation
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
i_2(uint256) := ϕ(['i_3', 'i_1'])
Phi

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(bool) = i_2 < pairCount_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i] REF_5 cleared
clearing ir...?
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
[i] pairData cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
End popogation
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
INDEX
[i]Type for REF_5

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
asgn
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_6(address) -> pairData_1.token0
[i] REF_6 cleared
clearing ir...?
TMP_23(bool) = token_1 == REF_6
[i] TMP_23 cleared
clearing ir...?
CONDITION TMP_23
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
End popogation
REF_6(address) -> pairData_1.token0
MEMBER
OUT KEY: consult_pairData_token0
OUT KEY: consult_pairData_token0
FTT: None
No field found
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token0
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: token0 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token0 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(bool) = sumNative_1 != 0
[i] TMP_50 cleared
clearing ir...?
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i] sumNative cleared
clearing ir...?
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumUSD, Num: 4
Globalname: sumUSD, contract_name: TwapOracle
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
Phi

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
Phi

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_43(bool) = sumNative_3 != 0
[i] TMP_43 cleared
clearing ir...?
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
End popogation
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_7 cleared
clearing ir...?
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i] TMP_24 cleared
clearing ir...?
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i] TMP_25 cleared
clearing ir...?
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumNative, Num: 2
Globalname: sumNative, contract_name: TwapOracle
End popogation
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
Found: None
Written func info: FixedPoint, decode144
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
([-1], [-1, -1], 0, "'u'", 'u', -1)
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
Source address: u
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_45 = CONVERT token_1 to IERC20Metadata
[i] TMP_45 cleared
clearing ir...?
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_46 cleared
clearing ir...?
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
[i] TMP_47 cleared
clearing ir...?
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
[i] TMP_48 cleared
clearing ir...?
result_3(uint256) := TMP_48(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_3, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: result, Num: 3
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_4, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 4
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_4, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 4
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_45 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Source address: -997
ERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
A: u B: *
lnorm: 10 rnorm: *
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 2
Den: 4
Address: u
Norm: *
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
A: * B: u
lnorm: 10 rnorm: u
Source address: u
A: * B: u
lnorm: 10 rnorm: u
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
result_3(uint256) := TMP_48(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_52 = CONVERT token_1 to IERC20Metadata
[i] TMP_52 cleared
clearing ir...?
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
[i] TMP_55 cleared
clearing ir...?
result_1(uint256) := TMP_55(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: result, Num: 1
Globalname: result, contract_name: TwapOracle
End popogation
TMP_52 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Source address: -997
ERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
A: u B: *
lnorm: u rnorm: *
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
A: * B: u
lnorm: * rnorm: u
A: * B: u
lnorm: * rnorm: u
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_1(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_10 cleared
clearing ir...?
REF_11(uint224) -> REF_10._x
[i] REF_11 cleared
clearing ir...?
TMP_26(bool) = REF_11 != 0
[i] TMP_26 cleared
clearing ir...?
CONDITION TMP_26
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
End popogation
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: price1Average Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_11(uint224) -> REF_10._x
MEMBER
OUT KEY: consult_REF_10__x
OUT KEY: consult_REF__x
FTT: None
No field found
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_10, Field: _x
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: _x Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: _x Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(uint256) := i_2(uint256)
[i] TMP_49 cleared
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_3, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: i, Num: 3
Globalname: i, contract_name: TwapOracle
End popogation
TMP_49(uint256) := i_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_3(uint256) = i_2 (c)+ 1
Source address: u
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_2, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumUSD, Num: 2
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_27(bool) = sumNative_2 != 0
[i] TMP_27 cleared
clearing ir...?
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_12(address) -> pairData_1.token1
[i] REF_12 cleared
clearing ir...?
REF_13(address) -> _aggregators_1[REF_12]
[i] REF_13 cleared
clearing ir...?
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i] TMP_29 cleared
clearing ir...?
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i] TUPLE_0 cleared
clearing ir...?
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i] _pairs cleared
clearing ir...?
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i] roundID cleared
clearing ir...?
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i] price cleared
clearing ir...?
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i] answeredInRound cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price, Num: 1
Globalname: price, contract_name: TwapOracle
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: answeredInRound, Num: 1
Globalname: answeredInRound, contract_name: TwapOracle
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: roundID, Num: 1
Globalname: roundID, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_2, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 2
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_2, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 2
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
REF_12(address) -> pairData_1.token1
MEMBER
OUT KEY: consult_pairData_token1
OUT KEY: consult_pairData_token1
FTT: None
No field found
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token1
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: token1 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token1 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_13(address) -> _aggregators_1[REF_12]
INDEX
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
Converting REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
UNKNOWN
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Found: None
Written func info: AggregatorV3Interface, latestRoundData
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
([2], [4], 12, "'u'", 'u', -1)
[i]Type for price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i] TMP_30 cleared
clearing ir...?
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
Propogating parameters and globals to SSA variables...
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_32(bool) = price_1 != 0
[i] TMP_32 cleared
clearing ir...?
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_34 = CONVERT price_1 to uint256
[i] TMP_34 cleared
clearing ir...?
TMP_35(uint256) = 10 (c)** 10
[i] TMP_35 cleared
clearing ir...?
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i] TMP_36 cleared
clearing ir...?
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: sumUSD, Num: 3
Globalname: sumUSD, contract_name: TwapOracle
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: 
Den: 
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_36(uint256) = TMP_34 (c)* TMP_35
A: 12 B: 10
lnorm: 12 rnorm: 10
Source address: u
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 2
Den: 4
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_37(bool) = sumNative_2 != 0
[i] TMP_37 cleared
clearing ir...?
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_39 = CONVERT token_1 to IERC20Metadata
[i] TMP_39 cleared
clearing ir...?
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_40 cleared
clearing ir...?
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
[i] _pairs cleared
clearing ir...?
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
[i] TMP_41 cleared
clearing ir...?
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i] TMP_42 cleared
clearing ir...?
result_2(uint256) := TMP_42(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_2, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: result, Num: 2
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_3, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 3
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_3, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 3
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_39 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Source address: -997
ERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
A: u B: *
lnorm: 10 rnorm: *
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 2
Den: 4
Address: u
Norm: *
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
A: * B: u
lnorm: 10 rnorm: u
Source address: u
A: * B: u
lnorm: 10 rnorm: u
2
4
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_2(uint256) := TMP_42(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Source address: u
Reading Function: getRate
Checking funcion...



getRate
Function name: getRate
New param cache []
FIND RETURN
ENTRY_POINT
getRate()


VADER_1(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
USDV_1(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
TMP_56(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(USDV_1)
tUSDInUSDV_1(uint256) := TMP_56(uint256)
TMP_57(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(VADER_2)
tUSDInVader_1(uint256) := TMP_57(uint256)
TMP_58(uint256) = tUSDInUSDV_1 (c)/ tUSDInVader_1
result_1(uint256) := TMP_58(uint256)


clearing ir...?
VADER_1(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
[i] VADER cleared
clearing ir...?
USDV_1(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
[i] USDV cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: VADER_1, name: VADER

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: VADER, Num: 1
Globalname: VADER, contract_name: TwapOracle
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
Ssa_name: USDV_1, name: USDV

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: USDV, Num: 1
Globalname: USDV, contract_name: TwapOracle
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
VADER_1(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
Phi
[i]Type for VADER

Name: VADER Function: getRate
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
XXXX
USDV_1(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
Phi
[i]Type for USDV

Name: USDV Function: getRate
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_56(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(USDV_1)
[i] TMP_56 cleared
clearing ir...?
tUSDInUSDV_1(uint256) := TMP_56(uint256)
[i] tUSDInUSDV cleared
Propogating parameters and globals to SSA variables...
Ssa_name: USDV_1, name: USDV

Name: USDV Function: getRate
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: USDV_1, name: USDV

Name: USDV Function: getRate
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: tUSDInUSDV_1, name: tUSDInUSDV

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: tUSDInUSDV, Num: 1
Globalname: tUSDInUSDV, contract_name: TwapOracle
End popogation
TMP_56(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(USDV_1)
New param cache [[[-1], [-1], 6, 'USDV', [], -1, 4, 'u']]
Old param cache: [[[], [], '*', 'token', [], -1, -997]]
Param: token
[[-1], [-1], 6, 'USDV', [], -1, 4, 'u']

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
consult(address)
ENTRY_POINT
Propogating All
NEW VARIABLE pairCount = _pairs.length
Propogating All
NEW VARIABLE sumNative = 0
Propogating All
NEW VARIABLE sumUSD = 0
Propogating All
NEW VARIABLE i = 0
Propogating All
BEGIN_LOOP
Propogating All
IF_LOOP i < pairCount
Propogating All
pairCount_1
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
NEW VARIABLE pairData = _pairs[i]
Propogating All
i_2
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
END_LOOP
Propogating All
IF token == pairData.token0
Propogating All
pairData_1
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
token_1
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
Source address: 4

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION require(bool,string)(sumNative != 0,TwapOracle::consult: Sum of native is zero)
Propogating All
sumNative_1
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
END_IF
Propogating All
EXPRESSION require(bool,string)(sumNative != 0,TwapOracle::consult: Sum of native is zero)
Propogating All
sumNative_3
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION sumNative += pairData.price1Average.mul(1).decode144()
Propogating All
sumNative_1
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
pairData_1
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
EXPRESSION result = ((sumUSD * IERC20Metadata(token).decimals()) / sumNative)
Propogating All
sumNative_3
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumUSD_4
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
token_1
Ssa_name: token_1, name: token

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION result = ((sumUSD * IERC20Metadata(token).decimals()) / sumNative)
Propogating All
sumUSD_1
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumNative_1
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
token_1
Ssa_name: token_1, name: token

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Copied ftype
IF pairData.price1Average._x != 0
Propogating All
pairData_1
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
EXPRESSION i ++
Propogating All
i_2
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
IF_LOOP i < pairCount
EXPRESSION sumUSD += result
Propogating All
sumUSD_1
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
result_1
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
END_IF
Propogating All
EXPRESSION require(bool)(sumNative != 0)
Propogating All
sumNative_2
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
END_IF
NEW VARIABLE roundID
Propogating All
NEW VARIABLE price
Propogating All
NEW VARIABLE answeredInRound
Propogating All
EXPRESSION (roundID,price,answeredInRound) = AggregatorV3Interface(_aggregators[pairData.token1]).latestRoundData()
Propogating All
pairData_1
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
EXPRESSION require(bool,string)(answeredInRound >= roundID,TwapOracle::consult: stale chainlink price)
Propogating All
answeredInRound_1
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
roundID_1
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION require(bool,string)(price != 0,TwapOracle::consult: chainlink malfunction)
Propogating All
price_1
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
EXPRESSION sumUSD += uint256(price) * (10 ** 10)
Propogating All
price_1
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
sumUSD_1
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
EXPRESSION require(bool,string)(sumNative != 0,TwapOracle::consult: Sum of native is zero)
Propogating All
sumNative_2
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
EXPRESSION result = ((sumUSD * IERC20Metadata(token).decimals()) / sumNative)
Propogating All
sumUSD_3
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
sumNative_2
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
token_1
Ssa_name: token_1, name: token

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Copied ftype
END_IF
clearing ir...?
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
[i] token cleared
clearing ir...?
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: token_1, name: token

Name: token_1 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 1
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 1
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
Phi
[i]Type for token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_4 -> LENGTH _pairs_1
clearing ir...?
pairCount_1(uint256) := REF_4(uint256)
[i] pairCount cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
End popogation
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: REF_4 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairCount_1(uint256) := REF_4(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_1(uint256) := 0(uint256)
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumNative, Num: 1
Globalname: sumNative, contract_name: TwapOracle
End popogation
sumNative_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_1(uint256) := 0(uint256)
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumUSD, Num: 1
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
i_1(uint256) := 0(uint256)
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_1, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: i, Num: 1
Globalname: i, contract_name: TwapOracle
End popogation
i_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
i_2(uint256) := ϕ(['i_3', 'i_1'])
[i] i cleared
clearing ir...?
TMP_22(bool) = i_2 < pairCount_1
[i] TMP_22 cleared
clearing ir...?
CONDITION TMP_22
Propogating parameters and globals to SSA variables...
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
End popogation
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
i_2(uint256) := ϕ(['i_3', 'i_1'])
Phi

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(bool) = i_2 < pairCount_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i] REF_5 cleared
clearing ir...?
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
[i] pairData cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
End popogation
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
INDEX
[i]Type for REF_5

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
asgn
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_6(address) -> pairData_1.token0
[i] REF_6 cleared
clearing ir...?
TMP_23(bool) = token_1 == REF_6
[i] TMP_23 cleared
clearing ir...?
CONDITION TMP_23
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
End popogation
REF_6(address) -> pairData_1.token0
MEMBER
OUT KEY: consult_pairData_token0
OUT KEY: consult_pairData_token0
FTT: None
No field found
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token0
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: token0 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token0 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(bool) = sumNative_1 != 0
[i] TMP_50 cleared
clearing ir...?
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i] sumNative cleared
clearing ir...?
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: sumUSD, Num: 4
Globalname: sumUSD, contract_name: TwapOracle
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
Phi

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
Phi

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_43(bool) = sumNative_3 != 0
[i] TMP_43 cleared
clearing ir...?
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
End popogation
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_7 cleared
clearing ir...?
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i] TMP_24 cleared
clearing ir...?
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i] TMP_25 cleared
clearing ir...?
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumNative, Num: 2
Globalname: sumNative, contract_name: TwapOracle
End popogation
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
Found: None
Written func info: FixedPoint, decode144
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
([-1], [-1, -1], 0, "'u'", 'u', -1)
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
Source address: u
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_45 = CONVERT token_1 to IERC20Metadata
[i] TMP_45 cleared
clearing ir...?
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_46 cleared
clearing ir...?
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
[i] TMP_47 cleared
clearing ir...?
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
[i] TMP_48 cleared
clearing ir...?
result_3(uint256) := TMP_48(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_3, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: result, Num: 3
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_4, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 4
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_4, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 4
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_45 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
ERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
A: u B: *
lnorm: 10 rnorm: *
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 2
Den: 4
Address: u
Norm: *
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
A: * B: u
lnorm: 10 rnorm: u
Source address: u
A: * B: u
lnorm: 10 rnorm: u
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
result_3(uint256) := TMP_48(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_52 = CONVERT token_1 to IERC20Metadata
[i] TMP_52 cleared
clearing ir...?
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
[i] TMP_55 cleared
clearing ir...?
result_1(uint256) := TMP_55(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: result, Num: 1
Globalname: result, contract_name: TwapOracle
End popogation
TMP_52 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
ERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
A: u B: *
lnorm: u rnorm: *
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
A: * B: u
lnorm: * rnorm: u
A: * B: u
lnorm: * rnorm: u
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_1(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_10 cleared
clearing ir...?
REF_11(uint224) -> REF_10._x
[i] REF_11 cleared
clearing ir...?
TMP_26(bool) = REF_11 != 0
[i] TMP_26 cleared
clearing ir...?
CONDITION TMP_26
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
End popogation
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: price1Average Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_11(uint224) -> REF_10._x
MEMBER
OUT KEY: consult_REF_10__x
OUT KEY: consult_REF__x
FTT: None
No field found
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_10, Field: _x
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: _x Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: _x Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(uint256) := i_2(uint256)
[i] TMP_49 cleared
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_3, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: i, Num: 3
Globalname: i, contract_name: TwapOracle
End popogation
TMP_49(uint256) := i_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_3(uint256) = i_2 (c)+ 1
Source address: u
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_2, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumUSD, Num: 2
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_27(bool) = sumNative_2 != 0
[i] TMP_27 cleared
clearing ir...?
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_12(address) -> pairData_1.token1
[i] REF_12 cleared
clearing ir...?
REF_13(address) -> _aggregators_1[REF_12]
[i] REF_13 cleared
clearing ir...?
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i] TMP_29 cleared
clearing ir...?
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i] TUPLE_0 cleared
clearing ir...?
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i] _pairs cleared
clearing ir...?
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i] roundID cleared
clearing ir...?
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i] price cleared
clearing ir...?
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i] answeredInRound cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price, Num: 1
Globalname: price, contract_name: TwapOracle
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: answeredInRound, Num: 1
Globalname: answeredInRound, contract_name: TwapOracle
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: roundID, Num: 1
Globalname: roundID, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_2, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 2
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_2, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 2
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
REF_12(address) -> pairData_1.token1
MEMBER
OUT KEY: consult_pairData_token1
OUT KEY: consult_pairData_token1
FTT: None
No field found
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token1
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: token1 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token1 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_13(address) -> _aggregators_1[REF_12]
INDEX
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
Converting REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
UNKNOWN
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Found: None
Written func info: AggregatorV3Interface, latestRoundData
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
([2], [4], 12, "'u'", 'u', -1)
[i]Type for price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i] TMP_30 cleared
clearing ir...?
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
Propogating parameters and globals to SSA variables...
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_32(bool) = price_1 != 0
[i] TMP_32 cleared
clearing ir...?
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_34 = CONVERT price_1 to uint256
[i] TMP_34 cleared
clearing ir...?
TMP_35(uint256) = 10 (c)** 10
[i] TMP_35 cleared
clearing ir...?
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i] TMP_36 cleared
clearing ir...?
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: sumUSD, Num: 3
Globalname: sumUSD, contract_name: TwapOracle
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: 
Den: 
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_36(uint256) = TMP_34 (c)* TMP_35
A: 12 B: 10
lnorm: 12 rnorm: 10
Source address: u
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 2
Den: 4
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_37(bool) = sumNative_2 != 0
[i] TMP_37 cleared
clearing ir...?
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_39 = CONVERT token_1 to IERC20Metadata
[i] TMP_39 cleared
clearing ir...?
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_40 cleared
clearing ir...?
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
[i] _pairs cleared
clearing ir...?
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
[i] TMP_41 cleared
clearing ir...?
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i] TMP_42 cleared
clearing ir...?
result_2(uint256) := TMP_42(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_2, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: result, Num: 2
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_3, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 3
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_3, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 3
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_39 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
ERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
A: u B: *
lnorm: 10 rnorm: *
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 2
Den: 4
Address: u
Norm: *
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
A: * B: u
lnorm: 10 rnorm: u
Source address: u
A: * B: u
lnorm: 10 rnorm: u
2
4
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_2(uint256) := TMP_42(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
[i] token cleared
clearing ir...?
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 1
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 1
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
Phi
[i]Type for token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_4 -> LENGTH _pairs_1
clearing ir...?
pairCount_1(uint256) := REF_4(uint256)
[i] pairCount cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
End popogation
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: REF_4 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairCount_1(uint256) := REF_4(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_1(uint256) := 0(uint256)
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumNative, Num: 1
Globalname: sumNative, contract_name: TwapOracle
End popogation
sumNative_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_1(uint256) := 0(uint256)
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumUSD, Num: 1
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
i_1(uint256) := 0(uint256)
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_1, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: i, Num: 1
Globalname: i, contract_name: TwapOracle
End popogation
i_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
i_2(uint256) := ϕ(['i_3', 'i_1'])
[i] i cleared
clearing ir...?
TMP_22(bool) = i_2 < pairCount_1
[i] TMP_22 cleared
clearing ir...?
CONDITION TMP_22
Propogating parameters and globals to SSA variables...
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
End popogation
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
i_2(uint256) := ϕ(['i_3', 'i_1'])
Phi

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(bool) = i_2 < pairCount_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i] REF_5 cleared
clearing ir...?
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
[i] pairData cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
End popogation
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
INDEX
[i]Type for REF_5

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
asgn
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_6(address) -> pairData_1.token0
[i] REF_6 cleared
clearing ir...?
TMP_23(bool) = token_1 == REF_6
[i] TMP_23 cleared
clearing ir...?
CONDITION TMP_23
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
End popogation
REF_6(address) -> pairData_1.token0
MEMBER
OUT KEY: consult_pairData_token0
OUT KEY: consult_pairData_token0
FTT: None
No field found
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token0
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: token0 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token0 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(bool) = sumNative_1 != 0
[i] TMP_50 cleared
clearing ir...?
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i] sumNative cleared
clearing ir...?
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: sumUSD, Num: 4
Globalname: sumUSD, contract_name: TwapOracle
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
Phi

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
Phi

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_43(bool) = sumNative_3 != 0
[i] TMP_43 cleared
clearing ir...?
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
End popogation
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_7 cleared
clearing ir...?
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i] TMP_24 cleared
clearing ir...?
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i] TMP_25 cleared
clearing ir...?
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumNative, Num: 2
Globalname: sumNative, contract_name: TwapOracle
End popogation
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
Found: None
Written func info: FixedPoint, decode144
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
([-1], [-1, -1], 0, "'u'", 'u', -1)
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
Source address: u
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_45 = CONVERT token_1 to IERC20Metadata
[i] TMP_45 cleared
clearing ir...?
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_46 cleared
clearing ir...?
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
[i] TMP_47 cleared
clearing ir...?
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
[i] TMP_48 cleared
clearing ir...?
result_3(uint256) := TMP_48(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_3, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: result, Num: 3
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_4, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 4
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_4, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 4
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_45 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
ERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
A: u B: *
lnorm: 10 rnorm: *
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 2
Den: 4
Address: u
Norm: *
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
A: * B: u
lnorm: 10 rnorm: u
Source address: u
A: * B: u
lnorm: 10 rnorm: u
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
result_3(uint256) := TMP_48(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_52 = CONVERT token_1 to IERC20Metadata
[i] TMP_52 cleared
clearing ir...?
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
[i] TMP_55 cleared
clearing ir...?
result_1(uint256) := TMP_55(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: result, Num: 1
Globalname: result, contract_name: TwapOracle
End popogation
TMP_52 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
ERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
A: u B: *
lnorm: u rnorm: *
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
A: * B: u
lnorm: * rnorm: u
A: * B: u
lnorm: * rnorm: u
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_1(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_10 cleared
clearing ir...?
REF_11(uint224) -> REF_10._x
[i] REF_11 cleared
clearing ir...?
TMP_26(bool) = REF_11 != 0
[i] TMP_26 cleared
clearing ir...?
CONDITION TMP_26
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
End popogation
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: price1Average Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_11(uint224) -> REF_10._x
MEMBER
OUT KEY: consult_REF_10__x
OUT KEY: consult_REF__x
FTT: None
No field found
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_10, Field: _x
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: _x Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: _x Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(uint256) := i_2(uint256)
[i] TMP_49 cleared
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_3, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: i, Num: 3
Globalname: i, contract_name: TwapOracle
End popogation
TMP_49(uint256) := i_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_3(uint256) = i_2 (c)+ 1
Source address: u
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_2, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumUSD, Num: 2
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_27(bool) = sumNative_2 != 0
[i] TMP_27 cleared
clearing ir...?
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_12(address) -> pairData_1.token1
[i] REF_12 cleared
clearing ir...?
REF_13(address) -> _aggregators_1[REF_12]
[i] REF_13 cleared
clearing ir...?
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i] TMP_29 cleared
clearing ir...?
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i] TUPLE_0 cleared
clearing ir...?
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i] _pairs cleared
clearing ir...?
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i] roundID cleared
clearing ir...?
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i] price cleared
clearing ir...?
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i] answeredInRound cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price, Num: 1
Globalname: price, contract_name: TwapOracle
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: answeredInRound, Num: 1
Globalname: answeredInRound, contract_name: TwapOracle
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: roundID, Num: 1
Globalname: roundID, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_2, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 2
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_2, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 2
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
REF_12(address) -> pairData_1.token1
MEMBER
OUT KEY: consult_pairData_token1
OUT KEY: consult_pairData_token1
FTT: None
No field found
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token1
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: token1 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token1 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_13(address) -> _aggregators_1[REF_12]
INDEX
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
Converting REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
UNKNOWN
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Found: None
Written func info: AggregatorV3Interface, latestRoundData
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
([2], [4], 12, "'u'", 'u', -1)
[i]Type for price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i] TMP_30 cleared
clearing ir...?
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
Propogating parameters and globals to SSA variables...
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_32(bool) = price_1 != 0
[i] TMP_32 cleared
clearing ir...?
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_34 = CONVERT price_1 to uint256
[i] TMP_34 cleared
clearing ir...?
TMP_35(uint256) = 10 (c)** 10
[i] TMP_35 cleared
clearing ir...?
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i] TMP_36 cleared
clearing ir...?
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: sumUSD, Num: 3
Globalname: sumUSD, contract_name: TwapOracle
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: 
Den: 
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_36(uint256) = TMP_34 (c)* TMP_35
A: 12 B: 10
lnorm: 12 rnorm: 10
Source address: u
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 2
Den: 4
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_37(bool) = sumNative_2 != 0
[i] TMP_37 cleared
clearing ir...?
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_39 = CONVERT token_1 to IERC20Metadata
[i] TMP_39 cleared
clearing ir...?
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_40 cleared
clearing ir...?
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
[i] _pairs cleared
clearing ir...?
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
[i] TMP_41 cleared
clearing ir...?
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i] TMP_42 cleared
clearing ir...?
result_2(uint256) := TMP_42(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_2, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: result, Num: 2
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_3, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 3
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_3, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 3
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_39 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
ERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
A: u B: *
lnorm: 10 rnorm: *
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 2
Den: 4
Address: u
Norm: *
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
A: * B: u
lnorm: 10 rnorm: u
Source address: u
A: * B: u
lnorm: 10 rnorm: u
2
4
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_2(uint256) := TMP_42(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Source address: u
Source address: u
[i]Type for TMP_56

Name: TMP_56 Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tUSDInUSDV_1(uint256) := TMP_56(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for tUSDInUSDV

Name: tUSDInUSDV Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_57(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(VADER_2)
[i] TMP_57 cleared
clearing ir...?
tUSDInVader_1(uint256) := TMP_57(uint256)
[i] tUSDInVader cleared
Propogating parameters and globals to SSA variables...
Ssa_name: VADER_2, name: VADER

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: VADER, Num: 2
Globalname: VADER, contract_name: TwapOracle
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
Ssa_name: VADER_2, name: VADER

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: tUSDInVader_1, name: tUSDInVader

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: tUSDInVader, Num: 1
Globalname: tUSDInVader, contract_name: TwapOracle
End popogation
TMP_57(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(VADER_2)
New param cache [[[-1], [-1], 18, 'VADER', [], -1, 2, 'u']]
Old param cache: [[[], [], '*', 'token', [], -1, -997]]
Param: token
[[-1], [-1], 18, 'VADER', [], -1, 2, 'u']

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
consult(address)
ENTRY_POINT
Propogating All
NEW VARIABLE pairCount = _pairs.length
Propogating All
NEW VARIABLE sumNative = 0
Propogating All
NEW VARIABLE sumUSD = 0
Propogating All
NEW VARIABLE i = 0
Propogating All
BEGIN_LOOP
Propogating All
IF_LOOP i < pairCount
Propogating All
pairCount_1
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
NEW VARIABLE pairData = _pairs[i]
Propogating All
i_2
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
END_LOOP
Propogating All
IF token == pairData.token0
Propogating All
pairData_1
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
token_1
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 2

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION require(bool,string)(sumNative != 0,TwapOracle::consult: Sum of native is zero)
Propogating All
sumNative_1
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
END_IF
Propogating All
EXPRESSION require(bool,string)(sumNative != 0,TwapOracle::consult: Sum of native is zero)
Propogating All
sumNative_3
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION sumNative += pairData.price1Average.mul(1).decode144()
Propogating All
sumNative_1
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
pairData_1
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
EXPRESSION result = ((sumUSD * IERC20Metadata(token).decimals()) / sumNative)
Propogating All
sumNative_3
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumUSD_4
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
token_1
Ssa_name: token_1, name: token

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION result = ((sumUSD * IERC20Metadata(token).decimals()) / sumNative)
Propogating All
sumUSD_1
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumNative_1
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
token_1
Ssa_name: token_1, name: token

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Copied ftype
IF pairData.price1Average._x != 0
Propogating All
pairData_1
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
EXPRESSION i ++
Propogating All
i_2
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
IF_LOOP i < pairCount
EXPRESSION sumUSD += result
Propogating All
sumUSD_1
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
result_1
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
END_IF
Propogating All
EXPRESSION require(bool)(sumNative != 0)
Propogating All
sumNative_2
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
END_IF
NEW VARIABLE roundID
Propogating All
NEW VARIABLE price
Propogating All
NEW VARIABLE answeredInRound
Propogating All
EXPRESSION (roundID,price,answeredInRound) = AggregatorV3Interface(_aggregators[pairData.token1]).latestRoundData()
Propogating All
pairData_1
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
EXPRESSION require(bool,string)(answeredInRound >= roundID,TwapOracle::consult: stale chainlink price)
Propogating All
answeredInRound_1
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
roundID_1
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION require(bool,string)(price != 0,TwapOracle::consult: chainlink malfunction)
Propogating All
price_1
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
EXPRESSION sumUSD += uint256(price) * (10 ** 10)
Propogating All
price_1
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
sumUSD_1
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
EXPRESSION require(bool,string)(sumNative != 0,TwapOracle::consult: Sum of native is zero)
Propogating All
sumNative_2
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
EXPRESSION result = ((sumUSD * IERC20Metadata(token).decimals()) / sumNative)
Propogating All
sumUSD_3
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
sumNative_2
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
token_1
Ssa_name: token_1, name: token

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Copied ftype
END_IF
clearing ir...?
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
[i] token cleared
clearing ir...?
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: token_1, name: token

Name: token_1 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 1
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 1
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
Phi
[i]Type for token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_4 -> LENGTH _pairs_1
clearing ir...?
pairCount_1(uint256) := REF_4(uint256)
[i] pairCount cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
End popogation
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: REF_4 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairCount_1(uint256) := REF_4(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_1(uint256) := 0(uint256)
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumNative, Num: 1
Globalname: sumNative, contract_name: TwapOracle
End popogation
sumNative_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_1(uint256) := 0(uint256)
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumUSD, Num: 1
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
i_1(uint256) := 0(uint256)
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_1, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: i, Num: 1
Globalname: i, contract_name: TwapOracle
End popogation
i_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
i_2(uint256) := ϕ(['i_3', 'i_1'])
[i] i cleared
clearing ir...?
TMP_22(bool) = i_2 < pairCount_1
[i] TMP_22 cleared
clearing ir...?
CONDITION TMP_22
Propogating parameters and globals to SSA variables...
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
End popogation
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
i_2(uint256) := ϕ(['i_3', 'i_1'])
Phi

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(bool) = i_2 < pairCount_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i] REF_5 cleared
clearing ir...?
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
[i] pairData cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
End popogation
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
INDEX
[i]Type for REF_5

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
asgn
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_6(address) -> pairData_1.token0
[i] REF_6 cleared
clearing ir...?
TMP_23(bool) = token_1 == REF_6
[i] TMP_23 cleared
clearing ir...?
CONDITION TMP_23
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
End popogation
REF_6(address) -> pairData_1.token0
MEMBER
OUT KEY: consult_pairData_token0
OUT KEY: consult_pairData_token0
FTT: None
No field found
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token0
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: token0 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token0 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(bool) = sumNative_1 != 0
[i] TMP_50 cleared
clearing ir...?
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i] sumNative cleared
clearing ir...?
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: sumUSD, Num: 4
Globalname: sumUSD, contract_name: TwapOracle
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
Phi

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
Phi

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_43(bool) = sumNative_3 != 0
[i] TMP_43 cleared
clearing ir...?
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
End popogation
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_7 cleared
clearing ir...?
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i] TMP_24 cleared
clearing ir...?
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i] TMP_25 cleared
clearing ir...?
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumNative, Num: 2
Globalname: sumNative, contract_name: TwapOracle
End popogation
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
Found: None
Written func info: FixedPoint, decode144
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
([-1], [-1, -1], 0, "'u'", 'u', -1)
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
Source address: u
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_45 = CONVERT token_1 to IERC20Metadata
[i] TMP_45 cleared
clearing ir...?
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_46 cleared
clearing ir...?
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
[i] TMP_47 cleared
clearing ir...?
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
[i] TMP_48 cleared
clearing ir...?
result_3(uint256) := TMP_48(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_3, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: result, Num: 3
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_4, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 4
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_4, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 4
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_45 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
ERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
A: u B: *
lnorm: 10 rnorm: *
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 2
Den: 4
Address: u
Norm: *
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
A: * B: u
lnorm: 10 rnorm: u
Source address: u
A: * B: u
lnorm: 10 rnorm: u
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
result_3(uint256) := TMP_48(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_52 = CONVERT token_1 to IERC20Metadata
[i] TMP_52 cleared
clearing ir...?
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
[i] TMP_55 cleared
clearing ir...?
result_1(uint256) := TMP_55(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: result, Num: 1
Globalname: result, contract_name: TwapOracle
End popogation
TMP_52 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
ERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
A: u B: *
lnorm: u rnorm: *
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
A: * B: u
lnorm: * rnorm: u
A: * B: u
lnorm: * rnorm: u
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_1(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_10 cleared
clearing ir...?
REF_11(uint224) -> REF_10._x
[i] REF_11 cleared
clearing ir...?
TMP_26(bool) = REF_11 != 0
[i] TMP_26 cleared
clearing ir...?
CONDITION TMP_26
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
End popogation
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: price1Average Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_11(uint224) -> REF_10._x
MEMBER
OUT KEY: consult_REF_10__x
OUT KEY: consult_REF__x
FTT: None
No field found
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_10, Field: _x
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: _x Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: _x Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(uint256) := i_2(uint256)
[i] TMP_49 cleared
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_3, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: i, Num: 3
Globalname: i, contract_name: TwapOracle
End popogation
TMP_49(uint256) := i_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_3(uint256) = i_2 (c)+ 1
Source address: u
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_2, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumUSD, Num: 2
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_27(bool) = sumNative_2 != 0
[i] TMP_27 cleared
clearing ir...?
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_12(address) -> pairData_1.token1
[i] REF_12 cleared
clearing ir...?
REF_13(address) -> _aggregators_1[REF_12]
[i] REF_13 cleared
clearing ir...?
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i] TMP_29 cleared
clearing ir...?
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i] TUPLE_0 cleared
clearing ir...?
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i] _pairs cleared
clearing ir...?
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i] roundID cleared
clearing ir...?
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i] price cleared
clearing ir...?
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i] answeredInRound cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price, Num: 1
Globalname: price, contract_name: TwapOracle
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: answeredInRound, Num: 1
Globalname: answeredInRound, contract_name: TwapOracle
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: roundID, Num: 1
Globalname: roundID, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_2, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 2
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_2, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 2
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
REF_12(address) -> pairData_1.token1
MEMBER
OUT KEY: consult_pairData_token1
OUT KEY: consult_pairData_token1
FTT: None
No field found
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token1
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: token1 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token1 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_13(address) -> _aggregators_1[REF_12]
INDEX
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
Converting REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
UNKNOWN
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Found: None
Written func info: AggregatorV3Interface, latestRoundData
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
([2], [4], 12, "'u'", 'u', -1)
[i]Type for price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i] TMP_30 cleared
clearing ir...?
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
Propogating parameters and globals to SSA variables...
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_32(bool) = price_1 != 0
[i] TMP_32 cleared
clearing ir...?
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_34 = CONVERT price_1 to uint256
[i] TMP_34 cleared
clearing ir...?
TMP_35(uint256) = 10 (c)** 10
[i] TMP_35 cleared
clearing ir...?
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i] TMP_36 cleared
clearing ir...?
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: sumUSD, Num: 3
Globalname: sumUSD, contract_name: TwapOracle
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: 
Den: 
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_36(uint256) = TMP_34 (c)* TMP_35
A: 12 B: 10
lnorm: 12 rnorm: 10
Source address: u
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 2
Den: 4
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_37(bool) = sumNative_2 != 0
[i] TMP_37 cleared
clearing ir...?
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_39 = CONVERT token_1 to IERC20Metadata
[i] TMP_39 cleared
clearing ir...?
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_40 cleared
clearing ir...?
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
[i] _pairs cleared
clearing ir...?
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
[i] TMP_41 cleared
clearing ir...?
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i] TMP_42 cleared
clearing ir...?
result_2(uint256) := TMP_42(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_2, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: result, Num: 2
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_3, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 3
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_3, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 3
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_39 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
ERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
A: u B: *
lnorm: 10 rnorm: *
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 2
Den: 4
Address: u
Norm: *
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
A: * B: u
lnorm: 10 rnorm: u
Source address: u
A: * B: u
lnorm: 10 rnorm: u
2
4
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_2(uint256) := TMP_42(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
[i] token cleared
clearing ir...?
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 1
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 1
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
Phi
[i]Type for token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_4 -> LENGTH _pairs_1
clearing ir...?
pairCount_1(uint256) := REF_4(uint256)
[i] pairCount cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
End popogation
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: REF_4 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairCount_1(uint256) := REF_4(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_1(uint256) := 0(uint256)
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumNative, Num: 1
Globalname: sumNative, contract_name: TwapOracle
End popogation
sumNative_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_1(uint256) := 0(uint256)
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumUSD, Num: 1
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
i_1(uint256) := 0(uint256)
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_1, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: i, Num: 1
Globalname: i, contract_name: TwapOracle
End popogation
i_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
i_2(uint256) := ϕ(['i_3', 'i_1'])
[i] i cleared
clearing ir...?
TMP_22(bool) = i_2 < pairCount_1
[i] TMP_22 cleared
clearing ir...?
CONDITION TMP_22
Propogating parameters and globals to SSA variables...
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
End popogation
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
i_2(uint256) := ϕ(['i_3', 'i_1'])
Phi

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(bool) = i_2 < pairCount_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i] REF_5 cleared
clearing ir...?
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
[i] pairData cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
End popogation
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
INDEX
[i]Type for REF_5

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
asgn
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_6(address) -> pairData_1.token0
[i] REF_6 cleared
clearing ir...?
TMP_23(bool) = token_1 == REF_6
[i] TMP_23 cleared
clearing ir...?
CONDITION TMP_23
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
End popogation
REF_6(address) -> pairData_1.token0
MEMBER
OUT KEY: consult_pairData_token0
OUT KEY: consult_pairData_token0
FTT: None
No field found
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token0
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: token0 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token0 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(bool) = sumNative_1 != 0
[i] TMP_50 cleared
clearing ir...?
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i] sumNative cleared
clearing ir...?
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: sumUSD, Num: 4
Globalname: sumUSD, contract_name: TwapOracle
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
Phi

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
Phi

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_43(bool) = sumNative_3 != 0
[i] TMP_43 cleared
clearing ir...?
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
End popogation
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_7 cleared
clearing ir...?
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i] TMP_24 cleared
clearing ir...?
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i] TMP_25 cleared
clearing ir...?
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumNative, Num: 2
Globalname: sumNative, contract_name: TwapOracle
End popogation
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
Found: None
Written func info: FixedPoint, decode144
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
([-1], [-1, -1], 0, "'u'", 'u', -1)
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
Source address: u
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_45 = CONVERT token_1 to IERC20Metadata
[i] TMP_45 cleared
clearing ir...?
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_46 cleared
clearing ir...?
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
[i] TMP_47 cleared
clearing ir...?
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
[i] TMP_48 cleared
clearing ir...?
result_3(uint256) := TMP_48(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_3, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: result, Num: 3
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_4, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 4
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_4, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 4
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_45 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
ERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
A: u B: *
lnorm: 10 rnorm: *
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 2
Den: 4
Address: u
Norm: *
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
A: * B: u
lnorm: 10 rnorm: u
Source address: u
A: * B: u
lnorm: 10 rnorm: u
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
result_3(uint256) := TMP_48(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_52 = CONVERT token_1 to IERC20Metadata
[i] TMP_52 cleared
clearing ir...?
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
[i] TMP_55 cleared
clearing ir...?
result_1(uint256) := TMP_55(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: result, Num: 1
Globalname: result, contract_name: TwapOracle
End popogation
TMP_52 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
ERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
A: u B: *
lnorm: u rnorm: *
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
A: * B: u
lnorm: * rnorm: u
A: * B: u
lnorm: * rnorm: u
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_1(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_10 cleared
clearing ir...?
REF_11(uint224) -> REF_10._x
[i] REF_11 cleared
clearing ir...?
TMP_26(bool) = REF_11 != 0
[i] TMP_26 cleared
clearing ir...?
CONDITION TMP_26
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
End popogation
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: price1Average Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_11(uint224) -> REF_10._x
MEMBER
OUT KEY: consult_REF_10__x
OUT KEY: consult_REF__x
FTT: None
No field found
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_10, Field: _x
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: _x Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: _x Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(uint256) := i_2(uint256)
[i] TMP_49 cleared
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_3, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: i, Num: 3
Globalname: i, contract_name: TwapOracle
End popogation
TMP_49(uint256) := i_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_3(uint256) = i_2 (c)+ 1
Source address: u
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_2, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumUSD, Num: 2
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_27(bool) = sumNative_2 != 0
[i] TMP_27 cleared
clearing ir...?
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_12(address) -> pairData_1.token1
[i] REF_12 cleared
clearing ir...?
REF_13(address) -> _aggregators_1[REF_12]
[i] REF_13 cleared
clearing ir...?
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i] TMP_29 cleared
clearing ir...?
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i] TUPLE_0 cleared
clearing ir...?
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i] _pairs cleared
clearing ir...?
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i] roundID cleared
clearing ir...?
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i] price cleared
clearing ir...?
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i] answeredInRound cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price, Num: 1
Globalname: price, contract_name: TwapOracle
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: answeredInRound, Num: 1
Globalname: answeredInRound, contract_name: TwapOracle
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: roundID, Num: 1
Globalname: roundID, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_2, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 2
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_2, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 2
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
REF_12(address) -> pairData_1.token1
MEMBER
OUT KEY: consult_pairData_token1
OUT KEY: consult_pairData_token1
FTT: None
No field found
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token1
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: token1 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token1 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_13(address) -> _aggregators_1[REF_12]
INDEX
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
Converting REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
UNKNOWN
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Found: None
Written func info: AggregatorV3Interface, latestRoundData
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
([2], [4], 12, "'u'", 'u', -1)
[i]Type for price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i] TMP_30 cleared
clearing ir...?
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
Propogating parameters and globals to SSA variables...
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_32(bool) = price_1 != 0
[i] TMP_32 cleared
clearing ir...?
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_34 = CONVERT price_1 to uint256
[i] TMP_34 cleared
clearing ir...?
TMP_35(uint256) = 10 (c)** 10
[i] TMP_35 cleared
clearing ir...?
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i] TMP_36 cleared
clearing ir...?
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: sumUSD, Num: 3
Globalname: sumUSD, contract_name: TwapOracle
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: 
Den: 
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_36(uint256) = TMP_34 (c)* TMP_35
A: 12 B: 10
lnorm: 12 rnorm: 10
Source address: u
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 2
Den: 4
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_37(bool) = sumNative_2 != 0
[i] TMP_37 cleared
clearing ir...?
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_39 = CONVERT token_1 to IERC20Metadata
[i] TMP_39 cleared
clearing ir...?
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_40 cleared
clearing ir...?
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
[i] _pairs cleared
clearing ir...?
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
[i] TMP_41 cleared
clearing ir...?
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i] TMP_42 cleared
clearing ir...?
result_2(uint256) := TMP_42(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_2, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: result, Num: 2
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_3, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 3
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_3, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 3
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_39 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
ERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
A: u B: *
lnorm: 10 rnorm: *
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 2
Den: 4
Address: u
Norm: *
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
A: * B: u
lnorm: 10 rnorm: u
Source address: u
A: * B: u
lnorm: 10 rnorm: u
2
4
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_2(uint256) := TMP_42(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Source address: u
Source address: u
[i]Type for TMP_57

Name: TMP_57 Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tUSDInVader_1(uint256) := TMP_57(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for tUSDInVader

Name: tUSDInVader Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_58(uint256) = tUSDInUSDV_1 (c)/ tUSDInVader_1
[i] TMP_58 cleared
clearing ir...?
result_1(uint256) := TMP_58(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: tUSDInUSDV_1, name: tUSDInUSDV

Name: tUSDInUSDV Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: tUSDInUSDV, Num: 1
Globalname: tUSDInUSDV, contract_name: TwapOracle
Ssa_name: tUSDInVader_1, name: tUSDInVader

Name: tUSDInVader Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: tUSDInVader, Num: 1
Globalname: tUSDInVader, contract_name: TwapOracle
Ssa_name: tUSDInUSDV_1, name: tUSDInUSDV

Name: tUSDInUSDV Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: tUSDInUSDV, Num: 1
Globalname: tUSDInUSDV, contract_name: TwapOracle
Ssa_name: tUSDInVader_1, name: tUSDInVader

Name: tUSDInVader Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: tUSDInVader, Num: 1
Globalname: tUSDInVader, contract_name: TwapOracle
Ssa_name: result_1, name: result

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: result, Num: 1
Globalname: result, contract_name: TwapOracle
End popogation
TMP_58(uint256) = tUSDInUSDV_1 (c)/ tUSDInVader_1
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_58

Name: TMP_58 Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
result_1(uint256) := TMP_58(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


VADER_1(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
USDV_1(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
TMP_56(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(USDV_1)
tUSDInUSDV_1(uint256) := TMP_56(uint256)
TMP_57(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(VADER_2)
tUSDInVader_1(uint256) := TMP_57(uint256)
TMP_58(uint256) = tUSDInUSDV_1 (c)/ tUSDInVader_1
result_1(uint256) := TMP_58(uint256)


clearing ir...?
VADER_1(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
[i] VADER cleared
clearing ir...?
USDV_1(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
[i] USDV cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: VADER_1, name: VADER

Name: VADER Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: VADER
Value: u
Fields: 
Finance Type: undef
Name: VADER, Num: 1
Globalname: VADER, contract_name: TwapOracle
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
Ssa_name: USDV_1, name: USDV

Name: USDV Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: USDV
Value: u
Fields: 
Finance Type: undef
Name: USDV, Num: 1
Globalname: USDV, contract_name: TwapOracle
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
VADER_1(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
Phi
[i]Type for VADER

Name: VADER Function: getRate
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
XXXX
USDV_1(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
Phi
[i]Type for USDV

Name: USDV Function: getRate
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_56(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(USDV_1)
[i] TMP_56 cleared
clearing ir...?
tUSDInUSDV_1(uint256) := TMP_56(uint256)
[i] tUSDInUSDV cleared
Propogating parameters and globals to SSA variables...
Ssa_name: USDV_1, name: USDV

Name: USDV Function: getRate
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: USDV_1, name: USDV

Name: USDV Function: getRate
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: tUSDInUSDV_1, name: tUSDInUSDV

Name: tUSDInUSDV Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: tUSDInUSDV, Num: 1
Globalname: tUSDInUSDV, contract_name: TwapOracle
End popogation
TMP_56(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(USDV_1)
New param cache [[[-1], [-1], 6, 'USDV', [], -1, 4, 'u']]
Old param cache: [[[], [], '*', 'token', [], -1, -997]]
Param: token
[[-1], [-1], 6, 'USDV', [], -1, 4, 'u']

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
consult(address)
ENTRY_POINT
Propogating All
NEW VARIABLE pairCount = _pairs.length
Propogating All
NEW VARIABLE sumNative = 0
Propogating All
NEW VARIABLE sumUSD = 0
Propogating All
NEW VARIABLE i = 0
Propogating All
BEGIN_LOOP
Propogating All
IF_LOOP i < pairCount
Propogating All
pairCount_1
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
NEW VARIABLE pairData = _pairs[i]
Propogating All
i_2
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
END_LOOP
Propogating All
IF token == pairData.token0
Propogating All
pairData_1
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
token_1
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 4

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION require(bool,string)(sumNative != 0,TwapOracle::consult: Sum of native is zero)
Propogating All
sumNative_1
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
END_IF
Propogating All
EXPRESSION require(bool,string)(sumNative != 0,TwapOracle::consult: Sum of native is zero)
Propogating All
sumNative_3
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION sumNative += pairData.price1Average.mul(1).decode144()
Propogating All
sumNative_1
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
pairData_1
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
EXPRESSION result = ((sumUSD * IERC20Metadata(token).decimals()) / sumNative)
Propogating All
sumNative_3
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumUSD_4
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
token_1
Ssa_name: token_1, name: token

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION result = ((sumUSD * IERC20Metadata(token).decimals()) / sumNative)
Propogating All
sumUSD_1
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumNative_1
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
token_1
Ssa_name: token_1, name: token

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Copied ftype
IF pairData.price1Average._x != 0
Propogating All
pairData_1
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
EXPRESSION i ++
Propogating All
i_2
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
IF_LOOP i < pairCount
EXPRESSION sumUSD += result
Propogating All
sumUSD_1
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
result_1
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
END_IF
Propogating All
EXPRESSION require(bool)(sumNative != 0)
Propogating All
sumNative_2
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
END_IF
NEW VARIABLE roundID
Propogating All
NEW VARIABLE price
Propogating All
NEW VARIABLE answeredInRound
Propogating All
EXPRESSION (roundID,price,answeredInRound) = AggregatorV3Interface(_aggregators[pairData.token1]).latestRoundData()
Propogating All
pairData_1
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
EXPRESSION require(bool,string)(answeredInRound >= roundID,TwapOracle::consult: stale chainlink price)
Propogating All
answeredInRound_1
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
roundID_1
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION require(bool,string)(price != 0,TwapOracle::consult: chainlink malfunction)
Propogating All
price_1
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
EXPRESSION sumUSD += uint256(price) * (10 ** 10)
Propogating All
price_1
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
sumUSD_1
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
EXPRESSION require(bool,string)(sumNative != 0,TwapOracle::consult: Sum of native is zero)
Propogating All
sumNative_2
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
EXPRESSION result = ((sumUSD * IERC20Metadata(token).decimals()) / sumNative)
Propogating All
sumUSD_3
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
sumNative_2
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
token_1
Ssa_name: token_1, name: token

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Copied ftype
END_IF
clearing ir...?
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
[i] token cleared
clearing ir...?
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: token_1, name: token

Name: token_1 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 1
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 1
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
Phi
[i]Type for token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_4 -> LENGTH _pairs_1
clearing ir...?
pairCount_1(uint256) := REF_4(uint256)
[i] pairCount cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
End popogation
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: REF_4 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairCount_1(uint256) := REF_4(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_1(uint256) := 0(uint256)
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumNative, Num: 1
Globalname: sumNative, contract_name: TwapOracle
End popogation
sumNative_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_1(uint256) := 0(uint256)
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumUSD, Num: 1
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
i_1(uint256) := 0(uint256)
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_1, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: i, Num: 1
Globalname: i, contract_name: TwapOracle
End popogation
i_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
i_2(uint256) := ϕ(['i_3', 'i_1'])
[i] i cleared
clearing ir...?
TMP_22(bool) = i_2 < pairCount_1
[i] TMP_22 cleared
clearing ir...?
CONDITION TMP_22
Propogating parameters and globals to SSA variables...
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
End popogation
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
i_2(uint256) := ϕ(['i_3', 'i_1'])
Phi

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(bool) = i_2 < pairCount_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i] REF_5 cleared
clearing ir...?
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
[i] pairData cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
End popogation
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
INDEX
[i]Type for REF_5

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
asgn
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_6(address) -> pairData_1.token0
[i] REF_6 cleared
clearing ir...?
TMP_23(bool) = token_1 == REF_6
[i] TMP_23 cleared
clearing ir...?
CONDITION TMP_23
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
End popogation
REF_6(address) -> pairData_1.token0
MEMBER
OUT KEY: consult_pairData_token0
OUT KEY: consult_pairData_token0
FTT: None
No field found
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token0
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: token0 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token0 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(bool) = sumNative_1 != 0
[i] TMP_50 cleared
clearing ir...?
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i] sumNative cleared
clearing ir...?
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: sumUSD, Num: 4
Globalname: sumUSD, contract_name: TwapOracle
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
Phi

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
Phi

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_43(bool) = sumNative_3 != 0
[i] TMP_43 cleared
clearing ir...?
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
End popogation
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_7 cleared
clearing ir...?
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i] TMP_24 cleared
clearing ir...?
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i] TMP_25 cleared
clearing ir...?
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumNative, Num: 2
Globalname: sumNative, contract_name: TwapOracle
End popogation
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
Found: None
Written func info: FixedPoint, decode144
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
([-1], [-1, -1], 0, "'u'", 'u', -1)
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
Source address: u
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_45 = CONVERT token_1 to IERC20Metadata
[i] TMP_45 cleared
clearing ir...?
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_46 cleared
clearing ir...?
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
[i] TMP_47 cleared
clearing ir...?
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
[i] TMP_48 cleared
clearing ir...?
result_3(uint256) := TMP_48(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_3, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: result, Num: 3
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_4, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 4
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_4, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 4
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_45 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
ERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
A: u B: *
lnorm: 10 rnorm: *
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 2
Den: 4
Address: u
Norm: *
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
A: * B: u
lnorm: 10 rnorm: u
Source address: u
A: * B: u
lnorm: 10 rnorm: u
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
result_3(uint256) := TMP_48(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_52 = CONVERT token_1 to IERC20Metadata
[i] TMP_52 cleared
clearing ir...?
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
[i] TMP_55 cleared
clearing ir...?
result_1(uint256) := TMP_55(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: result, Num: 1
Globalname: result, contract_name: TwapOracle
End popogation
TMP_52 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
ERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
A: u B: *
lnorm: u rnorm: *
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
A: * B: u
lnorm: * rnorm: u
A: * B: u
lnorm: * rnorm: u
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_1(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_10 cleared
clearing ir...?
REF_11(uint224) -> REF_10._x
[i] REF_11 cleared
clearing ir...?
TMP_26(bool) = REF_11 != 0
[i] TMP_26 cleared
clearing ir...?
CONDITION TMP_26
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
End popogation
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: price1Average Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_11(uint224) -> REF_10._x
MEMBER
OUT KEY: consult_REF_10__x
OUT KEY: consult_REF__x
FTT: None
No field found
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_10, Field: _x
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: _x Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: _x Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(uint256) := i_2(uint256)
[i] TMP_49 cleared
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_3, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: i, Num: 3
Globalname: i, contract_name: TwapOracle
End popogation
TMP_49(uint256) := i_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_3(uint256) = i_2 (c)+ 1
Source address: u
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_2, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumUSD, Num: 2
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_27(bool) = sumNative_2 != 0
[i] TMP_27 cleared
clearing ir...?
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_12(address) -> pairData_1.token1
[i] REF_12 cleared
clearing ir...?
REF_13(address) -> _aggregators_1[REF_12]
[i] REF_13 cleared
clearing ir...?
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i] TMP_29 cleared
clearing ir...?
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i] TUPLE_0 cleared
clearing ir...?
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i] _pairs cleared
clearing ir...?
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i] roundID cleared
clearing ir...?
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i] price cleared
clearing ir...?
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i] answeredInRound cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price, Num: 1
Globalname: price, contract_name: TwapOracle
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: answeredInRound, Num: 1
Globalname: answeredInRound, contract_name: TwapOracle
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: roundID, Num: 1
Globalname: roundID, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_2, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 2
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_2, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 2
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
REF_12(address) -> pairData_1.token1
MEMBER
OUT KEY: consult_pairData_token1
OUT KEY: consult_pairData_token1
FTT: None
No field found
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token1
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: token1 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token1 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_13(address) -> _aggregators_1[REF_12]
INDEX
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
Converting REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
UNKNOWN
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Found: None
Written func info: AggregatorV3Interface, latestRoundData
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
([2], [4], 12, "'u'", 'u', -1)
[i]Type for price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i] TMP_30 cleared
clearing ir...?
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
Propogating parameters and globals to SSA variables...
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_32(bool) = price_1 != 0
[i] TMP_32 cleared
clearing ir...?
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_34 = CONVERT price_1 to uint256
[i] TMP_34 cleared
clearing ir...?
TMP_35(uint256) = 10 (c)** 10
[i] TMP_35 cleared
clearing ir...?
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i] TMP_36 cleared
clearing ir...?
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: sumUSD, Num: 3
Globalname: sumUSD, contract_name: TwapOracle
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: 
Den: 
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_36(uint256) = TMP_34 (c)* TMP_35
A: 12 B: 10
lnorm: 12 rnorm: 10
Source address: u
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 2
Den: 4
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_37(bool) = sumNative_2 != 0
[i] TMP_37 cleared
clearing ir...?
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_39 = CONVERT token_1 to IERC20Metadata
[i] TMP_39 cleared
clearing ir...?
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_40 cleared
clearing ir...?
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
[i] _pairs cleared
clearing ir...?
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
[i] TMP_41 cleared
clearing ir...?
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i] TMP_42 cleared
clearing ir...?
result_2(uint256) := TMP_42(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_2, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: result, Num: 2
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_3, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 3
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_3, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 3
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_39 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
ERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
A: u B: *
lnorm: 10 rnorm: *
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 2
Den: 4
Address: u
Norm: *
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
A: * B: u
lnorm: 10 rnorm: u
Source address: u
A: * B: u
lnorm: 10 rnorm: u
2
4
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_2(uint256) := TMP_42(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
[i] token cleared
clearing ir...?
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 1
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 1
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
Phi
[i]Type for token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_4 -> LENGTH _pairs_1
clearing ir...?
pairCount_1(uint256) := REF_4(uint256)
[i] pairCount cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
End popogation
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: REF_4 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairCount_1(uint256) := REF_4(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_1(uint256) := 0(uint256)
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumNative, Num: 1
Globalname: sumNative, contract_name: TwapOracle
End popogation
sumNative_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_1(uint256) := 0(uint256)
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumUSD, Num: 1
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
i_1(uint256) := 0(uint256)
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_1, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: i, Num: 1
Globalname: i, contract_name: TwapOracle
End popogation
i_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
i_2(uint256) := ϕ(['i_3', 'i_1'])
[i] i cleared
clearing ir...?
TMP_22(bool) = i_2 < pairCount_1
[i] TMP_22 cleared
clearing ir...?
CONDITION TMP_22
Propogating parameters and globals to SSA variables...
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
End popogation
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
i_2(uint256) := ϕ(['i_3', 'i_1'])
Phi

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(bool) = i_2 < pairCount_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i] REF_5 cleared
clearing ir...?
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
[i] pairData cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
End popogation
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
INDEX
[i]Type for REF_5

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
asgn
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_6(address) -> pairData_1.token0
[i] REF_6 cleared
clearing ir...?
TMP_23(bool) = token_1 == REF_6
[i] TMP_23 cleared
clearing ir...?
CONDITION TMP_23
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
End popogation
REF_6(address) -> pairData_1.token0
MEMBER
OUT KEY: consult_pairData_token0
OUT KEY: consult_pairData_token0
FTT: None
No field found
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token0
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: token0 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token0 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(bool) = sumNative_1 != 0
[i] TMP_50 cleared
clearing ir...?
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i] sumNative cleared
clearing ir...?
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: sumUSD, Num: 4
Globalname: sumUSD, contract_name: TwapOracle
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
Phi

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
Phi

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_43(bool) = sumNative_3 != 0
[i] TMP_43 cleared
clearing ir...?
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
End popogation
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_7 cleared
clearing ir...?
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i] TMP_24 cleared
clearing ir...?
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i] TMP_25 cleared
clearing ir...?
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumNative, Num: 2
Globalname: sumNative, contract_name: TwapOracle
End popogation
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
Found: None
Written func info: FixedPoint, decode144
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
([-1], [-1, -1], 0, "'u'", 'u', -1)
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
Source address: u
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_45 = CONVERT token_1 to IERC20Metadata
[i] TMP_45 cleared
clearing ir...?
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_46 cleared
clearing ir...?
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
[i] TMP_47 cleared
clearing ir...?
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
[i] TMP_48 cleared
clearing ir...?
result_3(uint256) := TMP_48(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_3, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: result, Num: 3
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_4, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 4
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_4, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 4
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_45 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
ERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
A: u B: *
lnorm: 10 rnorm: *
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 2
Den: 4
Address: u
Norm: *
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
A: * B: u
lnorm: 10 rnorm: u
Source address: u
A: * B: u
lnorm: 10 rnorm: u
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
result_3(uint256) := TMP_48(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_52 = CONVERT token_1 to IERC20Metadata
[i] TMP_52 cleared
clearing ir...?
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
[i] TMP_55 cleared
clearing ir...?
result_1(uint256) := TMP_55(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: result, Num: 1
Globalname: result, contract_name: TwapOracle
End popogation
TMP_52 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
ERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
A: u B: *
lnorm: u rnorm: *
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
A: * B: u
lnorm: * rnorm: u
A: * B: u
lnorm: * rnorm: u
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_1(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_10 cleared
clearing ir...?
REF_11(uint224) -> REF_10._x
[i] REF_11 cleared
clearing ir...?
TMP_26(bool) = REF_11 != 0
[i] TMP_26 cleared
clearing ir...?
CONDITION TMP_26
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
End popogation
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: price1Average Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_11(uint224) -> REF_10._x
MEMBER
OUT KEY: consult_REF_10__x
OUT KEY: consult_REF__x
FTT: None
No field found
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_10, Field: _x
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: _x Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: _x Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(uint256) := i_2(uint256)
[i] TMP_49 cleared
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_3, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: i, Num: 3
Globalname: i, contract_name: TwapOracle
End popogation
TMP_49(uint256) := i_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_3(uint256) = i_2 (c)+ 1
Source address: u
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_2, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumUSD, Num: 2
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_27(bool) = sumNative_2 != 0
[i] TMP_27 cleared
clearing ir...?
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_12(address) -> pairData_1.token1
[i] REF_12 cleared
clearing ir...?
REF_13(address) -> _aggregators_1[REF_12]
[i] REF_13 cleared
clearing ir...?
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i] TMP_29 cleared
clearing ir...?
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i] TUPLE_0 cleared
clearing ir...?
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i] _pairs cleared
clearing ir...?
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i] roundID cleared
clearing ir...?
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i] price cleared
clearing ir...?
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i] answeredInRound cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price, Num: 1
Globalname: price, contract_name: TwapOracle
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: answeredInRound, Num: 1
Globalname: answeredInRound, contract_name: TwapOracle
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: roundID, Num: 1
Globalname: roundID, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_2, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 2
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_2, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 2
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
REF_12(address) -> pairData_1.token1
MEMBER
OUT KEY: consult_pairData_token1
OUT KEY: consult_pairData_token1
FTT: None
No field found
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token1
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: token1 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token1 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_13(address) -> _aggregators_1[REF_12]
INDEX
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
Converting REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
UNKNOWN
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Found: None
Written func info: AggregatorV3Interface, latestRoundData
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
([2], [4], 12, "'u'", 'u', -1)
[i]Type for price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i] TMP_30 cleared
clearing ir...?
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
Propogating parameters and globals to SSA variables...
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_32(bool) = price_1 != 0
[i] TMP_32 cleared
clearing ir...?
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_34 = CONVERT price_1 to uint256
[i] TMP_34 cleared
clearing ir...?
TMP_35(uint256) = 10 (c)** 10
[i] TMP_35 cleared
clearing ir...?
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i] TMP_36 cleared
clearing ir...?
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: sumUSD, Num: 3
Globalname: sumUSD, contract_name: TwapOracle
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: 
Den: 
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_36(uint256) = TMP_34 (c)* TMP_35
A: 12 B: 10
lnorm: 12 rnorm: 10
Source address: u
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 2
Den: 4
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_37(bool) = sumNative_2 != 0
[i] TMP_37 cleared
clearing ir...?
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_39 = CONVERT token_1 to IERC20Metadata
[i] TMP_39 cleared
clearing ir...?
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_40 cleared
clearing ir...?
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
[i] _pairs cleared
clearing ir...?
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
[i] TMP_41 cleared
clearing ir...?
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i] TMP_42 cleared
clearing ir...?
result_2(uint256) := TMP_42(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_2, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: result, Num: 2
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_3, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 3
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_3, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 3
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_39 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
ERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
A: u B: *
lnorm: 10 rnorm: *
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 2
Den: 4
Address: u
Norm: *
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
A: * B: u
lnorm: 10 rnorm: u
Source address: u
A: * B: u
lnorm: 10 rnorm: u
2
4
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_2(uint256) := TMP_42(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Source address: u
Source address: u
[i]Type for TMP_56

Name: TMP_56 Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tUSDInUSDV_1(uint256) := TMP_56(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for tUSDInUSDV

Name: tUSDInUSDV Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_57(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(VADER_2)
[i] TMP_57 cleared
clearing ir...?
tUSDInVader_1(uint256) := TMP_57(uint256)
[i] tUSDInVader cleared
Propogating parameters and globals to SSA variables...
Ssa_name: VADER_2, name: VADER

Name: VADER Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: VADER_2, name: VADER

Name: VADER Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: tUSDInVader_1, name: tUSDInVader

Name: tUSDInVader Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: tUSDInVader, Num: 1
Globalname: tUSDInVader, contract_name: TwapOracle
End popogation
TMP_57(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(VADER_2)
New param cache [[[-1], [-1], 18, 'VADER', [], -1, 2, 'u']]
Old param cache: [[[], [], '*', 'token', [], -1, -997]]
Param: token
[[-1], [-1], 18, 'VADER', [], -1, 2, 'u']

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
consult(address)
ENTRY_POINT
Propogating All
NEW VARIABLE pairCount = _pairs.length
Propogating All
NEW VARIABLE sumNative = 0
Propogating All
NEW VARIABLE sumUSD = 0
Propogating All
NEW VARIABLE i = 0
Propogating All
BEGIN_LOOP
Propogating All
IF_LOOP i < pairCount
Propogating All
pairCount_1
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
NEW VARIABLE pairData = _pairs[i]
Propogating All
i_2
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
END_LOOP
Propogating All
IF token == pairData.token0
Propogating All
pairData_1
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
token_1
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 2

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION require(bool,string)(sumNative != 0,TwapOracle::consult: Sum of native is zero)
Propogating All
sumNative_1
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
END_IF
Propogating All
EXPRESSION require(bool,string)(sumNative != 0,TwapOracle::consult: Sum of native is zero)
Propogating All
sumNative_3
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION sumNative += pairData.price1Average.mul(1).decode144()
Propogating All
sumNative_1
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
pairData_1
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
EXPRESSION result = ((sumUSD * IERC20Metadata(token).decimals()) / sumNative)
Propogating All
sumNative_3
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumUSD_4
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
token_1
Ssa_name: token_1, name: token

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION result = ((sumUSD * IERC20Metadata(token).decimals()) / sumNative)
Propogating All
sumUSD_1
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumNative_1
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
token_1
Ssa_name: token_1, name: token

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Copied ftype
IF pairData.price1Average._x != 0
Propogating All
pairData_1
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
EXPRESSION i ++
Propogating All
i_2
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
IF_LOOP i < pairCount
EXPRESSION sumUSD += result
Propogating All
sumUSD_1
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
result_1
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
END_IF
Propogating All
EXPRESSION require(bool)(sumNative != 0)
Propogating All
sumNative_2
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
END_IF
NEW VARIABLE roundID
Propogating All
NEW VARIABLE price
Propogating All
NEW VARIABLE answeredInRound
Propogating All
EXPRESSION (roundID,price,answeredInRound) = AggregatorV3Interface(_aggregators[pairData.token1]).latestRoundData()
Propogating All
pairData_1
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
EXPRESSION require(bool,string)(answeredInRound >= roundID,TwapOracle::consult: stale chainlink price)
Propogating All
answeredInRound_1
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
roundID_1
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION require(bool,string)(price != 0,TwapOracle::consult: chainlink malfunction)
Propogating All
price_1
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
EXPRESSION sumUSD += uint256(price) * (10 ** 10)
Propogating All
price_1
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
sumUSD_1
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
EXPRESSION require(bool,string)(sumNative != 0,TwapOracle::consult: Sum of native is zero)
Propogating All
sumNative_2
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
EXPRESSION result = ((sumUSD * IERC20Metadata(token).decimals()) / sumNative)
Propogating All
sumUSD_3
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
sumNative_2
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
token_1
Ssa_name: token_1, name: token

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Copied ftype
END_IF
clearing ir...?
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
[i] token cleared
clearing ir...?
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: token_1, name: token

Name: token_1 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 1
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 1
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
Phi
[i]Type for token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_4 -> LENGTH _pairs_1
clearing ir...?
pairCount_1(uint256) := REF_4(uint256)
[i] pairCount cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
End popogation
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: REF_4 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairCount_1(uint256) := REF_4(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_1(uint256) := 0(uint256)
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumNative, Num: 1
Globalname: sumNative, contract_name: TwapOracle
End popogation
sumNative_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_1(uint256) := 0(uint256)
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumUSD, Num: 1
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
i_1(uint256) := 0(uint256)
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_1, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: i, Num: 1
Globalname: i, contract_name: TwapOracle
End popogation
i_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
i_2(uint256) := ϕ(['i_3', 'i_1'])
[i] i cleared
clearing ir...?
TMP_22(bool) = i_2 < pairCount_1
[i] TMP_22 cleared
clearing ir...?
CONDITION TMP_22
Propogating parameters and globals to SSA variables...
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
End popogation
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
i_2(uint256) := ϕ(['i_3', 'i_1'])
Phi

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(bool) = i_2 < pairCount_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i] REF_5 cleared
clearing ir...?
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
[i] pairData cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
End popogation
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
INDEX
[i]Type for REF_5

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
asgn
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_6(address) -> pairData_1.token0
[i] REF_6 cleared
clearing ir...?
TMP_23(bool) = token_1 == REF_6
[i] TMP_23 cleared
clearing ir...?
CONDITION TMP_23
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
End popogation
REF_6(address) -> pairData_1.token0
MEMBER
OUT KEY: consult_pairData_token0
OUT KEY: consult_pairData_token0
FTT: None
No field found
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token0
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: token0 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token0 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(bool) = sumNative_1 != 0
[i] TMP_50 cleared
clearing ir...?
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i] sumNative cleared
clearing ir...?
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: sumUSD, Num: 4
Globalname: sumUSD, contract_name: TwapOracle
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
Phi

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
Phi

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_43(bool) = sumNative_3 != 0
[i] TMP_43 cleared
clearing ir...?
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
End popogation
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_7 cleared
clearing ir...?
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i] TMP_24 cleared
clearing ir...?
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i] TMP_25 cleared
clearing ir...?
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumNative, Num: 2
Globalname: sumNative, contract_name: TwapOracle
End popogation
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
Found: None
Written func info: FixedPoint, decode144
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
([-1], [-1, -1], 0, "'u'", 'u', -1)
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
Source address: u
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_45 = CONVERT token_1 to IERC20Metadata
[i] TMP_45 cleared
clearing ir...?
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_46 cleared
clearing ir...?
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
[i] TMP_47 cleared
clearing ir...?
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
[i] TMP_48 cleared
clearing ir...?
result_3(uint256) := TMP_48(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_3, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: result, Num: 3
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_4, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 4
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_4, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 4
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_45 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
ERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
A: u B: *
lnorm: 10 rnorm: *
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 2
Den: 4
Address: u
Norm: *
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
A: * B: u
lnorm: 10 rnorm: u
Source address: u
A: * B: u
lnorm: 10 rnorm: u
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
result_3(uint256) := TMP_48(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_52 = CONVERT token_1 to IERC20Metadata
[i] TMP_52 cleared
clearing ir...?
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
[i] TMP_55 cleared
clearing ir...?
result_1(uint256) := TMP_55(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: result, Num: 1
Globalname: result, contract_name: TwapOracle
End popogation
TMP_52 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
ERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
A: u B: *
lnorm: u rnorm: *
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
A: * B: u
lnorm: * rnorm: u
A: * B: u
lnorm: * rnorm: u
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_1(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_10 cleared
clearing ir...?
REF_11(uint224) -> REF_10._x
[i] REF_11 cleared
clearing ir...?
TMP_26(bool) = REF_11 != 0
[i] TMP_26 cleared
clearing ir...?
CONDITION TMP_26
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
End popogation
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: price1Average Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_11(uint224) -> REF_10._x
MEMBER
OUT KEY: consult_REF_10__x
OUT KEY: consult_REF__x
FTT: None
No field found
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_10, Field: _x
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: _x Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: _x Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(uint256) := i_2(uint256)
[i] TMP_49 cleared
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_3, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: i, Num: 3
Globalname: i, contract_name: TwapOracle
End popogation
TMP_49(uint256) := i_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_3(uint256) = i_2 (c)+ 1
Source address: u
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_2, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumUSD, Num: 2
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_27(bool) = sumNative_2 != 0
[i] TMP_27 cleared
clearing ir...?
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_12(address) -> pairData_1.token1
[i] REF_12 cleared
clearing ir...?
REF_13(address) -> _aggregators_1[REF_12]
[i] REF_13 cleared
clearing ir...?
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i] TMP_29 cleared
clearing ir...?
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i] TUPLE_0 cleared
clearing ir...?
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i] _pairs cleared
clearing ir...?
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i] roundID cleared
clearing ir...?
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i] price cleared
clearing ir...?
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i] answeredInRound cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price, Num: 1
Globalname: price, contract_name: TwapOracle
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: answeredInRound, Num: 1
Globalname: answeredInRound, contract_name: TwapOracle
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: roundID, Num: 1
Globalname: roundID, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_2, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 2
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_2, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 2
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
REF_12(address) -> pairData_1.token1
MEMBER
OUT KEY: consult_pairData_token1
OUT KEY: consult_pairData_token1
FTT: None
No field found
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token1
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: token1 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token1 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_13(address) -> _aggregators_1[REF_12]
INDEX
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
Converting REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
UNKNOWN
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Found: None
Written func info: AggregatorV3Interface, latestRoundData
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
([2], [4], 12, "'u'", 'u', -1)
[i]Type for price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i] TMP_30 cleared
clearing ir...?
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
Propogating parameters and globals to SSA variables...
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_32(bool) = price_1 != 0
[i] TMP_32 cleared
clearing ir...?
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_34 = CONVERT price_1 to uint256
[i] TMP_34 cleared
clearing ir...?
TMP_35(uint256) = 10 (c)** 10
[i] TMP_35 cleared
clearing ir...?
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i] TMP_36 cleared
clearing ir...?
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: sumUSD, Num: 3
Globalname: sumUSD, contract_name: TwapOracle
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: 
Den: 
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_36(uint256) = TMP_34 (c)* TMP_35
A: 12 B: 10
lnorm: 12 rnorm: 10
Source address: u
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 2
Den: 4
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_37(bool) = sumNative_2 != 0
[i] TMP_37 cleared
clearing ir...?
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_39 = CONVERT token_1 to IERC20Metadata
[i] TMP_39 cleared
clearing ir...?
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_40 cleared
clearing ir...?
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
[i] _pairs cleared
clearing ir...?
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
[i] TMP_41 cleared
clearing ir...?
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i] TMP_42 cleared
clearing ir...?
result_2(uint256) := TMP_42(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_2, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: result, Num: 2
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_3, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 3
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_3, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 3
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_39 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
ERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
A: u B: *
lnorm: 10 rnorm: *
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 2
Den: 4
Address: u
Norm: *
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
A: * B: u
lnorm: 10 rnorm: u
Source address: u
A: * B: u
lnorm: 10 rnorm: u
2
4
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_2(uint256) := TMP_42(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
[i] token cleared
clearing ir...?
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: token_1, name: token

Name: token Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2

Name: token_1 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 1
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 1
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
token_1(address) := ϕ(['VADER_4', 'VADER_2', 'USDV_1'])
Phi
[i]Type for token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_4 -> LENGTH _pairs_1
clearing ir...?
pairCount_1(uint256) := REF_4(uint256)
[i] pairCount cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
End popogation
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: REF_4 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairCount_1(uint256) := REF_4(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_1(uint256) := 0(uint256)
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumNative, Num: 1
Globalname: sumNative, contract_name: TwapOracle
End popogation
sumNative_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_1(uint256) := 0(uint256)
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumUSD, Num: 1
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
i_1(uint256) := 0(uint256)
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_1, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: i, Num: 1
Globalname: i, contract_name: TwapOracle
End popogation
i_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
i_2(uint256) := ϕ(['i_3', 'i_1'])
[i] i cleared
clearing ir...?
TMP_22(bool) = i_2 < pairCount_1
[i] TMP_22 cleared
clearing ir...?
CONDITION TMP_22
Propogating parameters and globals to SSA variables...
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
End popogation
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
i_2(uint256) := ϕ(['i_3', 'i_1'])
Phi

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(bool) = i_2 < pairCount_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i] REF_5 cleared
clearing ir...?
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
[i] pairData cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_1, name: _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
End popogation
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
INDEX
[i]Type for REF_5

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
asgn
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_6(address) -> pairData_1.token0
[i] REF_6 cleared
clearing ir...?
TMP_23(bool) = token_1 == REF_6
[i] TMP_23 cleared
clearing ir...?
CONDITION TMP_23
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
End popogation
REF_6(address) -> pairData_1.token0
MEMBER
OUT KEY: consult_pairData_token0
OUT KEY: consult_pairData_token0
FTT: None
No field found
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token0
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: token0 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token0 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(bool) = sumNative_1 != 0
[i] TMP_50 cleared
clearing ir...?
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i] sumNative cleared
clearing ir...?
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: sumUSD, Num: 4
Globalname: sumUSD, contract_name: TwapOracle
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
Phi

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
sumUSD_4(uint256) := ϕ(['sumUSD_1', 'sumUSD_3'])
Phi

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_43(bool) = sumNative_3 != 0
[i] TMP_43 cleared
clearing ir...?
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
End popogation
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_7 cleared
clearing ir...?
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i] TMP_24 cleared
clearing ir...?
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i] TMP_25 cleared
clearing ir...?
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i] sumNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumNative, Num: 2
Globalname: sumNative, contract_name: TwapOracle
End popogation
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
Found: None
Written func info: FixedPoint, decode144
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_24
hers norm: 0
([-1], [-1, -1], 0, "'u'", 'u', -1)
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
Source address: u
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_45 = CONVERT token_1 to IERC20Metadata
[i] TMP_45 cleared
clearing ir...?
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_46 cleared
clearing ir...?
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
[i] TMP_47 cleared
clearing ir...?
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
[i] TMP_48 cleared
clearing ir...?
result_3(uint256) := TMP_48(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumNative_3, name: sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: sumNative, Num: 3
Globalname: sumNative, contract_name: TwapOracle
Ssa_name: sumUSD_4, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_3, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: result, Num: 3
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_4, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 4
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_4, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 4
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_45 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
ERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_3', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_47(uint256) = sumUSD_4 (c)* TMP_46
A: u B: *
lnorm: 10 rnorm: *
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 2
Den: 4
Address: u
Norm: *
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
A: * B: u
lnorm: 10 rnorm: u
Source address: u
A: * B: u
lnorm: 10 rnorm: u
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
result_3(uint256) := TMP_48(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_52 = CONVERT token_1 to IERC20Metadata
[i] TMP_52 cleared
clearing ir...?
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
[i] TMP_55 cleared
clearing ir...?
result_1(uint256) := TMP_55(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_1, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: result, Num: 1
Globalname: result, contract_name: TwapOracle
End popogation
TMP_52 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
ERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
A: u B: *
lnorm: u rnorm: *
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
A: * B: u
lnorm: * rnorm: u
A: * B: u
lnorm: * rnorm: u
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_1(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i] REF_10 cleared
clearing ir...?
REF_11(uint224) -> REF_10._x
[i] REF_11 cleared
clearing ir...?
TMP_26(bool) = REF_11 != 0
[i] TMP_26 cleared
clearing ir...?
CONDITION TMP_26
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
End popogation
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
MEMBER
OUT KEY: consult_pairData_price1Average
OUT KEY: consult_pairData_price1Average
FTT: None
No field found
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: price1Average
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: price1Average Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_11(uint224) -> REF_10._x
MEMBER
OUT KEY: consult_REF_10__x
OUT KEY: consult_REF__x
FTT: None
No field found
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_10, Field: _x
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: _x Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: _x Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(uint256) := i_2(uint256)
[i] TMP_49 cleared
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_3, name: i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: i, Num: 3
Globalname: i, contract_name: TwapOracle
End popogation
TMP_49(uint256) := i_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_3(uint256) = i_2 (c)+ 1
Source address: u
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: result_1, name: result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_2, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: sumUSD, Num: 2
Globalname: sumUSD, contract_name: TwapOracle
End popogation
sumUSD_2(uint256) = sumUSD_1 (c)+ result_1
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_27(bool) = sumNative_2 != 0
[i] TMP_27 cleared
clearing ir...?
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_12(address) -> pairData_1.token1
[i] REF_12 cleared
clearing ir...?
REF_13(address) -> _aggregators_1[REF_12]
[i] REF_13 cleared
clearing ir...?
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i] TMP_29 cleared
clearing ir...?
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i] TUPLE_0 cleared
clearing ir...?
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i] _pairs cleared
clearing ir...?
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i] roundID cleared
clearing ir...?
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i] price cleared
clearing ir...?
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i] answeredInRound cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _aggregators_1, name: _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1, name: pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Name: pairData, Num: 1
Globalname: pairData, contract_name: TwapOracle
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price, Num: 1
Globalname: price, contract_name: TwapOracle
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: answeredInRound, Num: 1
Globalname: answeredInRound, contract_name: TwapOracle
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: roundID, Num: 1
Globalname: roundID, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_2, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 2
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_2, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 2
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
REF_12(address) -> pairData_1.token1
MEMBER
OUT KEY: consult_pairData_token1
OUT KEY: consult_pairData_token1
FTT: None
No field found
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1, Field: token1
#################
Member: 
Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
Fieldf: 
Name: token1 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token1 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_13(address) -> _aggregators_1[REF_12]
INDEX
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
Converting REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
UNKNOWN
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 1
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Found: None
Written func info: AggregatorV3Interface, latestRoundData
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
([2], [4], 12, "'u'", 'u', -1)
[i]Type for price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i] TMP_30 cleared
clearing ir...?
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
Propogating parameters and globals to SSA variables...
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: answeredInRound_1, name: answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: roundID_1, name: roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_32(bool) = price_1 != 0
[i] TMP_32 cleared
clearing ir...?
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_34 = CONVERT price_1 to uint256
[i] TMP_34 cleared
clearing ir...?
TMP_35(uint256) = 10 (c)** 10
[i] TMP_35 cleared
clearing ir...?
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i] TMP_36 cleared
clearing ir...?
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
[i] sumUSD cleared
Propogating parameters and globals to SSA variables...
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: price_1, name: price

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: sumUSD_1, name: sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Name: sumUSD, Num: 3
Globalname: sumUSD, contract_name: TwapOracle
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: 
Den: 
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_36(uint256) = TMP_34 (c)* TMP_35
A: 12 B: 10
lnorm: 12 rnorm: 10
Source address: u
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 2
Den: 4
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
sumUSD_3(uint256) = sumUSD_1 (c)+ TMP_36
Source address: u
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_37(bool) = sumNative_2 != 0
[i] TMP_37 cleared
clearing ir...?
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
Propogating parameters and globals to SSA variables...
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_39 = CONVERT token_1 to IERC20Metadata
[i] TMP_39 cleared
clearing ir...?
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i] TMP_40 cleared
clearing ir...?
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
clearing ir...?
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
[i] _pairs cleared
clearing ir...?
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
[i] TMP_41 cleared
clearing ir...?
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i] TMP_42 cleared
clearing ir...?
result_2(uint256) := TMP_42(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: sumUSD_3, name: sumUSD

Name: sumUSD Function: consult
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
Ssa_name: sumNative_2, name: sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: token_1, name: token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: result_2, name: result

Name: result Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: result, Num: 2
Globalname: result, contract_name: TwapOracle
End popogation
Ssa_name: _aggregators_3, name: _aggregators

Name: _aggregators Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 3
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _pairs_3, name: _pairs

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 3
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_39 = CONVERT token_1 to IERC20Metadata
Converting token_1

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
ERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Found: None
Written func info: IERC20Metadata, decimals
Retvar: ('t', ['-1'], ['-1'], '*', "'u'", 'u')
([-1], [-1], '*', "'u'", 'u', -1)
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_2'])
Phi
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_41(uint256) = sumUSD_3 (c)* TMP_40
A: u B: *
lnorm: 10 rnorm: *
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 2
Den: 4
Address: u
Norm: *
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
XXXX
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
A: * B: u
lnorm: 10 rnorm: u
Source address: u
A: * B: u
lnorm: 10 rnorm: u
2
4
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
result_2(uint256) := TMP_42(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 2
Den: 4
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Source address: u
Source address: u
[i]Type for TMP_57

Name: TMP_57 Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tUSDInVader_1(uint256) := TMP_57(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for tUSDInVader

Name: tUSDInVader Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_58(uint256) = tUSDInUSDV_1 (c)/ tUSDInVader_1
[i] TMP_58 cleared
clearing ir...?
result_1(uint256) := TMP_58(uint256)
[i] result cleared
Propogating parameters and globals to SSA variables...
Ssa_name: tUSDInUSDV_1, name: tUSDInUSDV

Name: tUSDInUSDV Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: tUSDInUSDV, Num: 1
Globalname: tUSDInUSDV, contract_name: TwapOracle
Ssa_name: tUSDInVader_1, name: tUSDInVader

Name: tUSDInVader Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: tUSDInVader, Num: 1
Globalname: tUSDInVader, contract_name: TwapOracle
Ssa_name: tUSDInUSDV_1, name: tUSDInUSDV

Name: tUSDInUSDV Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: tUSDInUSDV, Num: 1
Globalname: tUSDInUSDV, contract_name: TwapOracle
Ssa_name: tUSDInVader_1, name: tUSDInVader

Name: tUSDInVader Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: tUSDInVader, Num: 1
Globalname: tUSDInVader, contract_name: TwapOracle
Ssa_name: result_1, name: result

Name: result Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: result, Num: 1
Globalname: result, contract_name: TwapOracle
End popogation
TMP_58(uint256) = tUSDInUSDV_1 (c)/ tUSDInVader_1
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_58

Name: TMP_58 Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
result_1(uint256) := TMP_58(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Reading Function: usdvtoVader
Function usdvtoVader not marked
Reading Function: vaderToUsdv
Function vaderToUsdv not marked
Reading Function: initialize
Checking funcion...



initialize
Function name: initialize
Finding type for _usdv(address ... )
prev address? u
Head Addr: -996
    Norm: 6
    Set: {-996}
    Fin: NULL
Finding type for _vader(address ... )
prev address? u
Head Addr: -995
    Norm: 18
    Set: {-995}
    Fin: NULL
New param cache [[[], [], 6, '_usdv', [], -1, -996, 'u'], [[], [], 18, '_vader', [], -1, -995, 'u']]
FIND RETURN
ENTRY_POINT
initialize(address,address)


VADER_6(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
USDV_3(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
MODIFIER_CALL, Ownable.onlyOwner()()
TMP_66 = CONVERT 0 to address
TMP_67(bool) = VADER_7 == TMP_66
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,TwapOracle::initialize: Vader already set)
TMP_69 = CONVERT 0 to address
TMP_70(bool) = USDV_4 == TMP_69
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,TwapOracle::initialize: USDV already set)
TMP_72 = CONVERT 0 to address
TMP_73(bool) = _usdv_1 != TMP_72
TMP_74(None) = SOLIDITY_CALL require(bool,string)(TMP_73,TwapOracle::initialize: can not set to a zero address)
TMP_75 = CONVERT 0 to address
TMP_76(bool) = _vader_1 != TMP_75
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,TwapOracle::initialize: can not set to a zero address)
VADER_8(address) := _vader_1(address)
USDV_5(address) := _usdv_1(address)


clearing ir...?
VADER_6(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
[i] VADER cleared
clearing ir...?
USDV_3(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
[i] USDV cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: VADER_6, name: VADER

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: VADER, Num: 6
Globalname: VADER, contract_name: TwapOracle
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
Ssa_name: USDV_3, name: USDV

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: USDV, Num: 3
Globalname: USDV, contract_name: TwapOracle
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
VADER_6(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
Phi
[i]Type for VADER

Name: VADER Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
XXXX
USDV_3(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
Phi
[i]Type for USDV

Name: USDV Function: initialize
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
MODIFIER_CALL, Ownable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Ownable.onlyOwner()()
New param cache []
FIND RETURN
ENTRY_POINT
onlyOwner()
ENTRY_POINT
Propogating All
EXPRESSION _checkOwner()
Propogating All
_
Propogating All
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
INTERNAL_CALL, Ownable._checkOwner()()
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, Ownable._checkOwner()()
New param cache []
FIND RETURN
ENTRY_POINT
_checkOwner()
ENTRY_POINT
Propogating All
EXPRESSION require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)
Propogating All
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_2(address) = INTERNAL_CALL, Ownable.owner()()
[i] TMP_2 cleared
clearing ir...?
TMP_3(address) = INTERNAL_CALL, Context._msgSender()()
[i] TMP_3 cleared
clearing ir...?
TMP_4(bool) = TMP_2 == TMP_3
[i] TMP_4 cleared
clearing ir...?
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,Ownable: caller is not the owner)
Propogating parameters and globals to SSA variables...
End popogation
TMP_2(address) = INTERNAL_CALL, Ownable.owner()()
New param cache []
FIND RETURN
ENTRY_POINT
owner()
ENTRY_POINT
Propogating All
RETURN _owner
Propogating All
clearing ir...?
_owner_1(address) := ϕ(['_owner_3', '_owner_0'])
[i] _owner cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _owner_1, name: _owner

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owner, Num: 1
Globalname: _owner, contract_name: TwapOracle
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: 3
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Source address: 3
_owner_1(address) := ϕ(['_owner_3', '_owner_0'])
Phi
[i]Type for _owner

Name: _owner Function: owner
Num: -1
Den: -1
Address: 3
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
RETURN _owner_1
Propogating parameters and globals to SSA variables...
Ssa_name: _owner_1, name: _owner

Name: _owner Function: owner
Num: -1
Den: -1
Address: 3
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Ssa_name: _owner_1, name: _owner

Name: _owner Function: owner
Num: -1
Den: -1
Address: 3
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
End popogation
RETURN _owner_1
RETURN

Name: _owner Function: owner
Num: -1
Den: -1
Address: 3
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
clearing ir...?
_owner_1(address) := ϕ(['_owner_3', '_owner_0'])
[i] _owner cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _owner_1, name: _owner

Name: _owner Function: owner
Num: 
Den: 
Address: u
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
Name: _owner, Num: 1
Globalname: _owner, contract_name: TwapOracle
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: 3
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Source address: 3
_owner_1(address) := ϕ(['_owner_3', '_owner_0'])
Phi
[i]Type for _owner

Name: _owner Function: owner
Num: -1
Den: -1
Address: 3
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
RETURN _owner_1
Propogating parameters and globals to SSA variables...
Ssa_name: _owner_1, name: _owner

Name: _owner Function: owner
Num: -1
Den: -1
Address: 3
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Ssa_name: _owner_1, name: _owner

Name: _owner Function: owner
Num: -1
Den: -1
Address: 3
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
End popogation
RETURN _owner_1
RETURN

Name: _owner Function: owner
Num: -1
Den: -1
Address: 3
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Source address: 3
Source address: 3
[i]Type for TMP_2

Name: TMP_2 Function: _checkOwner
Num: -1
Den: -1
Address: 3
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_3(address) = INTERNAL_CALL, Context._msgSender()()
New param cache []
FIND RETURN
ENTRY_POINT
_msgSender()
ENTRY_POINT
Propogating All
RETURN msg.sender
Propogating All
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
RETURN msg.sender
Propogating parameters and globals to SSA variables...
End popogation
RETURN msg.sender
RETURN
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
RETURN msg.sender
Propogating parameters and globals to SSA variables...
End popogation
RETURN msg.sender
RETURN
Source address: u
Source address: u
[i]Type for TMP_3

Name: TMP_3 Function: _checkOwner
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_4(bool) = TMP_2 == TMP_3
[i]Type for TMP_4

Name: TMP_4 Function: _checkOwner
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,Ownable: caller is not the owner)
[i]Type for TMP_5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_2(address) = INTERNAL_CALL, Ownable.owner()()
[i] TMP_2 cleared
clearing ir...?
TMP_3(address) = INTERNAL_CALL, Context._msgSender()()
[i] TMP_3 cleared
clearing ir...?
TMP_4(bool) = TMP_2 == TMP_3
[i] TMP_4 cleared
clearing ir...?
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,Ownable: caller is not the owner)
Propogating parameters and globals to SSA variables...
End popogation
TMP_2(address) = INTERNAL_CALL, Ownable.owner()()
New param cache []
Old param cache: []
Source address: 3
[i]Type for TMP_2

Name: TMP_2 Function: _checkOwner
Num: -1
Den: -1
Address: 3
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_3(address) = INTERNAL_CALL, Context._msgSender()()
New param cache []
Old param cache: []
Source address: u
[i]Type for TMP_3

Name: TMP_3 Function: _checkOwner
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_4(bool) = TMP_2 == TMP_3
[i]Type for TMP_4

Name: TMP_4 Function: _checkOwner
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,Ownable: caller is not the owner)
[i]Type for TMP_5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
INTERNAL_CALL, Ownable._checkOwner()()
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, Ownable._checkOwner()()
New param cache []
Old param cache: []
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_66 = CONVERT 0 to address
[i] TMP_66 cleared
clearing ir...?
TMP_67(bool) = VADER_7 == TMP_66
[i] TMP_67 cleared
clearing ir...?
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,TwapOracle::initialize: Vader already set)
Propogating parameters and globals to SSA variables...
Ssa_name: VADER_7, name: VADER

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: VADER, Num: 7
Globalname: VADER, contract_name: TwapOracle
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
Ssa_name: VADER_7, name: VADER

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_66 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_66

Name: TMP_66 Function: initialize
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_67(bool) = VADER_7 == TMP_66
[i]Type for TMP_67

Name: TMP_67 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,TwapOracle::initialize: Vader already set)
[i]Type for TMP_68

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_69 = CONVERT 0 to address
[i] TMP_69 cleared
clearing ir...?
TMP_70(bool) = USDV_4 == TMP_69
[i] TMP_70 cleared
clearing ir...?
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,TwapOracle::initialize: USDV already set)
Propogating parameters and globals to SSA variables...
Ssa_name: USDV_4, name: USDV

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: USDV, Num: 4
Globalname: USDV, contract_name: TwapOracle
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
Ssa_name: USDV_4, name: USDV

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_69 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_69

Name: TMP_69 Function: initialize
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_70(bool) = USDV_4 == TMP_69
[i]Type for TMP_70

Name: TMP_70 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,TwapOracle::initialize: USDV already set)
[i]Type for TMP_71

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_72 = CONVERT 0 to address
[i] TMP_72 cleared
clearing ir...?
TMP_73(bool) = _usdv_1 != TMP_72
[i] TMP_73 cleared
clearing ir...?
TMP_74(None) = SOLIDITY_CALL require(bool,string)(TMP_73,TwapOracle::initialize: can not set to a zero address)
Propogating parameters and globals to SSA variables...
Ssa_name: _usdv_1, name: _usdv

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -996

Name: _usdv_1 Function: initialize
Num: 
Den: 
Address: -996
Norm: 6
LF: _usdv
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _usdv_1, name: _usdv

Name: _usdv_1 Function: initialize
Num: 
Den: 
Address: -996
Norm: 6
LF: _usdv
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_72 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_72

Name: TMP_72 Function: initialize
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_73(bool) = _usdv_1 != TMP_72
[i]Type for TMP_73

Name: TMP_73 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_74(None) = SOLIDITY_CALL require(bool,string)(TMP_73,TwapOracle::initialize: can not set to a zero address)
[i]Type for TMP_74

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_75 = CONVERT 0 to address
[i] TMP_75 cleared
clearing ir...?
TMP_76(bool) = _vader_1 != TMP_75
[i] TMP_76 cleared
clearing ir...?
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,TwapOracle::initialize: can not set to a zero address)
Propogating parameters and globals to SSA variables...
Ssa_name: _vader_1, name: _vader

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -995

Name: _vader_1 Function: initialize
Num: 
Den: 
Address: -995
Norm: 18
LF: _vader
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _vader_1, name: _vader

Name: _vader_1 Function: initialize
Num: 
Den: 
Address: -995
Norm: 18
LF: _vader
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_75 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_75

Name: TMP_75 Function: initialize
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_76(bool) = _vader_1 != TMP_75
[i]Type for TMP_76

Name: TMP_76 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,TwapOracle::initialize: can not set to a zero address)
[i]Type for TMP_77

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
VADER_8(address) := _vader_1(address)
[i] VADER cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _vader_1, name: _vader

Name: _vader_1 Function: initialize
Num: 
Den: 
Address: -995
Norm: 18
LF: _vader
Value: u
Fields: 
Finance Type: undef
Ssa_name: _vader_1, name: _vader

Name: _vader_1 Function: initialize
Num: 
Den: 
Address: -995
Norm: 18
LF: _vader
Value: u
Fields: 
Finance Type: undef
Ssa_name: VADER_8, name: VADER

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: VADER, Num: 8
Globalname: VADER, contract_name: TwapOracle
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
End popogation
VADER_8(address) := _vader_1(address)
asgn
Source address: -995
Finance type key: (-1, -1)
[i]Type for VADER

Name: VADER Function: initialize
Num: -1
Den: -1
Address: -995
Norm: 18
LF: _vader
Value: u
Fields: 
Finance Type: undef
XXXX
Copied VADER
clearing ir...?
USDV_5(address) := _usdv_1(address)
[i] USDV cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _usdv_1, name: _usdv

Name: _usdv_1 Function: initialize
Num: 
Den: 
Address: -996
Norm: 6
LF: _usdv
Value: u
Fields: 
Finance Type: undef
Ssa_name: _usdv_1, name: _usdv

Name: _usdv_1 Function: initialize
Num: 
Den: 
Address: -996
Norm: 6
LF: _usdv
Value: u
Fields: 
Finance Type: undef
Ssa_name: USDV_5, name: USDV

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: USDV, Num: 5
Globalname: USDV, contract_name: TwapOracle
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
End popogation
USDV_5(address) := _usdv_1(address)
asgn
Source address: -996
Finance type key: (-1, -1)
[i]Type for USDV

Name: USDV Function: initialize
Num: -1
Den: -1
Address: -996
Norm: 6
LF: _usdv
Value: u
Fields: 
Finance Type: undef
XXXX
Copied USDV


VADER_6(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
USDV_3(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
MODIFIER_CALL, Ownable.onlyOwner()()
TMP_66 = CONVERT 0 to address
TMP_67(bool) = VADER_7 == TMP_66
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,TwapOracle::initialize: Vader already set)
TMP_69 = CONVERT 0 to address
TMP_70(bool) = USDV_4 == TMP_69
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,TwapOracle::initialize: USDV already set)
TMP_72 = CONVERT 0 to address
TMP_73(bool) = _usdv_1 != TMP_72
TMP_74(None) = SOLIDITY_CALL require(bool,string)(TMP_73,TwapOracle::initialize: can not set to a zero address)
TMP_75 = CONVERT 0 to address
TMP_76(bool) = _vader_1 != TMP_75
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,TwapOracle::initialize: can not set to a zero address)
VADER_8(address) := _vader_1(address)
USDV_5(address) := _usdv_1(address)


clearing ir...?
VADER_6(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
[i] VADER cleared
clearing ir...?
USDV_3(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
[i] USDV cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: VADER_6, name: VADER

Name: VADER Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: VADER
Value: u
Fields: 
Finance Type: undef
Name: VADER, Num: 6
Globalname: VADER, contract_name: TwapOracle
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
Ssa_name: USDV_3, name: USDV

Name: USDV Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: USDV
Value: u
Fields: 
Finance Type: undef
Name: USDV, Num: 3
Globalname: USDV, contract_name: TwapOracle
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
VADER_6(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
Phi
[i]Type for VADER

Name: VADER Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
XXXX
USDV_3(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
Phi
[i]Type for USDV

Name: USDV Function: initialize
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
MODIFIER_CALL, Ownable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Ownable.onlyOwner()()
New param cache []
Old param cache: []
clearing ir...?
TMP_66 = CONVERT 0 to address
[i] TMP_66 cleared
clearing ir...?
TMP_67(bool) = VADER_7 == TMP_66
[i] TMP_67 cleared
clearing ir...?
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,TwapOracle::initialize: Vader already set)
Propogating parameters and globals to SSA variables...
Ssa_name: VADER_7, name: VADER

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: VADER_7, name: VADER

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_66 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_66

Name: TMP_66 Function: initialize
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_67(bool) = VADER_7 == TMP_66
[i]Type for TMP_67

Name: TMP_67 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,TwapOracle::initialize: Vader already set)
[i]Type for TMP_68

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_69 = CONVERT 0 to address
[i] TMP_69 cleared
clearing ir...?
TMP_70(bool) = USDV_4 == TMP_69
[i] TMP_70 cleared
clearing ir...?
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,TwapOracle::initialize: USDV already set)
Propogating parameters and globals to SSA variables...
Ssa_name: USDV_4, name: USDV

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: USDV_4, name: USDV

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_69 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_69

Name: TMP_69 Function: initialize
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_70(bool) = USDV_4 == TMP_69
[i]Type for TMP_70

Name: TMP_70 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,TwapOracle::initialize: USDV already set)
[i]Type for TMP_71

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_72 = CONVERT 0 to address
[i] TMP_72 cleared
clearing ir...?
TMP_73(bool) = _usdv_1 != TMP_72
[i] TMP_73 cleared
clearing ir...?
TMP_74(None) = SOLIDITY_CALL require(bool,string)(TMP_73,TwapOracle::initialize: can not set to a zero address)
Propogating parameters and globals to SSA variables...
Ssa_name: _usdv_1, name: _usdv

Name: _usdv_1 Function: initialize
Num: 
Den: 
Address: -996
Norm: 6
LF: _usdv
Value: u
Fields: 
Finance Type: undef
Ssa_name: _usdv_1, name: _usdv

Name: _usdv_1 Function: initialize
Num: 
Den: 
Address: -996
Norm: 6
LF: _usdv
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_72 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_72

Name: TMP_72 Function: initialize
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_73(bool) = _usdv_1 != TMP_72
[i]Type for TMP_73

Name: TMP_73 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_74(None) = SOLIDITY_CALL require(bool,string)(TMP_73,TwapOracle::initialize: can not set to a zero address)
[i]Type for TMP_74

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_75 = CONVERT 0 to address
[i] TMP_75 cleared
clearing ir...?
TMP_76(bool) = _vader_1 != TMP_75
[i] TMP_76 cleared
clearing ir...?
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,TwapOracle::initialize: can not set to a zero address)
Propogating parameters and globals to SSA variables...
Ssa_name: _vader_1, name: _vader

Name: _vader_1 Function: initialize
Num: 
Den: 
Address: -995
Norm: 18
LF: _vader
Value: u
Fields: 
Finance Type: undef
Ssa_name: _vader_1, name: _vader

Name: _vader_1 Function: initialize
Num: 
Den: 
Address: -995
Norm: 18
LF: _vader
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_75 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_75

Name: TMP_75 Function: initialize
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_76(bool) = _vader_1 != TMP_75
[i]Type for TMP_76

Name: TMP_76 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,TwapOracle::initialize: can not set to a zero address)
[i]Type for TMP_77

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
VADER_8(address) := _vader_1(address)
[i] VADER cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _vader_1, name: _vader

Name: _vader_1 Function: initialize
Num: 
Den: 
Address: -995
Norm: 18
LF: _vader
Value: u
Fields: 
Finance Type: undef
Ssa_name: _vader_1, name: _vader

Name: _vader_1 Function: initialize
Num: 
Den: 
Address: -995
Norm: 18
LF: _vader
Value: u
Fields: 
Finance Type: undef
Ssa_name: VADER_8, name: VADER

Name: VADER Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: _vader
Value: u
Fields: 
Finance Type: undef
Name: VADER, Num: 8
Globalname: VADER, contract_name: TwapOracle
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
End popogation
VADER_8(address) := _vader_1(address)
asgn
Source address: -995
Finance type key: (-1, -1)
[i]Type for VADER

Name: VADER Function: initialize
Num: -1
Den: -1
Address: -995
Norm: 18
LF: _vader
Value: u
Fields: 
Finance Type: undef
XXXX
Copied VADER
clearing ir...?
USDV_5(address) := _usdv_1(address)
[i] USDV cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _usdv_1, name: _usdv

Name: _usdv_1 Function: initialize
Num: 
Den: 
Address: -996
Norm: 6
LF: _usdv
Value: u
Fields: 
Finance Type: undef
Ssa_name: _usdv_1, name: _usdv

Name: _usdv_1 Function: initialize
Num: 
Den: 
Address: -996
Norm: 6
LF: _usdv
Value: u
Fields: 
Finance Type: undef
Ssa_name: USDV_5, name: USDV

Name: USDV Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: _usdv
Value: u
Fields: 
Finance Type: undef
Name: USDV, Num: 5
Globalname: USDV, contract_name: TwapOracle
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
End popogation
USDV_5(address) := _usdv_1(address)
asgn
Source address: -996
Finance type key: (-1, -1)
[i]Type for USDV

Name: USDV Function: initialize
Num: -1
Den: -1
Address: -996
Norm: 6
LF: _usdv
Value: u
Fields: 
Finance Type: undef
XXXX
Copied USDV
Reading Function: enableUSDV
Function enableUSDV not marked
Reading Function: registerAggregator
Checking funcion...



registerAggregator
Function name: registerAggregator
Finding type for asset(address ... )
prev address? u
Head Addr: -994
    Norm: 6
    Set: {-994}
    Fin: NULL
Finding type for aggregator(address ... )
prev address? u
Head Addr: -993
    Norm: 6
    Set: {-993}
    Fin: NULL
New param cache [[[], [], 6, 'asset', [], -1, -994, 'u'], [[], [], 6, 'aggregator', [], -1, -993, 'u']]
FIND RETURN
ENTRY_POINT
registerAggregator(address,address)


_aggregators_5(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
MODIFIER_CALL, Ownable.onlyOwner()()
MODIFIER_CALL, TwapOracle.initialized()()
TMP_80 = CONVERT 0 to address
TMP_81(bool) = asset_1 != TMP_80
TMP_82(None) = SOLIDITY_CALL require(bool,string)(TMP_81,TwapOracle::registerAggregator: asset zero address provided)
TMP_83 = CONVERT 0 to address
TMP_84(bool) = aggregator_1 != TMP_83
TMP_85(None) = SOLIDITY_CALL require(bool,string)(TMP_84,TwapOracle::registerAggregator: aggregator zero address provided)
REF_18(address) -> _aggregators_7[asset_1]
TMP_86 = CONVERT 0 to address
TMP_87(bool) = REF_18 == TMP_86
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,TwapOracle::registerAggregator: aggregator already exists)
REF_19(address) -> _aggregators_7[asset_1]
_aggregators_8(mapping(address => address)) := ϕ(['_aggregators_7'])
REF_19 (->_aggregators_8) := aggregator_1(address)


clearing ir...?
_aggregators_5(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _aggregators_5, name: _aggregators

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 5
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
_aggregators_5(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: registerAggregator
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
MODIFIER_CALL, Ownable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Ownable.onlyOwner()()
New param cache []
Old param cache: []
clearing ir...?
MODIFIER_CALL, TwapOracle.initialized()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, TwapOracle.initialized()()
New param cache []
FIND RETURN
ENTRY_POINT
initialized()
ENTRY_POINT
Propogating All
EXPRESSION require(bool,string)(VADER != address(0) && USDV != address(0),TwapOracle::initialized: not initialized)
Propogating All
_
Propogating All
clearing ir...?
VADER_17(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
[i] VADER cleared
clearing ir...?
USDV_9(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
[i] USDV cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: VADER_17, name: VADER

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: VADER, Num: 17
Globalname: VADER, contract_name: TwapOracle
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
Ssa_name: USDV_9, name: USDV

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: USDV, Num: 9
Globalname: USDV, contract_name: TwapOracle
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
VADER_17(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
Phi
[i]Type for VADER

Name: VADER Function: initialized
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
XXXX
USDV_9(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
Phi
[i]Type for USDV

Name: USDV Function: initialized
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_142 = CONVERT 0 to address
[i] TMP_142 cleared
clearing ir...?
TMP_143(bool) = VADER_17 != TMP_142
[i] TMP_143 cleared
clearing ir...?
TMP_144 = CONVERT 0 to address
[i] TMP_144 cleared
clearing ir...?
TMP_145(bool) = USDV_9 != TMP_144
[i] TMP_145 cleared
clearing ir...?
TMP_146(bool) = TMP_143 && TMP_145
[i] TMP_146 cleared
clearing ir...?
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,TwapOracle::initialized: not initialized)
Propogating parameters and globals to SSA variables...
Ssa_name: VADER_17, name: VADER

Name: VADER Function: initialized
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: USDV_9, name: USDV

Name: USDV Function: initialized
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: VADER_17, name: VADER

Name: VADER Function: initialized
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: USDV_9, name: USDV

Name: USDV Function: initialized
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_142 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_142

Name: TMP_142 Function: initialized
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_143(bool) = VADER_17 != TMP_142
[i]Type for TMP_143

Name: TMP_143 Function: initialized
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_144 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_144

Name: TMP_144 Function: initialized
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_145(bool) = USDV_9 != TMP_144
[i]Type for TMP_145

Name: TMP_145 Function: initialized
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_146(bool) = TMP_143 && TMP_145
[i]Type for TMP_146

Name: TMP_146 Function: initialized
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,TwapOracle::initialized: not initialized)
[i]Type for TMP_147

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
VADER_17(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
[i] VADER cleared
clearing ir...?
USDV_9(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
[i] USDV cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: VADER_17, name: VADER

Name: VADER Function: initialized
Num: 
Den: 
Address: u
Norm: u
LF: VADER
Value: u
Fields: 
Finance Type: undef
Name: VADER, Num: 17
Globalname: VADER, contract_name: TwapOracle
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
Ssa_name: USDV_9, name: USDV

Name: USDV Function: initialized
Num: 
Den: 
Address: u
Norm: u
LF: USDV
Value: u
Fields: 
Finance Type: undef
Name: USDV, Num: 9
Globalname: USDV, contract_name: TwapOracle
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
VADER_17(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
Phi
[i]Type for VADER

Name: VADER Function: initialized
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
XXXX
USDV_9(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
Phi
[i]Type for USDV

Name: USDV Function: initialized
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_142 = CONVERT 0 to address
[i] TMP_142 cleared
clearing ir...?
TMP_143(bool) = VADER_17 != TMP_142
[i] TMP_143 cleared
clearing ir...?
TMP_144 = CONVERT 0 to address
[i] TMP_144 cleared
clearing ir...?
TMP_145(bool) = USDV_9 != TMP_144
[i] TMP_145 cleared
clearing ir...?
TMP_146(bool) = TMP_143 && TMP_145
[i] TMP_146 cleared
clearing ir...?
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,TwapOracle::initialized: not initialized)
Propogating parameters and globals to SSA variables...
Ssa_name: VADER_17, name: VADER

Name: VADER Function: initialized
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: USDV_9, name: USDV

Name: USDV Function: initialized
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: VADER_17, name: VADER

Name: VADER Function: initialized
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: USDV_9, name: USDV

Name: USDV Function: initialized
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_142 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_142

Name: TMP_142 Function: initialized
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_143(bool) = VADER_17 != TMP_142
[i]Type for TMP_143

Name: TMP_143 Function: initialized
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_144 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_144

Name: TMP_144 Function: initialized
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_145(bool) = USDV_9 != TMP_144
[i]Type for TMP_145

Name: TMP_145 Function: initialized
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_146(bool) = TMP_143 && TMP_145
[i]Type for TMP_146

Name: TMP_146 Function: initialized
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,TwapOracle::initialized: not initialized)
[i]Type for TMP_147

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_80 = CONVERT 0 to address
[i] TMP_80 cleared
clearing ir...?
TMP_81(bool) = asset_1 != TMP_80
[i] TMP_81 cleared
clearing ir...?
TMP_82(None) = SOLIDITY_CALL require(bool,string)(TMP_81,TwapOracle::registerAggregator: asset zero address provided)
Propogating parameters and globals to SSA variables...
Ssa_name: asset_1, name: asset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: asset_1 Function: registerAggregator
Num: 
Den: 
Address: -994
Norm: 6
LF: asset
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: asset_1, name: asset

Name: asset_1 Function: registerAggregator
Num: 
Den: 
Address: -994
Norm: 6
LF: asset
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_80 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_80

Name: TMP_80 Function: registerAggregator
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_81(bool) = asset_1 != TMP_80
[i]Type for TMP_81

Name: TMP_81 Function: registerAggregator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_82(None) = SOLIDITY_CALL require(bool,string)(TMP_81,TwapOracle::registerAggregator: asset zero address provided)
[i]Type for TMP_82

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_83 = CONVERT 0 to address
[i] TMP_83 cleared
clearing ir...?
TMP_84(bool) = aggregator_1 != TMP_83
[i] TMP_84 cleared
clearing ir...?
TMP_85(None) = SOLIDITY_CALL require(bool,string)(TMP_84,TwapOracle::registerAggregator: aggregator zero address provided)
Propogating parameters and globals to SSA variables...
Ssa_name: aggregator_1, name: aggregator

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -993

Name: aggregator_1 Function: registerAggregator
Num: 
Den: 
Address: -993
Norm: 6
LF: aggregator
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: aggregator_1, name: aggregator

Name: aggregator_1 Function: registerAggregator
Num: 
Den: 
Address: -993
Norm: 6
LF: aggregator
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_83 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_83

Name: TMP_83 Function: registerAggregator
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_84(bool) = aggregator_1 != TMP_83
[i]Type for TMP_84

Name: TMP_84 Function: registerAggregator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_85(None) = SOLIDITY_CALL require(bool,string)(TMP_84,TwapOracle::registerAggregator: aggregator zero address provided)
[i]Type for TMP_85

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_18(address) -> _aggregators_7[asset_1]
[i] REF_18 cleared
clearing ir...?
TMP_86 = CONVERT 0 to address
[i] TMP_86 cleared
clearing ir...?
TMP_87(bool) = REF_18 == TMP_86
[i] TMP_87 cleared
clearing ir...?
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,TwapOracle::registerAggregator: aggregator already exists)
Propogating parameters and globals to SSA variables...
Ssa_name: asset_1, name: asset

Name: asset_1 Function: registerAggregator
Num: 
Den: 
Address: -994
Norm: 6
LF: asset
Value: u
Fields: 
Finance Type: undef
Ssa_name: _aggregators_7, name: _aggregators

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 7
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
Ssa_name: _aggregators_7, name: _aggregators

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: asset_1, name: asset

Name: asset_1 Function: registerAggregator
Num: 
Den: 
Address: -994
Norm: 6
LF: asset
Value: u
Fields: 
Finance Type: undef
End popogation
REF_18(address) -> _aggregators_7[asset_1]
INDEX
REFERENCE RIGHT VALUE PROPAGATION
[i]Type for REF_18

Name: None Function: None
Num: -994
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_86 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_86

Name: TMP_86 Function: registerAggregator
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_87(bool) = REF_18 == TMP_86
[i]Type for TMP_87

Name: TMP_87 Function: registerAggregator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,TwapOracle::registerAggregator: aggregator already exists)
[i]Type for TMP_88

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_19(address) -> _aggregators_7[asset_1]
[i] REF_19 cleared
clearing ir...?
_aggregators_8(mapping(address => address)) := ϕ(['_aggregators_7'])
[i] _aggregators cleared
clearing ir...?
REF_19 (->_aggregators_8) := aggregator_1(address)
[i] REF_19 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: aggregator_1, name: aggregator

Name: aggregator_1 Function: registerAggregator
Num: 
Den: 
Address: -993
Norm: 6
LF: aggregator
Value: u
Fields: 
Finance Type: undef
Ssa_name: asset_1, name: asset

Name: asset_1 Function: registerAggregator
Num: 
Den: 
Address: -994
Norm: 6
LF: asset
Value: u
Fields: 
Finance Type: undef
Ssa_name: aggregator_1, name: aggregator

Name: aggregator_1 Function: registerAggregator
Num: 
Den: 
Address: -993
Norm: 6
LF: aggregator
Value: u
Fields: 
Finance Type: undef
Ssa_name: asset_1, name: asset

Name: asset_1 Function: registerAggregator
Num: 
Den: 
Address: -994
Norm: 6
LF: asset
Value: u
Fields: 
Finance Type: undef
Ssa_name: _aggregators_8, name: _aggregators

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 8
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
End popogation
Ssa_name: _aggregators_8, name: _aggregators

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
REF_19(address) -> _aggregators_7[asset_1]
INDEX
REFERENCE RIGHT VALUE PROPAGATION
[i]Type for REF_19

Name: None Function: None
Num: -994
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
_aggregators_8(mapping(address => address)) := ϕ(['_aggregators_7'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: registerAggregator
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_19 (->_aggregators_8) := aggregator_1(address)
asgn
Error with REF_19 in function registerAggregator
Error with: REF_19 in function registerAggregator
Finance type key: (-1, -1)
[i]Type for REF_19

Name: REF_19 Function: registerAggregator
Num: -1
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied _aggregators
Source address: 1


_aggregators_5(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
MODIFIER_CALL, Ownable.onlyOwner()()
MODIFIER_CALL, TwapOracle.initialized()()
TMP_80 = CONVERT 0 to address
TMP_81(bool) = asset_1 != TMP_80
TMP_82(None) = SOLIDITY_CALL require(bool,string)(TMP_81,TwapOracle::registerAggregator: asset zero address provided)
TMP_83 = CONVERT 0 to address
TMP_84(bool) = aggregator_1 != TMP_83
TMP_85(None) = SOLIDITY_CALL require(bool,string)(TMP_84,TwapOracle::registerAggregator: aggregator zero address provided)
REF_18(address) -> _aggregators_7[asset_1]
TMP_86 = CONVERT 0 to address
TMP_87(bool) = REF_18 == TMP_86
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,TwapOracle::registerAggregator: aggregator already exists)
REF_19(address) -> _aggregators_7[asset_1]
_aggregators_8(mapping(address => address)) := ϕ(['_aggregators_7'])
REF_19 (->_aggregators_8) := aggregator_1(address)


clearing ir...?
_aggregators_5(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
[i] _aggregators cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _aggregators_5, name: _aggregators

Name: _aggregators Function: registerAggregator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 5
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: _aggregators Function: registerAggregator
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
_aggregators_5(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: registerAggregator
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
MODIFIER_CALL, Ownable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Ownable.onlyOwner()()
New param cache []
Old param cache: []
clearing ir...?
MODIFIER_CALL, TwapOracle.initialized()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, TwapOracle.initialized()()
New param cache []
Old param cache: []
clearing ir...?
TMP_80 = CONVERT 0 to address
[i] TMP_80 cleared
clearing ir...?
TMP_81(bool) = asset_1 != TMP_80
[i] TMP_81 cleared
clearing ir...?
TMP_82(None) = SOLIDITY_CALL require(bool,string)(TMP_81,TwapOracle::registerAggregator: asset zero address provided)
Propogating parameters and globals to SSA variables...
Ssa_name: asset_1, name: asset

Name: asset_1 Function: registerAggregator
Num: 
Den: 
Address: -994
Norm: 6
LF: asset
Value: u
Fields: 
Finance Type: undef
Ssa_name: asset_1, name: asset

Name: asset_1 Function: registerAggregator
Num: 
Den: 
Address: -994
Norm: 6
LF: asset
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_80 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_80

Name: TMP_80 Function: registerAggregator
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_81(bool) = asset_1 != TMP_80
[i]Type for TMP_81

Name: TMP_81 Function: registerAggregator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_82(None) = SOLIDITY_CALL require(bool,string)(TMP_81,TwapOracle::registerAggregator: asset zero address provided)
[i]Type for TMP_82

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_83 = CONVERT 0 to address
[i] TMP_83 cleared
clearing ir...?
TMP_84(bool) = aggregator_1 != TMP_83
[i] TMP_84 cleared
clearing ir...?
TMP_85(None) = SOLIDITY_CALL require(bool,string)(TMP_84,TwapOracle::registerAggregator: aggregator zero address provided)
Propogating parameters and globals to SSA variables...
Ssa_name: aggregator_1, name: aggregator

Name: aggregator_1 Function: registerAggregator
Num: 
Den: 
Address: -993
Norm: 6
LF: aggregator
Value: u
Fields: 
Finance Type: undef
Ssa_name: aggregator_1, name: aggregator

Name: aggregator_1 Function: registerAggregator
Num: 
Den: 
Address: -993
Norm: 6
LF: aggregator
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_83 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_83

Name: TMP_83 Function: registerAggregator
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_84(bool) = aggregator_1 != TMP_83
[i]Type for TMP_84

Name: TMP_84 Function: registerAggregator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_85(None) = SOLIDITY_CALL require(bool,string)(TMP_84,TwapOracle::registerAggregator: aggregator zero address provided)
[i]Type for TMP_85

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_18(address) -> _aggregators_7[asset_1]
[i] REF_18 cleared
clearing ir...?
TMP_86 = CONVERT 0 to address
[i] TMP_86 cleared
clearing ir...?
TMP_87(bool) = REF_18 == TMP_86
[i] TMP_87 cleared
clearing ir...?
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,TwapOracle::registerAggregator: aggregator already exists)
Propogating parameters and globals to SSA variables...
Ssa_name: asset_1, name: asset

Name: asset_1 Function: registerAggregator
Num: 
Den: 
Address: -994
Norm: 6
LF: asset
Value: u
Fields: 
Finance Type: undef
Ssa_name: _aggregators_7, name: _aggregators

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _aggregators_7, name: _aggregators

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: asset_1, name: asset

Name: asset_1 Function: registerAggregator
Num: 
Den: 
Address: -994
Norm: 6
LF: asset
Value: u
Fields: 
Finance Type: undef
End popogation
REF_18(address) -> _aggregators_7[asset_1]
INDEX
REFERENCE RIGHT VALUE PROPAGATION
[i]Type for REF_18

Name: None Function: None
Num: -994
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_86 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_86

Name: TMP_86 Function: registerAggregator
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_87(bool) = REF_18 == TMP_86
[i]Type for TMP_87

Name: TMP_87 Function: registerAggregator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,TwapOracle::registerAggregator: aggregator already exists)
[i]Type for TMP_88

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_19(address) -> _aggregators_7[asset_1]
[i] REF_19 cleared
clearing ir...?
_aggregators_8(mapping(address => address)) := ϕ(['_aggregators_7'])
[i] _aggregators cleared
clearing ir...?
REF_19 (->_aggregators_8) := aggregator_1(address)
[i] REF_19 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: aggregator_1, name: aggregator

Name: aggregator_1 Function: registerAggregator
Num: 
Den: 
Address: -993
Norm: 6
LF: aggregator
Value: u
Fields: 
Finance Type: undef
Ssa_name: asset_1, name: asset

Name: asset_1 Function: registerAggregator
Num: 
Den: 
Address: -994
Norm: 6
LF: asset
Value: u
Fields: 
Finance Type: undef
Ssa_name: aggregator_1, name: aggregator

Name: aggregator_1 Function: registerAggregator
Num: 
Den: 
Address: -993
Norm: 6
LF: aggregator
Value: u
Fields: 
Finance Type: undef
Ssa_name: asset_1, name: asset

Name: asset_1 Function: registerAggregator
Num: 
Den: 
Address: -994
Norm: 6
LF: asset
Value: u
Fields: 
Finance Type: undef
Ssa_name: _aggregators_8, name: _aggregators

Name: _aggregators Function: registerAggregator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _aggregators, Num: 8
Globalname: _aggregators, contract_name: TwapOracle
global...

Name: _aggregators Function: registerAggregator
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 1
End popogation
Ssa_name: _aggregators_8, name: _aggregators

Name: _aggregators Function: registerAggregator
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
REF_19(address) -> _aggregators_7[asset_1]
INDEX
REFERENCE RIGHT VALUE PROPAGATION
[i]Type for REF_19

Name: None Function: None
Num: -994
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
_aggregators_8(mapping(address => address)) := ϕ(['_aggregators_7'])
Phi
[i]Type for _aggregators

Name: _aggregators Function: registerAggregator
Num: -1
Den: -1
Address: 1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_19 (->_aggregators_8) := aggregator_1(address)
asgn
Finance type key: (-1, -1)
[i]Type for REF_19

Name: REF_19 Function: registerAggregator
Num: 
Den: 
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied _aggregators
Source address: 1
Reading Function: registerPair
Checking funcion...



registerPair
Function name: registerPair
Finding type for factory(address ... )
prev address? u
Head Addr: -992
    Norm: 0
    Set: {-992}
    Fin: NULL
Finding type for token0(address ... )
prev address? u
Head Addr: -991
    Norm: 18
    Set: {-991}
    Fin: NULL
Finding type for token1(address ... )
prev address? u
Head Addr: -990
    Norm: 6
    Set: {-990}
    Fin: NULL
New param cache [[[], [], 0, 'factory', [], -1, -992, 'u'], [[], [], 18, 'token0', [], -1, -991, 'u'], [[], [], 6, 'token1', [], -1, -990, 'u']]
FIND RETURN
ENTRY_POINT
registerPair(address,address,address)


VADER_9(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
USDV_6(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
_vaderPool_2(IVaderPoolV2) := ϕ(['_vaderPool_0', '_vaderPool_1', '_vaderPool_10', '_vaderPool_5', '_vaderPool_7'])
_pairs_5(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
MODIFIER_CALL, Ownable.onlyOwner()()
MODIFIER_CALL, TwapOracle.initialized()()
TMP_91(bool) = token0_1 == VADER_11
TMP_92(bool) = token0_1 == USDV_8
TMP_93(bool) = TMP_91 || TMP_92
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,TwapOracle::registerPair: Invalid token0 address)
TMP_95(bool) = token0_1 != token1_1
TMP_96(None) = SOLIDITY_CALL require(bool,string)(TMP_95,TwapOracle::registerPair: Same token address)
TMP_97(bool) = INTERNAL_CALL, TwapOracle.pairExists(address,address)(token0_1,token1_1)
TMP_98 = ! TMP_97 
TMP_99(None) = SOLIDITY_CALL require(bool,string)(TMP_98,TwapOracle::registerPair: Pair exists)
TMP_100(bool) = token0_1 == VADER_12
CONDITION TMP_100
TMP_107 = CONVERT _vaderPool_5 to address
pairAddr_1(address) := TMP_107(address)
TMP_101 = CONVERT factory_1 to IUniswapV2Factory
TMP_102(address) = HIGH_LEVEL_CALL, dest:TMP_101(IUniswapV2Factory), function:getPair, arguments:['token0_1', 'token1_1']  
_pairs_11(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_10', '_pairs_1', '_pairs_19'])
TMP_103 = CONVERT TMP_102 to IUniswapV2Pair
pair_1(IUniswapV2Pair) := TMP_103(IUniswapV2Pair)
TMP_108 = CONVERT token1_1 to IERC20
TUPLE_2(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_5(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_108']  
_vaderPool_6(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_5', '_vaderPool_1', '_vaderPool_7'])
_pairs_9(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_8', '_pairs_4', '_pairs_1', '_pairs_19'])
price0CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 0 
price1CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 1 
TMP_104 = CONVERT pair_1 to address
pairAddr_2(address) := TMP_104(address)
TMP_109 = CONVERT token1_1 to IERC20
TUPLE_3(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_6(IVaderPoolV2), function:getReserves, arguments:['TMP_109']  
_vaderPool_7(IVaderPoolV2) := ϕ(['_vaderPool_1', '_vaderPool_10', '_vaderPool_6', '_vaderPool_5', '_vaderPool_7'])
_pairs_10(TwapOracle.PairData[]) := ϕ(['_pairs_9', '_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19'])
reserve0_1(uint112)= UNPACK TUPLE_3 index: 0 
reserve1_1(uint112)= UNPACK TUPLE_3 index: 1 
blockTimestampLast_1(uint32)= UNPACK TUPLE_3 index: 2 
pairAddr_3(address) := ϕ(['pairAddr_1', 'pairAddr_2'])
price0CumulativeLast_3(uint256) := ϕ(['price0CumulativeLast_1', 'price0CumulativeLast_2'])
price1CumulativeLast_3(uint256) := ϕ(['price1CumulativeLast_1', 'price1CumulativeLast_2'])
reserve0_3(uint112) := ϕ(['reserve0_1', 'reserve0_2'])
reserve1_3(uint112) := ϕ(['reserve1_1', 'reserve1_2'])
blockTimestampLast_3(uint32) := ϕ(['blockTimestampLast_1', 'blockTimestampLast_2'])
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price0CumulativeLast, arguments:[]  
_pairs_12(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_11'])
price0CumulativeLast_2(uint256) := TMP_105(uint256)
TMP_106(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price1CumulativeLast, arguments:[]  
_pairs_13(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_12', '_pairs_4', '_pairs_1', '_pairs_19'])
price1CumulativeLast_2(uint256) := TMP_106(uint256)
TMP_110(bool) = reserve0_3 != 0
TMP_111(bool) = reserve1_3 != 0
TMP_112(bool) = TMP_110 && TMP_111
TMP_113(None) = SOLIDITY_CALL require(bool,string)(TMP_112,TwapOracle::registerPair: No reserves)
TUPLE_1(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:getReserves, arguments:[]  
_pairs_14(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_13', '_pairs_4', '_pairs_1', '_pairs_19'])
reserve0_2(uint112)= UNPACK TUPLE_1 index: 0 
reserve1_2(uint112)= UNPACK TUPLE_1 index: 1 
blockTimestampLast_2(uint32)= UNPACK TUPLE_1 index: 2 
TMP_114(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
TMP_115(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_114)
REF_27(bool) -> _pairExists_1[TMP_115]
_pairExists_2(mapping(bytes32 => bool)) := ϕ(['_pairExists_1'])
REF_27 (->_pairExists_2) := True(bool)
TMP_116 = new uq112x112(0)
TMP_117 = new uq112x112(0)
TMP_118 = new PairData(pairAddr_3,token0_1,token1_1,price0CumulativeLast_3,price1CumulativeLast_3,blockTimestampLast_3,TMP_116,TMP_117)
REF_31 -> LENGTH _pairs_14
TMP_120(uint256) := REF_31(uint256)
TMP_121(uint256) = TMP_120 (c)+ 1
_pairs_15(TwapOracle.PairData[]) := ϕ(['_pairs_14'])
REF_31 (->_pairs_15) := TMP_121(uint256)
REF_32(TwapOracle.PairData) -> _pairs_15[TMP_120]
_pairs_16(TwapOracle.PairData[]) := ϕ(['_pairs_15'])
REF_32 (->_pairs_16) := TMP_118(TwapOracle.PairData)


clearing ir...?
VADER_9(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
[i] VADER cleared
clearing ir...?
USDV_6(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
[i] USDV cleared
clearing ir...?
_vaderPool_2(IVaderPoolV2) := ϕ(['_vaderPool_0', '_vaderPool_1', '_vaderPool_10', '_vaderPool_5', '_vaderPool_7'])
[i] _vaderPool cleared
clearing ir...?
_pairs_5(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: VADER_9, name: VADER

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: VADER, Num: 9
Globalname: VADER, contract_name: TwapOracle
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
Ssa_name: USDV_6, name: USDV

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: USDV, Num: 6
Globalname: USDV, contract_name: TwapOracle
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
Ssa_name: _vaderPool_2, name: _vaderPool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _vaderPool, Num: 2
Globalname: _vaderPool, contract_name: TwapOracle
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _pairs_5, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 5
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
VADER_9(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
Phi
[i]Type for VADER

Name: VADER Function: registerPair
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
XXXX
USDV_6(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
Phi
[i]Type for USDV

Name: USDV Function: registerPair
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
XXXX
_vaderPool_2(IVaderPoolV2) := ϕ(['_vaderPool_0', '_vaderPool_1', '_vaderPool_10', '_vaderPool_5', '_vaderPool_7'])
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_5(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
Phi
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
MODIFIER_CALL, Ownable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Ownable.onlyOwner()()
New param cache []
Old param cache: []
clearing ir...?
MODIFIER_CALL, TwapOracle.initialized()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, TwapOracle.initialized()()
New param cache []
Old param cache: []
clearing ir...?
TMP_91(bool) = token0_1 == VADER_11
[i] TMP_91 cleared
clearing ir...?
TMP_92(bool) = token0_1 == USDV_8
[i] TMP_92 cleared
clearing ir...?
TMP_93(bool) = TMP_91 || TMP_92
[i] TMP_93 cleared
clearing ir...?
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,TwapOracle::registerPair: Invalid token0 address)
Propogating parameters and globals to SSA variables...
Ssa_name: token0_1, name: token0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -991

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: VADER_11, name: VADER

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: VADER, Num: 11
Globalname: VADER, contract_name: TwapOracle
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
Ssa_name: USDV_8, name: USDV

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: USDV, Num: 8
Globalname: USDV, contract_name: TwapOracle
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
Ssa_name: VADER_11, name: VADER

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: USDV_8, name: USDV

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_91(bool) = token0_1 == VADER_11
[i]Type for TMP_91

Name: TMP_91 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_92(bool) = token0_1 == USDV_8
[i]Type for TMP_92

Name: TMP_92 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_93(bool) = TMP_91 || TMP_92
[i]Type for TMP_93

Name: TMP_93 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,TwapOracle::registerPair: Invalid token0 address)
[i]Type for TMP_94

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_95(bool) = token0_1 != token1_1
[i] TMP_95 cleared
clearing ir...?
TMP_96(None) = SOLIDITY_CALL require(bool,string)(TMP_95,TwapOracle::registerPair: Same token address)
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -990

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_95(bool) = token0_1 != token1_1
[i]Type for TMP_95

Name: TMP_95 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_96(None) = SOLIDITY_CALL require(bool,string)(TMP_95,TwapOracle::registerPair: Same token address)
[i]Type for TMP_96

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_97(bool) = INTERNAL_CALL, TwapOracle.pairExists(address,address)(token0_1,token1_1)
[i] TMP_97 cleared
clearing ir...?
TMP_98 = ! TMP_97 
clearing ir...?
TMP_99(None) = SOLIDITY_CALL require(bool,string)(TMP_98,TwapOracle::registerPair: Pair exists)
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_97(bool) = INTERNAL_CALL, TwapOracle.pairExists(address,address)(token0_1,token1_1)
New param cache [[[], [], 18, 'token0', [], -1, -991, 'u'], [[], [], 6, 'token1', [], -1, -990, 'u']]
Old param cache: [[[], [], 18, 'token0', [], -1, -999], [[], [], 6, 'token1', [], -1, -998]]
Param: token0
[[], [], 18, 'token0', [], -1, -991, 'u']

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Param: token1
[[], [], 6, 'token1', [], -1, -990, 'u']

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
pairExists(address,address)
ENTRY_POINT
Propogating All
NEW VARIABLE pairHash0 = keccak256(bytes)(abi.encodePacked(token0,token1))
Propogating All
token1_1
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -998
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Source address: -990

Name: token1_1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Copied ftype
token0_1
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -999
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Source address: -991

Name: token0_1 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE pairHash1 = keccak256(bytes)(abi.encodePacked(token1,token0))
Propogating All
token1_1
Ssa_name: token1_1, name: token1

Name: token1_1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Source address: -990

Name: token1_1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Copied ftype
token0_1
Ssa_name: token0_1, name: token0

Name: token0_1 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Source address: -991

Name: token0_1 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Copied ftype
RETURN _pairExists[pairHash0] || _pairExists[pairHash1]
Propogating All
pairHash1_1
Ssa_name: pairHash1_1, name: pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairHash0_1
Ssa_name: pairHash0_1, name: pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
token0_1(address) := ϕ(['token0_1'])
[i] token0 cleared
clearing ir...?
token1_1(address) := ϕ(['token1_1'])
[i] token1 cleared
clearing ir...?
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_1', '_pairExists_0', '_pairExists_2'])
[i] _pairExists cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: token0_1, name: token0

Name: token0_1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
Source address: -991

Name: token0_1 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: token1_1, name: token1

Name: token1_1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Source address: -990

Name: token1_1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _pairExists_1, name: _pairExists

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairExists, Num: 1
Globalname: _pairExists, contract_name: TwapOracle
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
token0_1(address) := ϕ(['token0_1'])
Phi
[i]Type for token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_1(address) := ϕ(['token1_1'])
Phi
[i]Type for token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_1', '_pairExists_0', '_pairExists_2'])
Phi
[i]Type for _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
clearing ir...?
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
clearing ir...?
pairHash0_1(bytes32) := TMP_18(bytes32)
[i] pairHash0 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash0_1, name: pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash0, Num: 1
Globalname: pairHash0, contract_name: TwapOracle
End popogation
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
[i]Type for TMP_18

Name: TMP_18 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairHash0_1(bytes32) := TMP_18(bytes32)
asgn
Finance type key: (-1, -1)
[i]Type for pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
clearing ir...?
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
clearing ir...?
pairHash1_1(bytes32) := TMP_20(bytes32)
[i] pairHash1 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash1_1, name: pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash1, Num: 1
Globalname: pairHash1, contract_name: TwapOracle
End popogation
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
[i]Type for TMP_19

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
[i]Type for TMP_20

Name: TMP_20 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairHash1_1(bytes32) := TMP_20(bytes32)
asgn
Finance type key: (-1, -1)
[i]Type for pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_2(bool) -> _pairExists_1[pairHash0_1]
[i] REF_2 cleared
clearing ir...?
REF_3(bool) -> _pairExists_1[pairHash1_1]
[i] REF_3 cleared
clearing ir...?
TMP_21(bool) = REF_2 || REF_3
[i] TMP_21 cleared
clearing ir...?
RETURN TMP_21
Propogating parameters and globals to SSA variables...
Ssa_name: pairHash1_1, name: pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash1, Num: 1
Globalname: pairHash1, contract_name: TwapOracle
Ssa_name: pairHash0_1, name: pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash0, Num: 1
Globalname: pairHash0, contract_name: TwapOracle
Ssa_name: _pairExists_1, name: _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash1_1, name: pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash1, Num: 1
Globalname: pairHash1, contract_name: TwapOracle
Ssa_name: _pairExists_1, name: _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash0_1, name: pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash0, Num: 1
Globalname: pairHash0, contract_name: TwapOracle
End popogation
REF_2(bool) -> _pairExists_1[pairHash0_1]
INDEX
[i]Type for REF_2

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_3(bool) -> _pairExists_1[pairHash1_1]
INDEX
[i]Type for REF_3

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_21(bool) = REF_2 || REF_3
[i]Type for TMP_21

Name: TMP_21 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_21
RETURN

Name: TMP_21 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
token0_1(address) := ϕ(['token0_1'])
[i] token0 cleared
clearing ir...?
token1_1(address) := ϕ(['token1_1'])
[i] token1 cleared
clearing ir...?
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_1', '_pairExists_0', '_pairExists_2'])
[i] _pairExists cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
Source address: -991

Name: token0_1 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Source address: -990

Name: token1_1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _pairExists_1, name: _pairExists

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairExists, Num: 1
Globalname: _pairExists, contract_name: TwapOracle
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
token0_1(address) := ϕ(['token0_1'])
Phi
[i]Type for token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_1(address) := ϕ(['token1_1'])
Phi
[i]Type for token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_1', '_pairExists_0', '_pairExists_2'])
Phi
[i]Type for _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
clearing ir...?
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
clearing ir...?
pairHash0_1(bytes32) := TMP_18(bytes32)
[i] pairHash0 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash0_1, name: pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash0, Num: 1
Globalname: pairHash0, contract_name: TwapOracle
End popogation
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
[i]Type for TMP_18

Name: TMP_18 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairHash0_1(bytes32) := TMP_18(bytes32)
asgn
Finance type key: (-1, -1)
[i]Type for pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
clearing ir...?
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
clearing ir...?
pairHash1_1(bytes32) := TMP_20(bytes32)
[i] pairHash1 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash1_1, name: pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash1, Num: 1
Globalname: pairHash1, contract_name: TwapOracle
End popogation
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
[i]Type for TMP_19

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
[i]Type for TMP_20

Name: TMP_20 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairHash1_1(bytes32) := TMP_20(bytes32)
asgn
Finance type key: (-1, -1)
[i]Type for pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_2(bool) -> _pairExists_1[pairHash0_1]
[i] REF_2 cleared
clearing ir...?
REF_3(bool) -> _pairExists_1[pairHash1_1]
[i] REF_3 cleared
clearing ir...?
TMP_21(bool) = REF_2 || REF_3
[i] TMP_21 cleared
clearing ir...?
RETURN TMP_21
Propogating parameters and globals to SSA variables...
Ssa_name: pairHash1_1, name: pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash1, Num: 1
Globalname: pairHash1, contract_name: TwapOracle
Ssa_name: pairHash0_1, name: pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash0, Num: 1
Globalname: pairHash0, contract_name: TwapOracle
Ssa_name: _pairExists_1, name: _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash1_1, name: pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash1, Num: 1
Globalname: pairHash1, contract_name: TwapOracle
Ssa_name: _pairExists_1, name: _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash0_1, name: pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash0, Num: 1
Globalname: pairHash0, contract_name: TwapOracle
End popogation
REF_2(bool) -> _pairExists_1[pairHash0_1]
INDEX
[i]Type for REF_2

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_3(bool) -> _pairExists_1[pairHash1_1]
INDEX
[i]Type for REF_3

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_21(bool) = REF_2 || REF_3
[i]Type for TMP_21

Name: TMP_21 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_21
RETURN

Name: TMP_21 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_97

Name: TMP_97 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_98 = ! TMP_97 
[i]Type for TMP_98

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_99(None) = SOLIDITY_CALL require(bool,string)(TMP_98,TwapOracle::registerPair: Pair exists)
[i]Type for TMP_99

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_100(bool) = token0_1 == VADER_12
[i] TMP_100 cleared
clearing ir...?
CONDITION TMP_100
Propogating parameters and globals to SSA variables...
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: VADER_12, name: VADER

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: VADER, Num: 12
Globalname: VADER, contract_name: TwapOracle
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
Ssa_name: VADER_12, name: VADER

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_100(bool) = token0_1 == VADER_12
[i]Type for TMP_100

Name: TMP_100 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_107 = CONVERT _vaderPool_5 to address
[i] TMP_107 cleared
clearing ir...?
pairAddr_1(address) := TMP_107(address)
[i] pairAddr cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _vaderPool_5, name: _vaderPool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _vaderPool, Num: 5
Globalname: _vaderPool, contract_name: TwapOracle
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _vaderPool_5, name: _vaderPool

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairAddr_1, name: pairAddr

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairAddr, Num: 1
Globalname: pairAddr, contract_name: TwapOracle
End popogation
TMP_107 = CONVERT _vaderPool_5 to address
Converting _vaderPool_5

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_107

Name: TMP_107 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairAddr_1(address) := TMP_107(address)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pairAddr

Name: pairAddr Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_101 = CONVERT factory_1 to IUniswapV2Factory
[i] TMP_101 cleared
clearing ir...?
TMP_102(address) = HIGH_LEVEL_CALL, dest:TMP_101(IUniswapV2Factory), function:getPair, arguments:['token0_1', 'token1_1']  
[i] TMP_102 cleared
clearing ir...?
_pairs_11(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_10', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
TMP_103 = CONVERT TMP_102 to IUniswapV2Pair
[i] TMP_103 cleared
clearing ir...?
pair_1(IUniswapV2Pair) := TMP_103(IUniswapV2Pair)
[i] pair cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_1, name: factory

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -992

Name: factory_1 Function: registerPair
Num: 
Den: 
Address: -992
Norm: 0
LF: factory
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_1, name: factory

Name: factory_1 Function: registerPair
Num: 
Den: 
Address: -992
Norm: 0
LF: factory
Value: u
Fields: 
Finance Type: undef
Ssa_name: pair_1, name: pair

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pair, Num: 1
Globalname: pair, contract_name: TwapOracle
End popogation
Ssa_name: _pairs_11, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 11
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_101 = CONVERT factory_1 to IUniswapV2Factory
Converting factory_1

Name: factory_1 Function: registerPair
Num: 
Den: 
Address: -992
Norm: 0
LF: factory
Value: u
Fields: 
Finance Type: undef
Source address: -992
UniswapV2Factory
[i]Type for TMP_101

Name: TMP_101 Function: registerPair
Num: 
Den: 
Address: -992
Norm: 0
LF: UniswapV2Factory
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_102(address) = HIGH_LEVEL_CALL, dest:TMP_101(IUniswapV2Factory), function:getPair, arguments:['token0_1', 'token1_1']  
High Call: getPair
Running querryfc
Found: None
Written func info: IUniswapV2Factory, getPair
[i]Type for TMP_102

Name: TMP_102 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_11(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_10', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_103 = CONVERT TMP_102 to IUniswapV2Pair
Converting TMP_102

Name: TMP_102 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
UniswapV2Pair
[i]Type for TMP_103

Name: TMP_103 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
XXXX
pair_1(IUniswapV2Pair) := TMP_103(IUniswapV2Pair)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pair

Name: pair Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_108 = CONVERT token1_1 to IERC20
[i] TMP_108 cleared
clearing ir...?
TUPLE_2(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_5(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_108']  
[i] TUPLE_2 cleared
clearing ir...?
_vaderPool_6(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_5', '_vaderPool_1', '_vaderPool_7'])
[i] _vaderPool cleared
clearing ir...?
_pairs_9(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_8', '_pairs_4', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
price0CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 0 
[i] price0CumulativeLast cleared
clearing ir...?
price1CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 1 
[i] price1CumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: _vaderPool_5, name: _vaderPool

Name: _vaderPool Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _vaderPool_5, name: _vaderPool

Name: _vaderPool Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: price1CumulativeLast_1, name: price1CumulativeLast

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: price1CumulativeLast, Num: 1
Globalname: price1CumulativeLast, contract_name: TwapOracle
Ssa_name: price0CumulativeLast_1, name: price0CumulativeLast

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: price0CumulativeLast, Num: 1
Globalname: price0CumulativeLast, contract_name: TwapOracle
End popogation
Ssa_name: _vaderPool_6, name: _vaderPool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _vaderPool, Num: 6
Globalname: _vaderPool, contract_name: TwapOracle
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _pairs_9, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 9
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_108 = CONVERT token1_1 to IERC20
Converting token1_1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Source address: -990
ERC20
[i]Type for TMP_108

Name: TMP_108 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: ERC20
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_2(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_5(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_108']  
High Call: cumulativePrices
Running querryfc
Found: None
Written func info: IVaderPoolV2, cumulativePrices
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
TMP_108
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', ['global:USDV'], ['global:VADER'], -6, "'u'", 'u')
TMP_108
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
TMP_108
[i]Type for TUPLE_2

Name: TUPLE_2 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_vaderPool_6(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_5', '_vaderPool_1', '_vaderPool_7'])
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_9(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_8', '_pairs_4', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price0CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 0 
([2], [4], 12, "'u'", 'u', -1)
[i]Type for price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
price1CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 1 
([4], [2], -6, "'u'", 'u', -1)
[i]Type for price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_104 = CONVERT pair_1 to address
[i] TMP_104 cleared
clearing ir...?
pairAddr_2(address) := TMP_104(address)
[i] pairAddr cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pair_1, name: pair

Name: pair Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
Ssa_name: pair_1, name: pair

Name: pair Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairAddr_2, name: pairAddr

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairAddr, Num: 2
Globalname: pairAddr, contract_name: TwapOracle
End popogation
TMP_104 = CONVERT pair_1 to address
Converting pair_1

Name: pair Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_104

Name: TMP_104 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
XXXX
pairAddr_2(address) := TMP_104(address)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pairAddr

Name: pairAddr Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_109 = CONVERT token1_1 to IERC20
[i] TMP_109 cleared
clearing ir...?
TUPLE_3(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_6(IVaderPoolV2), function:getReserves, arguments:['TMP_109']  
[i] TUPLE_3 cleared
clearing ir...?
_vaderPool_7(IVaderPoolV2) := ϕ(['_vaderPool_1', '_vaderPool_10', '_vaderPool_6', '_vaderPool_5', '_vaderPool_7'])
[i] _vaderPool cleared
clearing ir...?
_pairs_10(TwapOracle.PairData[]) := ϕ(['_pairs_9', '_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
reserve0_1(uint112)= UNPACK TUPLE_3 index: 0 
[i] reserve0 cleared
clearing ir...?
reserve1_1(uint112)= UNPACK TUPLE_3 index: 1 
[i] reserve1 cleared
clearing ir...?
blockTimestampLast_1(uint32)= UNPACK TUPLE_3 index: 2 
[i] blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: _vaderPool_6, name: _vaderPool

Name: _vaderPool Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _vaderPool_6, name: _vaderPool

Name: _vaderPool Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserve0_1, name: reserve0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserve0, Num: 1
Globalname: reserve0, contract_name: TwapOracle
Ssa_name: reserve1_1, name: reserve1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserve1, Num: 1
Globalname: reserve1, contract_name: TwapOracle
Ssa_name: blockTimestampLast_1, name: blockTimestampLast

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestampLast, Num: 1
Globalname: blockTimestampLast, contract_name: TwapOracle
End popogation
Ssa_name: _vaderPool_7, name: _vaderPool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _vaderPool, Num: 7
Globalname: _vaderPool, contract_name: TwapOracle
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _pairs_10, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 10
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_109 = CONVERT token1_1 to IERC20
Converting token1_1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Source address: -990
ERC20
[i]Type for TMP_109

Name: TMP_109 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: ERC20
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_3(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_6(IVaderPoolV2), function:getReserves, arguments:['TMP_109']  
High Call: getReserves
Running querryfc
Found: None
Written func info: IVaderPoolV2, getReserves
Retvar: ('c', ['global:VADER'], ['-1'], 18, "'u'", 'u')
TMP_109
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', ['global:USDV'], ['-1'], 6, "'u'", 'u')
TMP_109
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
TMP_109
[i]Type for TUPLE_3

Name: TUPLE_3 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_vaderPool_7(IVaderPoolV2) := ϕ(['_vaderPool_1', '_vaderPool_10', '_vaderPool_6', '_vaderPool_5', '_vaderPool_7'])
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_10(TwapOracle.PairData[]) := ϕ(['_pairs_9', '_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_1(uint112)= UNPACK TUPLE_3 index: 0 
([2], [-1], 18, "'u'", 'u', -1)
[i]Type for reserve0

Name: reserve0 Function: registerPair
Num: 2
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
reserve1_1(uint112)= UNPACK TUPLE_3 index: 1 
([4], [-1], 6, "'u'", 'u', -1)
[i]Type for reserve1

Name: reserve1 Function: registerPair
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
blockTimestampLast_1(uint32)= UNPACK TUPLE_3 index: 2 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
pairAddr_3(address) := ϕ(['pairAddr_1', 'pairAddr_2'])
[i] pairAddr cleared
clearing ir...?
price0CumulativeLast_3(uint256) := ϕ(['price0CumulativeLast_1', 'price0CumulativeLast_2'])
[i] price0CumulativeLast cleared
clearing ir...?
price1CumulativeLast_3(uint256) := ϕ(['price1CumulativeLast_1', 'price1CumulativeLast_2'])
[i] price1CumulativeLast cleared
clearing ir...?
reserve0_3(uint112) := ϕ(['reserve0_1', 'reserve0_2'])
[i] reserve0 cleared
clearing ir...?
reserve1_3(uint112) := ϕ(['reserve1_1', 'reserve1_2'])
[i] reserve1 cleared
clearing ir...?
blockTimestampLast_3(uint32) := ϕ(['blockTimestampLast_1', 'blockTimestampLast_2'])
[i] blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: pairAddr_3, name: pairAddr

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairAddr, Num: 3
Globalname: pairAddr, contract_name: TwapOracle
Ssa_name: price0CumulativeLast_3, name: price0CumulativeLast

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: price0CumulativeLast, Num: 3
Globalname: price0CumulativeLast, contract_name: TwapOracle
Ssa_name: price1CumulativeLast_3, name: price1CumulativeLast

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: price1CumulativeLast, Num: 3
Globalname: price1CumulativeLast, contract_name: TwapOracle
Ssa_name: reserve0_3, name: reserve0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserve0, Num: 3
Globalname: reserve0, contract_name: TwapOracle
Ssa_name: reserve1_3, name: reserve1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserve1, Num: 3
Globalname: reserve1, contract_name: TwapOracle
Ssa_name: blockTimestampLast_3, name: blockTimestampLast

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestampLast, Num: 3
Globalname: blockTimestampLast, contract_name: TwapOracle
pairAddr_3(address) := ϕ(['pairAddr_1', 'pairAddr_2'])
Phi

Name: pairAddr Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: pairAddr Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for pairAddr

Name: pairAddr Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price0CumulativeLast_3(uint256) := ϕ(['price0CumulativeLast_1', 'price0CumulativeLast_2'])
Phi

Name: price0CumulativeLast Function: registerPair
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
price1CumulativeLast_3(uint256) := ϕ(['price1CumulativeLast_1', 'price1CumulativeLast_2'])
Phi

Name: price1CumulativeLast Function: registerPair
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
reserve0_3(uint112) := ϕ(['reserve0_1', 'reserve0_2'])
Phi

Name: reserve0 Function: registerPair
Num: 2
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for reserve0

Name: reserve0 Function: registerPair
Num: 2
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
reserve1_3(uint112) := ϕ(['reserve1_1', 'reserve1_2'])
Phi

Name: reserve1 Function: registerPair
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for reserve1

Name: reserve1 Function: registerPair
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
blockTimestampLast_3(uint32) := ϕ(['blockTimestampLast_1', 'blockTimestampLast_2'])
Phi

Name: blockTimestampLast Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price0CumulativeLast, arguments:[]  
[i] TMP_105 cleared
clearing ir...?
_pairs_12(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_11'])
[i] _pairs cleared
clearing ir...?
price0CumulativeLast_2(uint256) := TMP_105(uint256)
[i] price0CumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pair_1, name: pair

Name: pair Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
Ssa_name: pair_1, name: pair

Name: pair Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
Ssa_name: price0CumulativeLast_2, name: price0CumulativeLast

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: price0CumulativeLast, Num: 2
Globalname: price0CumulativeLast, contract_name: TwapOracle
End popogation
Ssa_name: _pairs_12, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 12
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price0CumulativeLast, arguments:[]  
High Call: price0CumulativeLast
Running querryfc
Found: None
Written func info: IUniswapV2Pair, price0CumulativeLast
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
([2], [4], 12, "'u'", 'u', -1)
[i]Type for TMP_105

Name: TMP_105 Function: registerPair
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_pairs_12(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_11'])
Phi
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price0CumulativeLast_2(uint256) := TMP_105(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_106(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price1CumulativeLast, arguments:[]  
[i] TMP_106 cleared
clearing ir...?
_pairs_13(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_12', '_pairs_4', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
price1CumulativeLast_2(uint256) := TMP_106(uint256)
[i] price1CumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pair_1, name: pair

Name: pair Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
Ssa_name: pair_1, name: pair

Name: pair Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
Ssa_name: price1CumulativeLast_2, name: price1CumulativeLast

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: price1CumulativeLast, Num: 2
Globalname: price1CumulativeLast, contract_name: TwapOracle
End popogation
Ssa_name: _pairs_13, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 13
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_106(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price1CumulativeLast, arguments:[]  
High Call: price1CumulativeLast
Running querryfc
Found: None
Written func info: IUniswapV2Pair, price1CumulativeLast
Retvar: ('c', ['global:USDV'], ['global:VADER'], -6, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
([4], [2], -6, "'u'", 'u', -1)
[i]Type for TMP_106

Name: TMP_106 Function: registerPair
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_pairs_13(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_12', '_pairs_4', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price1CumulativeLast_2(uint256) := TMP_106(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_110(bool) = reserve0_3 != 0
[i] TMP_110 cleared
clearing ir...?
TMP_111(bool) = reserve1_3 != 0
[i] TMP_111 cleared
clearing ir...?
TMP_112(bool) = TMP_110 && TMP_111
[i] TMP_112 cleared
clearing ir...?
TMP_113(None) = SOLIDITY_CALL require(bool,string)(TMP_112,TwapOracle::registerPair: No reserves)
Propogating parameters and globals to SSA variables...
Ssa_name: reserve0_3, name: reserve0

Name: reserve0 Function: registerPair
Num: 2
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: reserve1_3, name: reserve1

Name: reserve1 Function: registerPair
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: reserve0_3, name: reserve0

Name: reserve0 Function: registerPair
Num: 2
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: reserve1_3, name: reserve1

Name: reserve1 Function: registerPair
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
TMP_110(bool) = reserve0_3 != 0
[i]Type for TMP_110

Name: TMP_110 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_111(bool) = reserve1_3 != 0
[i]Type for TMP_111

Name: TMP_111 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_112(bool) = TMP_110 && TMP_111
[i]Type for TMP_112

Name: TMP_112 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_113(None) = SOLIDITY_CALL require(bool,string)(TMP_112,TwapOracle::registerPair: No reserves)
[i]Type for TMP_113

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TUPLE_1(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:getReserves, arguments:[]  
[i] TUPLE_1 cleared
clearing ir...?
_pairs_14(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_13', '_pairs_4', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
reserve0_2(uint112)= UNPACK TUPLE_1 index: 0 
[i] reserve0 cleared
clearing ir...?
reserve1_2(uint112)= UNPACK TUPLE_1 index: 1 
[i] reserve1 cleared
clearing ir...?
blockTimestampLast_2(uint32)= UNPACK TUPLE_1 index: 2 
[i] blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pair_1, name: pair

Name: pair Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
Ssa_name: pair_1, name: pair

Name: pair Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserve0_2, name: reserve0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserve0, Num: 2
Globalname: reserve0, contract_name: TwapOracle
Ssa_name: reserve1_2, name: reserve1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserve1, Num: 2
Globalname: reserve1, contract_name: TwapOracle
Ssa_name: blockTimestampLast_2, name: blockTimestampLast

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestampLast, Num: 2
Globalname: blockTimestampLast, contract_name: TwapOracle
End popogation
Ssa_name: _pairs_14, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 14
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TUPLE_1(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:getReserves, arguments:[]  
High Call: getReserves
Running querryfc
Found: None
Written func info: IUniswapV2Pair, getReserves
Retvar: ('c', ['global:VADER'], ['-1'], 18, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', ['global:USDV'], ['-1'], 6, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
[i]Type for TUPLE_1

Name: TUPLE_1 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_14(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_13', '_pairs_4', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_2(uint112)= UNPACK TUPLE_1 index: 0 
([2], [-1], 18, "'u'", 'u', -1)
[i]Type for reserve0

Name: reserve0 Function: registerPair
Num: 2
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
reserve1_2(uint112)= UNPACK TUPLE_1 index: 1 
([4], [-1], 6, "'u'", 'u', -1)
[i]Type for reserve1

Name: reserve1 Function: registerPair
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
blockTimestampLast_2(uint32)= UNPACK TUPLE_1 index: 2 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_114(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
clearing ir...?
TMP_115(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_114)
clearing ir...?
REF_27(bool) -> _pairExists_1[TMP_115]
[i] REF_27 cleared
clearing ir...?
_pairExists_2(mapping(bytes32 => bool)) := ϕ(['_pairExists_1'])
[i] _pairExists cleared
clearing ir...?
REF_27 (->_pairExists_2) := True(bool)
[i] REF_27 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairExists_2, name: _pairExists

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairExists, Num: 2
Globalname: _pairExists, contract_name: TwapOracle
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Ssa_name: _pairExists_2, name: _pairExists

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_114(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_114

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_115(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_114)
[i]Type for TMP_115

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_27(bool) -> _pairExists_1[TMP_115]
INDEX
[i]Type for REF_27

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
_pairExists_2(mapping(bytes32 => bool)) := ϕ(['_pairExists_1'])
Phi
[i]Type for _pairExists

Name: _pairExists Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_27 (->_pairExists_2) := True(bool)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_27

Name: REF_27 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied _pairExists
Source address: u
clearing ir...?
TMP_116 = new uq112x112(0)
clearing ir...?
TMP_117 = new uq112x112(0)
clearing ir...?
TMP_118 = new PairData(pairAddr_3,token0_1,token1_1,price0CumulativeLast_3,price1CumulativeLast_3,blockTimestampLast_3,TMP_116,TMP_117)
clearing ir...?
REF_31 -> LENGTH _pairs_14
clearing ir...?
TMP_120(uint256) := REF_31(uint256)
[i] TMP_120 cleared
clearing ir...?
TMP_121(uint256) = TMP_120 (c)+ 1
[i] TMP_121 cleared
clearing ir...?
_pairs_15(TwapOracle.PairData[]) := ϕ(['_pairs_14'])
[i] _pairs cleared
clearing ir...?
REF_31 (->_pairs_15) := TMP_121(uint256)
[i] REF_31 cleared
clearing ir...?
REF_32(TwapOracle.PairData) -> _pairs_15[TMP_120]
[i] REF_32 cleared
clearing ir...?
_pairs_16(TwapOracle.PairData[]) := ϕ(['_pairs_15'])
[i] _pairs cleared
clearing ir...?
REF_32 (->_pairs_16) := TMP_118(TwapOracle.PairData)
[i] REF_32 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestampLast_3, name: blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestampLast, Num: 3
Globalname: blockTimestampLast, contract_name: TwapOracle
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: price1CumulativeLast_3, name: price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: pairAddr_3, name: pairAddr

Name: pairAddr Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairAddr, Num: 3
Globalname: pairAddr, contract_name: TwapOracle
Ssa_name: price0CumulativeLast_3, name: price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: _pairs_14, name: _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairs_15, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 15
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestampLast_3, name: blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestampLast, Num: 3
Globalname: blockTimestampLast, contract_name: TwapOracle
Ssa_name: _pairs_14, name: _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairs_15, name: _pairs

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: price1CumulativeLast_3, name: price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: pairAddr_3, name: pairAddr

Name: pairAddr Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairAddr, Num: 3
Globalname: pairAddr, contract_name: TwapOracle
Ssa_name: price0CumulativeLast_3, name: price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: _pairs_15, name: _pairs

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairs_16, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 16
Globalname: _pairs, contract_name: TwapOracle
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Ssa_name: _pairs_15, name: _pairs

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairs_16, name: _pairs

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_116 = new uq112x112(0)
[i]Type for TMP_116

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117 = new uq112x112(0)
[i]Type for TMP_117

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_118 = new PairData(pairAddr_3,token0_1,token1_1,price0CumulativeLast_3,price1CumulativeLast_3,blockTimestampLast_3,TMP_116,TMP_117)
[i]Type for TMP_118

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_31 -> LENGTH _pairs_14
[i]Type for REF_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_120(uint256) := REF_31(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_120

Name: TMP_120 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_121(uint256) = TMP_120 (c)+ 1
Source address: u
[i]Type for TMP_121

Name: TMP_121 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
_pairs_15(TwapOracle.PairData[]) := ϕ(['_pairs_14'])
Phi
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_31 (->_pairs_15) := TMP_121(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_31

Name: REF_31 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_32(TwapOracle.PairData) -> _pairs_15[TMP_120]
INDEX
[i]Type for REF_32

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
_pairs_16(TwapOracle.PairData[]) := ϕ(['_pairs_15'])
Phi
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_32 (->_pairs_16) := TMP_118(TwapOracle.PairData)
asgn
Finance type key: (-1, -1)
[i]Type for REF_32

Name: REF_32 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied _pairs
Source address: u
Copied _pairs
Source address: u


VADER_9(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
USDV_6(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
_vaderPool_2(IVaderPoolV2) := ϕ(['_vaderPool_0', '_vaderPool_1', '_vaderPool_10', '_vaderPool_5', '_vaderPool_7'])
_pairs_5(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
MODIFIER_CALL, Ownable.onlyOwner()()
MODIFIER_CALL, TwapOracle.initialized()()
TMP_91(bool) = token0_1 == VADER_11
TMP_92(bool) = token0_1 == USDV_8
TMP_93(bool) = TMP_91 || TMP_92
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,TwapOracle::registerPair: Invalid token0 address)
TMP_95(bool) = token0_1 != token1_1
TMP_96(None) = SOLIDITY_CALL require(bool,string)(TMP_95,TwapOracle::registerPair: Same token address)
TMP_97(bool) = INTERNAL_CALL, TwapOracle.pairExists(address,address)(token0_1,token1_1)
TMP_98 = ! TMP_97 
TMP_99(None) = SOLIDITY_CALL require(bool,string)(TMP_98,TwapOracle::registerPair: Pair exists)
TMP_100(bool) = token0_1 == VADER_12
CONDITION TMP_100
TMP_107 = CONVERT _vaderPool_5 to address
pairAddr_1(address) := TMP_107(address)
TMP_101 = CONVERT factory_1 to IUniswapV2Factory
TMP_102(address) = HIGH_LEVEL_CALL, dest:TMP_101(IUniswapV2Factory), function:getPair, arguments:['token0_1', 'token1_1']  
_pairs_11(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_10', '_pairs_1', '_pairs_19'])
TMP_103 = CONVERT TMP_102 to IUniswapV2Pair
pair_1(IUniswapV2Pair) := TMP_103(IUniswapV2Pair)
TMP_108 = CONVERT token1_1 to IERC20
TUPLE_2(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_5(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_108']  
_vaderPool_6(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_5', '_vaderPool_1', '_vaderPool_7'])
_pairs_9(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_8', '_pairs_4', '_pairs_1', '_pairs_19'])
price0CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 0 
price1CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 1 
TMP_104 = CONVERT pair_1 to address
pairAddr_2(address) := TMP_104(address)
TMP_109 = CONVERT token1_1 to IERC20
TUPLE_3(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_6(IVaderPoolV2), function:getReserves, arguments:['TMP_109']  
_vaderPool_7(IVaderPoolV2) := ϕ(['_vaderPool_1', '_vaderPool_10', '_vaderPool_6', '_vaderPool_5', '_vaderPool_7'])
_pairs_10(TwapOracle.PairData[]) := ϕ(['_pairs_9', '_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19'])
reserve0_1(uint112)= UNPACK TUPLE_3 index: 0 
reserve1_1(uint112)= UNPACK TUPLE_3 index: 1 
blockTimestampLast_1(uint32)= UNPACK TUPLE_3 index: 2 
pairAddr_3(address) := ϕ(['pairAddr_1', 'pairAddr_2'])
price0CumulativeLast_3(uint256) := ϕ(['price0CumulativeLast_1', 'price0CumulativeLast_2'])
price1CumulativeLast_3(uint256) := ϕ(['price1CumulativeLast_1', 'price1CumulativeLast_2'])
reserve0_3(uint112) := ϕ(['reserve0_1', 'reserve0_2'])
reserve1_3(uint112) := ϕ(['reserve1_1', 'reserve1_2'])
blockTimestampLast_3(uint32) := ϕ(['blockTimestampLast_1', 'blockTimestampLast_2'])
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price0CumulativeLast, arguments:[]  
_pairs_12(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_11'])
price0CumulativeLast_2(uint256) := TMP_105(uint256)
TMP_106(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price1CumulativeLast, arguments:[]  
_pairs_13(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_12', '_pairs_4', '_pairs_1', '_pairs_19'])
price1CumulativeLast_2(uint256) := TMP_106(uint256)
TMP_110(bool) = reserve0_3 != 0
TMP_111(bool) = reserve1_3 != 0
TMP_112(bool) = TMP_110 && TMP_111
TMP_113(None) = SOLIDITY_CALL require(bool,string)(TMP_112,TwapOracle::registerPair: No reserves)
TUPLE_1(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:getReserves, arguments:[]  
_pairs_14(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_13', '_pairs_4', '_pairs_1', '_pairs_19'])
reserve0_2(uint112)= UNPACK TUPLE_1 index: 0 
reserve1_2(uint112)= UNPACK TUPLE_1 index: 1 
blockTimestampLast_2(uint32)= UNPACK TUPLE_1 index: 2 
TMP_114(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
TMP_115(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_114)
REF_27(bool) -> _pairExists_1[TMP_115]
_pairExists_2(mapping(bytes32 => bool)) := ϕ(['_pairExists_1'])
REF_27 (->_pairExists_2) := True(bool)
TMP_116 = new uq112x112(0)
TMP_117 = new uq112x112(0)
TMP_118 = new PairData(pairAddr_3,token0_1,token1_1,price0CumulativeLast_3,price1CumulativeLast_3,blockTimestampLast_3,TMP_116,TMP_117)
REF_31 -> LENGTH _pairs_14
TMP_120(uint256) := REF_31(uint256)
TMP_121(uint256) = TMP_120 (c)+ 1
_pairs_15(TwapOracle.PairData[]) := ϕ(['_pairs_14'])
REF_31 (->_pairs_15) := TMP_121(uint256)
REF_32(TwapOracle.PairData) -> _pairs_15[TMP_120]
_pairs_16(TwapOracle.PairData[]) := ϕ(['_pairs_15'])
REF_32 (->_pairs_16) := TMP_118(TwapOracle.PairData)


clearing ir...?
VADER_9(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
[i] VADER cleared
clearing ir...?
USDV_6(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
[i] USDV cleared
clearing ir...?
_vaderPool_2(IVaderPoolV2) := ϕ(['_vaderPool_0', '_vaderPool_1', '_vaderPool_10', '_vaderPool_5', '_vaderPool_7'])
[i] _vaderPool cleared
clearing ir...?
_pairs_5(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: VADER_9, name: VADER

Name: VADER Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: VADER
Value: u
Fields: 
Finance Type: undef
Name: VADER, Num: 9
Globalname: VADER, contract_name: TwapOracle
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
Ssa_name: USDV_6, name: USDV

Name: USDV Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: USDV
Value: u
Fields: 
Finance Type: undef
Name: USDV, Num: 6
Globalname: USDV, contract_name: TwapOracle
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Source address: 4
Ssa_name: _vaderPool_2, name: _vaderPool

Name: _vaderPool Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _vaderPool, Num: 2
Globalname: _vaderPool, contract_name: TwapOracle
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _pairs_5, name: _pairs

Name: _pairs Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 5
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
VADER_9(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
Phi
[i]Type for VADER

Name: VADER Function: registerPair
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
XXXX
USDV_6(address) := ϕ(['USDV_2', 'USDV_0', 'USDV_5', 'USDV_8'])
Phi
[i]Type for USDV

Name: USDV Function: registerPair
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
XXXX
_vaderPool_2(IVaderPoolV2) := ϕ(['_vaderPool_0', '_vaderPool_1', '_vaderPool_10', '_vaderPool_5', '_vaderPool_7'])
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_5(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
Phi
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
MODIFIER_CALL, Ownable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Ownable.onlyOwner()()
New param cache []
Old param cache: []
clearing ir...?
MODIFIER_CALL, TwapOracle.initialized()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, TwapOracle.initialized()()
New param cache []
Old param cache: []
clearing ir...?
TMP_91(bool) = token0_1 == VADER_11
[i] TMP_91 cleared
clearing ir...?
TMP_92(bool) = token0_1 == USDV_8
[i] TMP_92 cleared
clearing ir...?
TMP_93(bool) = TMP_91 || TMP_92
[i] TMP_93 cleared
clearing ir...?
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,TwapOracle::registerPair: Invalid token0 address)
Propogating parameters and globals to SSA variables...
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: VADER_11, name: VADER

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: USDV_8, name: USDV

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
Ssa_name: VADER_11, name: VADER

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: USDV_8, name: USDV

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_91(bool) = token0_1 == VADER_11
[i]Type for TMP_91

Name: TMP_91 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_92(bool) = token0_1 == USDV_8
[i]Type for TMP_92

Name: TMP_92 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_93(bool) = TMP_91 || TMP_92
[i]Type for TMP_93

Name: TMP_93 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,TwapOracle::registerPair: Invalid token0 address)
[i]Type for TMP_94

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_95(bool) = token0_1 != token1_1
[i] TMP_95 cleared
clearing ir...?
TMP_96(None) = SOLIDITY_CALL require(bool,string)(TMP_95,TwapOracle::registerPair: Same token address)
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_95(bool) = token0_1 != token1_1
[i]Type for TMP_95

Name: TMP_95 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_96(None) = SOLIDITY_CALL require(bool,string)(TMP_95,TwapOracle::registerPair: Same token address)
[i]Type for TMP_96

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_97(bool) = INTERNAL_CALL, TwapOracle.pairExists(address,address)(token0_1,token1_1)
[i] TMP_97 cleared
clearing ir...?
TMP_98 = ! TMP_97 
clearing ir...?
TMP_99(None) = SOLIDITY_CALL require(bool,string)(TMP_98,TwapOracle::registerPair: Pair exists)
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_97(bool) = INTERNAL_CALL, TwapOracle.pairExists(address,address)(token0_1,token1_1)
New param cache [[[], [], 18, 'token0', [], -1, -991, 'u'], [[], [], 6, 'token1', [], -1, -990, 'u']]
Old param cache: [[[], [], 18, 'token0', [], -1, -999], [[], [], 6, 'token1', [], -1, -998]]
Param: token0
[[], [], 18, 'token0', [], -1, -991, 'u']

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Param: token1
[[], [], 6, 'token1', [], -1, -990, 'u']

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
pairExists(address,address)
ENTRY_POINT
Propogating All
NEW VARIABLE pairHash0 = keccak256(bytes)(abi.encodePacked(token0,token1))
Propogating All
token1_1
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Source address: -990

Name: token1_1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Copied ftype
token0_1
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Source address: -991

Name: token0_1 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE pairHash1 = keccak256(bytes)(abi.encodePacked(token1,token0))
Propogating All
token1_1
Ssa_name: token1_1, name: token1

Name: token1_1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Source address: -990

Name: token1_1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Copied ftype
token0_1
Ssa_name: token0_1, name: token0

Name: token0_1 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Source address: -991

Name: token0_1 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Copied ftype
RETURN _pairExists[pairHash0] || _pairExists[pairHash1]
Propogating All
pairHash1_1
Ssa_name: pairHash1_1, name: pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairHash0_1
Ssa_name: pairHash0_1, name: pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
token0_1(address) := ϕ(['token0_1'])
[i] token0 cleared
clearing ir...?
token1_1(address) := ϕ(['token1_1'])
[i] token1 cleared
clearing ir...?
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_1', '_pairExists_0', '_pairExists_2'])
[i] _pairExists cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: token0_1, name: token0

Name: token0_1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
Source address: -991

Name: token0_1 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: token1_1, name: token1

Name: token1_1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Source address: -990

Name: token1_1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _pairExists_1, name: _pairExists

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairExists, Num: 1
Globalname: _pairExists, contract_name: TwapOracle
global...

Name: _pairExists Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
token0_1(address) := ϕ(['token0_1'])
Phi
[i]Type for token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_1(address) := ϕ(['token1_1'])
Phi
[i]Type for token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_1', '_pairExists_0', '_pairExists_2'])
Phi
[i]Type for _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
clearing ir...?
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
clearing ir...?
pairHash0_1(bytes32) := TMP_18(bytes32)
[i] pairHash0 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash0_1, name: pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash0, Num: 1
Globalname: pairHash0, contract_name: TwapOracle
End popogation
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
[i]Type for TMP_18

Name: TMP_18 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairHash0_1(bytes32) := TMP_18(bytes32)
asgn
Finance type key: (-1, -1)
[i]Type for pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
clearing ir...?
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
clearing ir...?
pairHash1_1(bytes32) := TMP_20(bytes32)
[i] pairHash1 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash1_1, name: pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash1, Num: 1
Globalname: pairHash1, contract_name: TwapOracle
End popogation
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
[i]Type for TMP_19

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
[i]Type for TMP_20

Name: TMP_20 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairHash1_1(bytes32) := TMP_20(bytes32)
asgn
Finance type key: (-1, -1)
[i]Type for pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_2(bool) -> _pairExists_1[pairHash0_1]
[i] REF_2 cleared
clearing ir...?
REF_3(bool) -> _pairExists_1[pairHash1_1]
[i] REF_3 cleared
clearing ir...?
TMP_21(bool) = REF_2 || REF_3
[i] TMP_21 cleared
clearing ir...?
RETURN TMP_21
Propogating parameters and globals to SSA variables...
Ssa_name: pairHash1_1, name: pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash1, Num: 1
Globalname: pairHash1, contract_name: TwapOracle
Ssa_name: pairHash0_1, name: pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash0, Num: 1
Globalname: pairHash0, contract_name: TwapOracle
Ssa_name: _pairExists_1, name: _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash1_1, name: pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash1, Num: 1
Globalname: pairHash1, contract_name: TwapOracle
Ssa_name: _pairExists_1, name: _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash0_1, name: pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash0, Num: 1
Globalname: pairHash0, contract_name: TwapOracle
End popogation
REF_2(bool) -> _pairExists_1[pairHash0_1]
INDEX
[i]Type for REF_2

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_3(bool) -> _pairExists_1[pairHash1_1]
INDEX
[i]Type for REF_3

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_21(bool) = REF_2 || REF_3
[i]Type for TMP_21

Name: TMP_21 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_21
RETURN

Name: TMP_21 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
token0_1(address) := ϕ(['token0_1'])
[i] token0 cleared
clearing ir...?
token1_1(address) := ϕ(['token1_1'])
[i] token1 cleared
clearing ir...?
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_1', '_pairExists_0', '_pairExists_2'])
[i] _pairExists cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
Source address: -991

Name: token0_1 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Source address: -990

Name: token1_1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _pairExists_1, name: _pairExists

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairExists, Num: 1
Globalname: _pairExists, contract_name: TwapOracle
global...

Name: _pairExists Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
token0_1(address) := ϕ(['token0_1'])
Phi
[i]Type for token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_1(address) := ϕ(['token1_1'])
Phi
[i]Type for token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_1', '_pairExists_0', '_pairExists_2'])
Phi
[i]Type for _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
clearing ir...?
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
clearing ir...?
pairHash0_1(bytes32) := TMP_18(bytes32)
[i] pairHash0 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash0_1, name: pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash0, Num: 1
Globalname: pairHash0, contract_name: TwapOracle
End popogation
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
[i]Type for TMP_18

Name: TMP_18 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairHash0_1(bytes32) := TMP_18(bytes32)
asgn
Finance type key: (-1, -1)
[i]Type for pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
clearing ir...?
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
clearing ir...?
pairHash1_1(bytes32) := TMP_20(bytes32)
[i] pairHash1 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash1_1, name: pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash1, Num: 1
Globalname: pairHash1, contract_name: TwapOracle
End popogation
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
[i]Type for TMP_19

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
[i]Type for TMP_20

Name: TMP_20 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairHash1_1(bytes32) := TMP_20(bytes32)
asgn
Finance type key: (-1, -1)
[i]Type for pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_2(bool) -> _pairExists_1[pairHash0_1]
[i] REF_2 cleared
clearing ir...?
REF_3(bool) -> _pairExists_1[pairHash1_1]
[i] REF_3 cleared
clearing ir...?
TMP_21(bool) = REF_2 || REF_3
[i] TMP_21 cleared
clearing ir...?
RETURN TMP_21
Propogating parameters and globals to SSA variables...
Ssa_name: pairHash1_1, name: pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash1, Num: 1
Globalname: pairHash1, contract_name: TwapOracle
Ssa_name: pairHash0_1, name: pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash0, Num: 1
Globalname: pairHash0, contract_name: TwapOracle
Ssa_name: _pairExists_1, name: _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash1_1, name: pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash1, Num: 1
Globalname: pairHash1, contract_name: TwapOracle
Ssa_name: _pairExists_1, name: _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairHash0_1, name: pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairHash0, Num: 1
Globalname: pairHash0, contract_name: TwapOracle
End popogation
REF_2(bool) -> _pairExists_1[pairHash0_1]
INDEX
[i]Type for REF_2

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_3(bool) -> _pairExists_1[pairHash1_1]
INDEX
[i]Type for REF_3

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_21(bool) = REF_2 || REF_3
[i]Type for TMP_21

Name: TMP_21 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_21
RETURN

Name: TMP_21 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_97

Name: TMP_97 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_98 = ! TMP_97 
[i]Type for TMP_98

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_99(None) = SOLIDITY_CALL require(bool,string)(TMP_98,TwapOracle::registerPair: Pair exists)
[i]Type for TMP_99

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_100(bool) = token0_1 == VADER_12
[i] TMP_100 cleared
clearing ir...?
CONDITION TMP_100
Propogating parameters and globals to SSA variables...
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: VADER_12, name: VADER

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: VADER_12, name: VADER

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_100(bool) = token0_1 == VADER_12
[i]Type for TMP_100

Name: TMP_100 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_107 = CONVERT _vaderPool_5 to address
[i] TMP_107 cleared
clearing ir...?
pairAddr_1(address) := TMP_107(address)
[i] pairAddr cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _vaderPool_5, name: _vaderPool

Name: _vaderPool Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _vaderPool_5, name: _vaderPool

Name: _vaderPool Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairAddr_1, name: pairAddr

Name: pairAddr Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairAddr, Num: 1
Globalname: pairAddr, contract_name: TwapOracle
End popogation
TMP_107 = CONVERT _vaderPool_5 to address
Converting _vaderPool_5

Name: _vaderPool Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_107

Name: TMP_107 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairAddr_1(address) := TMP_107(address)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pairAddr

Name: pairAddr Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_101 = CONVERT factory_1 to IUniswapV2Factory
[i] TMP_101 cleared
clearing ir...?
TMP_102(address) = HIGH_LEVEL_CALL, dest:TMP_101(IUniswapV2Factory), function:getPair, arguments:['token0_1', 'token1_1']  
[i] TMP_102 cleared
clearing ir...?
_pairs_11(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_10', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
TMP_103 = CONVERT TMP_102 to IUniswapV2Pair
[i] TMP_103 cleared
clearing ir...?
pair_1(IUniswapV2Pair) := TMP_103(IUniswapV2Pair)
[i] pair cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_1, name: factory

Name: factory_1 Function: registerPair
Num: 
Den: 
Address: -992
Norm: 0
LF: factory
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_1, name: factory

Name: factory_1 Function: registerPair
Num: 
Den: 
Address: -992
Norm: 0
LF: factory
Value: u
Fields: 
Finance Type: undef
Ssa_name: pair_1, name: pair

Name: pair Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
Name: pair, Num: 1
Globalname: pair, contract_name: TwapOracle
End popogation
Ssa_name: _pairs_11, name: _pairs

Name: _pairs Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 11
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_101 = CONVERT factory_1 to IUniswapV2Factory
Converting factory_1

Name: factory_1 Function: registerPair
Num: 
Den: 
Address: -992
Norm: 0
LF: factory
Value: u
Fields: 
Finance Type: undef
Source address: -992
UniswapV2Factory
[i]Type for TMP_101

Name: TMP_101 Function: registerPair
Num: 
Den: 
Address: -992
Norm: 0
LF: UniswapV2Factory
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_102(address) = HIGH_LEVEL_CALL, dest:TMP_101(IUniswapV2Factory), function:getPair, arguments:['token0_1', 'token1_1']  
High Call: getPair
Running querryfc
Found: None
Written func info: IUniswapV2Factory, getPair
[i]Type for TMP_102

Name: TMP_102 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_11(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_10', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_103 = CONVERT TMP_102 to IUniswapV2Pair
Converting TMP_102

Name: TMP_102 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
UniswapV2Pair
[i]Type for TMP_103

Name: TMP_103 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
XXXX
pair_1(IUniswapV2Pair) := TMP_103(IUniswapV2Pair)
asgn
Finance type key: (-1, -1)
[i]Type for pair

Name: pair Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_108 = CONVERT token1_1 to IERC20
[i] TMP_108 cleared
clearing ir...?
TUPLE_2(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_5(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_108']  
[i] TUPLE_2 cleared
clearing ir...?
_vaderPool_6(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_5', '_vaderPool_1', '_vaderPool_7'])
[i] _vaderPool cleared
clearing ir...?
_pairs_9(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_8', '_pairs_4', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
price0CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 0 
[i] price0CumulativeLast cleared
clearing ir...?
price1CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 1 
[i] price1CumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: _vaderPool_5, name: _vaderPool

Name: _vaderPool Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _vaderPool_5, name: _vaderPool

Name: _vaderPool Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: price1CumulativeLast_1, name: price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price1CumulativeLast, Num: 1
Globalname: price1CumulativeLast, contract_name: TwapOracle
Ssa_name: price0CumulativeLast_1, name: price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price0CumulativeLast, Num: 1
Globalname: price0CumulativeLast, contract_name: TwapOracle
End popogation
Ssa_name: _vaderPool_6, name: _vaderPool

Name: _vaderPool Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _vaderPool, Num: 6
Globalname: _vaderPool, contract_name: TwapOracle
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _pairs_9, name: _pairs

Name: _pairs Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 9
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_108 = CONVERT token1_1 to IERC20
Converting token1_1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Source address: -990
ERC20
[i]Type for TMP_108

Name: TMP_108 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: ERC20
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_2(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_5(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_108']  
High Call: cumulativePrices
Running querryfc
Found: None
Written func info: IVaderPoolV2, cumulativePrices
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
TMP_108
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', ['global:USDV'], ['global:VADER'], -6, "'u'", 'u')
TMP_108
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
TMP_108
[i]Type for TUPLE_2

Name: TUPLE_2 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_vaderPool_6(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_5', '_vaderPool_1', '_vaderPool_7'])
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_9(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_8', '_pairs_4', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price0CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 0 
([2], [4], 12, "'u'", 'u', -1)
[i]Type for price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
price1CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 1 
([4], [2], -6, "'u'", 'u', -1)
[i]Type for price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_104 = CONVERT pair_1 to address
[i] TMP_104 cleared
clearing ir...?
pairAddr_2(address) := TMP_104(address)
[i] pairAddr cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pair_1, name: pair

Name: pair Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
Name: pair, Num: 1
Globalname: pair, contract_name: TwapOracle
Ssa_name: pair_1, name: pair

Name: pair Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
Name: pair, Num: 1
Globalname: pair, contract_name: TwapOracle
Ssa_name: pairAddr_2, name: pairAddr

Name: pairAddr Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
Name: pairAddr, Num: 2
Globalname: pairAddr, contract_name: TwapOracle
End popogation
TMP_104 = CONVERT pair_1 to address
Converting pair_1

Name: pair Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_104

Name: TMP_104 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
XXXX
pairAddr_2(address) := TMP_104(address)
asgn
Finance type key: (-1, -1)
[i]Type for pairAddr

Name: pairAddr Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_109 = CONVERT token1_1 to IERC20
[i] TMP_109 cleared
clearing ir...?
TUPLE_3(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_6(IVaderPoolV2), function:getReserves, arguments:['TMP_109']  
[i] TUPLE_3 cleared
clearing ir...?
_vaderPool_7(IVaderPoolV2) := ϕ(['_vaderPool_1', '_vaderPool_10', '_vaderPool_6', '_vaderPool_5', '_vaderPool_7'])
[i] _vaderPool cleared
clearing ir...?
_pairs_10(TwapOracle.PairData[]) := ϕ(['_pairs_9', '_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
reserve0_1(uint112)= UNPACK TUPLE_3 index: 0 
[i] reserve0 cleared
clearing ir...?
reserve1_1(uint112)= UNPACK TUPLE_3 index: 1 
[i] reserve1 cleared
clearing ir...?
blockTimestampLast_1(uint32)= UNPACK TUPLE_3 index: 2 
[i] blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: _vaderPool_6, name: _vaderPool

Name: _vaderPool Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _vaderPool_6, name: _vaderPool

Name: _vaderPool Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserve0_1, name: reserve0

Name: reserve0 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: reserve0, Num: 1
Globalname: reserve0, contract_name: TwapOracle
Ssa_name: reserve1_1, name: reserve1

Name: reserve1 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: reserve1, Num: 1
Globalname: reserve1, contract_name: TwapOracle
Ssa_name: blockTimestampLast_1, name: blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestampLast, Num: 1
Globalname: blockTimestampLast, contract_name: TwapOracle
End popogation
Ssa_name: _vaderPool_7, name: _vaderPool

Name: _vaderPool Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _vaderPool, Num: 7
Globalname: _vaderPool, contract_name: TwapOracle
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _pairs_10, name: _pairs

Name: _pairs Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 10
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_109 = CONVERT token1_1 to IERC20
Converting token1_1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Source address: -990
ERC20
[i]Type for TMP_109

Name: TMP_109 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: ERC20
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_3(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_6(IVaderPoolV2), function:getReserves, arguments:['TMP_109']  
High Call: getReserves
Running querryfc
Found: None
Written func info: IVaderPoolV2, getReserves
Retvar: ('c', ['global:VADER'], ['-1'], 18, "'u'", 'u')
TMP_109
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', ['global:USDV'], ['-1'], 6, "'u'", 'u')
TMP_109
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
TMP_109
[i]Type for TUPLE_3

Name: TUPLE_3 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_vaderPool_7(IVaderPoolV2) := ϕ(['_vaderPool_1', '_vaderPool_10', '_vaderPool_6', '_vaderPool_5', '_vaderPool_7'])
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_10(TwapOracle.PairData[]) := ϕ(['_pairs_9', '_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_1(uint112)= UNPACK TUPLE_3 index: 0 
([2], [-1], 18, "'u'", 'u', -1)
[i]Type for reserve0

Name: reserve0 Function: registerPair
Num: 2
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
reserve1_1(uint112)= UNPACK TUPLE_3 index: 1 
([4], [-1], 6, "'u'", 'u', -1)
[i]Type for reserve1

Name: reserve1 Function: registerPair
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
blockTimestampLast_1(uint32)= UNPACK TUPLE_3 index: 2 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
pairAddr_3(address) := ϕ(['pairAddr_1', 'pairAddr_2'])
[i] pairAddr cleared
clearing ir...?
price0CumulativeLast_3(uint256) := ϕ(['price0CumulativeLast_1', 'price0CumulativeLast_2'])
[i] price0CumulativeLast cleared
clearing ir...?
price1CumulativeLast_3(uint256) := ϕ(['price1CumulativeLast_1', 'price1CumulativeLast_2'])
[i] price1CumulativeLast cleared
clearing ir...?
reserve0_3(uint112) := ϕ(['reserve0_1', 'reserve0_2'])
[i] reserve0 cleared
clearing ir...?
reserve1_3(uint112) := ϕ(['reserve1_1', 'reserve1_2'])
[i] reserve1 cleared
clearing ir...?
blockTimestampLast_3(uint32) := ϕ(['blockTimestampLast_1', 'blockTimestampLast_2'])
[i] blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: pairAddr_3, name: pairAddr

Name: pairAddr Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairAddr, Num: 3
Globalname: pairAddr, contract_name: TwapOracle
Ssa_name: price0CumulativeLast_3, name: price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price0CumulativeLast, Num: 3
Globalname: price0CumulativeLast, contract_name: TwapOracle
Ssa_name: price1CumulativeLast_3, name: price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price1CumulativeLast, Num: 3
Globalname: price1CumulativeLast, contract_name: TwapOracle
Ssa_name: reserve0_3, name: reserve0

Name: reserve0 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: reserve0, Num: 3
Globalname: reserve0, contract_name: TwapOracle
Ssa_name: reserve1_3, name: reserve1

Name: reserve1 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: reserve1, Num: 3
Globalname: reserve1, contract_name: TwapOracle
Ssa_name: blockTimestampLast_3, name: blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestampLast, Num: 3
Globalname: blockTimestampLast, contract_name: TwapOracle
pairAddr_3(address) := ϕ(['pairAddr_1', 'pairAddr_2'])
Phi

Name: pairAddr Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: pairAddr Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for pairAddr

Name: pairAddr Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price0CumulativeLast_3(uint256) := ϕ(['price0CumulativeLast_1', 'price0CumulativeLast_2'])
Phi

Name: price0CumulativeLast Function: registerPair
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: price0CumulativeLast Function: registerPair
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
price1CumulativeLast_3(uint256) := ϕ(['price1CumulativeLast_1', 'price1CumulativeLast_2'])
Phi

Name: price1CumulativeLast Function: registerPair
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: price1CumulativeLast Function: registerPair
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
reserve0_3(uint112) := ϕ(['reserve0_1', 'reserve0_2'])
Phi

Name: reserve0 Function: registerPair
Num: 2
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: reserve0 Function: registerPair
Num: 2
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for reserve0

Name: reserve0 Function: registerPair
Num: 2
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
reserve1_3(uint112) := ϕ(['reserve1_1', 'reserve1_2'])
Phi

Name: reserve1 Function: registerPair
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: reserve1 Function: registerPair
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for reserve1

Name: reserve1 Function: registerPair
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
blockTimestampLast_3(uint32) := ϕ(['blockTimestampLast_1', 'blockTimestampLast_2'])
Phi

Name: blockTimestampLast Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: blockTimestampLast Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price0CumulativeLast, arguments:[]  
[i] TMP_105 cleared
clearing ir...?
_pairs_12(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_11'])
[i] _pairs cleared
clearing ir...?
price0CumulativeLast_2(uint256) := TMP_105(uint256)
[i] price0CumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pair_1, name: pair

Name: pair Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
Name: pair, Num: 1
Globalname: pair, contract_name: TwapOracle
Ssa_name: pair_1, name: pair

Name: pair Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
Name: pair, Num: 1
Globalname: pair, contract_name: TwapOracle
Ssa_name: price0CumulativeLast_2, name: price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price0CumulativeLast, Num: 2
Globalname: price0CumulativeLast, contract_name: TwapOracle
End popogation
Ssa_name: _pairs_12, name: _pairs

Name: _pairs Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 12
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price0CumulativeLast, arguments:[]  
High Call: price0CumulativeLast
Running querryfc
Found: None
Written func info: IUniswapV2Pair, price0CumulativeLast
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
([2], [4], 12, "'u'", 'u', -1)
[i]Type for TMP_105

Name: TMP_105 Function: registerPair
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_pairs_12(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_11'])
Phi
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price0CumulativeLast_2(uint256) := TMP_105(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_106(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price1CumulativeLast, arguments:[]  
[i] TMP_106 cleared
clearing ir...?
_pairs_13(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_12', '_pairs_4', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
price1CumulativeLast_2(uint256) := TMP_106(uint256)
[i] price1CumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pair_1, name: pair

Name: pair Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
Name: pair, Num: 1
Globalname: pair, contract_name: TwapOracle
Ssa_name: pair_1, name: pair

Name: pair Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
Name: pair, Num: 1
Globalname: pair, contract_name: TwapOracle
Ssa_name: price1CumulativeLast_2, name: price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price1CumulativeLast, Num: 2
Globalname: price1CumulativeLast, contract_name: TwapOracle
End popogation
Ssa_name: _pairs_13, name: _pairs

Name: _pairs Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 13
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_106(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price1CumulativeLast, arguments:[]  
High Call: price1CumulativeLast
Running querryfc
Found: None
Written func info: IUniswapV2Pair, price1CumulativeLast
Retvar: ('c', ['global:USDV'], ['global:VADER'], -6, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
([4], [2], -6, "'u'", 'u', -1)
[i]Type for TMP_106

Name: TMP_106 Function: registerPair
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_pairs_13(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_12', '_pairs_4', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price1CumulativeLast_2(uint256) := TMP_106(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_110(bool) = reserve0_3 != 0
[i] TMP_110 cleared
clearing ir...?
TMP_111(bool) = reserve1_3 != 0
[i] TMP_111 cleared
clearing ir...?
TMP_112(bool) = TMP_110 && TMP_111
[i] TMP_112 cleared
clearing ir...?
TMP_113(None) = SOLIDITY_CALL require(bool,string)(TMP_112,TwapOracle::registerPair: No reserves)
Propogating parameters and globals to SSA variables...
Ssa_name: reserve0_3, name: reserve0

Name: reserve0 Function: registerPair
Num: 2
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: reserve1_3, name: reserve1

Name: reserve1 Function: registerPair
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: reserve0_3, name: reserve0

Name: reserve0 Function: registerPair
Num: 2
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: reserve1_3, name: reserve1

Name: reserve1 Function: registerPair
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
TMP_110(bool) = reserve0_3 != 0
[i]Type for TMP_110

Name: TMP_110 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_111(bool) = reserve1_3 != 0
[i]Type for TMP_111

Name: TMP_111 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_112(bool) = TMP_110 && TMP_111
[i]Type for TMP_112

Name: TMP_112 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_113(None) = SOLIDITY_CALL require(bool,string)(TMP_112,TwapOracle::registerPair: No reserves)
[i]Type for TMP_113

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TUPLE_1(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:getReserves, arguments:[]  
[i] TUPLE_1 cleared
clearing ir...?
_pairs_14(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_13', '_pairs_4', '_pairs_1', '_pairs_19'])
[i] _pairs cleared
clearing ir...?
reserve0_2(uint112)= UNPACK TUPLE_1 index: 0 
[i] reserve0 cleared
clearing ir...?
reserve1_2(uint112)= UNPACK TUPLE_1 index: 1 
[i] reserve1 cleared
clearing ir...?
blockTimestampLast_2(uint32)= UNPACK TUPLE_1 index: 2 
[i] blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pair_1, name: pair

Name: pair Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
Name: pair, Num: 1
Globalname: pair, contract_name: TwapOracle
Ssa_name: pair_1, name: pair

Name: pair Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
Name: pair, Num: 1
Globalname: pair, contract_name: TwapOracle
Ssa_name: reserve0_2, name: reserve0

Name: reserve0 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: reserve0, Num: 2
Globalname: reserve0, contract_name: TwapOracle
Ssa_name: reserve1_2, name: reserve1

Name: reserve1 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: reserve1, Num: 2
Globalname: reserve1, contract_name: TwapOracle
Ssa_name: blockTimestampLast_2, name: blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestampLast, Num: 2
Globalname: blockTimestampLast, contract_name: TwapOracle
End popogation
Ssa_name: _pairs_14, name: _pairs

Name: _pairs Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 14
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TUPLE_1(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:getReserves, arguments:[]  
High Call: getReserves
Running querryfc
Found: None
Written func info: IUniswapV2Pair, getReserves
Retvar: ('c', ['global:VADER'], ['-1'], 18, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', ['global:USDV'], ['-1'], 6, "'u'", 'u')
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
[i]Type for TUPLE_1

Name: TUPLE_1 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_14(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_13', '_pairs_4', '_pairs_1', '_pairs_19'])
Phi
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_2(uint112)= UNPACK TUPLE_1 index: 0 
([2], [-1], 18, "'u'", 'u', -1)
[i]Type for reserve0

Name: reserve0 Function: registerPair
Num: 2
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
reserve1_2(uint112)= UNPACK TUPLE_1 index: 1 
([4], [-1], 6, "'u'", 'u', -1)
[i]Type for reserve1

Name: reserve1 Function: registerPair
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
blockTimestampLast_2(uint32)= UNPACK TUPLE_1 index: 2 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_114(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
clearing ir...?
TMP_115(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_114)
clearing ir...?
REF_27(bool) -> _pairExists_1[TMP_115]
[i] REF_27 cleared
clearing ir...?
_pairExists_2(mapping(bytes32 => bool)) := ϕ(['_pairExists_1'])
[i] _pairExists cleared
clearing ir...?
REF_27 (->_pairExists_2) := True(bool)
[i] REF_27 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairExists_2, name: _pairExists

Name: _pairExists Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairExists, Num: 2
Globalname: _pairExists, contract_name: TwapOracle
global...

Name: _pairExists Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Ssa_name: _pairExists_2, name: _pairExists

Name: _pairExists Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_114(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_114

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_115(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_114)
[i]Type for TMP_115

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_27(bool) -> _pairExists_1[TMP_115]
INDEX
[i]Type for REF_27

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
_pairExists_2(mapping(bytes32 => bool)) := ϕ(['_pairExists_1'])
Phi
[i]Type for _pairExists

Name: _pairExists Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_27 (->_pairExists_2) := True(bool)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_27

Name: REF_27 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied _pairExists
Source address: u
clearing ir...?
TMP_116 = new uq112x112(0)
clearing ir...?
TMP_117 = new uq112x112(0)
clearing ir...?
TMP_118 = new PairData(pairAddr_3,token0_1,token1_1,price0CumulativeLast_3,price1CumulativeLast_3,blockTimestampLast_3,TMP_116,TMP_117)
clearing ir...?
REF_31 -> LENGTH _pairs_14
clearing ir...?
TMP_120(uint256) := REF_31(uint256)
[i] TMP_120 cleared
clearing ir...?
TMP_121(uint256) = TMP_120 (c)+ 1
[i] TMP_121 cleared
clearing ir...?
_pairs_15(TwapOracle.PairData[]) := ϕ(['_pairs_14'])
[i] _pairs cleared
clearing ir...?
REF_31 (->_pairs_15) := TMP_121(uint256)
[i] REF_31 cleared
clearing ir...?
REF_32(TwapOracle.PairData) -> _pairs_15[TMP_120]
[i] REF_32 cleared
clearing ir...?
_pairs_16(TwapOracle.PairData[]) := ϕ(['_pairs_15'])
[i] _pairs cleared
clearing ir...?
REF_32 (->_pairs_16) := TMP_118(TwapOracle.PairData)
[i] REF_32 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestampLast_3, name: blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestampLast, Num: 3
Globalname: blockTimestampLast, contract_name: TwapOracle
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: price1CumulativeLast_3, name: price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: pairAddr_3, name: pairAddr

Name: pairAddr Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairAddr, Num: 3
Globalname: pairAddr, contract_name: TwapOracle
Ssa_name: price0CumulativeLast_3, name: price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: _pairs_14, name: _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairs_15, name: _pairs

Name: _pairs Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 15
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: token0_1, name: token0

Name: token0_1 Function: registerPair
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestampLast_3, name: blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestampLast, Num: 3
Globalname: blockTimestampLast, contract_name: TwapOracle
Ssa_name: _pairs_14, name: _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairs_15, name: _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: token1_1, name: token1

Name: token1_1 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
Ssa_name: price1CumulativeLast_3, name: price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: pairAddr_3, name: pairAddr

Name: pairAddr Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairAddr, Num: 3
Globalname: pairAddr, contract_name: TwapOracle
Ssa_name: price0CumulativeLast_3, name: price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: _pairs_15, name: _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairs_16, name: _pairs

Name: _pairs Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 16
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Ssa_name: _pairs_15, name: _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairs_16, name: _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_116 = new uq112x112(0)
[i]Type for TMP_116

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117 = new uq112x112(0)
[i]Type for TMP_117

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_118 = new PairData(pairAddr_3,token0_1,token1_1,price0CumulativeLast_3,price1CumulativeLast_3,blockTimestampLast_3,TMP_116,TMP_117)
[i]Type for TMP_118

Name: TMP_118 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_31 -> LENGTH _pairs_14
[i]Type for REF_31

Name: REF_31 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_120(uint256) := REF_31(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_120

Name: TMP_120 Function: registerPair
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
TMP_121(uint256) = TMP_120 (c)+ 1
Source address: u
[i]Type for TMP_121

Name: TMP_121 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
_pairs_15(TwapOracle.PairData[]) := ϕ(['_pairs_14'])
Phi
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_31 (->_pairs_15) := TMP_121(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_31

Name: REF_31 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_32(TwapOracle.PairData) -> _pairs_15[TMP_120]
INDEX
[i]Type for REF_32

Name: _pairs Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
_pairs_16(TwapOracle.PairData[]) := ϕ(['_pairs_15'])
Phi
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_32 (->_pairs_16) := TMP_118(TwapOracle.PairData)
asgn
Finance type key: (-1, -1)
[i]Type for REF_32

Name: REF_32 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied _pairs
Source address: u
Copied _pairs
Source address: u
Reading Function: update
Checking funcion...



update
Function name: update
New param cache []
FIND RETURN
ENTRY_POINT
update()


VADER_13(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
_vaderPool_8(IVaderPoolV2) := ϕ(['_vaderPool_0', '_vaderPool_1', '_vaderPool_10', '_vaderPool_5', '_vaderPool_7'])
_updatePeriod_2(uint256) := ϕ(['_updatePeriod_1', '_updatePeriod_4', '_updatePeriod_0'])
_pairs_17(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
MODIFIER_CALL, Ownable.onlyOwner()()
MODIFIER_CALL, TwapOracle.initialized()()
REF_33 -> LENGTH _pairs_19
pairCount_1(uint256) := REF_33(uint256)
i_1(uint256) := 0(uint256)
i_2(uint256) := ϕ(['i_3', 'i_1'])
TMP_124(bool) = i_2 < pairCount_1
CONDITION TMP_124
REF_34(TwapOracle.PairData) -> _pairs_19[i_2]
pairData_1 (-> ['_pairs'])(TwapOracle.PairData) := REF_34(TwapOracle.PairData)
REF_45(address) -> pairData_1 (-> ['_pairs']).token0
TMP_139(bool) = REF_45 == VADER_15
CONDITION TMP_139
REF_49(address) -> pairData_1 (-> ['_pairs']).token1
TMP_140 = CONVERT REF_49 to IERC20
TUPLE_5(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_10(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_140']  
VADER_16(address) := ϕ(['VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
_vaderPool_11(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_5', '_vaderPool_1', '_vaderPool_7'])
_updatePeriod_5(uint256) := ϕ(['_updatePeriod_1', '_updatePeriod_4'])
_pairs_20(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
price0Cumulative_1(uint256)= UNPACK TUPLE_5 index: 0 
price1Cumulative_1(uint256)= UNPACK TUPLE_5 index: 1 
blockTimestamp_1(uint32)= UNPACK TUPLE_5 index: 2 
REF_47(address) -> pairData_1 (-> ['_pairs']).pair
TUPLE_4(uint256,uint256,uint32) = LIBRARY_CALL, dest:UniswapV2OracleLibrary, function:UniswapV2OracleLibrary.currentCumulativePrices(address), arguments:['REF_47'] 
price0Cumulative_2(uint256)= UNPACK TUPLE_4 index: 0 
price1Cumulative_2(uint256)= UNPACK TUPLE_4 index: 1 
blockTimestamp_2(uint32)= UNPACK TUPLE_4 index: 2 
price0Cumulative_3(uint256) := ϕ(['price0Cumulative_1', 'price0Cumulative_2'])
price1Cumulative_3(uint256) := ϕ(['price1Cumulative_1', 'price1Cumulative_2'])
blockTimestamp_3(uint32) := ϕ(['blockTimestamp_1', 'blockTimestamp_2'])
REF_35(uint32) -> pairData_1 (-> ['_pairs']).blockTimestampLast
TMP_125(uint32) = blockTimestamp_3 (c)- REF_35
timeElapsed_1(uint32) := TMP_125(uint32)
TMP_126(bool) = timeElapsed_1 >= _updatePeriod_4
TMP_127(None) = SOLIDITY_CALL require(bool,string)(TMP_126,TwapOracle::update: Period not elapsed)
REF_36(FixedPoint.uq112x112) -> pairData_1 (-> ['_pairs']).price0Average
REF_38(uint256) -> pairData_1 (-> ['_pairs']).price0CumulativeLast
TMP_128(uint256) = price0Cumulative_3 - REF_38
TMP_129(uint256) = TMP_128 / timeElapsed_1
TMP_130 = CONVERT TMP_129 to uint224
TMP_131 = new uq112x112(TMP_130)
pairData_2 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_1 (-> ['_pairs'])"])
REF_36 (->pairData_2 (-> ['_pairs'])) := TMP_131(FixedPoint.uq112x112)
_pairs_21(TwapOracle.PairData[]) := ϕ(["pairData_2 (-> ['_pairs'])"])
REF_39(FixedPoint.uq112x112) -> pairData_2 (-> ['_pairs']).price1Average
REF_41(uint256) -> pairData_2 (-> ['_pairs']).price1CumulativeLast
TMP_132(uint256) = price1Cumulative_3 - REF_41
TMP_133(uint256) = TMP_132 / timeElapsed_1
TMP_134 = CONVERT TMP_133 to uint224
TMP_135 = new uq112x112(TMP_134)
pairData_3 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_2 (-> ['_pairs'])"])
REF_39 (->pairData_3 (-> ['_pairs'])) := TMP_135(FixedPoint.uq112x112)
_pairs_22(TwapOracle.PairData[]) := ϕ(["pairData_3 (-> ['_pairs'])"])
REF_42(uint256) -> pairData_3 (-> ['_pairs']).price0CumulativeLast
pairData_4 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_3 (-> ['_pairs'])"])
REF_42 (->pairData_4 (-> ['_pairs'])) := price0Cumulative_3(uint256)
_pairs_23(TwapOracle.PairData[]) := ϕ(["pairData_4 (-> ['_pairs'])"])
REF_43(uint256) -> pairData_4 (-> ['_pairs']).price1CumulativeLast
pairData_5 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_4 (-> ['_pairs'])"])
REF_43 (->pairData_5 (-> ['_pairs'])) := price1Cumulative_3(uint256)
_pairs_24(TwapOracle.PairData[]) := ϕ(["pairData_5 (-> ['_pairs'])"])
REF_44(uint32) -> pairData_5 (-> ['_pairs']).blockTimestampLast
pairData_6 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_5 (-> ['_pairs'])"])
REF_44 (->pairData_6 (-> ['_pairs'])) := blockTimestamp_3(uint32)
_pairs_25(TwapOracle.PairData[]) := ϕ(["pairData_6 (-> ['_pairs'])"])
TMP_136(uint256) := i_2(uint256)
i_3(uint256) = i_2 (c)+ 1


clearing ir...?
VADER_13(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
[i] VADER cleared
clearing ir...?
_vaderPool_8(IVaderPoolV2) := ϕ(['_vaderPool_0', '_vaderPool_1', '_vaderPool_10', '_vaderPool_5', '_vaderPool_7'])
[i] _vaderPool cleared
clearing ir...?
_updatePeriod_2(uint256) := ϕ(['_updatePeriod_1', '_updatePeriod_4', '_updatePeriod_0'])
[i] _updatePeriod cleared
clearing ir...?
_pairs_17(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: VADER_13, name: VADER

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: VADER, Num: 13
Globalname: VADER, contract_name: TwapOracle
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
Ssa_name: _vaderPool_8, name: _vaderPool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _vaderPool, Num: 8
Globalname: _vaderPool, contract_name: TwapOracle
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _updatePeriod_2, name: _updatePeriod

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _updatePeriod, Num: 2
Globalname: _updatePeriod, contract_name: TwapOracle
global...

Name: PIC_8 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _pairs_17, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 17
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
VADER_13(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
Phi
[i]Type for VADER

Name: VADER Function: update
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
XXXX
_vaderPool_8(IVaderPoolV2) := ϕ(['_vaderPool_0', '_vaderPool_1', '_vaderPool_10', '_vaderPool_5', '_vaderPool_7'])
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_updatePeriod_2(uint256) := ϕ(['_updatePeriod_1', '_updatePeriod_4', '_updatePeriod_0'])
Phi
[i]Type for _updatePeriod

Name: _updatePeriod Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_17(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
Phi
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
MODIFIER_CALL, Ownable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Ownable.onlyOwner()()
New param cache []
Old param cache: []
clearing ir...?
MODIFIER_CALL, TwapOracle.initialized()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, TwapOracle.initialized()()
New param cache []
Old param cache: []
clearing ir...?
REF_33 -> LENGTH _pairs_19
clearing ir...?
pairCount_1(uint256) := REF_33(uint256)
[i] pairCount cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pairs_19, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 19
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _pairs_19, name: _pairs

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairCount_1, name: pairCount

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
End popogation
REF_33 -> LENGTH _pairs_19
[i]Type for REF_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairCount_1(uint256) := REF_33(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
i_1(uint256) := 0(uint256)
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_1, name: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 1
Globalname: i, contract_name: TwapOracle
End popogation
i_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
i_2(uint256) := ϕ(['i_3', 'i_1'])
[i] i cleared
clearing ir...?
TMP_124(bool) = i_2 < pairCount_1
[i] TMP_124 cleared
clearing ir...?
CONDITION TMP_124
Propogating parameters and globals to SSA variables...
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
End popogation
Ssa_name: i_2, name: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
i_2(uint256) := ϕ(['i_3', 'i_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: i Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for i

Name: i Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_124(bool) = i_2 < pairCount_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_124

Name: TMP_124 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_34(TwapOracle.PairData) -> _pairs_19[i_2]
[i] REF_34 cleared
clearing ir...?
pairData_1 (-> ['_pairs'])(TwapOracle.PairData) := REF_34(TwapOracle.PairData)
[i] pairData cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_19, name: _pairs

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: i_2, name: i

Name: i Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_19, name: _pairs

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData_1 (-> [', Num: pairs'])
Globalname: pairData_1 (-> [', contract_name: TwapOracle
End popogation
REF_34(TwapOracle.PairData) -> _pairs_19[i_2]
INDEX
[i]Type for REF_34

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['_pairs'])(TwapOracle.PairData) := REF_34(TwapOracle.PairData)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_45(address) -> pairData_1 (-> ['_pairs']).token0
[i] REF_45 cleared
clearing ir...?
TMP_139(bool) = REF_45 == VADER_15
[i] TMP_139 cleared
clearing ir...?
CONDITION TMP_139
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: VADER_15, name: VADER

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: VADER, Num: 15
Globalname: VADER, contract_name: TwapOracle
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: VADER_15, name: VADER

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
End popogation
REF_45(address) -> pairData_1 (-> ['_pairs']).token0
MEMBER
OUT KEY: update_pairData_token0
OUT KEY: update_pairData_token0
FTT: None
No field found
[i]Type for REF_45

Name: REF_45 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['_pairs']), Field: token0
#################
Member: 
Name: pairData Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: token0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_45 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_139(bool) = REF_45 == VADER_15
[i]Type for TMP_139

Name: TMP_139 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_49(address) -> pairData_1 (-> ['_pairs']).token1
[i] REF_49 cleared
clearing ir...?
TMP_140 = CONVERT REF_49 to IERC20
[i] TMP_140 cleared
clearing ir...?
TUPLE_5(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_10(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_140']  
[i] TUPLE_5 cleared
clearing ir...?
VADER_16(address) := ϕ(['VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
[i] VADER cleared
clearing ir...?
_vaderPool_11(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_5', '_vaderPool_1', '_vaderPool_7'])
[i] _vaderPool cleared
clearing ir...?
_updatePeriod_5(uint256) := ϕ(['_updatePeriod_1', '_updatePeriod_4'])
[i] _updatePeriod cleared
clearing ir...?
_pairs_20(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i] _pairs cleared
clearing ir...?
price0Cumulative_1(uint256)= UNPACK TUPLE_5 index: 0 
[i] price0Cumulative cleared
clearing ir...?
price1Cumulative_1(uint256)= UNPACK TUPLE_5 index: 1 
[i] price1Cumulative cleared
clearing ir...?
blockTimestamp_1(uint32)= UNPACK TUPLE_5 index: 2 
[i] blockTimestamp cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0
Finance Type: undef
Ssa_name: _vaderPool_10, name: _vaderPool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _vaderPool, Num: 10
Globalname: _vaderPool, contract_name: TwapOracle
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _vaderPool_10, name: _vaderPool

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0
Finance Type: undef
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: TwapOracle
Ssa_name: price0Cumulative_1, name: price0Cumulative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: price0Cumulative, Num: 1
Globalname: price0Cumulative, contract_name: TwapOracle
Ssa_name: price1Cumulative_1, name: price1Cumulative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: price1Cumulative, Num: 1
Globalname: price1Cumulative, contract_name: TwapOracle
End popogation
Ssa_name: VADER_16, name: VADER

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: VADER, Num: 16
Globalname: VADER, contract_name: TwapOracle
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
Ssa_name: _vaderPool_11, name: _vaderPool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _vaderPool, Num: 11
Globalname: _vaderPool, contract_name: TwapOracle
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _updatePeriod_5, name: _updatePeriod

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _updatePeriod, Num: 5
Globalname: _updatePeriod, contract_name: TwapOracle
global...

Name: PIC_8 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _pairs_20, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 20
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
REF_49(address) -> pairData_1 (-> ['_pairs']).token1
MEMBER
OUT KEY: update_pairData_token1
OUT KEY: update_pairData_token1
FTT: None
No field found
[i]Type for REF_49

Name: REF_49 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['_pairs']), Field: token1
#################
Member: 
Name: pairData Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0
Finance Type: undef
Fieldf: 
Name: token1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_49 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_140 = CONVERT REF_49 to IERC20
Converting REF_49

Name: REF_49 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ERC20
[i]Type for TMP_140

Name: TMP_140 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: ERC20
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_5(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_10(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_140']  
High Call: cumulativePrices
Running querryfc
Found: None
Written func info: IVaderPoolV2, cumulativePrices
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
TMP_140
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', ['global:USDV'], ['global:VADER'], -6, "'u'", 'u')
TMP_140
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
TMP_140
[i]Type for TUPLE_5

Name: TUPLE_5 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
VADER_16(address) := ϕ(['VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
Phi
[i]Type for VADER

Name: VADER Function: update
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
XXXX
_vaderPool_11(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_5', '_vaderPool_1', '_vaderPool_7'])
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_updatePeriod_5(uint256) := ϕ(['_updatePeriod_1', '_updatePeriod_4'])
Phi
[i]Type for _updatePeriod

Name: _updatePeriod Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_20(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
Phi
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price0Cumulative_1(uint256)= UNPACK TUPLE_5 index: 0 
([2], [4], 12, "'u'", 'u', -1)
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
price1Cumulative_1(uint256)= UNPACK TUPLE_5 index: 1 
([4], [2], -6, "'u'", 'u', -1)
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
blockTimestamp_1(uint32)= UNPACK TUPLE_5 index: 2 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_47(address) -> pairData_1 (-> ['_pairs']).pair
[i] REF_47 cleared
clearing ir...?
TUPLE_4(uint256,uint256,uint32) = LIBRARY_CALL, dest:UniswapV2OracleLibrary, function:UniswapV2OracleLibrary.currentCumulativePrices(address), arguments:['REF_47'] 
[i] TUPLE_4 cleared
clearing ir...?
price0Cumulative_2(uint256)= UNPACK TUPLE_4 index: 0 
[i] price0Cumulative cleared
clearing ir...?
price1Cumulative_2(uint256)= UNPACK TUPLE_4 index: 1 
[i] price1Cumulative cleared
clearing ir...?
blockTimestamp_2(uint32)= UNPACK TUPLE_4 index: 2 
[i] blockTimestamp cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1
Finance Type: undef
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1
Finance Type: undef
Ssa_name: price0Cumulative_2, name: price0Cumulative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: price0Cumulative, Num: 2
Globalname: price0Cumulative, contract_name: TwapOracle
Ssa_name: price1Cumulative_2, name: price1Cumulative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: price1Cumulative, Num: 2
Globalname: price1Cumulative, contract_name: TwapOracle
Ssa_name: blockTimestamp_2, name: blockTimestamp

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 2
Globalname: blockTimestamp, contract_name: TwapOracle
End popogation
REF_47(address) -> pairData_1 (-> ['_pairs']).pair
MEMBER
OUT KEY: update_pairData_pair
OUT KEY: update_pairData_pair
FTT: None
No field found
[i]Type for REF_47

Name: REF_47 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['_pairs']), Field: pair
#################
Member: 
Name: pairData Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1
Finance Type: undef
Fieldf: 
Name: pair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_47 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TUPLE_4(uint256,uint256,uint32) = LIBRARY_CALL, dest:UniswapV2OracleLibrary, function:UniswapV2OracleLibrary.currentCumulativePrices(address), arguments:['REF_47'] 
Found: None
Written func info: UniswapV2OracleLibrary, currentCumulativePrices
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
REF_47
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', ['global:USDV'], ['global:VADER'], -6, "'u'", 'u')
REF_47
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
REF_47
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
REF_47
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', ['global:USDV'], ['global:VADER'], -6, "'u'", 'u')
REF_47
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
REF_47
[i]Type for TUPLE_4

Name: TUPLE_4 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price0Cumulative_2(uint256)= UNPACK TUPLE_4 index: 0 
([2], [4], 12, "'u'", 'u', -1)
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
price1Cumulative_2(uint256)= UNPACK TUPLE_4 index: 1 
([4], [2], -6, "'u'", 'u', -1)
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
blockTimestamp_2(uint32)= UNPACK TUPLE_4 index: 2 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
price0Cumulative_3(uint256) := ϕ(['price0Cumulative_1', 'price0Cumulative_2'])
[i] price0Cumulative cleared
clearing ir...?
price1Cumulative_3(uint256) := ϕ(['price1Cumulative_1', 'price1Cumulative_2'])
[i] price1Cumulative cleared
clearing ir...?
blockTimestamp_3(uint32) := ϕ(['blockTimestamp_1', 'blockTimestamp_2'])
[i] blockTimestamp cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: price0Cumulative_3, name: price0Cumulative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: price0Cumulative, Num: 3
Globalname: price0Cumulative, contract_name: TwapOracle
Ssa_name: price1Cumulative_3, name: price1Cumulative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: price1Cumulative, Num: 3
Globalname: price1Cumulative, contract_name: TwapOracle
Ssa_name: blockTimestamp_3, name: blockTimestamp

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 3
Globalname: blockTimestamp, contract_name: TwapOracle
price0Cumulative_3(uint256) := ϕ(['price0Cumulative_1', 'price0Cumulative_2'])
Phi

Name: price0Cumulative Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: price0Cumulative Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
price1Cumulative_3(uint256) := ϕ(['price1Cumulative_1', 'price1Cumulative_2'])
Phi

Name: price1Cumulative Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: price1Cumulative Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
blockTimestamp_3(uint32) := ϕ(['blockTimestamp_1', 'blockTimestamp_2'])
Phi

Name: blockTimestamp Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: blockTimestamp Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_35(uint32) -> pairData_1 (-> ['_pairs']).blockTimestampLast
[i] REF_35 cleared
clearing ir...?
TMP_125(uint32) = blockTimestamp_3 (c)- REF_35
[i] TMP_125 cleared
clearing ir...?
timeElapsed_1(uint32) := TMP_125(uint32)
[i] timeElapsed cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_3, name: blockTimestamp

Name: blockTimestamp Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 3
Globalname: blockTimestamp, contract_name: TwapOracle
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair
Finance Type: undef
Ssa_name: blockTimestamp_3, name: blockTimestamp

Name: blockTimestamp Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 3
Globalname: blockTimestamp, contract_name: TwapOracle
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: timeElapsed, Num: 1
Globalname: timeElapsed, contract_name: TwapOracle
End popogation
REF_35(uint32) -> pairData_1 (-> ['_pairs']).blockTimestampLast
MEMBER
OUT KEY: update_pairData_blockTimestampLast
OUT KEY: update_pairData_blockTimestampLast
FTT: None
No field found
[i]Type for REF_35

Name: REF_35 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['_pairs']), Field: blockTimestampLast
#################
Member: 
Name: pairData Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair
Finance Type: undef
Fieldf: 
Name: blockTimestampLast Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_35 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_125(uint32) = blockTimestamp_3 (c)- REF_35
[i]Type for TMP_125

Name: TMP_125 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint32) := TMP_125(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_126(bool) = timeElapsed_1 >= _updatePeriod_4
[i] TMP_126 cleared
clearing ir...?
TMP_127(None) = SOLIDITY_CALL require(bool,string)(TMP_126,TwapOracle::update: Period not elapsed)
Propogating parameters and globals to SSA variables...
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: timeElapsed, Num: 1
Globalname: timeElapsed, contract_name: TwapOracle
Ssa_name: _updatePeriod_4, name: _updatePeriod

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _updatePeriod, Num: 4
Globalname: _updatePeriod, contract_name: TwapOracle
global...

Name: PIC_8 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _updatePeriod_4, name: _updatePeriod

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: timeElapsed, Num: 1
Globalname: timeElapsed, contract_name: TwapOracle
End popogation
TMP_126(bool) = timeElapsed_1 >= _updatePeriod_4
A: u B: u
lnorm: u rnorm: u
Source address: u
Source address: u
[i]Type for TMP_126

Name: TMP_126 Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_127(None) = SOLIDITY_CALL require(bool,string)(TMP_126,TwapOracle::update: Period not elapsed)
[i]Type for TMP_127

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_36(FixedPoint.uq112x112) -> pairData_1 (-> ['_pairs']).price0Average
[i] REF_36 cleared
clearing ir...?
REF_38(uint256) -> pairData_1 (-> ['_pairs']).price0CumulativeLast
[i] REF_38 cleared
clearing ir...?
TMP_128(uint256) = price0Cumulative_3 - REF_38
[i] TMP_128 cleared
clearing ir...?
TMP_129(uint256) = TMP_128 / timeElapsed_1
[i] TMP_129 cleared
clearing ir...?
TMP_130 = CONVERT TMP_129 to uint224
[i] TMP_130 cleared
clearing ir...?
TMP_131 = new uq112x112(TMP_130)
clearing ir...?
pairData_2 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_1 (-> ['_pairs'])"])
[i] pairData cleared
clearing ir...?
REF_36 (->pairData_2 (-> ['_pairs'])) := TMP_131(FixedPoint.uq112x112)
[i] REF_36 cleared
clearing ir...?
_pairs_21(TwapOracle.PairData[]) := ϕ(["pairData_2 (-> ['_pairs'])"])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
Ssa_name: price0Cumulative_3, name: price0Cumulative

Name: price0Cumulative Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast
Finance Type: undef
Ssa_name: price0Cumulative_3, name: price0Cumulative

Name: price0Cumulative Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast
Finance Type: undef
Ssa_name: _pairs_21, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 21
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: pairData_2 (-> ['_pairs']), name: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData_2 (-> [', Num: pairs'])
Globalname: pairData_2 (-> [', contract_name: TwapOracle
End popogation
Ssa_name: pairData_2 (-> ['_pairs']), name: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData_2 (-> [', Num: pairs'])
Globalname: pairData_2 (-> [', contract_name: TwapOracle
Ssa_name: _pairs_21, name: _pairs

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_36(FixedPoint.uq112x112) -> pairData_1 (-> ['_pairs']).price0Average
MEMBER
OUT KEY: update_pairData_price0Average
OUT KEY: update_pairData_price0Average
FTT: None
No field found
[i]Type for REF_36

Name: REF_36 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['_pairs']), Field: price0Average
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: price0Average Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_36 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
REF_38(uint256) -> pairData_1 (-> ['_pairs']).price0CumulativeLast
MEMBER
OUT KEY: update_pairData_price0CumulativeLast
OUT KEY: update_pairData_price0CumulativeLast
FTT: None
No field found
[i]Type for REF_38

Name: REF_38 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['_pairs']), Field: price0CumulativeLast
#################
Member: 
Name: pairData Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast
Finance Type: undef
Fieldf: 
Name: price0CumulativeLast Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_38 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_128(uint256) = price0Cumulative_3 - REF_38
Source address: u
[i]Type for TMP_128

Name: TMP_128 Function: update
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_129(uint256) = TMP_128 / timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
A: u B: u
lnorm: u rnorm: u
2
4
[i]Type for TMP_129

Name: TMP_129 Function: update
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_130 = CONVERT TMP_129 to uint224
Converting TMP_129

Name: TMP_129 Function: update
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_130

Name: TMP_130 Function: update
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_131 = new uq112x112(TMP_130)
[i]Type for TMP_131

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_2 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_1 (-> ['_pairs'])"])
Phi

Name: pairData Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef


END==================================
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
XXXX
REF_36 (->pairData_2 (-> ['_pairs'])) := TMP_131(FixedPoint.uq112x112)
asgn
Finance type key: (-1, -1)
[i]Type for REF_36

Name: REF_36 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['_pairs']), Field: price0Average
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Fieldf: 
Name: price0Average Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_36 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price0Average Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_21(TwapOracle.PairData[]) := ϕ(["pairData_2 (-> ['_pairs'])"])
Phi
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _pairs
Source address: u
clearing ir...?
REF_39(FixedPoint.uq112x112) -> pairData_2 (-> ['_pairs']).price1Average
[i] REF_39 cleared
clearing ir...?
REF_41(uint256) -> pairData_2 (-> ['_pairs']).price1CumulativeLast
[i] REF_41 cleared
clearing ir...?
TMP_132(uint256) = price1Cumulative_3 - REF_41
[i] TMP_132 cleared
clearing ir...?
TMP_133(uint256) = TMP_132 / timeElapsed_1
[i] TMP_133 cleared
clearing ir...?
TMP_134 = CONVERT TMP_133 to uint224
[i] TMP_134 cleared
clearing ir...?
TMP_135 = new uq112x112(TMP_134)
clearing ir...?
pairData_3 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_2 (-> ['_pairs'])"])
[i] pairData cleared
clearing ir...?
REF_39 (->pairData_3 (-> ['_pairs'])) := TMP_135(FixedPoint.uq112x112)
[i] REF_39 cleared
clearing ir...?
_pairs_22(TwapOracle.PairData[]) := ϕ(["pairData_3 (-> ['_pairs'])"])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_2 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Name: pairData_2 (-> [', Num: pairs'])
Globalname: pairData_2 (-> [', contract_name: TwapOracle
Ssa_name: price1Cumulative_3, name: price1Cumulative

Name: price1Cumulative Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_2 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Name: pairData_2 (-> [', Num: pairs'])
Globalname: pairData_2 (-> [', contract_name: TwapOracle
Ssa_name: price1Cumulative_3, name: price1Cumulative

Name: price1Cumulative Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: pairData_3 (-> ['_pairs']), name: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData_3 (-> [', Num: pairs'])
Globalname: pairData_3 (-> [', contract_name: TwapOracle
Ssa_name: _pairs_22, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 22
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Ssa_name: pairData_3 (-> ['_pairs']), name: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData_3 (-> [', Num: pairs'])
Globalname: pairData_3 (-> [', contract_name: TwapOracle
Ssa_name: _pairs_22, name: _pairs

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_39(FixedPoint.uq112x112) -> pairData_2 (-> ['_pairs']).price1Average
MEMBER
OUT KEY: update_pairData_price1Average
OUT KEY: update_pairData_price1Average
FTT: None
No field found
[i]Type for REF_39

Name: REF_39 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> ['_pairs']), Field: price1Average
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: price1Average Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_39 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
REF_41(uint256) -> pairData_2 (-> ['_pairs']).price1CumulativeLast
MEMBER
OUT KEY: update_pairData_price1CumulativeLast
OUT KEY: update_pairData_price1CumulativeLast
FTT: None
No field found
[i]Type for REF_41

Name: REF_41 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> ['_pairs']), Field: price1CumulativeLast
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Fieldf: 
Name: price1CumulativeLast Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_41 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_132(uint256) = price1Cumulative_3 - REF_41
Source address: u
[i]Type for TMP_132

Name: TMP_132 Function: update
Num: 4
Den: 2
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_133(uint256) = TMP_132 / timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
A: u B: u
lnorm: u rnorm: u
4
2
[i]Type for TMP_133

Name: TMP_133 Function: update
Num: 4
Den: 2
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_134 = CONVERT TMP_133 to uint224
Converting TMP_133

Name: TMP_133 Function: update
Num: 4
Den: 2
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_134

Name: TMP_134 Function: update
Num: 4
Den: 2
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_135 = new uq112x112(TMP_134)
[i]Type for TMP_135

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_3 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_2 (-> ['_pairs'])"])
Phi

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef


END==================================
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
XXXX
REF_39 (->pairData_3 (-> ['_pairs'])) := TMP_135(FixedPoint.uq112x112)
asgn
Finance type key: (-1, -1)
[i]Type for REF_39

Name: REF_39 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> ['_pairs']), Field: price1Average
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
Fieldf: 
Name: price1Average Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_39 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_22(TwapOracle.PairData[]) := ϕ(["pairData_3 (-> ['_pairs'])"])
Phi
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _pairs
Source address: u
clearing ir...?
REF_42(uint256) -> pairData_3 (-> ['_pairs']).price0CumulativeLast
[i] REF_42 cleared
clearing ir...?
pairData_4 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_3 (-> ['_pairs'])"])
[i] pairData cleared
clearing ir...?
REF_42 (->pairData_4 (-> ['_pairs'])) := price0Cumulative_3(uint256)
[i] REF_42 cleared
clearing ir...?
_pairs_23(TwapOracle.PairData[]) := ϕ(["pairData_4 (-> ['_pairs'])"])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
Ssa_name: price0Cumulative_3, name: price0Cumulative

Name: price0Cumulative Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: price0Cumulative_3, name: price0Cumulative

Name: price0Cumulative Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: pairData_4 (-> ['_pairs']), name: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData_4 (-> [', Num: pairs'])
Globalname: pairData_4 (-> [', contract_name: TwapOracle
Ssa_name: _pairs_23, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 23
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Ssa_name: pairData_4 (-> ['_pairs']), name: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData_4 (-> [', Num: pairs'])
Globalname: pairData_4 (-> [', contract_name: TwapOracle
Ssa_name: _pairs_23, name: _pairs

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_42(uint256) -> pairData_3 (-> ['_pairs']).price0CumulativeLast
MEMBER
OUT KEY: update_pairData_price0CumulativeLast
OUT KEY: update_pairData_price0CumulativeLast
FTT: None
No field found
[i]Type for REF_42

Name: REF_42 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_3 (-> ['_pairs']), Field: price0CumulativeLast
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: price0CumulativeLast Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_42 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
pairData_4 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_3 (-> ['_pairs'])"])
Phi

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef


END==================================
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
XXXX
REF_42 (->pairData_4 (-> ['_pairs'])) := price0Cumulative_3(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_42

Name: REF_42 Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: pairData_3 (-> ['_pairs']), Field: price0CumulativeLast
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
Fieldf: 
Name: price0CumulativeLast Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_42 Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price0CumulativeLast Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_pairs_23(TwapOracle.PairData[]) := ϕ(["pairData_4 (-> ['_pairs'])"])
Phi
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _pairs
Source address: u
clearing ir...?
REF_43(uint256) -> pairData_4 (-> ['_pairs']).price1CumulativeLast
[i] REF_43 cleared
clearing ir...?
pairData_5 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_4 (-> ['_pairs'])"])
[i] pairData cleared
clearing ir...?
REF_43 (->pairData_5 (-> ['_pairs'])) := price1Cumulative_3(uint256)
[i] REF_43 cleared
clearing ir...?
_pairs_24(TwapOracle.PairData[]) := ϕ(["pairData_5 (-> ['_pairs'])"])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
Ssa_name: price1Cumulative_3, name: price1Cumulative

Name: price1Cumulative Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: price1Cumulative_3, name: price1Cumulative

Name: price1Cumulative Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: pairData_5 (-> ['_pairs']), name: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData_5 (-> [', Num: pairs'])
Globalname: pairData_5 (-> [', contract_name: TwapOracle
Ssa_name: _pairs_24, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 24
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Ssa_name: pairData_5 (-> ['_pairs']), name: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData_5 (-> [', Num: pairs'])
Globalname: pairData_5 (-> [', contract_name: TwapOracle
Ssa_name: _pairs_24, name: _pairs

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_43(uint256) -> pairData_4 (-> ['_pairs']).price1CumulativeLast
MEMBER
OUT KEY: update_pairData_price1CumulativeLast
OUT KEY: update_pairData_price1CumulativeLast
FTT: None
No field found
[i]Type for REF_43

Name: REF_43 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_4 (-> ['_pairs']), Field: price1CumulativeLast
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: price1CumulativeLast Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_43 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
pairData_5 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_4 (-> ['_pairs'])"])
Phi

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef


END==================================
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
XXXX
REF_43 (->pairData_5 (-> ['_pairs'])) := price1Cumulative_3(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_43

Name: REF_43 Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: pairData_4 (-> ['_pairs']), Field: price1CumulativeLast
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
Fieldf: 
Name: price1CumulativeLast Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_43 Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1CumulativeLast Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_pairs_24(TwapOracle.PairData[]) := ϕ(["pairData_5 (-> ['_pairs'])"])
Phi
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _pairs
Source address: u
clearing ir...?
REF_44(uint32) -> pairData_5 (-> ['_pairs']).blockTimestampLast
[i] REF_44 cleared
clearing ir...?
pairData_6 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_5 (-> ['_pairs'])"])
[i] pairData cleared
clearing ir...?
REF_44 (->pairData_6 (-> ['_pairs'])) := blockTimestamp_3(uint32)
[i] REF_44 cleared
clearing ir...?
_pairs_25(TwapOracle.PairData[]) := ϕ(["pairData_6 (-> ['_pairs'])"])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_3, name: blockTimestamp

Name: blockTimestamp Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 3
Globalname: blockTimestamp, contract_name: TwapOracle
Ssa_name: blockTimestamp_3, name: blockTimestamp

Name: blockTimestamp Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 3
Globalname: blockTimestamp, contract_name: TwapOracle
Ssa_name: pairData_6 (-> ['_pairs']), name: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData_6 (-> [', Num: pairs'])
Globalname: pairData_6 (-> [', contract_name: TwapOracle
Ssa_name: _pairs_25, name: _pairs

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 25
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Ssa_name: pairData_6 (-> ['_pairs']), name: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData_6 (-> [', Num: pairs'])
Globalname: pairData_6 (-> [', contract_name: TwapOracle
Ssa_name: _pairs_25, name: _pairs

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_44(uint32) -> pairData_5 (-> ['_pairs']).blockTimestampLast
MEMBER
OUT KEY: update_pairData_blockTimestampLast
OUT KEY: update_pairData_blockTimestampLast
FTT: None
No field found
[i]Type for REF_44

Name: REF_44 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_5 (-> ['_pairs']), Field: blockTimestampLast
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: blockTimestampLast Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_44 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
pairData_6 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_5 (-> ['_pairs'])"])
Phi

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef


END==================================
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
XXXX
REF_44 (->pairData_6 (-> ['_pairs'])) := blockTimestamp_3(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for REF_44

Name: REF_44 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_5 (-> ['_pairs']), Field: blockTimestampLast
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
Fieldf: 
Name: blockTimestampLast Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_44 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: blockTimestampLast Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_25(TwapOracle.PairData[]) := ϕ(["pairData_6 (-> ['_pairs'])"])
Phi
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _pairs
Source address: u
clearing ir...?
TMP_136(uint256) := i_2(uint256)
[i] TMP_136 cleared
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_3, name: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 3
Globalname: i, contract_name: TwapOracle
End popogation
TMP_136(uint256) := i_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_136

Name: TMP_136 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_3(uint256) = i_2 (c)+ 1
Source address: u
[i]Type for i

Name: i Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX


VADER_13(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
_vaderPool_8(IVaderPoolV2) := ϕ(['_vaderPool_0', '_vaderPool_1', '_vaderPool_10', '_vaderPool_5', '_vaderPool_7'])
_updatePeriod_2(uint256) := ϕ(['_updatePeriod_1', '_updatePeriod_4', '_updatePeriod_0'])
_pairs_17(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
MODIFIER_CALL, Ownable.onlyOwner()()
MODIFIER_CALL, TwapOracle.initialized()()
REF_33 -> LENGTH _pairs_19
pairCount_1(uint256) := REF_33(uint256)
i_1(uint256) := 0(uint256)
i_2(uint256) := ϕ(['i_3', 'i_1'])
TMP_124(bool) = i_2 < pairCount_1
CONDITION TMP_124
REF_34(TwapOracle.PairData) -> _pairs_19[i_2]
pairData_1 (-> ['_pairs'])(TwapOracle.PairData) := REF_34(TwapOracle.PairData)
REF_45(address) -> pairData_1 (-> ['_pairs']).token0
TMP_139(bool) = REF_45 == VADER_15
CONDITION TMP_139
REF_49(address) -> pairData_1 (-> ['_pairs']).token1
TMP_140 = CONVERT REF_49 to IERC20
TUPLE_5(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_10(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_140']  
VADER_16(address) := ϕ(['VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
_vaderPool_11(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_5', '_vaderPool_1', '_vaderPool_7'])
_updatePeriod_5(uint256) := ϕ(['_updatePeriod_1', '_updatePeriod_4'])
_pairs_20(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
price0Cumulative_1(uint256)= UNPACK TUPLE_5 index: 0 
price1Cumulative_1(uint256)= UNPACK TUPLE_5 index: 1 
blockTimestamp_1(uint32)= UNPACK TUPLE_5 index: 2 
REF_47(address) -> pairData_1 (-> ['_pairs']).pair
TUPLE_4(uint256,uint256,uint32) = LIBRARY_CALL, dest:UniswapV2OracleLibrary, function:UniswapV2OracleLibrary.currentCumulativePrices(address), arguments:['REF_47'] 
price0Cumulative_2(uint256)= UNPACK TUPLE_4 index: 0 
price1Cumulative_2(uint256)= UNPACK TUPLE_4 index: 1 
blockTimestamp_2(uint32)= UNPACK TUPLE_4 index: 2 
price0Cumulative_3(uint256) := ϕ(['price0Cumulative_1', 'price0Cumulative_2'])
price1Cumulative_3(uint256) := ϕ(['price1Cumulative_1', 'price1Cumulative_2'])
blockTimestamp_3(uint32) := ϕ(['blockTimestamp_1', 'blockTimestamp_2'])
REF_35(uint32) -> pairData_1 (-> ['_pairs']).blockTimestampLast
TMP_125(uint32) = blockTimestamp_3 (c)- REF_35
timeElapsed_1(uint32) := TMP_125(uint32)
TMP_126(bool) = timeElapsed_1 >= _updatePeriod_4
TMP_127(None) = SOLIDITY_CALL require(bool,string)(TMP_126,TwapOracle::update: Period not elapsed)
REF_36(FixedPoint.uq112x112) -> pairData_1 (-> ['_pairs']).price0Average
REF_38(uint256) -> pairData_1 (-> ['_pairs']).price0CumulativeLast
TMP_128(uint256) = price0Cumulative_3 - REF_38
TMP_129(uint256) = TMP_128 / timeElapsed_1
TMP_130 = CONVERT TMP_129 to uint224
TMP_131 = new uq112x112(TMP_130)
pairData_2 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_1 (-> ['_pairs'])"])
REF_36 (->pairData_2 (-> ['_pairs'])) := TMP_131(FixedPoint.uq112x112)
_pairs_21(TwapOracle.PairData[]) := ϕ(["pairData_2 (-> ['_pairs'])"])
REF_39(FixedPoint.uq112x112) -> pairData_2 (-> ['_pairs']).price1Average
REF_41(uint256) -> pairData_2 (-> ['_pairs']).price1CumulativeLast
TMP_132(uint256) = price1Cumulative_3 - REF_41
TMP_133(uint256) = TMP_132 / timeElapsed_1
TMP_134 = CONVERT TMP_133 to uint224
TMP_135 = new uq112x112(TMP_134)
pairData_3 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_2 (-> ['_pairs'])"])
REF_39 (->pairData_3 (-> ['_pairs'])) := TMP_135(FixedPoint.uq112x112)
_pairs_22(TwapOracle.PairData[]) := ϕ(["pairData_3 (-> ['_pairs'])"])
REF_42(uint256) -> pairData_3 (-> ['_pairs']).price0CumulativeLast
pairData_4 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_3 (-> ['_pairs'])"])
REF_42 (->pairData_4 (-> ['_pairs'])) := price0Cumulative_3(uint256)
_pairs_23(TwapOracle.PairData[]) := ϕ(["pairData_4 (-> ['_pairs'])"])
REF_43(uint256) -> pairData_4 (-> ['_pairs']).price1CumulativeLast
pairData_5 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_4 (-> ['_pairs'])"])
REF_43 (->pairData_5 (-> ['_pairs'])) := price1Cumulative_3(uint256)
_pairs_24(TwapOracle.PairData[]) := ϕ(["pairData_5 (-> ['_pairs'])"])
REF_44(uint32) -> pairData_5 (-> ['_pairs']).blockTimestampLast
pairData_6 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_5 (-> ['_pairs'])"])
REF_44 (->pairData_6 (-> ['_pairs'])) := blockTimestamp_3(uint32)
_pairs_25(TwapOracle.PairData[]) := ϕ(["pairData_6 (-> ['_pairs'])"])
TMP_136(uint256) := i_2(uint256)
i_3(uint256) = i_2 (c)+ 1


clearing ir...?
VADER_13(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
[i] VADER cleared
clearing ir...?
_vaderPool_8(IVaderPoolV2) := ϕ(['_vaderPool_0', '_vaderPool_1', '_vaderPool_10', '_vaderPool_5', '_vaderPool_7'])
[i] _vaderPool cleared
clearing ir...?
_updatePeriod_2(uint256) := ϕ(['_updatePeriod_1', '_updatePeriod_4', '_updatePeriod_0'])
[i] _updatePeriod cleared
clearing ir...?
_pairs_17(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: VADER_13, name: VADER

Name: VADER Function: update
Num: 
Den: 
Address: u
Norm: u
LF: VADER
Value: u
Fields: 
Finance Type: undef
Name: VADER, Num: 13
Globalname: VADER, contract_name: TwapOracle
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
Ssa_name: _vaderPool_8, name: _vaderPool

Name: _vaderPool Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _vaderPool, Num: 8
Globalname: _vaderPool, contract_name: TwapOracle
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _updatePeriod_2, name: _updatePeriod

Name: _updatePeriod Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _updatePeriod, Num: 2
Globalname: _updatePeriod, contract_name: TwapOracle
global...

Name: PIC_8 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _pairs_17, name: _pairs

Name: _pairs Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 17
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
VADER_13(address) := ϕ(['VADER_0', 'VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
Phi
[i]Type for VADER

Name: VADER Function: update
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
XXXX
_vaderPool_8(IVaderPoolV2) := ϕ(['_vaderPool_0', '_vaderPool_1', '_vaderPool_10', '_vaderPool_5', '_vaderPool_7'])
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_updatePeriod_2(uint256) := ϕ(['_updatePeriod_1', '_updatePeriod_4', '_updatePeriod_0'])
Phi
[i]Type for _updatePeriod

Name: _updatePeriod Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_17(TwapOracle.PairData[]) := ϕ(['_pairs_16', '_pairs_4', '_pairs_1', '_pairs_19', '_pairs_0'])
Phi
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
MODIFIER_CALL, Ownable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Ownable.onlyOwner()()
New param cache []
Old param cache: []
clearing ir...?
MODIFIER_CALL, TwapOracle.initialized()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, TwapOracle.initialized()()
New param cache []
Old param cache: []
clearing ir...?
REF_33 -> LENGTH _pairs_19
clearing ir...?
pairCount_1(uint256) := REF_33(uint256)
[i] pairCount cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pairs_19, name: _pairs

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pairs_19, name: _pairs

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
End popogation
REF_33 -> LENGTH _pairs_19
[i]Type for REF_33

Name: REF_33 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairCount_1(uint256) := REF_33(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
i_1(uint256) := 0(uint256)
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_1, name: i

Name: i Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: i, Num: 1
Globalname: i, contract_name: TwapOracle
End popogation
i_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
i_2(uint256) := ϕ(['i_3', 'i_1'])
[i] i cleared
clearing ir...?
TMP_124(bool) = i_2 < pairCount_1
[i] TMP_124 cleared
clearing ir...?
CONDITION TMP_124
Propogating parameters and globals to SSA variables...
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: pairCount_1, name: pairCount

Name: pairCount Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairCount, Num: 1
Globalname: pairCount, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
End popogation
Ssa_name: i_2, name: i

Name: i Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
i_2(uint256) := ϕ(['i_3', 'i_1'])
Phi

Name: i Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: i Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for i

Name: i Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_124(bool) = i_2 < pairCount_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_124

Name: TMP_124 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_34(TwapOracle.PairData) -> _pairs_19[i_2]
[i] REF_34 cleared
clearing ir...?
pairData_1 (-> ['_pairs'])(TwapOracle.PairData) := REF_34(TwapOracle.PairData)
[i] pairData cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_19, name: _pairs

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: i_2, name: i

Name: i Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: _pairs_19, name: _pairs

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Name: pairData_1 (-> [', Num: pairs'])
Globalname: pairData_1 (-> [', contract_name: TwapOracle
End popogation
REF_34(TwapOracle.PairData) -> _pairs_19[i_2]
INDEX
[i]Type for REF_34

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['_pairs'])(TwapOracle.PairData) := REF_34(TwapOracle.PairData)
asgn
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
REF_45(address) -> pairData_1 (-> ['_pairs']).token0
[i] REF_45 cleared
clearing ir...?
TMP_139(bool) = REF_45 == VADER_15
[i] TMP_139 cleared
clearing ir...?
CONDITION TMP_139
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Name: pairData_1 (-> [', Num: pairs'])
Globalname: pairData_1 (-> [', contract_name: TwapOracle
Ssa_name: VADER_15, name: VADER

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Name: pairData_1 (-> [', Num: pairs'])
Globalname: pairData_1 (-> [', contract_name: TwapOracle
Ssa_name: VADER_15, name: VADER

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
End popogation
REF_45(address) -> pairData_1 (-> ['_pairs']).token0
MEMBER
OUT KEY: update_pairData_token0
OUT KEY: update_pairData_token0
FTT: None
No field found
[i]Type for REF_45

Name: REF_45 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['_pairs']), Field: token0
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Fieldf: 
Name: token0 Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_45 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token0 Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_139(bool) = REF_45 == VADER_15
[i]Type for TMP_139

Name: TMP_139 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_49(address) -> pairData_1 (-> ['_pairs']).token1
[i] REF_49 cleared
clearing ir...?
TMP_140 = CONVERT REF_49 to IERC20
[i] TMP_140 cleared
clearing ir...?
TUPLE_5(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_10(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_140']  
[i] TUPLE_5 cleared
clearing ir...?
VADER_16(address) := ϕ(['VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
[i] VADER cleared
clearing ir...?
_vaderPool_11(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_5', '_vaderPool_1', '_vaderPool_7'])
[i] _vaderPool cleared
clearing ir...?
_updatePeriod_5(uint256) := ϕ(['_updatePeriod_1', '_updatePeriod_4'])
[i] _updatePeriod cleared
clearing ir...?
_pairs_20(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i] _pairs cleared
clearing ir...?
price0Cumulative_1(uint256)= UNPACK TUPLE_5 index: 0 
[i] price0Cumulative cleared
clearing ir...?
price1Cumulative_1(uint256)= UNPACK TUPLE_5 index: 1 
[i] price1Cumulative cleared
clearing ir...?
blockTimestamp_1(uint32)= UNPACK TUPLE_5 index: 2 
[i] blockTimestamp cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Name: pairData_1 (-> [', Num: pairs'])
Globalname: pairData_1 (-> [', contract_name: TwapOracle
Ssa_name: _vaderPool_10, name: _vaderPool

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _vaderPool_10, name: _vaderPool

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Name: pairData_1 (-> [', Num: pairs'])
Globalname: pairData_1 (-> [', contract_name: TwapOracle
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: TwapOracle
Ssa_name: price0Cumulative_1, name: price0Cumulative

Name: price0Cumulative Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price0Cumulative, Num: 1
Globalname: price0Cumulative, contract_name: TwapOracle
Ssa_name: price1Cumulative_1, name: price1Cumulative

Name: price1Cumulative Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price1Cumulative, Num: 1
Globalname: price1Cumulative, contract_name: TwapOracle
End popogation
Ssa_name: VADER_16, name: VADER

Name: VADER Function: update
Num: 
Den: 
Address: u
Norm: u
LF: VADER
Value: u
Fields: 
Finance Type: undef
Name: VADER, Num: 16
Globalname: VADER, contract_name: TwapOracle
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
Source address: 2
Ssa_name: _vaderPool_11, name: _vaderPool

Name: _vaderPool Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _vaderPool, Num: 11
Globalname: _vaderPool, contract_name: TwapOracle
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _updatePeriod_5, name: _updatePeriod

Name: _updatePeriod Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _updatePeriod, Num: 5
Globalname: _updatePeriod, contract_name: TwapOracle
global...

Name: PIC_8 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _pairs_20, name: _pairs

Name: _pairs Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 20
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
REF_49(address) -> pairData_1 (-> ['_pairs']).token1
MEMBER
OUT KEY: update_pairData_token1
OUT KEY: update_pairData_token1
FTT: None
No field found
[i]Type for REF_49

Name: REF_49 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['_pairs']), Field: token1
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Fieldf: 
Name: token1 Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_49 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: token1 Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_140 = CONVERT REF_49 to IERC20
Converting REF_49

Name: REF_49 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ERC20
[i]Type for TMP_140

Name: TMP_140 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: ERC20
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_5(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_10(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_140']  
High Call: cumulativePrices
Running querryfc
Found: None
Written func info: IVaderPoolV2, cumulativePrices
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
TMP_140
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', ['global:USDV'], ['global:VADER'], -6, "'u'", 'u')
TMP_140
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
TMP_140
[i]Type for TUPLE_5

Name: TUPLE_5 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
VADER_16(address) := ϕ(['VADER_12', 'VADER_8', 'VADER_5', 'VADER_3', 'VADER_15'])
Phi
[i]Type for VADER

Name: VADER Function: update
Num: -1
Den: -1
Address: 2
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
XXXX
_vaderPool_11(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_5', '_vaderPool_1', '_vaderPool_7'])
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_updatePeriod_5(uint256) := ϕ(['_updatePeriod_1', '_updatePeriod_4'])
Phi
[i]Type for _updatePeriod

Name: _updatePeriod Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_20(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
Phi
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price0Cumulative_1(uint256)= UNPACK TUPLE_5 index: 0 
([2], [4], 12, "'u'", 'u', -1)
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
price1Cumulative_1(uint256)= UNPACK TUPLE_5 index: 1 
([4], [2], -6, "'u'", 'u', -1)
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
blockTimestamp_1(uint32)= UNPACK TUPLE_5 index: 2 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_47(address) -> pairData_1 (-> ['_pairs']).pair
[i] REF_47 cleared
clearing ir...?
TUPLE_4(uint256,uint256,uint32) = LIBRARY_CALL, dest:UniswapV2OracleLibrary, function:UniswapV2OracleLibrary.currentCumulativePrices(address), arguments:['REF_47'] 
[i] TUPLE_4 cleared
clearing ir...?
price0Cumulative_2(uint256)= UNPACK TUPLE_4 index: 0 
[i] price0Cumulative cleared
clearing ir...?
price1Cumulative_2(uint256)= UNPACK TUPLE_4 index: 1 
[i] price1Cumulative cleared
clearing ir...?
blockTimestamp_2(uint32)= UNPACK TUPLE_4 index: 2 
[i] blockTimestamp cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Name: pairData_1 (-> [', Num: pairs'])
Globalname: pairData_1 (-> [', contract_name: TwapOracle
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Name: pairData_1 (-> [', Num: pairs'])
Globalname: pairData_1 (-> [', contract_name: TwapOracle
Ssa_name: price0Cumulative_2, name: price0Cumulative

Name: price0Cumulative Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price0Cumulative, Num: 2
Globalname: price0Cumulative, contract_name: TwapOracle
Ssa_name: price1Cumulative_2, name: price1Cumulative

Name: price1Cumulative Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price1Cumulative, Num: 2
Globalname: price1Cumulative, contract_name: TwapOracle
Ssa_name: blockTimestamp_2, name: blockTimestamp

Name: blockTimestamp Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 2
Globalname: blockTimestamp, contract_name: TwapOracle
End popogation
REF_47(address) -> pairData_1 (-> ['_pairs']).pair
MEMBER
OUT KEY: update_pairData_pair
OUT KEY: update_pairData_pair
FTT: None
No field found
[i]Type for REF_47

Name: REF_47 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['_pairs']), Field: pair
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Fieldf: 
Name: pair Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_47 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: pair Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_4(uint256,uint256,uint32) = LIBRARY_CALL, dest:UniswapV2OracleLibrary, function:UniswapV2OracleLibrary.currentCumulativePrices(address), arguments:['REF_47'] 
Found: None
Written func info: UniswapV2OracleLibrary, currentCumulativePrices
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
REF_47
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', ['global:USDV'], ['global:VADER'], -6, "'u'", 'u')
REF_47
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
REF_47
Retvar: ('c', ['global:VADER'], ['global:USDV'], 12, "'u'", 'u')
REF_47
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', ['global:USDV'], ['global:VADER'], -6, "'u'", 'u')
REF_47
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
{'global:_aggregators': 1, 'global:VADER': 2, 'global:_owner': 3, 'global:USDV': 4, 'pairExists:token0': -999, 'pairExists:token1': -998, 'consult:token': -997, 'initialize:_usdv': -996, 'initialize:_vader': -995, 'registerAggregator:asset': -994, 'registerAggregator:aggregator': -993, 'registerPair:factory': -992, 'registerPair:token0': -991, 'registerPair:token1': -990}
Retvar: ('c', [-1], [-1], 'u', 'u', 'u')
REF_47
[i]Type for TUPLE_4

Name: TUPLE_4 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price0Cumulative_2(uint256)= UNPACK TUPLE_4 index: 0 
([2], [4], 12, "'u'", 'u', -1)
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
price1Cumulative_2(uint256)= UNPACK TUPLE_4 index: 1 
([4], [2], -6, "'u'", 'u', -1)
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
blockTimestamp_2(uint32)= UNPACK TUPLE_4 index: 2 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
price0Cumulative_3(uint256) := ϕ(['price0Cumulative_1', 'price0Cumulative_2'])
[i] price0Cumulative cleared
clearing ir...?
price1Cumulative_3(uint256) := ϕ(['price1Cumulative_1', 'price1Cumulative_2'])
[i] price1Cumulative cleared
clearing ir...?
blockTimestamp_3(uint32) := ϕ(['blockTimestamp_1', 'blockTimestamp_2'])
[i] blockTimestamp cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: price0Cumulative_3, name: price0Cumulative

Name: price0Cumulative Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price0Cumulative, Num: 3
Globalname: price0Cumulative, contract_name: TwapOracle
Ssa_name: price1Cumulative_3, name: price1Cumulative

Name: price1Cumulative Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Name: price1Cumulative, Num: 3
Globalname: price1Cumulative, contract_name: TwapOracle
Ssa_name: blockTimestamp_3, name: blockTimestamp

Name: blockTimestamp Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 3
Globalname: blockTimestamp, contract_name: TwapOracle
price0Cumulative_3(uint256) := ϕ(['price0Cumulative_1', 'price0Cumulative_2'])
Phi

Name: price0Cumulative Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: price0Cumulative Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
price1Cumulative_3(uint256) := ϕ(['price1Cumulative_1', 'price1Cumulative_2'])
Phi

Name: price1Cumulative Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: price1Cumulative Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef


END==================================
Source address: u
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
blockTimestamp_3(uint32) := ϕ(['blockTimestamp_1', 'blockTimestamp_2'])
Phi

Name: blockTimestamp Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: blockTimestamp Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_35(uint32) -> pairData_1 (-> ['_pairs']).blockTimestampLast
[i] REF_35 cleared
clearing ir...?
TMP_125(uint32) = blockTimestamp_3 (c)- REF_35
[i] TMP_125 cleared
clearing ir...?
timeElapsed_1(uint32) := TMP_125(uint32)
[i] timeElapsed cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_3, name: blockTimestamp

Name: blockTimestamp Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 3
Globalname: blockTimestamp, contract_name: TwapOracle
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Name: pairData_1 (-> [', Num: pairs'])
Globalname: pairData_1 (-> [', contract_name: TwapOracle
Ssa_name: blockTimestamp_3, name: blockTimestamp

Name: blockTimestamp Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 3
Globalname: blockTimestamp, contract_name: TwapOracle
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Name: pairData_1 (-> [', Num: pairs'])
Globalname: pairData_1 (-> [', contract_name: TwapOracle
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: timeElapsed, Num: 1
Globalname: timeElapsed, contract_name: TwapOracle
End popogation
REF_35(uint32) -> pairData_1 (-> ['_pairs']).blockTimestampLast
MEMBER
OUT KEY: update_pairData_blockTimestampLast
OUT KEY: update_pairData_blockTimestampLast
FTT: None
No field found
[i]Type for REF_35

Name: REF_35 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['_pairs']), Field: blockTimestampLast
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Fieldf: 
Name: blockTimestampLast Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_35 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: blockTimestampLast Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_125(uint32) = blockTimestamp_3 (c)- REF_35
[i]Type for TMP_125

Name: TMP_125 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint32) := TMP_125(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_126(bool) = timeElapsed_1 >= _updatePeriod_4
[i] TMP_126 cleared
clearing ir...?
TMP_127(None) = SOLIDITY_CALL require(bool,string)(TMP_126,TwapOracle::update: Period not elapsed)
Propogating parameters and globals to SSA variables...
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: timeElapsed, Num: 1
Globalname: timeElapsed, contract_name: TwapOracle
Ssa_name: _updatePeriod_4, name: _updatePeriod

Name: _updatePeriod Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _updatePeriod_4, name: _updatePeriod

Name: _updatePeriod Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: timeElapsed, Num: 1
Globalname: timeElapsed, contract_name: TwapOracle
End popogation
TMP_126(bool) = timeElapsed_1 >= _updatePeriod_4
A: u B: u
lnorm: u rnorm: u
Source address: u
Source address: u
[i]Type for TMP_126

Name: TMP_126 Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_127(None) = SOLIDITY_CALL require(bool,string)(TMP_126,TwapOracle::update: Period not elapsed)
[i]Type for TMP_127

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_36(FixedPoint.uq112x112) -> pairData_1 (-> ['_pairs']).price0Average
[i] REF_36 cleared
clearing ir...?
REF_38(uint256) -> pairData_1 (-> ['_pairs']).price0CumulativeLast
[i] REF_38 cleared
clearing ir...?
TMP_128(uint256) = price0Cumulative_3 - REF_38
[i] TMP_128 cleared
clearing ir...?
TMP_129(uint256) = TMP_128 / timeElapsed_1
[i] TMP_129 cleared
clearing ir...?
TMP_130 = CONVERT TMP_129 to uint224
[i] TMP_130 cleared
clearing ir...?
TMP_131 = new uq112x112(TMP_130)
clearing ir...?
pairData_2 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_1 (-> ['_pairs'])"])
[i] pairData cleared
clearing ir...?
REF_36 (->pairData_2 (-> ['_pairs'])) := TMP_131(FixedPoint.uq112x112)
[i] REF_36 cleared
clearing ir...?
_pairs_21(TwapOracle.PairData[]) := ϕ(["pairData_2 (-> ['_pairs'])"])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
Ssa_name: price0Cumulative_3, name: price0Cumulative

Name: price0Cumulative Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Name: pairData_1 (-> [', Num: pairs'])
Globalname: pairData_1 (-> [', contract_name: TwapOracle
Ssa_name: price0Cumulative_3, name: price0Cumulative

Name: price0Cumulative Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_1 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Name: pairData_1 (-> [', Num: pairs'])
Globalname: pairData_1 (-> [', contract_name: TwapOracle
Ssa_name: _pairs_21, name: _pairs

Name: _pairs Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 21
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: pairData_2 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
Name: pairData_2 (-> [', Num: pairs'])
Globalname: pairData_2 (-> [', contract_name: TwapOracle
End popogation
Ssa_name: pairData_2 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
Name: pairData_2 (-> [', Num: pairs'])
Globalname: pairData_2 (-> [', contract_name: TwapOracle
Ssa_name: _pairs_21, name: _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_36(FixedPoint.uq112x112) -> pairData_1 (-> ['_pairs']).price0Average
MEMBER
OUT KEY: update_pairData_price0Average
OUT KEY: update_pairData_price0Average
FTT: None
No field found
[i]Type for REF_36

Name: REF_36 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['_pairs']), Field: price0Average
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
Fieldf: 
Name: price0Average Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_36 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price0Average Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_38(uint256) -> pairData_1 (-> ['_pairs']).price0CumulativeLast
MEMBER
OUT KEY: update_pairData_price0CumulativeLast
OUT KEY: update_pairData_price0CumulativeLast
FTT: None
No field found
[i]Type for REF_38

Name: REF_38 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['_pairs']), Field: price0CumulativeLast
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Fieldf: 
Name: price0CumulativeLast Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_38 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price0CumulativeLast Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_128(uint256) = price0Cumulative_3 - REF_38
Source address: u
[i]Type for TMP_128

Name: TMP_128 Function: update
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_129(uint256) = TMP_128 / timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
A: u B: u
lnorm: u rnorm: u
2
4
[i]Type for TMP_129

Name: TMP_129 Function: update
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_130 = CONVERT TMP_129 to uint224
Converting TMP_129

Name: TMP_129 Function: update
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_130

Name: TMP_130 Function: update
Num: 2
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_131 = new uq112x112(TMP_130)
[i]Type for TMP_131

Name: TMP_131 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_2 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_1 (-> ['_pairs'])"])
Phi

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef


END==================================
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price0Average, price1CumulativeLast, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
XXXX
REF_36 (->pairData_2 (-> ['_pairs'])) := TMP_131(FixedPoint.uq112x112)
asgn
Finance type key: (-1, -1)
[i]Type for REF_36

Name: REF_36 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['_pairs']), Field: price0Average
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price0Average, price1CumulativeLast, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Fieldf: 
Name: price0Average Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_36 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price0Average Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_21(TwapOracle.PairData[]) := ϕ(["pairData_2 (-> ['_pairs'])"])
Phi
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _pairs
Source address: u
clearing ir...?
REF_39(FixedPoint.uq112x112) -> pairData_2 (-> ['_pairs']).price1Average
[i] REF_39 cleared
clearing ir...?
REF_41(uint256) -> pairData_2 (-> ['_pairs']).price1CumulativeLast
[i] REF_41 cleared
clearing ir...?
TMP_132(uint256) = price1Cumulative_3 - REF_41
[i] TMP_132 cleared
clearing ir...?
TMP_133(uint256) = TMP_132 / timeElapsed_1
[i] TMP_133 cleared
clearing ir...?
TMP_134 = CONVERT TMP_133 to uint224
[i] TMP_134 cleared
clearing ir...?
TMP_135 = new uq112x112(TMP_134)
clearing ir...?
pairData_3 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_2 (-> ['_pairs'])"])
[i] pairData cleared
clearing ir...?
REF_39 (->pairData_3 (-> ['_pairs'])) := TMP_135(FixedPoint.uq112x112)
[i] REF_39 cleared
clearing ir...?
_pairs_22(TwapOracle.PairData[]) := ϕ(["pairData_3 (-> ['_pairs'])"])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_2 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price0Average, price1CumulativeLast, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Name: pairData_2 (-> [', Num: pairs'])
Globalname: pairData_2 (-> [', contract_name: TwapOracle
Ssa_name: price1Cumulative_3, name: price1Cumulative

Name: price1Cumulative Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pairData_2 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price0Average, price1CumulativeLast, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Name: pairData_2 (-> [', Num: pairs'])
Globalname: pairData_2 (-> [', contract_name: TwapOracle
Ssa_name: price1Cumulative_3, name: price1Cumulative

Name: price1Cumulative Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: pairData_3 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
Name: pairData_3 (-> [', Num: pairs'])
Globalname: pairData_3 (-> [', contract_name: TwapOracle
Ssa_name: _pairs_22, name: _pairs

Name: _pairs Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 22
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Ssa_name: pairData_3 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
Name: pairData_3 (-> [', Num: pairs'])
Globalname: pairData_3 (-> [', contract_name: TwapOracle
Ssa_name: _pairs_22, name: _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_39(FixedPoint.uq112x112) -> pairData_2 (-> ['_pairs']).price1Average
MEMBER
OUT KEY: update_pairData_price1Average
OUT KEY: update_pairData_price1Average
FTT: None
No field found
[i]Type for REF_39

Name: REF_39 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> ['_pairs']), Field: price1Average
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
Fieldf: 
Name: price1Average Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_39 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_41(uint256) -> pairData_2 (-> ['_pairs']).price1CumulativeLast
MEMBER
OUT KEY: update_pairData_price1CumulativeLast
OUT KEY: update_pairData_price1CumulativeLast
FTT: None
No field found
[i]Type for REF_41

Name: REF_41 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> ['_pairs']), Field: price1CumulativeLast
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price0Average, price1CumulativeLast, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Fieldf: 
Name: price1CumulativeLast Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_41 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1CumulativeLast Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_132(uint256) = price1Cumulative_3 - REF_41
Source address: u
[i]Type for TMP_132

Name: TMP_132 Function: update
Num: 4
Den: 2
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_133(uint256) = TMP_132 / timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
A: u B: u
lnorm: u rnorm: u
4
2
[i]Type for TMP_133

Name: TMP_133 Function: update
Num: 4
Den: 2
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_134 = CONVERT TMP_133 to uint224
Converting TMP_133

Name: TMP_133 Function: update
Num: 4
Den: 2
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_134

Name: TMP_134 Function: update
Num: 4
Den: 2
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_135 = new uq112x112(TMP_134)
[i]Type for TMP_135

Name: TMP_135 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_3 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_2 (-> ['_pairs'])"])
Phi

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price0Average, price1CumulativeLast, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef


END==================================
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, price1CumulativeLast, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
XXXX
REF_39 (->pairData_3 (-> ['_pairs'])) := TMP_135(FixedPoint.uq112x112)
asgn
Finance type key: (-1, -1)
[i]Type for REF_39

Name: REF_39 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> ['_pairs']), Field: price1Average
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, price1CumulativeLast, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Fieldf: 
Name: price1Average Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_39 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1Average Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_22(TwapOracle.PairData[]) := ϕ(["pairData_3 (-> ['_pairs'])"])
Phi
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _pairs
Source address: u
clearing ir...?
REF_42(uint256) -> pairData_3 (-> ['_pairs']).price0CumulativeLast
[i] REF_42 cleared
clearing ir...?
pairData_4 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_3 (-> ['_pairs'])"])
[i] pairData cleared
clearing ir...?
REF_42 (->pairData_4 (-> ['_pairs'])) := price0Cumulative_3(uint256)
[i] REF_42 cleared
clearing ir...?
_pairs_23(TwapOracle.PairData[]) := ϕ(["pairData_4 (-> ['_pairs'])"])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
Ssa_name: price0Cumulative_3, name: price0Cumulative

Name: price0Cumulative Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: price0Cumulative_3, name: price0Cumulative

Name: price0Cumulative Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: pairData_4 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
Name: pairData_4 (-> [', Num: pairs'])
Globalname: pairData_4 (-> [', contract_name: TwapOracle
Ssa_name: _pairs_23, name: _pairs

Name: _pairs Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 23
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Ssa_name: pairData_4 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
Name: pairData_4 (-> [', Num: pairs'])
Globalname: pairData_4 (-> [', contract_name: TwapOracle
Ssa_name: _pairs_23, name: _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_42(uint256) -> pairData_3 (-> ['_pairs']).price0CumulativeLast
MEMBER
OUT KEY: update_pairData_price0CumulativeLast
OUT KEY: update_pairData_price0CumulativeLast
FTT: None
No field found
[i]Type for REF_42

Name: REF_42 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: pairData_3 (-> ['_pairs']), Field: price0CumulativeLast
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
Fieldf: 
Name: price0CumulativeLast Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_42 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price0CumulativeLast Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
pairData_4 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_3 (-> ['_pairs'])"])
Phi

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, price1CumulativeLast, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef


END==================================
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, price1CumulativeLast, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
XXXX
REF_42 (->pairData_4 (-> ['_pairs'])) := price0Cumulative_3(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_42

Name: REF_42 Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: pairData_3 (-> ['_pairs']), Field: price0CumulativeLast
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, price1CumulativeLast, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Fieldf: 
Name: price0CumulativeLast Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_42 Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price0CumulativeLast Function: update
Num: 2
Den: 4
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_pairs_23(TwapOracle.PairData[]) := ϕ(["pairData_4 (-> ['_pairs'])"])
Phi
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _pairs
Source address: u
clearing ir...?
REF_43(uint256) -> pairData_4 (-> ['_pairs']).price1CumulativeLast
[i] REF_43 cleared
clearing ir...?
pairData_5 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_4 (-> ['_pairs'])"])
[i] pairData cleared
clearing ir...?
REF_43 (->pairData_5 (-> ['_pairs'])) := price1Cumulative_3(uint256)
[i] REF_43 cleared
clearing ir...?
_pairs_24(TwapOracle.PairData[]) := ϕ(["pairData_5 (-> ['_pairs'])"])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
Ssa_name: price1Cumulative_3, name: price1Cumulative

Name: price1Cumulative Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: price1Cumulative_3, name: price1Cumulative

Name: price1Cumulative Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: pairData_5 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
Name: pairData_5 (-> [', Num: pairs'])
Globalname: pairData_5 (-> [', contract_name: TwapOracle
Ssa_name: _pairs_24, name: _pairs

Name: _pairs Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 24
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Ssa_name: pairData_5 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
Name: pairData_5 (-> [', Num: pairs'])
Globalname: pairData_5 (-> [', contract_name: TwapOracle
Ssa_name: _pairs_24, name: _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_43(uint256) -> pairData_4 (-> ['_pairs']).price1CumulativeLast
MEMBER
OUT KEY: update_pairData_price1CumulativeLast
OUT KEY: update_pairData_price1CumulativeLast
FTT: None
No field found
[i]Type for REF_43

Name: REF_43 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: pairData_4 (-> ['_pairs']), Field: price1CumulativeLast
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
Fieldf: 
Name: price1CumulativeLast Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_43 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1CumulativeLast Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
pairData_5 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_4 (-> ['_pairs'])"])
Phi

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, price1CumulativeLast, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef


END==================================
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, price1CumulativeLast, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
XXXX
REF_43 (->pairData_5 (-> ['_pairs'])) := price1Cumulative_3(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_43

Name: REF_43 Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: pairData_4 (-> ['_pairs']), Field: price1CumulativeLast
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, price1CumulativeLast, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Fieldf: 
Name: price1CumulativeLast Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_43 Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: price1CumulativeLast Function: update
Num: 4
Den: 2
Address: u
Norm: -6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_pairs_24(TwapOracle.PairData[]) := ϕ(["pairData_5 (-> ['_pairs'])"])
Phi
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _pairs
Source address: u
clearing ir...?
REF_44(uint32) -> pairData_5 (-> ['_pairs']).blockTimestampLast
[i] REF_44 cleared
clearing ir...?
pairData_6 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_5 (-> ['_pairs'])"])
[i] pairData cleared
clearing ir...?
REF_44 (->pairData_6 (-> ['_pairs'])) := blockTimestamp_3(uint32)
[i] REF_44 cleared
clearing ir...?
_pairs_25(TwapOracle.PairData[]) := ϕ(["pairData_6 (-> ['_pairs'])"])
[i] _pairs cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_3, name: blockTimestamp

Name: blockTimestamp Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 3
Globalname: blockTimestamp, contract_name: TwapOracle
Ssa_name: blockTimestamp_3, name: blockTimestamp

Name: blockTimestamp Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 3
Globalname: blockTimestamp, contract_name: TwapOracle
Ssa_name: pairData_6 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
Name: pairData_6 (-> [', Num: pairs'])
Globalname: pairData_6 (-> [', contract_name: TwapOracle
Ssa_name: _pairs_25, name: _pairs

Name: _pairs Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pairs, Num: 25
Globalname: _pairs, contract_name: TwapOracle
global...

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Ssa_name: pairData_6 (-> ['_pairs']), name: pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
Name: pairData_6 (-> [', Num: pairs'])
Globalname: pairData_6 (-> [', contract_name: TwapOracle
Ssa_name: _pairs_25, name: _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_44(uint32) -> pairData_5 (-> ['_pairs']).blockTimestampLast
MEMBER
OUT KEY: update_pairData_blockTimestampLast
OUT KEY: update_pairData_blockTimestampLast
FTT: None
No field found
[i]Type for REF_44

Name: REF_44 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_5 (-> ['_pairs']), Field: blockTimestampLast
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
Fieldf: 
Name: blockTimestampLast Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_44 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: blockTimestampLast Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_6 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_5 (-> ['_pairs'])"])
Phi

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, price1CumulativeLast, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef


END==================================
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, price1CumulativeLast, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
XXXX
REF_44 (->pairData_6 (-> ['_pairs'])) := blockTimestamp_3(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for REF_44

Name: REF_44 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_5 (-> ['_pairs']), Field: blockTimestampLast
#################
Member: 
Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, price1CumulativeLast, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Fieldf: 
Name: blockTimestampLast Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_44 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: blockTimestampLast Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pairs_25(TwapOracle.PairData[]) := ϕ(["pairData_6 (-> ['_pairs'])"])
Phi
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _pairs
Source address: u
clearing ir...?
TMP_136(uint256) := i_2(uint256)
[i] TMP_136 cleared
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
[i] i cleared
Propogating parameters and globals to SSA variables...
Ssa_name: i_2, name: i

Name: i Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_2, name: i

Name: i Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: i, Num: 2
Globalname: i, contract_name: TwapOracle
Ssa_name: i_3, name: i

Name: i Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: i, Num: 3
Globalname: i, contract_name: TwapOracle
End popogation
TMP_136(uint256) := i_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_136

Name: TMP_136 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_3(uint256) = i_2 (c)+ 1
Source address: u
[i]Type for i

Name: i Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Address: 1, Label: global:_aggregators
Address: 2, Label: global:VADER
Address: 3, Label: global:_owner
Address: 4, Label: global:USDV
Address: -999, Label: pairExists:token0
Address: -998, Label: pairExists:token1
Address: -997, Label: consult:token
Address: -996, Label: initialize:_usdv
Address: -995, Label: initialize:_vader
Address: -994, Label: registerAggregator:asset
Address: -993, Label: registerAggregator:aggregator
Address: -992, Label: registerPair:factory
Address: -991, Label: registerPair:token0
Address: -990, Label: registerPair:token1
Head Addr: 1
    Norm: 0
    Set: {1}
    Fin: NULL
Head Addr: 2
    Norm: 18
    Set: {2}
    Fin: NULL
Head Addr: 3
    Norm: 0
    Set: {3}
    Fin: NULL
Head Addr: 4
    Norm: 6
    Set: {4}
    Fin: NULL
Head Addr: -999
    Norm: 18
    Set: {-999}
    Fin: NULL
Head Addr: -998
    Norm: 6
    Set: {-998}
    Fin: NULL
Head Addr: -997
    Norm: *
    Set: {-997}
    Fin: NULL
Head Addr: -996
    Norm: 6
    Set: {-996}
    Fin: NULL
Head Addr: -995
    Norm: 18
    Set: {-995}
    Fin: NULL
Head Addr: -994
    Norm: 6
    Set: {-994}
    Fin: NULL
Head Addr: -993
    Norm: 6
    Set: {-993}
    Fin: NULL
Head Addr: -992
    Norm: 0
    Set: {-992}
    Fin: NULL
Head Addr: -991
    Norm: 18
    Set: {-991}
    Fin: NULL
Head Addr: -990
    Norm: 6
    Set: {-990}
    Fin: NULL
Function count: 18
Time elapsed: 0.9398627281188965
Analyzed_contracts_count: 1
total compilations: 5, contracts: 1
contract name: VaderMath
Add to address_to_label {'global:_owner': 1}
Addr:global__owner : 0
Add to address_to_label {'global:_owner': 1, 'global:_tokenApprovals': 2}
Addr:global__tokenApprovals : 0
Add to address_to_label {'global:_owner': 1, 'global:_tokenApprovals': 2, 'global:_owners': 3}
Addr:global__owners : 0
Add to address_to_label {'global:_owner': 1, 'global:_tokenApprovals': 2, 'global:_owners': 3, 'swap:to': -999}
Addr:swap_to : 0
Mark functions Adding: VaderMath, calculateLiquidityUnits, True
[*]Marked
Mark functions Adding: VaderMath, calculateSlipAdjustment, True
[*]Marked
Mark functions Adding: VaderMath, calculateLoss, True
[*]Marked
Mark functions Adding: VaderMath, calculateSwap, True
[*]Marked
Mark functions Adding: VaderMath, calculateSwapReverse, True
[*]Marked
Mark functions Adding: VaderMath, delta, True
[*]Marked
Mark functions Adding: VaderMath, pow, True
[*]Marked
Mark functions Adding: VaderMath, root, True
[*]Marked
Mark functions Adding: VaderMath, slitherConstructorConstantVariables, True
[x] Not visible 
State_var: ONE
Finding type for ONE(uint256 ... )
Value: u
Source address: u
Running check on VaderMath
Reading Function: calculateLiquidityUnits
Checking funcion...



calculateLiquidityUnits
Function name: calculateLiquidityUnits
Finding type for vaderDeposited(uint256 ... )
Value: u
Finding type for vaderBalance(uint256 ... )
Value: u
Finding type for assetDeposited(uint256 ... )
Value: u
Finding type for assetBalance(uint256 ... )
Value: u
Finding type for totalPoolUnits(uint256 ... )
Value: u
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
FIND RETURN
ENTRY_POINT
calculateLiquidityUnits(uint256,uint256,uint256,uint256,uint256)


ONE_1(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
ONE_2(uint256) := ϕ(['ONE_4'])
slip_1(uint256) := TMP_0(uint256)
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
TMP_3(uint256) = TMP_1 (c)+ TMP_2
poolUnitFactor_1(uint256) := TMP_3(uint256)
TMP_4(uint256) = ONE_2 (c)* 2
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
denominator_1(uint256) := TMP_6(uint256)
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
TMP_8(uint256) = TMP_7 (c)/ denominator_1
TMP_9(uint256) = TMP_8 (c)* slip_1
RETURN TMP_9


clearing ir...?
ONE_1(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
[i] ONE cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: ONE_1, name: ONE

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 1
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
ONE_1(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
Phi
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
[i] TMP_0 cleared
clearing ir...?
ONE_2(uint256) := ϕ(['ONE_4'])
[i] ONE cleared
clearing ir...?
slip_1(uint256) := TMP_0(uint256)
[i] slip cleared
Propogating parameters and globals to SSA variables...
Ssa_name: vaderBalance_1, name: vaderBalance

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: slip_1, name: slip

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: slip, Num: 1
Globalname: slip, contract_name: VaderMath
End popogation
Ssa_name: ONE_2, name: ONE

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 2
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u'], [[], [], 'u', None, [], -1, 'u', 'u'], [[], [], 'u', None, [], -1, 'u', 'u'], [[], [], 'u', None, [], -1, 'u', 'u']]
Param: vaderDeposited
[[], [], 'u', None, [], -1, 'u', 'u']

Name: vaderDeposited Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: vaderBalance
[[], [], 'u', None, [], -1, 'u', 'u']

Name: vaderBalance Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: assetDeposited
[[], [], 'u', None, [], -1, 'u', 'u']

Name: assetDeposited Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: assetBalance
[[], [], 'u', None, [], -1, 'u', 'u']

Name: assetBalance Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
calculateSlipAdjustment(uint256,uint256,uint256,uint256)
ENTRY_POINT
Propogating All
NEW VARIABLE vaderAsset = vaderBalance * assetDeposited
Propogating All
assetDeposited_1
Ssa_name: assetDeposited_1, name: assetDeposited

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
vaderBalance_1
Ssa_name: vaderBalance_1, name: vaderBalance

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE assetVader = assetBalance * vaderDeposited
Propogating All
assetBalance_1
Ssa_name: assetBalance_1, name: assetBalance

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
vaderDeposited_1
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE denominator = (vaderDeposited + vaderBalance) * (assetDeposited + assetBalance)
Propogating All
assetBalance_1
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
assetDeposited_1
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
vaderBalance_1
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
vaderDeposited_1
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
RETURN ONE - (delta(vaderAsset,assetVader) / denominator)
Propogating All
denominator_1
Ssa_name: denominator_1, name: denominator

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assetVader_1
Ssa_name: assetVader_1, name: assetVader

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
vaderAsset_1
Ssa_name: vaderAsset_1, name: vaderAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i] vaderDeposited cleared
clearing ir...?
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i] vaderBalance cleared
clearing ir...?
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i] assetDeposited cleared
clearing ir...?
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i] assetBalance cleared
clearing ir...?
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
[i] ONE cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: ONE_3, name: ONE

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 3
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
Phi

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
Phi

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
Phi

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
Phi

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
Phi
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i] TMP_10 cleared
clearing ir...?
vaderAsset_1(uint256) := TMP_10(uint256)
[i] vaderAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderAsset_1, name: vaderAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
End popogation
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderAsset_1(uint256) := TMP_10(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
[i] TMP_11 cleared
clearing ir...?
assetVader_1(uint256) := TMP_11(uint256)
[i] assetVader cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetVader_1, name: assetVader

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
End popogation
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetVader_1(uint256) := TMP_11(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i] TMP_12 cleared
clearing ir...?
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i] TMP_13 cleared
clearing ir...?
TMP_14(uint256) = TMP_12 (c)* TMP_13
[i] TMP_14 cleared
clearing ir...?
denominator_1(uint256) := TMP_14(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: denominator_1, name: denominator

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_14(uint256) = TMP_12 (c)* TMP_13
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
denominator_1(uint256) := TMP_14(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
[i] TMP_15 cleared
clearing ir...?
TMP_16(uint256) = TMP_15 (c)/ denominator_1
[i] TMP_16 cleared
clearing ir...?
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i] TMP_17 cleared
clearing ir...?
RETURN TMP_17
Propogating parameters and globals to SSA variables...
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
Ssa_name: ONE_4, name: ONE

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 4
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
Ssa_name: ONE_4, name: ONE

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
End popogation
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u'], [[], [], 'u', None, [], -1, 'u', 'u']]
Param: a
[[], [], 'u', None, [], -1, 'u', 'u']

Name: a Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: b
[[], [], 'u', None, [], -1, 'u', 'u']

Name: b Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
delta(uint256,uint256)
ENTRY_POINT
Propogating All
IF a > b
Propogating All
b_1
Ssa_name: b_1, name: b

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
RETURN b - a
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
RETURN a - b
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for a

Name: a Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for b

Name: b Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_47(uint256) = b_1 (c)- a_1
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_46(uint256) = a_1 (c)- b_1
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for a

Name: a Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for b

Name: b Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_47(uint256) = b_1 (c)- a_1
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_46(uint256) = a_1 (c)- b_1
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
([], [], 'u', 'u', 'u', -1)
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_16(uint256) = TMP_15 (c)/ denominator_1
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_17(uint256) = ONE_4 (c)- TMP_16
Source address: u
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_17
RETURN

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i] vaderDeposited cleared
clearing ir...?
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i] vaderBalance cleared
clearing ir...?
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i] assetDeposited cleared
clearing ir...?
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i] assetBalance cleared
clearing ir...?
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
[i] ONE cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: ONE_3, name: ONE

Name: ONE Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 3
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
Phi

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
Phi

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
Phi

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
Phi

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
Phi
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i] TMP_10 cleared
clearing ir...?
vaderAsset_1(uint256) := TMP_10(uint256)
[i] vaderAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
End popogation
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderAsset_1(uint256) := TMP_10(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
[i] TMP_11 cleared
clearing ir...?
assetVader_1(uint256) := TMP_11(uint256)
[i] assetVader cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
End popogation
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetVader_1(uint256) := TMP_11(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i] TMP_12 cleared
clearing ir...?
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i] TMP_13 cleared
clearing ir...?
TMP_14(uint256) = TMP_12 (c)* TMP_13
[i] TMP_14 cleared
clearing ir...?
denominator_1(uint256) := TMP_14(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_14(uint256) = TMP_12 (c)* TMP_13
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
denominator_1(uint256) := TMP_14(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
[i] TMP_15 cleared
clearing ir...?
TMP_16(uint256) = TMP_15 (c)/ denominator_1
[i] TMP_16 cleared
clearing ir...?
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i] TMP_17 cleared
clearing ir...?
RETURN TMP_17
Propogating parameters and globals to SSA variables...
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
End popogation
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u'], [[], [], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u']]
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_16(uint256) = TMP_15 (c)/ denominator_1
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_17(uint256) = ONE_4 (c)- TMP_16
Source address: u
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_17
RETURN

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_0

Name: TMP_0 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ONE_2(uint256) := ϕ(['ONE_4'])
Phi
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
slip_1(uint256) := TMP_0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i] TMP_1 cleared
clearing ir...?
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
[i] TMP_2 cleared
clearing ir...?
TMP_3(uint256) = TMP_1 (c)+ TMP_2
[i] TMP_3 cleared
clearing ir...?
poolUnitFactor_1(uint256) := TMP_3(uint256)
[i] poolUnitFactor cleared
Propogating parameters and globals to SSA variables...
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolUnitFactor, Num: 1
Globalname: poolUnitFactor, contract_name: VaderMath
End popogation
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_1

Name: TMP_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_2

Name: TMP_2 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_3(uint256) = TMP_1 (c)+ TMP_2
[i]Type for TMP_3

Name: TMP_3 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolUnitFactor_1(uint256) := TMP_3(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_4(uint256) = ONE_2 (c)* 2
[i] TMP_4 cleared
clearing ir...?
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
[i] TMP_5 cleared
clearing ir...?
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
[i] TMP_6 cleared
clearing ir...?
denominator_1(uint256) := TMP_6(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: ONE_2, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: ONE_2, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_4(uint256) = ONE_2 (c)* 2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_4

Name: TMP_4 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
A: 0 B: u
lnorm: 0 rnorm: u
Source address: u
[i]Type for TMP_5

Name: TMP_5 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
A: 0 B: u
lnorm: 0 rnorm: u
Source address: u
[i]Type for TMP_6

Name: TMP_6 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
denominator_1(uint256) := TMP_6(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
[i] TMP_7 cleared
clearing ir...?
TMP_8(uint256) = TMP_7 (c)/ denominator_1
[i] TMP_8 cleared
clearing ir...?
TMP_9(uint256) = TMP_8 (c)* slip_1
[i] TMP_9 cleared
clearing ir...?
RETURN TMP_9
Propogating parameters and globals to SSA variables...
Ssa_name: totalPoolUnits_1, name: totalPoolUnits

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: totalPoolUnits_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: totalPoolUnits, Num: 1
Globalname: totalPoolUnits, contract_name: VaderMath
Ssa_name: slip_1, name: slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolUnitFactor, Num: 1
Globalname: poolUnitFactor, contract_name: VaderMath
Ssa_name: totalPoolUnits_1, name: totalPoolUnits

Name: totalPoolUnits_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: totalPoolUnits_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: totalPoolUnits, Num: 1
Globalname: totalPoolUnits, contract_name: VaderMath
Ssa_name: slip_1, name: slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolUnitFactor, Num: 1
Globalname: poolUnitFactor, contract_name: VaderMath
End popogation
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_7

Name: TMP_7 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_8(uint256) = TMP_7 (c)/ denominator_1
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_8

Name: TMP_8 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_9(uint256) = TMP_8 (c)* slip_1
A: 0 B: u
lnorm: 0 rnorm: u
Source address: u
[i]Type for TMP_9

Name: TMP_9 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
RETURN TMP_9
RETURN

Name: TMP_9 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef


ONE_1(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
ONE_2(uint256) := ϕ(['ONE_4'])
slip_1(uint256) := TMP_0(uint256)
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
TMP_3(uint256) = TMP_1 (c)+ TMP_2
poolUnitFactor_1(uint256) := TMP_3(uint256)
TMP_4(uint256) = ONE_2 (c)* 2
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
denominator_1(uint256) := TMP_6(uint256)
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
TMP_8(uint256) = TMP_7 (c)/ denominator_1
TMP_9(uint256) = TMP_8 (c)* slip_1
RETURN TMP_9


clearing ir...?
ONE_1(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
[i] ONE cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: ONE_1, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 1
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
ONE_1(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
Phi
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
[i] TMP_0 cleared
clearing ir...?
ONE_2(uint256) := ϕ(['ONE_4'])
[i] ONE cleared
clearing ir...?
slip_1(uint256) := TMP_0(uint256)
[i] slip cleared
Propogating parameters and globals to SSA variables...
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: slip_1, name: slip

Name: slip Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: slip, Num: 1
Globalname: slip, contract_name: VaderMath
End popogation
Ssa_name: ONE_2, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 2
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u'], [[], [], 'u', None, [], -1, 'u', 'u'], [[], [], 'u', None, [], -1, 'u', 'u'], [[], [], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u']]
Source address: u
[i]Type for TMP_0

Name: TMP_0 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ONE_2(uint256) := ϕ(['ONE_4'])
Phi
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
slip_1(uint256) := TMP_0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i] TMP_1 cleared
clearing ir...?
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
[i] TMP_2 cleared
clearing ir...?
TMP_3(uint256) = TMP_1 (c)+ TMP_2
[i] TMP_3 cleared
clearing ir...?
poolUnitFactor_1(uint256) := TMP_3(uint256)
[i] poolUnitFactor cleared
Propogating parameters and globals to SSA variables...
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolUnitFactor, Num: 1
Globalname: poolUnitFactor, contract_name: VaderMath
End popogation
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_1

Name: TMP_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_2

Name: TMP_2 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_3(uint256) = TMP_1 (c)+ TMP_2
[i]Type for TMP_3

Name: TMP_3 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolUnitFactor_1(uint256) := TMP_3(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_4(uint256) = ONE_2 (c)* 2
[i] TMP_4 cleared
clearing ir...?
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
[i] TMP_5 cleared
clearing ir...?
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
[i] TMP_6 cleared
clearing ir...?
denominator_1(uint256) := TMP_6(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: ONE_2, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: ONE_2, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_4(uint256) = ONE_2 (c)* 2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_4

Name: TMP_4 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
A: 0 B: u
lnorm: 0 rnorm: u
Source address: u
[i]Type for TMP_5

Name: TMP_5 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
A: 0 B: u
lnorm: 0 rnorm: u
Source address: u
[i]Type for TMP_6

Name: TMP_6 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
denominator_1(uint256) := TMP_6(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
[i] TMP_7 cleared
clearing ir...?
TMP_8(uint256) = TMP_7 (c)/ denominator_1
[i] TMP_8 cleared
clearing ir...?
TMP_9(uint256) = TMP_8 (c)* slip_1
[i] TMP_9 cleared
clearing ir...?
RETURN TMP_9
Propogating parameters and globals to SSA variables...
Ssa_name: totalPoolUnits_1, name: totalPoolUnits

Name: totalPoolUnits_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: totalPoolUnits_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: totalPoolUnits, Num: 1
Globalname: totalPoolUnits, contract_name: VaderMath
Ssa_name: slip_1, name: slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolUnitFactor, Num: 1
Globalname: poolUnitFactor, contract_name: VaderMath
Ssa_name: totalPoolUnits_1, name: totalPoolUnits

Name: totalPoolUnits_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: totalPoolUnits_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: totalPoolUnits, Num: 1
Globalname: totalPoolUnits, contract_name: VaderMath
Ssa_name: slip_1, name: slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolUnitFactor, Num: 1
Globalname: poolUnitFactor, contract_name: VaderMath
End popogation
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_7

Name: TMP_7 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_8(uint256) = TMP_7 (c)/ denominator_1
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_8

Name: TMP_8 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_9(uint256) = TMP_8 (c)* slip_1
A: 0 B: u
lnorm: 0 rnorm: u
Source address: u
[i]Type for TMP_9

Name: TMP_9 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
RETURN TMP_9
RETURN

Name: TMP_9 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Source address: u
Reading Function: calculateSlipAdjustment
Checking funcion...



calculateSlipAdjustment
Function name: calculateSlipAdjustment
Finding type for vaderDeposited(uint256 ... )
Value: u
Finding type for vaderBalance(uint256 ... )
Value: u
Finding type for assetDeposited(uint256 ... )
Value: u
Finding type for assetBalance(uint256 ... )
Value: u
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u']]
FIND RETURN
ENTRY_POINT
calculateSlipAdjustment(uint256,uint256,uint256,uint256)


vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
vaderAsset_1(uint256) := TMP_10(uint256)
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
assetVader_1(uint256) := TMP_11(uint256)
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
TMP_14(uint256) = TMP_12 (c)* TMP_13
denominator_1(uint256) := TMP_14(uint256)
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
TMP_16(uint256) = TMP_15 (c)/ denominator_1
TMP_17(uint256) = ONE_4 (c)- TMP_16
RETURN TMP_17


clearing ir...?
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i] vaderDeposited cleared
clearing ir...?
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i] vaderBalance cleared
clearing ir...?
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i] assetDeposited cleared
clearing ir...?
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i] assetBalance cleared
clearing ir...?
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
[i] ONE cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: ONE_3, name: ONE

Name: ONE Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 3
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
Phi

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
Phi

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
Phi

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
Phi

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
Phi
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i] TMP_10 cleared
clearing ir...?
vaderAsset_1(uint256) := TMP_10(uint256)
[i] vaderAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
End popogation
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderAsset_1(uint256) := TMP_10(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
[i] TMP_11 cleared
clearing ir...?
assetVader_1(uint256) := TMP_11(uint256)
[i] assetVader cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
End popogation
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetVader_1(uint256) := TMP_11(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i] TMP_12 cleared
clearing ir...?
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i] TMP_13 cleared
clearing ir...?
TMP_14(uint256) = TMP_12 (c)* TMP_13
[i] TMP_14 cleared
clearing ir...?
denominator_1(uint256) := TMP_14(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_14(uint256) = TMP_12 (c)* TMP_13
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
denominator_1(uint256) := TMP_14(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
[i] TMP_15 cleared
clearing ir...?
TMP_16(uint256) = TMP_15 (c)/ denominator_1
[i] TMP_16 cleared
clearing ir...?
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i] TMP_17 cleared
clearing ir...?
RETURN TMP_17
Propogating parameters and globals to SSA variables...
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
End popogation
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u'], [[], [], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u']]
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_16(uint256) = TMP_15 (c)/ denominator_1
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_17(uint256) = ONE_4 (c)- TMP_16
Source address: u
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_17
RETURN

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
vaderAsset_1(uint256) := TMP_10(uint256)
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
assetVader_1(uint256) := TMP_11(uint256)
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
TMP_14(uint256) = TMP_12 (c)* TMP_13
denominator_1(uint256) := TMP_14(uint256)
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
TMP_16(uint256) = TMP_15 (c)/ denominator_1
TMP_17(uint256) = ONE_4 (c)- TMP_16
RETURN TMP_17


clearing ir...?
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i] vaderDeposited cleared
clearing ir...?
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i] vaderBalance cleared
clearing ir...?
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i] assetDeposited cleared
clearing ir...?
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i] assetBalance cleared
clearing ir...?
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
[i] ONE cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: ONE_3, name: ONE

Name: ONE Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 3
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
Phi

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
Phi

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
Phi

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
Phi

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
Phi
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i] TMP_10 cleared
clearing ir...?
vaderAsset_1(uint256) := TMP_10(uint256)
[i] vaderAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
End popogation
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderAsset_1(uint256) := TMP_10(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
[i] TMP_11 cleared
clearing ir...?
assetVader_1(uint256) := TMP_11(uint256)
[i] assetVader cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
End popogation
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetVader_1(uint256) := TMP_11(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i] TMP_12 cleared
clearing ir...?
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i] TMP_13 cleared
clearing ir...?
TMP_14(uint256) = TMP_12 (c)* TMP_13
[i] TMP_14 cleared
clearing ir...?
denominator_1(uint256) := TMP_14(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetBalance, Num: 1
Globalname: assetBalance, contract_name: VaderMath
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: assetDeposited, Num: 1
Globalname: assetDeposited, contract_name: VaderMath
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderBalance, Num: 1
Globalname: vaderBalance, contract_name: VaderMath
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: vaderDeposited, Num: 1
Globalname: vaderDeposited, contract_name: VaderMath
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_14(uint256) = TMP_12 (c)* TMP_13
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
denominator_1(uint256) := TMP_14(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
[i] TMP_15 cleared
clearing ir...?
TMP_16(uint256) = TMP_15 (c)/ denominator_1
[i] TMP_16 cleared
clearing ir...?
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i] TMP_17 cleared
clearing ir...?
RETURN TMP_17
Propogating parameters and globals to SSA variables...
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
End popogation
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u'], [[], [], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u']]
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_16(uint256) = TMP_15 (c)/ denominator_1
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_17(uint256) = ONE_4 (c)- TMP_16
Source address: u
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_17
RETURN

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Reading Function: calculateLoss
Checking funcion...



calculateLoss
Function name: calculateLoss
Finding type for originalVader(uint256 ... )
Value: u
Finding type for originalAsset(uint256 ... )
Value: u
Finding type for releasedVader(uint256 ... )
Value: u
Finding type for releasedAsset(uint256 ... )
Value: u
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
FIND RETURN
ENTRY_POINT
calculateLoss(uint256,uint256,uint256,uint256)


TMP_18(uint256) = originalAsset_1 (c)* releasedVader_1
TMP_19(uint256) = TMP_18 (c)/ releasedAsset_1
TMP_20(uint256) = TMP_19 (c)+ originalVader_1
originalValue_1(uint256) := TMP_20(uint256)
TMP_21(uint256) = releasedAsset_1 (c)* releasedVader_1
TMP_22(uint256) = TMP_21 (c)/ releasedAsset_1
TMP_23(uint256) = TMP_22 (c)+ releasedVader_1
releasedValue_1(uint256) := TMP_23(uint256)
TMP_24(bool) = originalValue_1 > releasedValue_1
CONDITION TMP_24
TMP_25(uint256) = originalValue_1 (c)- releasedValue_1
loss_1(uint256) := TMP_25(uint256)


Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_18(uint256) = originalAsset_1 (c)* releasedVader_1
[i] TMP_18 cleared
clearing ir...?
TMP_19(uint256) = TMP_18 (c)/ releasedAsset_1
[i] TMP_19 cleared
clearing ir...?
TMP_20(uint256) = TMP_19 (c)+ originalVader_1
[i] TMP_20 cleared
clearing ir...?
originalValue_1(uint256) := TMP_20(uint256)
[i] originalValue cleared
Propogating parameters and globals to SSA variables...
Ssa_name: originalVader_1, name: originalVader

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: originalVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: originalVader, Num: 1
Globalname: originalVader, contract_name: VaderMath
Ssa_name: releasedAsset_1, name: releasedAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: releasedAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: releasedAsset, Num: 1
Globalname: releasedAsset, contract_name: VaderMath
Ssa_name: releasedVader_1, name: releasedVader

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: releasedVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: releasedVader, Num: 1
Globalname: releasedVader, contract_name: VaderMath
Ssa_name: originalAsset_1, name: originalAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: originalAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: originalAsset, Num: 1
Globalname: originalAsset, contract_name: VaderMath
Ssa_name: originalVader_1, name: originalVader

Name: originalVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: originalVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: originalVader, Num: 1
Globalname: originalVader, contract_name: VaderMath
Ssa_name: releasedAsset_1, name: releasedAsset

Name: releasedAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: releasedAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: releasedAsset, Num: 1
Globalname: releasedAsset, contract_name: VaderMath
Ssa_name: releasedVader_1, name: releasedVader

Name: releasedVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: releasedVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: releasedVader, Num: 1
Globalname: releasedVader, contract_name: VaderMath
Ssa_name: originalAsset_1, name: originalAsset

Name: originalAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: originalAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: originalAsset, Num: 1
Globalname: originalAsset, contract_name: VaderMath
Ssa_name: originalValue_1, name: originalValue

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: originalValue, Num: 1
Globalname: originalValue, contract_name: VaderMath
End popogation
TMP_18(uint256) = originalAsset_1 (c)* releasedVader_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_18

Name: TMP_18 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_19(uint256) = TMP_18 (c)/ releasedAsset_1
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_19

Name: TMP_19 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_20(uint256) = TMP_19 (c)+ originalVader_1
[i]Type for TMP_20

Name: TMP_20 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
originalValue_1(uint256) := TMP_20(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for originalValue

Name: originalValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_21(uint256) = releasedAsset_1 (c)* releasedVader_1
[i] TMP_21 cleared
clearing ir...?
TMP_22(uint256) = TMP_21 (c)/ releasedAsset_1
[i] TMP_22 cleared
clearing ir...?
TMP_23(uint256) = TMP_22 (c)+ releasedVader_1
[i] TMP_23 cleared
clearing ir...?
releasedValue_1(uint256) := TMP_23(uint256)
[i] releasedValue cleared
Propogating parameters and globals to SSA variables...
Ssa_name: releasedAsset_1, name: releasedAsset

Name: releasedAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: releasedAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: releasedAsset, Num: 1
Globalname: releasedAsset, contract_name: VaderMath
Ssa_name: releasedVader_1, name: releasedVader

Name: releasedVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: releasedVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: releasedVader, Num: 1
Globalname: releasedVader, contract_name: VaderMath
Ssa_name: releasedAsset_1, name: releasedAsset

Name: releasedAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: releasedAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: releasedAsset, Num: 1
Globalname: releasedAsset, contract_name: VaderMath
Ssa_name: releasedVader_1, name: releasedVader

Name: releasedVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: releasedVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: releasedVader, Num: 1
Globalname: releasedVader, contract_name: VaderMath
Ssa_name: releasedValue_1, name: releasedValue

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: releasedValue, Num: 1
Globalname: releasedValue, contract_name: VaderMath
End popogation
TMP_21(uint256) = releasedAsset_1 (c)* releasedVader_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_21

Name: TMP_21 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(uint256) = TMP_21 (c)/ releasedAsset_1
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_22

Name: TMP_22 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_23(uint256) = TMP_22 (c)+ releasedVader_1
[i]Type for TMP_23

Name: TMP_23 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
releasedValue_1(uint256) := TMP_23(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for releasedValue

Name: releasedValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_24(bool) = originalValue_1 > releasedValue_1
[i] TMP_24 cleared
clearing ir...?
CONDITION TMP_24
Propogating parameters and globals to SSA variables...
Ssa_name: releasedValue_1, name: releasedValue

Name: releasedValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: releasedValue, Num: 1
Globalname: releasedValue, contract_name: VaderMath
Ssa_name: originalValue_1, name: originalValue

Name: originalValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: originalValue, Num: 1
Globalname: originalValue, contract_name: VaderMath
Ssa_name: releasedValue_1, name: releasedValue

Name: releasedValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: releasedValue, Num: 1
Globalname: releasedValue, contract_name: VaderMath
Ssa_name: originalValue_1, name: originalValue

Name: originalValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: originalValue, Num: 1
Globalname: originalValue, contract_name: VaderMath
End popogation
TMP_24(bool) = originalValue_1 > releasedValue_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_24

Name: TMP_24 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_25(uint256) = originalValue_1 (c)- releasedValue_1
[i] TMP_25 cleared
clearing ir...?
loss_1(uint256) := TMP_25(uint256)
[i] loss cleared
Propogating parameters and globals to SSA variables...
Ssa_name: releasedValue_1, name: releasedValue

Name: releasedValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: releasedValue, Num: 1
Globalname: releasedValue, contract_name: VaderMath
Ssa_name: originalValue_1, name: originalValue

Name: originalValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: originalValue, Num: 1
Globalname: originalValue, contract_name: VaderMath
Ssa_name: releasedValue_1, name: releasedValue

Name: releasedValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: releasedValue, Num: 1
Globalname: releasedValue, contract_name: VaderMath
Ssa_name: originalValue_1, name: originalValue

Name: originalValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: originalValue, Num: 1
Globalname: originalValue, contract_name: VaderMath
Ssa_name: loss_1, name: loss

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: loss, Num: 1
Globalname: loss, contract_name: VaderMath
End popogation
TMP_25(uint256) = originalValue_1 (c)- releasedValue_1
[i]Type for TMP_25

Name: TMP_25 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
loss_1(uint256) := TMP_25(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for loss

Name: loss Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation


TMP_18(uint256) = originalAsset_1 (c)* releasedVader_1
TMP_19(uint256) = TMP_18 (c)/ releasedAsset_1
TMP_20(uint256) = TMP_19 (c)+ originalVader_1
originalValue_1(uint256) := TMP_20(uint256)
TMP_21(uint256) = releasedAsset_1 (c)* releasedVader_1
TMP_22(uint256) = TMP_21 (c)/ releasedAsset_1
TMP_23(uint256) = TMP_22 (c)+ releasedVader_1
releasedValue_1(uint256) := TMP_23(uint256)
TMP_24(bool) = originalValue_1 > releasedValue_1
CONDITION TMP_24
TMP_25(uint256) = originalValue_1 (c)- releasedValue_1
loss_1(uint256) := TMP_25(uint256)


Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_18(uint256) = originalAsset_1 (c)* releasedVader_1
[i] TMP_18 cleared
clearing ir...?
TMP_19(uint256) = TMP_18 (c)/ releasedAsset_1
[i] TMP_19 cleared
clearing ir...?
TMP_20(uint256) = TMP_19 (c)+ originalVader_1
[i] TMP_20 cleared
clearing ir...?
originalValue_1(uint256) := TMP_20(uint256)
[i] originalValue cleared
Propogating parameters and globals to SSA variables...
Ssa_name: originalVader_1, name: originalVader

Name: originalVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: originalVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: originalVader, Num: 1
Globalname: originalVader, contract_name: VaderMath
Ssa_name: releasedAsset_1, name: releasedAsset

Name: releasedAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: releasedAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: releasedAsset, Num: 1
Globalname: releasedAsset, contract_name: VaderMath
Ssa_name: releasedVader_1, name: releasedVader

Name: releasedVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: releasedVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: releasedVader, Num: 1
Globalname: releasedVader, contract_name: VaderMath
Ssa_name: originalAsset_1, name: originalAsset

Name: originalAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: originalAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: originalAsset, Num: 1
Globalname: originalAsset, contract_name: VaderMath
Ssa_name: originalVader_1, name: originalVader

Name: originalVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: originalVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: originalVader, Num: 1
Globalname: originalVader, contract_name: VaderMath
Ssa_name: releasedAsset_1, name: releasedAsset

Name: releasedAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: releasedAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: releasedAsset, Num: 1
Globalname: releasedAsset, contract_name: VaderMath
Ssa_name: releasedVader_1, name: releasedVader

Name: releasedVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: releasedVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: releasedVader, Num: 1
Globalname: releasedVader, contract_name: VaderMath
Ssa_name: originalAsset_1, name: originalAsset

Name: originalAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: originalAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: originalAsset, Num: 1
Globalname: originalAsset, contract_name: VaderMath
Ssa_name: originalValue_1, name: originalValue

Name: originalValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: originalValue, Num: 1
Globalname: originalValue, contract_name: VaderMath
End popogation
TMP_18(uint256) = originalAsset_1 (c)* releasedVader_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_18

Name: TMP_18 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_19(uint256) = TMP_18 (c)/ releasedAsset_1
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_19

Name: TMP_19 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_20(uint256) = TMP_19 (c)+ originalVader_1
[i]Type for TMP_20

Name: TMP_20 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
originalValue_1(uint256) := TMP_20(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for originalValue

Name: originalValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_21(uint256) = releasedAsset_1 (c)* releasedVader_1
[i] TMP_21 cleared
clearing ir...?
TMP_22(uint256) = TMP_21 (c)/ releasedAsset_1
[i] TMP_22 cleared
clearing ir...?
TMP_23(uint256) = TMP_22 (c)+ releasedVader_1
[i] TMP_23 cleared
clearing ir...?
releasedValue_1(uint256) := TMP_23(uint256)
[i] releasedValue cleared
Propogating parameters and globals to SSA variables...
Ssa_name: releasedAsset_1, name: releasedAsset

Name: releasedAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: releasedAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: releasedAsset, Num: 1
Globalname: releasedAsset, contract_name: VaderMath
Ssa_name: releasedVader_1, name: releasedVader

Name: releasedVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: releasedVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: releasedVader, Num: 1
Globalname: releasedVader, contract_name: VaderMath
Ssa_name: releasedAsset_1, name: releasedAsset

Name: releasedAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: releasedAsset_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: releasedAsset, Num: 1
Globalname: releasedAsset, contract_name: VaderMath
Ssa_name: releasedVader_1, name: releasedVader

Name: releasedVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: releasedVader_1 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: releasedVader, Num: 1
Globalname: releasedVader, contract_name: VaderMath
Ssa_name: releasedValue_1, name: releasedValue

Name: releasedValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: releasedValue, Num: 1
Globalname: releasedValue, contract_name: VaderMath
End popogation
TMP_21(uint256) = releasedAsset_1 (c)* releasedVader_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_21

Name: TMP_21 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(uint256) = TMP_21 (c)/ releasedAsset_1
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_22

Name: TMP_22 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_23(uint256) = TMP_22 (c)+ releasedVader_1
[i]Type for TMP_23

Name: TMP_23 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
releasedValue_1(uint256) := TMP_23(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for releasedValue

Name: releasedValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_24(bool) = originalValue_1 > releasedValue_1
[i] TMP_24 cleared
clearing ir...?
CONDITION TMP_24
Propogating parameters and globals to SSA variables...
Ssa_name: releasedValue_1, name: releasedValue

Name: releasedValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: releasedValue, Num: 1
Globalname: releasedValue, contract_name: VaderMath
Ssa_name: originalValue_1, name: originalValue

Name: originalValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: originalValue, Num: 1
Globalname: originalValue, contract_name: VaderMath
Ssa_name: releasedValue_1, name: releasedValue

Name: releasedValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: releasedValue, Num: 1
Globalname: releasedValue, contract_name: VaderMath
Ssa_name: originalValue_1, name: originalValue

Name: originalValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: originalValue, Num: 1
Globalname: originalValue, contract_name: VaderMath
End popogation
TMP_24(bool) = originalValue_1 > releasedValue_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_24

Name: TMP_24 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_25(uint256) = originalValue_1 (c)- releasedValue_1
[i] TMP_25 cleared
clearing ir...?
loss_1(uint256) := TMP_25(uint256)
[i] loss cleared
Propogating parameters and globals to SSA variables...
Ssa_name: releasedValue_1, name: releasedValue

Name: releasedValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: releasedValue, Num: 1
Globalname: releasedValue, contract_name: VaderMath
Ssa_name: originalValue_1, name: originalValue

Name: originalValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: originalValue, Num: 1
Globalname: originalValue, contract_name: VaderMath
Ssa_name: releasedValue_1, name: releasedValue

Name: releasedValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: releasedValue, Num: 1
Globalname: releasedValue, contract_name: VaderMath
Ssa_name: originalValue_1, name: originalValue

Name: originalValue Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: originalValue, Num: 1
Globalname: originalValue, contract_name: VaderMath
Ssa_name: loss_1, name: loss

Name: loss Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: loss, Num: 1
Globalname: loss, contract_name: VaderMath
End popogation
TMP_25(uint256) = originalValue_1 (c)- releasedValue_1
[i]Type for TMP_25

Name: TMP_25 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
loss_1(uint256) := TMP_25(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for loss

Name: loss Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Source address: u
Reading Function: calculateSwap
Checking funcion...



calculateSwap
Function name: calculateSwap
Finding type for amountIn(uint256 ... )
Value: u
Finding type for reserveIn(uint256 ... )
Value: u
Finding type for reserveOut(uint256 ... )
Value: u
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
FIND RETURN
ENTRY_POINT
calculateSwap(uint256,uint256,uint256)


TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
numerator_1(uint256) := TMP_27(uint256)
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
denominator_1(uint256) := TMP_29(uint256)
TMP_30(uint256) = numerator_1 (c)/ denominator_1
amountOut_1(uint256) := TMP_30(uint256)
RETURN amountOut_1


Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
[i] TMP_26 cleared
clearing ir...?
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
[i] TMP_27 cleared
clearing ir...?
numerator_1(uint256) := TMP_27(uint256)
[i] numerator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveIn_1, name: reserveIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: amountIn_1, name: amountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountIn, Num: 1
Globalname: amountIn, contract_name: VaderMath
Ssa_name: reserveOut_1, name: reserveOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveOut_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveOut, Num: 1
Globalname: reserveOut, contract_name: VaderMath
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: amountIn_1, name: amountIn

Name: amountIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountIn, Num: 1
Globalname: amountIn, contract_name: VaderMath
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveOut_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveOut, Num: 1
Globalname: reserveOut, contract_name: VaderMath
Ssa_name: numerator_1, name: numerator

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numerator, Num: 1
Globalname: numerator, contract_name: VaderMath
End popogation
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
numerator_1(uint256) := TMP_27(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
[i] TMP_28 cleared
clearing ir...?
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
[i] TMP_29 cleared
clearing ir...?
denominator_1(uint256) := TMP_29(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: amountIn_1, name: amountIn

Name: amountIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountIn, Num: 1
Globalname: amountIn, contract_name: VaderMath
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: amountIn_1, name: amountIn

Name: amountIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountIn, Num: 1
Globalname: amountIn, contract_name: VaderMath
Ssa_name: denominator_1, name: denominator

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u']]
Param: a
[[], [], 'u', None, [], -1, 'u', 'u']

Name: a Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
pow(uint256)
ENTRY_POINT
Propogating All
RETURN a * a
Propogating All
a_1
Ssa_name: a_1, name: a

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
clearing ir...?
a_1(uint256) := ϕ(['TMP_28'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
a_1(uint256) := ϕ(['TMP_28'])
Phi

Name: TMP_28 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for a

Name: a Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_48(uint256) = a_1 (c)* a_1
[i] TMP_48 cleared
clearing ir...?
RETURN TMP_48
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_48(uint256) = a_1 (c)* a_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_48
RETURN

Name: TMP_48 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
a_1(uint256) := ϕ(['TMP_28'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
a_1(uint256) := ϕ(['TMP_28'])
Phi

Name: TMP_28 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for a

Name: a Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_48(uint256) = a_1 (c)* a_1
[i] TMP_48 cleared
clearing ir...?
RETURN TMP_48
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_48(uint256) = a_1 (c)* a_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_48
RETURN

Name: TMP_48 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
denominator_1(uint256) := TMP_29(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_30(uint256) = numerator_1 (c)/ denominator_1
[i] TMP_30 cleared
clearing ir...?
amountOut_1(uint256) := TMP_30(uint256)
[i] amountOut cleared
Propogating parameters and globals to SSA variables...
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
Ssa_name: numerator_1, name: numerator

Name: numerator Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numerator, Num: 1
Globalname: numerator, contract_name: VaderMath
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
Ssa_name: numerator_1, name: numerator

Name: numerator Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numerator, Num: 1
Globalname: numerator, contract_name: VaderMath
Ssa_name: amountOut_1, name: amountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountOut, Num: 1
Globalname: amountOut, contract_name: VaderMath
End popogation
TMP_30(uint256) = numerator_1 (c)/ denominator_1
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := TMP_30(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
RETURN amountOut_1
Propogating parameters and globals to SSA variables...
Ssa_name: amountOut_1, name: amountOut

Name: amountOut Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountOut, Num: 1
Globalname: amountOut, contract_name: VaderMath
Ssa_name: amountOut_1, name: amountOut

Name: amountOut Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountOut, Num: 1
Globalname: amountOut, contract_name: VaderMath
End popogation
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
numerator_1(uint256) := TMP_27(uint256)
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
denominator_1(uint256) := TMP_29(uint256)
TMP_30(uint256) = numerator_1 (c)/ denominator_1
amountOut_1(uint256) := TMP_30(uint256)
RETURN amountOut_1


Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
[i] TMP_26 cleared
clearing ir...?
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
[i] TMP_27 cleared
clearing ir...?
numerator_1(uint256) := TMP_27(uint256)
[i] numerator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: amountIn_1, name: amountIn

Name: amountIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountIn, Num: 1
Globalname: amountIn, contract_name: VaderMath
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveOut_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveOut, Num: 1
Globalname: reserveOut, contract_name: VaderMath
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: amountIn_1, name: amountIn

Name: amountIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountIn, Num: 1
Globalname: amountIn, contract_name: VaderMath
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveOut_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveOut, Num: 1
Globalname: reserveOut, contract_name: VaderMath
Ssa_name: numerator_1, name: numerator

Name: numerator Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numerator, Num: 1
Globalname: numerator, contract_name: VaderMath
End popogation
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
numerator_1(uint256) := TMP_27(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
[i] TMP_28 cleared
clearing ir...?
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
[i] TMP_29 cleared
clearing ir...?
denominator_1(uint256) := TMP_29(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: amountIn_1, name: amountIn

Name: amountIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountIn, Num: 1
Globalname: amountIn, contract_name: VaderMath
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: amountIn_1, name: amountIn

Name: amountIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountIn, Num: 1
Globalname: amountIn, contract_name: VaderMath
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
denominator_1(uint256) := TMP_29(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_30(uint256) = numerator_1 (c)/ denominator_1
[i] TMP_30 cleared
clearing ir...?
amountOut_1(uint256) := TMP_30(uint256)
[i] amountOut cleared
Propogating parameters and globals to SSA variables...
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
Ssa_name: numerator_1, name: numerator

Name: numerator Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numerator, Num: 1
Globalname: numerator, contract_name: VaderMath
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
Ssa_name: numerator_1, name: numerator

Name: numerator Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numerator, Num: 1
Globalname: numerator, contract_name: VaderMath
Ssa_name: amountOut_1, name: amountOut

Name: amountOut Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountOut, Num: 1
Globalname: amountOut, contract_name: VaderMath
End popogation
TMP_30(uint256) = numerator_1 (c)/ denominator_1
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := TMP_30(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
RETURN amountOut_1
Propogating parameters and globals to SSA variables...
Ssa_name: amountOut_1, name: amountOut

Name: amountOut Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountOut, Num: 1
Globalname: amountOut, contract_name: VaderMath
Ssa_name: amountOut_1, name: amountOut

Name: amountOut Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountOut, Num: 1
Globalname: amountOut, contract_name: VaderMath
End popogation
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Reading Function: calculateSwapReverse
Checking funcion...



calculateSwapReverse
Function name: calculateSwapReverse
Finding type for amountOut(uint256 ... )
Value: u
Finding type for reserveIn(uint256 ... )
Value: u
Finding type for reserveOut(uint256 ... )
Value: u
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
FIND RETURN
ENTRY_POINT
calculateSwapReverse(uint256,uint256,uint256)


TMP_31(uint256) = reserveIn_1 (c)* reserveOut_1
XY_1(uint256) := TMP_31(uint256)
TMP_32(uint256) = amountOut_1 (c)* 2
y2_1(uint256) := TMP_32(uint256)
TMP_33(uint256) = y2_1 (c)* 2
y4_1(uint256) := TMP_33(uint256)
TMP_34(bool) = y4_1 < reserveOut_1
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
TMP_36(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
TMP_37(uint256) = reserveOut_1 (c)- y4_1
TMP_38(uint256) = reserveIn_1 (c)* TMP_37
TMP_39(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_38)
TMP_40(uint256) = TMP_36 (c)* TMP_39
numeratorA_1(uint256) := TMP_40(uint256)
TMP_41(uint256) = y2_1 (c)* reserveIn_1
numeratorB_1(uint256) := TMP_41(uint256)
numeratorC_1(uint256) := XY_1(uint256)
TMP_42(uint256) = numeratorC_1 (c)- numeratorA_1
TMP_43(uint256) = TMP_42 (c)- numeratorB_1
numerator_1(uint256) := TMP_43(uint256)
denominator_1(uint256) := y2_1(uint256)
TMP_44(uint256) = numerator_1 (c)/ denominator_1
amountIn_1(uint256) := TMP_44(uint256)
RETURN amountIn_1


Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_31(uint256) = reserveIn_1 (c)* reserveOut_1
[i] TMP_31 cleared
clearing ir...?
XY_1(uint256) := TMP_31(uint256)
[i] XY cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveIn_1, name: reserveIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: reserveOut_1, name: reserveOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveOut, Num: 1
Globalname: reserveOut, contract_name: VaderMath
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveOut, Num: 1
Globalname: reserveOut, contract_name: VaderMath
Ssa_name: XY_1, name: XY

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: XY, Num: 1
Globalname: XY, contract_name: VaderMath
End popogation
TMP_31(uint256) = reserveIn_1 (c)* reserveOut_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_31

Name: TMP_31 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
XY_1(uint256) := TMP_31(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for XY

Name: XY Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_32(uint256) = amountOut_1 (c)* 2
[i] TMP_32 cleared
clearing ir...?
y2_1(uint256) := TMP_32(uint256)
[i] y2 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: amountOut_1, name: amountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountOut, Num: 1
Globalname: amountOut, contract_name: VaderMath
Ssa_name: amountOut_1, name: amountOut

Name: amountOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountOut, Num: 1
Globalname: amountOut, contract_name: VaderMath
Ssa_name: y2_1, name: y2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: y2, Num: 1
Globalname: y2, contract_name: VaderMath
End popogation
TMP_32(uint256) = amountOut_1 (c)* 2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_32

Name: TMP_32 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
y2_1(uint256) := TMP_32(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_33(uint256) = y2_1 (c)* 2
[i] TMP_33 cleared
clearing ir...?
y4_1(uint256) := TMP_33(uint256)
[i] y4 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: y4_1, name: y4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: y4, Num: 1
Globalname: y4, contract_name: VaderMath
End popogation
TMP_33(uint256) = y2_1 (c)* 2
A: 0 B: 0
lnorm: 0 rnorm: 0
Source address: u
[i]Type for TMP_33

Name: TMP_33 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
y4_1(uint256) := TMP_33(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_34(bool) = y4_1 < reserveOut_1
[i] TMP_34 cleared
clearing ir...?
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
Propogating parameters and globals to SSA variables...
Ssa_name: y4_1, name: y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveOut, Num: 1
Globalname: reserveOut, contract_name: VaderMath
Ssa_name: y4_1, name: y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveOut, Num: 1
Globalname: reserveOut, contract_name: VaderMath
End popogation
TMP_34(bool) = y4_1 < reserveOut_1
A: 0 B: u
lnorm: 0 rnorm: u
Source address: u
Source address: u
[i]Type for TMP_34

Name: TMP_34 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
[i]Type for TMP_35

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_36(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
[i] TMP_36 cleared
clearing ir...?
TMP_37(uint256) = reserveOut_1 (c)- y4_1
[i] TMP_37 cleared
clearing ir...?
TMP_38(uint256) = reserveIn_1 (c)* TMP_37
[i] TMP_38 cleared
clearing ir...?
TMP_39(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_38)
[i] TMP_39 cleared
clearing ir...?
TMP_40(uint256) = TMP_36 (c)* TMP_39
[i] TMP_40 cleared
clearing ir...?
numeratorA_1(uint256) := TMP_40(uint256)
[i] numeratorA cleared
Propogating parameters and globals to SSA variables...
Ssa_name: XY_1, name: XY

Name: XY Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: XY, Num: 1
Globalname: XY, contract_name: VaderMath
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: y4_1, name: y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: XY_1, name: XY

Name: XY Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: XY, Num: 1
Globalname: XY, contract_name: VaderMath
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: y4_1, name: y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: numeratorA_1, name: numeratorA

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numeratorA, Num: 1
Globalname: numeratorA, contract_name: VaderMath
End popogation
TMP_36(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u']]
Param: a
[[], [], 'u', None, [], -1, 'u', 'u']

Name: a Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
root(uint256)
ENTRY_POINT
Propogating All
IF a > 3
Propogating All
a_1
Ssa_name: a_1, name: a

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION c = a
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE x = a / 2 + 1
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
BEGIN_LOOP
Propogating All
IF a != 0
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION c = 1
Propogating All
IF_LOOP x < c
Propogating All
x_2
Ssa_name: x_2, name: x

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_3
Ssa_name: c_3, name: c

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
END_LOOP
Propogating All
EXPRESSION c = x
Propogating All
x_2
Ssa_name: x_2, name: x

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
Propogating All
END_IF
Propogating All
EXPRESSION x = (a / x + x) / 2
Propogating All
x_2
Ssa_name: x_2, name: x

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
IF_LOOP x < c
clearing ir...?
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
Phi

Name: XY Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for a

Name: a Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(bool) = a_1 > 3
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_49(bool) = a_1 > 3
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_2(uint256) := a_1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: c_2, name: c

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 2
Globalname: c, contract_name: VaderMath
End popogation
c_2(uint256) := a_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(uint256) = a_1 (c)/ 2
[i] TMP_50 cleared
clearing ir...?
TMP_51(uint256) = TMP_50 (c)+ 1
[i] TMP_51 cleared
clearing ir...?
x_1(uint256) := TMP_51(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 1
Globalname: x, contract_name: VaderMath
End popogation
TMP_50(uint256) = a_1 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_51(uint256) = TMP_50 (c)+ 1
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_51(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_56(bool) = a_1 != 0
[i] TMP_56 cleared
clearing ir...?
CONDITION TMP_56
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_1(uint256) := 1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: c_1, name: c

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 1
Globalname: c, contract_name: VaderMath
End popogation
c_1(uint256) := 1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_3(uint256) := ϕ(['c_4', 'c_2'])
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i] x cleared
clearing ir...?
TMP_52(bool) = x_2 < c_3
[i] TMP_52 cleared
clearing ir...?
CONDITION TMP_52
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
End popogation
Ssa_name: c_3, name: c

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
c_3(uint256) := ϕ(['c_4', 'c_2'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_2(uint256) := ϕ(['x_1', 'x_3'])
Phi

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(bool) = x_2 < c_3
A: 0 B: u
lnorm: 0 rnorm: u
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
c_4(uint256) := x_2(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_4, name: c

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 4
Globalname: c, contract_name: VaderMath
End popogation
c_4(uint256) := x_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_53(uint256) = a_1 (c)/ x_2
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = TMP_53 (c)+ x_2
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ 2
[i] TMP_55 cleared
clearing ir...?
x_3(uint256) := TMP_55(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_3, name: x

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 3
Globalname: x, contract_name: VaderMath
End popogation
TMP_53(uint256) = a_1 (c)/ x_2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = TMP_53 (c)+ x_2
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
x_3(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
clearing ir...?
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
Phi

Name: XY Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for a

Name: a Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(bool) = a_1 > 3
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_49(bool) = a_1 > 3
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_2(uint256) := a_1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: c_2, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 2
Globalname: c, contract_name: VaderMath
End popogation
c_2(uint256) := a_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(uint256) = a_1 (c)/ 2
[i] TMP_50 cleared
clearing ir...?
TMP_51(uint256) = TMP_50 (c)+ 1
[i] TMP_51 cleared
clearing ir...?
x_1(uint256) := TMP_51(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
Name: x, Num: 1
Globalname: x, contract_name: VaderMath
End popogation
TMP_50(uint256) = a_1 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_51(uint256) = TMP_50 (c)+ 1
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_51(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_56(bool) = a_1 != 0
[i] TMP_56 cleared
clearing ir...?
CONDITION TMP_56
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_1(uint256) := 1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: c_1, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: c, Num: 1
Globalname: c, contract_name: VaderMath
End popogation
c_1(uint256) := 1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_3(uint256) := ϕ(['c_4', 'c_2'])
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i] x cleared
clearing ir...?
TMP_52(bool) = x_2 < c_3
[i] TMP_52 cleared
clearing ir...?
CONDITION TMP_52
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
End popogation
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
c_3(uint256) := ϕ(['c_4', 'c_2'])
Phi

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_2(uint256) := ϕ(['x_1', 'x_3'])
Phi

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef


END==================================
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(bool) = x_2 < c_3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
c_4(uint256) := x_2(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_4, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 4
Globalname: c, contract_name: VaderMath
End popogation
c_4(uint256) := x_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_53(uint256) = a_1 (c)/ x_2
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = TMP_53 (c)+ x_2
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ 2
[i] TMP_55 cleared
clearing ir...?
x_3(uint256) := TMP_55(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_3, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Name: x, Num: 3
Globalname: x, contract_name: VaderMath
End popogation
TMP_53(uint256) = a_1 (c)/ x_2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = TMP_53 (c)+ x_2
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
x_3(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Source address: u
Source address: u
[i]Type for TMP_36

Name: TMP_36 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_37(uint256) = reserveOut_1 (c)- y4_1
Source address: u
[i]Type for TMP_37

Name: TMP_37 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_38(uint256) = reserveIn_1 (c)* TMP_37
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_38

Name: TMP_38 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_39(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_38)
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 0]]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
Param: a
[[-1], [-1], 'u', None, [], -1, 'u', 0]

Name: a Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
root(uint256)
ENTRY_POINT
Propogating All
IF a > 3
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION c = a
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE x = a / 2 + 1
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
BEGIN_LOOP
Propogating All
IF a != 0
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION c = 1
Propogating All
IF_LOOP x < c
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
c_3
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
END_LOOP
Propogating All
EXPRESSION c = x
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
Propogating All
END_IF
Propogating All
EXPRESSION x = (a / x + x) / 2
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
IF_LOOP x < c
clearing ir...?
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
Phi
[i]Type for a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(bool) = a_1 > 3
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_49(bool) = a_1 > 3
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_2(uint256) := a_1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: c_2, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 2
Globalname: c, contract_name: VaderMath
End popogation
c_2(uint256) := a_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(uint256) = a_1 (c)/ 2
[i] TMP_50 cleared
clearing ir...?
TMP_51(uint256) = TMP_50 (c)+ 1
[i] TMP_51 cleared
clearing ir...?
x_1(uint256) := TMP_51(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
Name: x, Num: 1
Globalname: x, contract_name: VaderMath
End popogation
TMP_50(uint256) = a_1 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_51(uint256) = TMP_50 (c)+ 1
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_51(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_56(bool) = a_1 != 0
[i] TMP_56 cleared
clearing ir...?
CONDITION TMP_56
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_1(uint256) := 1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: c_1, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: c, Num: 1
Globalname: c, contract_name: VaderMath
End popogation
c_1(uint256) := 1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_3(uint256) := ϕ(['c_4', 'c_2'])
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i] x cleared
clearing ir...?
TMP_52(bool) = x_2 < c_3
[i] TMP_52 cleared
clearing ir...?
CONDITION TMP_52
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
End popogation
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
c_3(uint256) := ϕ(['c_4', 'c_2'])
Phi

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_2(uint256) := ϕ(['x_1', 'x_3'])
Phi

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef


END==================================
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(bool) = x_2 < c_3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
c_4(uint256) := x_2(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_4, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 4
Globalname: c, contract_name: VaderMath
End popogation
c_4(uint256) := x_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_53(uint256) = a_1 (c)/ x_2
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = TMP_53 (c)+ x_2
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ 2
[i] TMP_55 cleared
clearing ir...?
x_3(uint256) := TMP_55(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_3, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Name: x, Num: 3
Globalname: x, contract_name: VaderMath
End popogation
TMP_53(uint256) = a_1 (c)/ x_2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = TMP_53 (c)+ x_2
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
x_3(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
Phi
[i]Type for a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(bool) = a_1 > 3
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_49(bool) = a_1 > 3
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_2(uint256) := a_1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: c_2, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: c, Num: 2
Globalname: c, contract_name: VaderMath
End popogation
c_2(uint256) := a_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(uint256) = a_1 (c)/ 2
[i] TMP_50 cleared
clearing ir...?
TMP_51(uint256) = TMP_50 (c)+ 1
[i] TMP_51 cleared
clearing ir...?
x_1(uint256) := TMP_51(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: x, Num: 1
Globalname: x, contract_name: VaderMath
End popogation
TMP_50(uint256) = a_1 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_51(uint256) = TMP_50 (c)+ 1
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_51(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_56(bool) = a_1 != 0
[i] TMP_56 cleared
clearing ir...?
CONDITION TMP_56
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_1(uint256) := 1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: c_1, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: c, Num: 1
Globalname: c, contract_name: VaderMath
End popogation
c_1(uint256) := 1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_3(uint256) := ϕ(['c_4', 'c_2'])
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i] x cleared
clearing ir...?
TMP_52(bool) = x_2 < c_3
[i] TMP_52 cleared
clearing ir...?
CONDITION TMP_52
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
End popogation
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
c_3(uint256) := ϕ(['c_4', 'c_2'])
Phi

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_2(uint256) := ϕ(['x_1', 'x_3'])
Phi

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(bool) = x_2 < c_3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
c_4(uint256) := x_2(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_4, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 4
Globalname: c, contract_name: VaderMath
End popogation
c_4(uint256) := x_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_53(uint256) = a_1 (c)/ x_2
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = TMP_53 (c)+ x_2
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ 2
[i] TMP_55 cleared
clearing ir...?
x_3(uint256) := TMP_55(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_3, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: x, Num: 3
Globalname: x, contract_name: VaderMath
End popogation
TMP_53(uint256) = a_1 (c)/ x_2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = TMP_53 (c)+ x_2
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
x_3(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Source address: u
Source address: u
[i]Type for TMP_39

Name: TMP_39 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_40(uint256) = TMP_36 (c)* TMP_39
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_40

Name: TMP_40 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
numeratorA_1(uint256) := TMP_40(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_41(uint256) = y2_1 (c)* reserveIn_1
[i] TMP_41 cleared
clearing ir...?
numeratorB_1(uint256) := TMP_41(uint256)
[i] numeratorB cleared
Propogating parameters and globals to SSA variables...
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: numeratorB_1, name: numeratorB

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numeratorB, Num: 1
Globalname: numeratorB, contract_name: VaderMath
End popogation
TMP_41(uint256) = y2_1 (c)* reserveIn_1
A: 0 B: u
lnorm: 0 rnorm: u
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
numeratorB_1(uint256) := TMP_41(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
clearing ir...?
numeratorC_1(uint256) := XY_1(uint256)
[i] numeratorC cleared
Propogating parameters and globals to SSA variables...
Ssa_name: XY_1, name: XY

Name: XY Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: XY, Num: 1
Globalname: XY, contract_name: VaderMath
Ssa_name: XY_1, name: XY

Name: XY Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: XY, Num: 1
Globalname: XY, contract_name: VaderMath
Ssa_name: numeratorC_1, name: numeratorC

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numeratorC, Num: 1
Globalname: numeratorC, contract_name: VaderMath
End popogation
numeratorC_1(uint256) := XY_1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_42(uint256) = numeratorC_1 (c)- numeratorA_1
[i] TMP_42 cleared
clearing ir...?
TMP_43(uint256) = TMP_42 (c)- numeratorB_1
[i] TMP_43 cleared
clearing ir...?
numerator_1(uint256) := TMP_43(uint256)
[i] numerator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: numeratorA_1, name: numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numeratorA, Num: 1
Globalname: numeratorA, contract_name: VaderMath
Ssa_name: numeratorC_1, name: numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numeratorC, Num: 1
Globalname: numeratorC, contract_name: VaderMath
Ssa_name: numeratorB_1, name: numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: numeratorA_1, name: numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numeratorA, Num: 1
Globalname: numeratorA, contract_name: VaderMath
Ssa_name: numeratorC_1, name: numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numeratorC, Num: 1
Globalname: numeratorC, contract_name: VaderMath
Ssa_name: numeratorB_1, name: numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: numerator_1, name: numerator

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numerator, Num: 1
Globalname: numerator, contract_name: VaderMath
End popogation
TMP_42(uint256) = numeratorC_1 (c)- numeratorA_1
[i]Type for TMP_42

Name: TMP_42 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_43(uint256) = TMP_42 (c)- numeratorB_1
Source address: u
[i]Type for TMP_43

Name: TMP_43 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
numerator_1(uint256) := TMP_43(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for numerator

Name: numerator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
clearing ir...?
denominator_1(uint256) := y2_1(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
denominator_1(uint256) := y2_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_44(uint256) = numerator_1 (c)/ denominator_1
[i] TMP_44 cleared
clearing ir...?
amountIn_1(uint256) := TMP_44(uint256)
[i] amountIn cleared
Propogating parameters and globals to SSA variables...
Ssa_name: numerator_1, name: numerator

Name: numerator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: numerator_1, name: numerator

Name: numerator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: amountIn_1, name: amountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountIn, Num: 1
Globalname: amountIn, contract_name: VaderMath
End popogation
TMP_44(uint256) = numerator_1 (c)/ denominator_1
A: 0 B: 0
lnorm: 0 rnorm: 0
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_44

Name: TMP_44 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := TMP_44(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
RETURN amountIn_1
Propogating parameters and globals to SSA variables...
Ssa_name: amountIn_1, name: amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: amountIn_1, name: amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
RETURN amountIn_1
RETURN

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef


TMP_31(uint256) = reserveIn_1 (c)* reserveOut_1
XY_1(uint256) := TMP_31(uint256)
TMP_32(uint256) = amountOut_1 (c)* 2
y2_1(uint256) := TMP_32(uint256)
TMP_33(uint256) = y2_1 (c)* 2
y4_1(uint256) := TMP_33(uint256)
TMP_34(bool) = y4_1 < reserveOut_1
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
TMP_36(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
TMP_37(uint256) = reserveOut_1 (c)- y4_1
TMP_38(uint256) = reserveIn_1 (c)* TMP_37
TMP_39(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_38)
TMP_40(uint256) = TMP_36 (c)* TMP_39
numeratorA_1(uint256) := TMP_40(uint256)
TMP_41(uint256) = y2_1 (c)* reserveIn_1
numeratorB_1(uint256) := TMP_41(uint256)
numeratorC_1(uint256) := XY_1(uint256)
TMP_42(uint256) = numeratorC_1 (c)- numeratorA_1
TMP_43(uint256) = TMP_42 (c)- numeratorB_1
numerator_1(uint256) := TMP_43(uint256)
denominator_1(uint256) := y2_1(uint256)
TMP_44(uint256) = numerator_1 (c)/ denominator_1
amountIn_1(uint256) := TMP_44(uint256)
RETURN amountIn_1


Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_31(uint256) = reserveIn_1 (c)* reserveOut_1
[i] TMP_31 cleared
clearing ir...?
XY_1(uint256) := TMP_31(uint256)
[i] XY cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: XY_1, name: XY

Name: XY Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: XY, Num: 1
Globalname: XY, contract_name: VaderMath
End popogation
TMP_31(uint256) = reserveIn_1 (c)* reserveOut_1
A: u B: u
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_31

Name: TMP_31 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
XY_1(uint256) := TMP_31(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for XY

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_32(uint256) = amountOut_1 (c)* 2
[i] TMP_32 cleared
clearing ir...?
y2_1(uint256) := TMP_32(uint256)
[i] y2 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: amountOut_1, name: amountOut

Name: amountOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountOut, Num: 1
Globalname: amountOut, contract_name: VaderMath
Ssa_name: amountOut_1, name: amountOut

Name: amountOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountOut, Num: 1
Globalname: amountOut, contract_name: VaderMath
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Name: y2, Num: 1
Globalname: y2, contract_name: VaderMath
End popogation
TMP_32(uint256) = amountOut_1 (c)* 2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_32

Name: TMP_32 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
y2_1(uint256) := TMP_32(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_33(uint256) = y2_1 (c)* 2
[i] TMP_33 cleared
clearing ir...?
y4_1(uint256) := TMP_33(uint256)
[i] y4 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: y4_1, name: y4

Name: y4 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Name: y4, Num: 1
Globalname: y4, contract_name: VaderMath
End popogation
TMP_33(uint256) = y2_1 (c)* 2
A: 0 B: 0
lnorm: 0 rnorm: 0
Source address: u
[i]Type for TMP_33

Name: TMP_33 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
y4_1(uint256) := TMP_33(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_34(bool) = y4_1 < reserveOut_1
[i] TMP_34 cleared
clearing ir...?
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
Propogating parameters and globals to SSA variables...
Ssa_name: y4_1, name: y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: y4_1, name: y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
TMP_34(bool) = y4_1 < reserveOut_1
A: 0 B: u
lnorm: 0 rnorm: 0
[i]Type for TMP_34

Name: TMP_34 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
[i]Type for TMP_35

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_36(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
[i] TMP_36 cleared
clearing ir...?
TMP_37(uint256) = reserveOut_1 (c)- y4_1
[i] TMP_37 cleared
clearing ir...?
TMP_38(uint256) = reserveIn_1 (c)* TMP_37
[i] TMP_38 cleared
clearing ir...?
TMP_39(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_38)
[i] TMP_39 cleared
clearing ir...?
TMP_40(uint256) = TMP_36 (c)* TMP_39
[i] TMP_40 cleared
clearing ir...?
numeratorA_1(uint256) := TMP_40(uint256)
[i] numeratorA cleared
Propogating parameters and globals to SSA variables...
Ssa_name: XY_1, name: XY

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: y4_1, name: y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: XY_1, name: XY

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: y4_1, name: y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: numeratorA_1, name: numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numeratorA, Num: 1
Globalname: numeratorA, contract_name: VaderMath
End popogation
TMP_36(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 4]]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
Param: a
[[-1], [-1], 0, None, [], -1, 'u', 4]

Name: a Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
root(uint256)
ENTRY_POINT
Propogating All
IF a > 3
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION c = a
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE x = a / 2 + 1
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
BEGIN_LOOP
Propogating All
IF a != 0
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION c = 1
Propogating All
IF_LOOP x < c
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
c_3
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
END_LOOP
Propogating All
EXPRESSION c = x
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
Propogating All
END_IF
Propogating All
EXPRESSION x = (a / x + x) / 2
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
IF_LOOP x < c
clearing ir...?
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
Phi
[i]Type for a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(bool) = a_1 > 3
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
TMP_49(bool) = a_1 > 3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_2(uint256) := a_1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: c_2, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: c, Num: 2
Globalname: c, contract_name: VaderMath
End popogation
c_2(uint256) := a_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(uint256) = a_1 (c)/ 2
[i] TMP_50 cleared
clearing ir...?
TMP_51(uint256) = TMP_50 (c)+ 1
[i] TMP_51 cleared
clearing ir...?
x_1(uint256) := TMP_51(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: x, Num: 1
Globalname: x, contract_name: VaderMath
End popogation
TMP_50(uint256) = a_1 (c)/ 2
A: 0 B: 0
lnorm: 0 rnorm: 0
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_51(uint256) = TMP_50 (c)+ 1
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_51(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_56(bool) = a_1 != 0
[i] TMP_56 cleared
clearing ir...?
CONDITION TMP_56
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_1(uint256) := 1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: c_1, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: c, Num: 1
Globalname: c, contract_name: VaderMath
End popogation
c_1(uint256) := 1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_3(uint256) := ϕ(['c_4', 'c_2'])
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i] x cleared
clearing ir...?
TMP_52(bool) = x_2 < c_3
[i] TMP_52 cleared
clearing ir...?
CONDITION TMP_52
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
End popogation
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
c_3(uint256) := ϕ(['c_4', 'c_2'])
Phi

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef


END==================================
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_2(uint256) := ϕ(['x_1', 'x_3'])
Phi

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(bool) = x_2 < c_3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
c_4(uint256) := x_2(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_4, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 4
Globalname: c, contract_name: VaderMath
End popogation
c_4(uint256) := x_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_53(uint256) = a_1 (c)/ x_2
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = TMP_53 (c)+ x_2
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ 2
[i] TMP_55 cleared
clearing ir...?
x_3(uint256) := TMP_55(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: x_3, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: x, Num: 3
Globalname: x, contract_name: VaderMath
End popogation
TMP_53(uint256) = a_1 (c)/ x_2
A: 0 B: 0
lnorm: 0 rnorm: 0
Source address: u
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = TMP_53 (c)+ x_2
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ 2
A: u B: 0
lnorm: 0 rnorm: 0
A: u B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
x_3(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
clearing ir...?
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
Phi
[i]Type for a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(bool) = a_1 > 3
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
TMP_49(bool) = a_1 > 3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_2(uint256) := a_1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: c_2, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Name: c, Num: 2
Globalname: c, contract_name: VaderMath
End popogation
c_2(uint256) := a_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(uint256) = a_1 (c)/ 2
[i] TMP_50 cleared
clearing ir...?
TMP_51(uint256) = TMP_50 (c)+ 1
[i] TMP_51 cleared
clearing ir...?
x_1(uint256) := TMP_51(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
Name: x, Num: 1
Globalname: x, contract_name: VaderMath
End popogation
TMP_50(uint256) = a_1 (c)/ 2
A: 0 B: 0
lnorm: 0 rnorm: 0
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_51(uint256) = TMP_50 (c)+ 1
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_51(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_56(bool) = a_1 != 0
[i] TMP_56 cleared
clearing ir...?
CONDITION TMP_56
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_1(uint256) := 1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: c_1, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: c, Num: 1
Globalname: c, contract_name: VaderMath
End popogation
c_1(uint256) := 1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_3(uint256) := ϕ(['c_4', 'c_2'])
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i] x cleared
clearing ir...?
TMP_52(bool) = x_2 < c_3
[i] TMP_52 cleared
clearing ir...?
CONDITION TMP_52
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
End popogation
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
c_3(uint256) := ϕ(['c_4', 'c_2'])
Phi

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef


END==================================
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_2(uint256) := ϕ(['x_1', 'x_3'])
Phi

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef


END==================================
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(bool) = x_2 < c_3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
c_4(uint256) := x_2(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_4, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 4
Globalname: c, contract_name: VaderMath
End popogation
c_4(uint256) := x_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_53(uint256) = a_1 (c)/ x_2
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = TMP_53 (c)+ x_2
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ 2
[i] TMP_55 cleared
clearing ir...?
x_3(uint256) := TMP_55(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: x_3, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Name: x, Num: 3
Globalname: x, contract_name: VaderMath
End popogation
TMP_53(uint256) = a_1 (c)/ x_2
A: 0 B: 0
lnorm: 0 rnorm: 0
Source address: u
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = TMP_53 (c)+ x_2
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ 2
A: u B: 0
lnorm: 0 rnorm: 0
A: u B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
x_3(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Source address: u
Source address: u
[i]Type for TMP_36

Name: TMP_36 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_37(uint256) = reserveOut_1 (c)- y4_1
Source address: u
[i]Type for TMP_37

Name: TMP_37 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_38(uint256) = reserveIn_1 (c)* TMP_37
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_38

Name: TMP_38 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_39(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_38)
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 0]]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
Param: a
[[-1], [-1], 'u', None, [], -1, 'u', 0]

Name: a Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
root(uint256)
ENTRY_POINT
Propogating All
IF a > 3
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION c = a
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE x = a / 2 + 1
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
BEGIN_LOOP
Propogating All
IF a != 0
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION c = 1
Propogating All
IF_LOOP x < c
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
c_3
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
END_LOOP
Propogating All
EXPRESSION c = x
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
Propogating All
END_IF
Propogating All
EXPRESSION x = (a / x + x) / 2
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
IF_LOOP x < c
clearing ir...?
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
Phi
[i]Type for a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(bool) = a_1 > 3
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_49(bool) = a_1 > 3
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_2(uint256) := a_1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: c_2, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Name: c, Num: 2
Globalname: c, contract_name: VaderMath
End popogation
c_2(uint256) := a_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(uint256) = a_1 (c)/ 2
[i] TMP_50 cleared
clearing ir...?
TMP_51(uint256) = TMP_50 (c)+ 1
[i] TMP_51 cleared
clearing ir...?
x_1(uint256) := TMP_51(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
Name: x, Num: 1
Globalname: x, contract_name: VaderMath
End popogation
TMP_50(uint256) = a_1 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_51(uint256) = TMP_50 (c)+ 1
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_51(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_56(bool) = a_1 != 0
[i] TMP_56 cleared
clearing ir...?
CONDITION TMP_56
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_1(uint256) := 1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: c_1, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: c, Num: 1
Globalname: c, contract_name: VaderMath
End popogation
c_1(uint256) := 1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_3(uint256) := ϕ(['c_4', 'c_2'])
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i] x cleared
clearing ir...?
TMP_52(bool) = x_2 < c_3
[i] TMP_52 cleared
clearing ir...?
CONDITION TMP_52
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
End popogation
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
c_3(uint256) := ϕ(['c_4', 'c_2'])
Phi

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_2(uint256) := ϕ(['x_1', 'x_3'])
Phi

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef


END==================================
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(bool) = x_2 < c_3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
c_4(uint256) := x_2(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_4, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 4
Globalname: c, contract_name: VaderMath
End popogation
c_4(uint256) := x_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_53(uint256) = a_1 (c)/ x_2
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = TMP_53 (c)+ x_2
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ 2
[i] TMP_55 cleared
clearing ir...?
x_3(uint256) := TMP_55(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_3, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Name: x, Num: 3
Globalname: x, contract_name: VaderMath
End popogation
TMP_53(uint256) = a_1 (c)/ x_2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = TMP_53 (c)+ x_2
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
x_3(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
Phi
[i]Type for a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(bool) = a_1 > 3
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_49(bool) = a_1 > 3
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_2(uint256) := a_1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: c_2, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: c, Num: 2
Globalname: c, contract_name: VaderMath
End popogation
c_2(uint256) := a_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(uint256) = a_1 (c)/ 2
[i] TMP_50 cleared
clearing ir...?
TMP_51(uint256) = TMP_50 (c)+ 1
[i] TMP_51 cleared
clearing ir...?
x_1(uint256) := TMP_51(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: x, Num: 1
Globalname: x, contract_name: VaderMath
End popogation
TMP_50(uint256) = a_1 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_51(uint256) = TMP_50 (c)+ 1
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_51(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_56(bool) = a_1 != 0
[i] TMP_56 cleared
clearing ir...?
CONDITION TMP_56
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_1(uint256) := 1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: c_1, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: c, Num: 1
Globalname: c, contract_name: VaderMath
End popogation
c_1(uint256) := 1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_3(uint256) := ϕ(['c_4', 'c_2'])
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i] x cleared
clearing ir...?
TMP_52(bool) = x_2 < c_3
[i] TMP_52 cleared
clearing ir...?
CONDITION TMP_52
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
End popogation
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
c_3(uint256) := ϕ(['c_4', 'c_2'])
Phi

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_2(uint256) := ϕ(['x_1', 'x_3'])
Phi

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(bool) = x_2 < c_3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
c_4(uint256) := x_2(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_4, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 4
Globalname: c, contract_name: VaderMath
End popogation
c_4(uint256) := x_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_53(uint256) = a_1 (c)/ x_2
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = TMP_53 (c)+ x_2
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ 2
[i] TMP_55 cleared
clearing ir...?
x_3(uint256) := TMP_55(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_3, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: x, Num: 3
Globalname: x, contract_name: VaderMath
End popogation
TMP_53(uint256) = a_1 (c)/ x_2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = TMP_53 (c)+ x_2
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
x_3(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Source address: u
Source address: u
[i]Type for TMP_39

Name: TMP_39 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_40(uint256) = TMP_36 (c)* TMP_39
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_40

Name: TMP_40 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
numeratorA_1(uint256) := TMP_40(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_41(uint256) = y2_1 (c)* reserveIn_1
[i] TMP_41 cleared
clearing ir...?
numeratorB_1(uint256) := TMP_41(uint256)
[i] numeratorB cleared
Propogating parameters and globals to SSA variables...
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: numeratorB_1, name: numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Name: numeratorB, Num: 1
Globalname: numeratorB, contract_name: VaderMath
End popogation
TMP_41(uint256) = y2_1 (c)* reserveIn_1
A: 0 B: u
lnorm: 0 rnorm: u
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
numeratorB_1(uint256) := TMP_41(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
clearing ir...?
numeratorC_1(uint256) := XY_1(uint256)
[i] numeratorC cleared
Propogating parameters and globals to SSA variables...
Ssa_name: XY_1, name: XY

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: XY_1, name: XY

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: numeratorC_1, name: numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numeratorC, Num: 1
Globalname: numeratorC, contract_name: VaderMath
End popogation
numeratorC_1(uint256) := XY_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_42(uint256) = numeratorC_1 (c)- numeratorA_1
[i] TMP_42 cleared
clearing ir...?
TMP_43(uint256) = TMP_42 (c)- numeratorB_1
[i] TMP_43 cleared
clearing ir...?
numerator_1(uint256) := TMP_43(uint256)
[i] numerator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: numeratorA_1, name: numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numeratorA, Num: 1
Globalname: numeratorA, contract_name: VaderMath
Ssa_name: numeratorC_1, name: numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: numeratorB_1, name: numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: numeratorA_1, name: numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numeratorA, Num: 1
Globalname: numeratorA, contract_name: VaderMath
Ssa_name: numeratorC_1, name: numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: numeratorB_1, name: numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: numerator_1, name: numerator

Name: numerator Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Name: numerator, Num: 1
Globalname: numerator, contract_name: VaderMath
End popogation
TMP_42(uint256) = numeratorC_1 (c)- numeratorA_1
Source address: u
[i]Type for TMP_42

Name: TMP_42 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
TMP_43(uint256) = TMP_42 (c)- numeratorB_1
Source address: u
[i]Type for TMP_43

Name: TMP_43 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
numerator_1(uint256) := TMP_43(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for numerator

Name: numerator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
clearing ir...?
denominator_1(uint256) := y2_1(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
denominator_1(uint256) := y2_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_44(uint256) = numerator_1 (c)/ denominator_1
[i] TMP_44 cleared
clearing ir...?
amountIn_1(uint256) := TMP_44(uint256)
[i] amountIn cleared
Propogating parameters and globals to SSA variables...
Ssa_name: numerator_1, name: numerator

Name: numerator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: numerator_1, name: numerator

Name: numerator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: amountIn_1, name: amountIn

Name: amountIn Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: amountIn, Num: 1
Globalname: amountIn, contract_name: VaderMath
End popogation
TMP_44(uint256) = numerator_1 (c)/ denominator_1
A: 0 B: 0
lnorm: 0 rnorm: 0
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_44

Name: TMP_44 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := TMP_44(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
RETURN amountIn_1
Propogating parameters and globals to SSA variables...
Ssa_name: amountIn_1, name: amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: amountIn_1, name: amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
RETURN amountIn_1
RETURN

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef


TMP_31(uint256) = reserveIn_1 (c)* reserveOut_1
XY_1(uint256) := TMP_31(uint256)
TMP_32(uint256) = amountOut_1 (c)* 2
y2_1(uint256) := TMP_32(uint256)
TMP_33(uint256) = y2_1 (c)* 2
y4_1(uint256) := TMP_33(uint256)
TMP_34(bool) = y4_1 < reserveOut_1
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
TMP_36(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
TMP_37(uint256) = reserveOut_1 (c)- y4_1
TMP_38(uint256) = reserveIn_1 (c)* TMP_37
TMP_39(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_38)
TMP_40(uint256) = TMP_36 (c)* TMP_39
numeratorA_1(uint256) := TMP_40(uint256)
TMP_41(uint256) = y2_1 (c)* reserveIn_1
numeratorB_1(uint256) := TMP_41(uint256)
numeratorC_1(uint256) := XY_1(uint256)
TMP_42(uint256) = numeratorC_1 (c)- numeratorA_1
TMP_43(uint256) = TMP_42 (c)- numeratorB_1
numerator_1(uint256) := TMP_43(uint256)
denominator_1(uint256) := y2_1(uint256)
TMP_44(uint256) = numerator_1 (c)/ denominator_1
amountIn_1(uint256) := TMP_44(uint256)
RETURN amountIn_1


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: XY_1, name: XY

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
TMP_31(uint256) = reserveIn_1 (c)* reserveOut_1
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_31

Name: TMP_31 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
XY_1(uint256) := TMP_31(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for XY

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: amountOut_1, name: amountOut

Name: amountOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountOut, Num: 1
Globalname: amountOut, contract_name: VaderMath
Ssa_name: amountOut_1, name: amountOut

Name: amountOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountOut, Num: 1
Globalname: amountOut, contract_name: VaderMath
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
End popogation
TMP_32(uint256) = amountOut_1 (c)* 2
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_32

Name: TMP_32 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
y2_1(uint256) := TMP_32(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: y4_1, name: y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
TMP_33(uint256) = y2_1 (c)* 2
A: 0 B: 0
lnorm: 0 rnorm: 0
Source address: u
[i]Type for TMP_33

Name: TMP_33 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
y4_1(uint256) := TMP_33(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: y4_1, name: y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: y4_1, name: y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
TMP_34(bool) = y4_1 < reserveOut_1
A: 0 B: u
lnorm: 0 rnorm: 0
[i]Type for TMP_34

Name: TMP_34 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
[i]Type for TMP_35

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: XY_1, name: XY

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: y4_1, name: y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: XY_1, name: XY

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: y4_1, name: y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: numeratorA_1, name: numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numeratorA, Num: 1
Globalname: numeratorA, contract_name: VaderMath
End popogation
TMP_36(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 4]]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
Param: a
[[-1], [-1], 0, None, [], -1, 'u', 4]

Name: a Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
root(uint256)
ENTRY_POINT
Propogating All
IF a > 3
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION c = a
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE x = a / 2 + 1
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
BEGIN_LOOP
Propogating All
IF a != 0
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION c = 1
Propogating All
IF_LOOP x < c
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
c_3
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
END_LOOP
Propogating All
EXPRESSION c = x
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
Propogating All
END_IF
Propogating All
EXPRESSION x = (a / x + x) / 2
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
IF_LOOP x < c
clearing ir...?
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
Phi
[i]Type for a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(bool) = a_1 > 3
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
TMP_49(bool) = a_1 > 3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_2(uint256) := a_1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: c_2, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: c, Num: 2
Globalname: c, contract_name: VaderMath
End popogation
c_2(uint256) := a_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(uint256) = a_1 (c)/ 2
[i] TMP_50 cleared
clearing ir...?
TMP_51(uint256) = TMP_50 (c)+ 1
[i] TMP_51 cleared
clearing ir...?
x_1(uint256) := TMP_51(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: x, Num: 1
Globalname: x, contract_name: VaderMath
End popogation
TMP_50(uint256) = a_1 (c)/ 2
A: 0 B: 0
lnorm: 0 rnorm: 0
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_51(uint256) = TMP_50 (c)+ 1
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_51(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_56(bool) = a_1 != 0
[i] TMP_56 cleared
clearing ir...?
CONDITION TMP_56
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_1(uint256) := 1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: c_1, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: c, Num: 1
Globalname: c, contract_name: VaderMath
End popogation
c_1(uint256) := 1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_3(uint256) := ϕ(['c_4', 'c_2'])
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i] x cleared
clearing ir...?
TMP_52(bool) = x_2 < c_3
[i] TMP_52 cleared
clearing ir...?
CONDITION TMP_52
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
End popogation
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
c_3(uint256) := ϕ(['c_4', 'c_2'])
Phi

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef


END==================================
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_2(uint256) := ϕ(['x_1', 'x_3'])
Phi

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(bool) = x_2 < c_3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
c_4(uint256) := x_2(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_4, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 4
Globalname: c, contract_name: VaderMath
End popogation
c_4(uint256) := x_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_53(uint256) = a_1 (c)/ x_2
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = TMP_53 (c)+ x_2
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ 2
[i] TMP_55 cleared
clearing ir...?
x_3(uint256) := TMP_55(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: x_3, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: x, Num: 3
Globalname: x, contract_name: VaderMath
End popogation
TMP_53(uint256) = a_1 (c)/ x_2
A: 0 B: 0
lnorm: 0 rnorm: 0
Source address: u
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = TMP_53 (c)+ x_2
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ 2
A: u B: 0
lnorm: 0 rnorm: 0
A: u B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
x_3(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
clearing ir...?
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
Phi
[i]Type for a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(bool) = a_1 > 3
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
TMP_49(bool) = a_1 > 3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_2(uint256) := a_1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: c_2, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Name: c, Num: 2
Globalname: c, contract_name: VaderMath
End popogation
c_2(uint256) := a_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(uint256) = a_1 (c)/ 2
[i] TMP_50 cleared
clearing ir...?
TMP_51(uint256) = TMP_50 (c)+ 1
[i] TMP_51 cleared
clearing ir...?
x_1(uint256) := TMP_51(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
Name: x, Num: 1
Globalname: x, contract_name: VaderMath
End popogation
TMP_50(uint256) = a_1 (c)/ 2
A: 0 B: 0
lnorm: 0 rnorm: 0
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_51(uint256) = TMP_50 (c)+ 1
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_51(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_56(bool) = a_1 != 0
[i] TMP_56 cleared
clearing ir...?
CONDITION TMP_56
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_1(uint256) := 1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: c_1, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: c, Num: 1
Globalname: c, contract_name: VaderMath
End popogation
c_1(uint256) := 1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_3(uint256) := ϕ(['c_4', 'c_2'])
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i] x cleared
clearing ir...?
TMP_52(bool) = x_2 < c_3
[i] TMP_52 cleared
clearing ir...?
CONDITION TMP_52
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
End popogation
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
c_3(uint256) := ϕ(['c_4', 'c_2'])
Phi

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef


END==================================
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_2(uint256) := ϕ(['x_1', 'x_3'])
Phi

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef


END==================================
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(bool) = x_2 < c_3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
c_4(uint256) := x_2(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_4, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 4
Globalname: c, contract_name: VaderMath
End popogation
c_4(uint256) := x_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_53(uint256) = a_1 (c)/ x_2
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = TMP_53 (c)+ x_2
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ 2
[i] TMP_55 cleared
clearing ir...?
x_3(uint256) := TMP_55(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: x_3, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Name: x, Num: 3
Globalname: x, contract_name: VaderMath
End popogation
TMP_53(uint256) = a_1 (c)/ x_2
A: 0 B: 0
lnorm: 0 rnorm: 0
Source address: u
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = TMP_53 (c)+ x_2
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ 2
A: u B: 0
lnorm: 0 rnorm: 0
A: u B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
x_3(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Source address: u
Source address: u
[i]Type for TMP_36

Name: TMP_36 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_37(uint256) = reserveOut_1 (c)- y4_1
Source address: u
[i]Type for TMP_37

Name: TMP_37 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_38(uint256) = reserveIn_1 (c)* TMP_37
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_38

Name: TMP_38 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_39(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_38)
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 0]]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
Param: a
[[-1], [-1], 'u', None, [], -1, 'u', 0]

Name: a Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
root(uint256)
ENTRY_POINT
Propogating All
IF a > 3
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION c = a
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE x = a / 2 + 1
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
BEGIN_LOOP
Propogating All
IF a != 0
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION c = 1
Propogating All
IF_LOOP x < c
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
c_3
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
END_LOOP
Propogating All
EXPRESSION c = x
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
Propogating All
END_IF
Propogating All
EXPRESSION x = (a / x + x) / 2
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
IF_LOOP x < c
clearing ir...?
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
Phi
[i]Type for a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(bool) = a_1 > 3
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_49(bool) = a_1 > 3
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_2(uint256) := a_1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: c_2, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Name: c, Num: 2
Globalname: c, contract_name: VaderMath
End popogation
c_2(uint256) := a_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(uint256) = a_1 (c)/ 2
[i] TMP_50 cleared
clearing ir...?
TMP_51(uint256) = TMP_50 (c)+ 1
[i] TMP_51 cleared
clearing ir...?
x_1(uint256) := TMP_51(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
Name: x, Num: 1
Globalname: x, contract_name: VaderMath
End popogation
TMP_50(uint256) = a_1 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_51(uint256) = TMP_50 (c)+ 1
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_51(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_56(bool) = a_1 != 0
[i] TMP_56 cleared
clearing ir...?
CONDITION TMP_56
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_1(uint256) := 1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: c_1, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: c, Num: 1
Globalname: c, contract_name: VaderMath
End popogation
c_1(uint256) := 1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_3(uint256) := ϕ(['c_4', 'c_2'])
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i] x cleared
clearing ir...?
TMP_52(bool) = x_2 < c_3
[i] TMP_52 cleared
clearing ir...?
CONDITION TMP_52
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
End popogation
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
c_3(uint256) := ϕ(['c_4', 'c_2'])
Phi

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_2(uint256) := ϕ(['x_1', 'x_3'])
Phi

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef


END==================================
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(bool) = x_2 < c_3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
c_4(uint256) := x_2(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_4, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 4
Globalname: c, contract_name: VaderMath
End popogation
c_4(uint256) := x_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_53(uint256) = a_1 (c)/ x_2
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = TMP_53 (c)+ x_2
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ 2
[i] TMP_55 cleared
clearing ir...?
x_3(uint256) := TMP_55(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_3, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Name: x, Num: 3
Globalname: x, contract_name: VaderMath
End popogation
TMP_53(uint256) = a_1 (c)/ x_2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = TMP_53 (c)+ x_2
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
x_3(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
Phi
[i]Type for a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(bool) = a_1 > 3
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_49(bool) = a_1 > 3
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_2(uint256) := a_1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: c_2, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: c, Num: 2
Globalname: c, contract_name: VaderMath
End popogation
c_2(uint256) := a_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(uint256) = a_1 (c)/ 2
[i] TMP_50 cleared
clearing ir...?
TMP_51(uint256) = TMP_50 (c)+ 1
[i] TMP_51 cleared
clearing ir...?
x_1(uint256) := TMP_51(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: x, Num: 1
Globalname: x, contract_name: VaderMath
End popogation
TMP_50(uint256) = a_1 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_51(uint256) = TMP_50 (c)+ 1
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_51(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_56(bool) = a_1 != 0
[i] TMP_56 cleared
clearing ir...?
CONDITION TMP_56
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_1(uint256) := 1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: c_1, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: c, Num: 1
Globalname: c, contract_name: VaderMath
End popogation
c_1(uint256) := 1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_3(uint256) := ϕ(['c_4', 'c_2'])
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i] x cleared
clearing ir...?
TMP_52(bool) = x_2 < c_3
[i] TMP_52 cleared
clearing ir...?
CONDITION TMP_52
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
End popogation
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
c_3(uint256) := ϕ(['c_4', 'c_2'])
Phi

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_2(uint256) := ϕ(['x_1', 'x_3'])
Phi

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(bool) = x_2 < c_3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
c_4(uint256) := x_2(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_4, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 4
Globalname: c, contract_name: VaderMath
End popogation
c_4(uint256) := x_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_53(uint256) = a_1 (c)/ x_2
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = TMP_53 (c)+ x_2
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ 2
[i] TMP_55 cleared
clearing ir...?
x_3(uint256) := TMP_55(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_3, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: x, Num: 3
Globalname: x, contract_name: VaderMath
End popogation
TMP_53(uint256) = a_1 (c)/ x_2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = TMP_53 (c)+ x_2
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
x_3(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Source address: u
Source address: u
[i]Type for TMP_39

Name: TMP_39 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_40(uint256) = TMP_36 (c)* TMP_39
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_40

Name: TMP_40 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
numeratorA_1(uint256) := TMP_40(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: numeratorB_1, name: numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
End popogation
TMP_41(uint256) = y2_1 (c)* reserveIn_1
A: 0 B: u
lnorm: 0 rnorm: u
[i]Type for TMP_41

Name: TMP_41 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
numeratorB_1(uint256) := TMP_41(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: XY_1, name: XY

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: XY_1, name: XY

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: numeratorC_1, name: numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
numeratorC_1(uint256) := XY_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: numeratorA_1, name: numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numeratorA, Num: 1
Globalname: numeratorA, contract_name: VaderMath
Ssa_name: numeratorC_1, name: numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: numeratorB_1, name: numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: numeratorA_1, name: numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numeratorA, Num: 1
Globalname: numeratorA, contract_name: VaderMath
Ssa_name: numeratorC_1, name: numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: numeratorB_1, name: numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: numerator_1, name: numerator

Name: numerator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
End popogation
TMP_42(uint256) = numeratorC_1 (c)- numeratorA_1
Source address: u
[i]Type for TMP_42

Name: TMP_42 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
TMP_43(uint256) = TMP_42 (c)- numeratorB_1
Source address: u
[i]Type for TMP_43

Name: TMP_43 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
numerator_1(uint256) := TMP_43(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for numerator

Name: numerator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
End popogation
denominator_1(uint256) := y2_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: numerator_1, name: numerator

Name: numerator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: numerator_1, name: numerator

Name: numerator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: amountIn_1, name: amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_44(uint256) = numerator_1 (c)/ denominator_1
A: 0 B: 0
lnorm: 0 rnorm: 0
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_44

Name: TMP_44 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := TMP_44(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: amountIn_1, name: amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: amountIn_1, name: amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
RETURN amountIn_1
RETURN

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef


TMP_31(uint256) = reserveIn_1 (c)* reserveOut_1
XY_1(uint256) := TMP_31(uint256)
TMP_32(uint256) = amountOut_1 (c)* 2
y2_1(uint256) := TMP_32(uint256)
TMP_33(uint256) = y2_1 (c)* 2
y4_1(uint256) := TMP_33(uint256)
TMP_34(bool) = y4_1 < reserveOut_1
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
TMP_36(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
TMP_37(uint256) = reserveOut_1 (c)- y4_1
TMP_38(uint256) = reserveIn_1 (c)* TMP_37
TMP_39(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_38)
TMP_40(uint256) = TMP_36 (c)* TMP_39
numeratorA_1(uint256) := TMP_40(uint256)
TMP_41(uint256) = y2_1 (c)* reserveIn_1
numeratorB_1(uint256) := TMP_41(uint256)
numeratorC_1(uint256) := XY_1(uint256)
TMP_42(uint256) = numeratorC_1 (c)- numeratorA_1
TMP_43(uint256) = TMP_42 (c)- numeratorB_1
numerator_1(uint256) := TMP_43(uint256)
denominator_1(uint256) := y2_1(uint256)
TMP_44(uint256) = numerator_1 (c)/ denominator_1
amountIn_1(uint256) := TMP_44(uint256)
RETURN amountIn_1


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: XY_1, name: XY

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
TMP_31(uint256) = reserveIn_1 (c)* reserveOut_1
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_31

Name: TMP_31 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
XY_1(uint256) := TMP_31(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for XY

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: amountOut_1, name: amountOut

Name: amountOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountOut, Num: 1
Globalname: amountOut, contract_name: VaderMath
Ssa_name: amountOut_1, name: amountOut

Name: amountOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountOut_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountOut, Num: 1
Globalname: amountOut, contract_name: VaderMath
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
End popogation
TMP_32(uint256) = amountOut_1 (c)* 2
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_32

Name: TMP_32 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
y2_1(uint256) := TMP_32(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: y4_1, name: y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
TMP_33(uint256) = y2_1 (c)* 2
A: 0 B: 0
lnorm: 0 rnorm: 0
Source address: u
[i]Type for TMP_33

Name: TMP_33 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
y4_1(uint256) := TMP_33(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: y4_1, name: y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: y4_1, name: y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
TMP_34(bool) = y4_1 < reserveOut_1
A: 0 B: u
lnorm: 0 rnorm: 0
[i]Type for TMP_34

Name: TMP_34 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
[i]Type for TMP_35

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: XY_1, name: XY

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: y4_1, name: y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: XY_1, name: XY

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: y4_1, name: y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: reserveOut_1, name: reserveOut

Name: reserveOut_1 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: numeratorA_1, name: numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numeratorA, Num: 1
Globalname: numeratorA, contract_name: VaderMath
End popogation
TMP_36(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 4]]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
Param: a
[[-1], [-1], 0, None, [], -1, 'u', 4]

Name: a Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
root(uint256)
ENTRY_POINT
Propogating All
IF a > 3
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION c = a
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE x = a / 2 + 1
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
BEGIN_LOOP
Propogating All
IF a != 0
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION c = 1
Propogating All
IF_LOOP x < c
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
c_3
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
END_LOOP
Propogating All
EXPRESSION c = x
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
Propogating All
END_IF
Propogating All
EXPRESSION x = (a / x + x) / 2
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
IF_LOOP x < c
clearing ir...?
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
Phi
[i]Type for a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(bool) = a_1 > 3
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
TMP_49(bool) = a_1 > 3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_2(uint256) := a_1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: c_2, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: c, Num: 2
Globalname: c, contract_name: VaderMath
End popogation
c_2(uint256) := a_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(uint256) = a_1 (c)/ 2
[i] TMP_50 cleared
clearing ir...?
TMP_51(uint256) = TMP_50 (c)+ 1
[i] TMP_51 cleared
clearing ir...?
x_1(uint256) := TMP_51(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: x, Num: 1
Globalname: x, contract_name: VaderMath
End popogation
TMP_50(uint256) = a_1 (c)/ 2
A: 0 B: 0
lnorm: 0 rnorm: 0
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_51(uint256) = TMP_50 (c)+ 1
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_51(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_56(bool) = a_1 != 0
[i] TMP_56 cleared
clearing ir...?
CONDITION TMP_56
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_1(uint256) := 1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: c_1, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: c, Num: 1
Globalname: c, contract_name: VaderMath
End popogation
c_1(uint256) := 1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_3(uint256) := ϕ(['c_4', 'c_2'])
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i] x cleared
clearing ir...?
TMP_52(bool) = x_2 < c_3
[i] TMP_52 cleared
clearing ir...?
CONDITION TMP_52
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
End popogation
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
c_3(uint256) := ϕ(['c_4', 'c_2'])
Phi

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef


END==================================
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_2(uint256) := ϕ(['x_1', 'x_3'])
Phi

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(bool) = x_2 < c_3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
c_4(uint256) := x_2(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_4, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 4
Globalname: c, contract_name: VaderMath
End popogation
c_4(uint256) := x_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_53(uint256) = a_1 (c)/ x_2
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = TMP_53 (c)+ x_2
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ 2
[i] TMP_55 cleared
clearing ir...?
x_3(uint256) := TMP_55(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: x_3, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: x, Num: 3
Globalname: x, contract_name: VaderMath
End popogation
TMP_53(uint256) = a_1 (c)/ x_2
A: 0 B: 0
lnorm: 0 rnorm: 0
Source address: u
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = TMP_53 (c)+ x_2
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ 2
A: u B: 0
lnorm: 0 rnorm: 0
A: u B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
x_3(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
clearing ir...?
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Copied ftype
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
Phi
[i]Type for a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(bool) = a_1 > 3
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
TMP_49(bool) = a_1 > 3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_2(uint256) := a_1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: c_2, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Name: c, Num: 2
Globalname: c, contract_name: VaderMath
End popogation
c_2(uint256) := a_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(uint256) = a_1 (c)/ 2
[i] TMP_50 cleared
clearing ir...?
TMP_51(uint256) = TMP_50 (c)+ 1
[i] TMP_51 cleared
clearing ir...?
x_1(uint256) := TMP_51(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
Name: x, Num: 1
Globalname: x, contract_name: VaderMath
End popogation
TMP_50(uint256) = a_1 (c)/ 2
A: 0 B: 0
lnorm: 0 rnorm: 0
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_51(uint256) = TMP_50 (c)+ 1
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_51(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_56(bool) = a_1 != 0
[i] TMP_56 cleared
clearing ir...?
CONDITION TMP_56
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_1(uint256) := 1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: c_1, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: c, Num: 1
Globalname: c, contract_name: VaderMath
End popogation
c_1(uint256) := 1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_3(uint256) := ϕ(['c_4', 'c_2'])
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i] x cleared
clearing ir...?
TMP_52(bool) = x_2 < c_3
[i] TMP_52 cleared
clearing ir...?
CONDITION TMP_52
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
End popogation
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
c_3(uint256) := ϕ(['c_4', 'c_2'])
Phi

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef


END==================================
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_2(uint256) := ϕ(['x_1', 'x_3'])
Phi

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef


END==================================
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(bool) = x_2 < c_3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
c_4(uint256) := x_2(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_4, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 4
Globalname: c, contract_name: VaderMath
End popogation
c_4(uint256) := x_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_53(uint256) = a_1 (c)/ x_2
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = TMP_53 (c)+ x_2
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ 2
[i] TMP_55 cleared
clearing ir...?
x_3(uint256) := TMP_55(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: x_3, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Name: x, Num: 3
Globalname: x, contract_name: VaderMath
End popogation
TMP_53(uint256) = a_1 (c)/ x_2
A: 0 B: 0
lnorm: 0 rnorm: 0
Source address: u
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = TMP_53 (c)+ x_2
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ 2
A: u B: 0
lnorm: 0 rnorm: 0
A: u B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
x_3(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Source address: u
Source address: u
[i]Type for TMP_36

Name: TMP_36 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_37(uint256) = reserveOut_1 (c)- y4_1
Source address: u
[i]Type for TMP_37

Name: TMP_37 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_38(uint256) = reserveIn_1 (c)* TMP_37
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_38

Name: TMP_38 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_39(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_38)
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 0]]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
Param: a
[[-1], [-1], 'u', None, [], -1, 'u', 0]

Name: a Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
root(uint256)
ENTRY_POINT
Propogating All
IF a > 3
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION c = a
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE x = a / 2 + 1
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
BEGIN_LOOP
Propogating All
IF a != 0
Propogating All
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION c = 1
Propogating All
IF_LOOP x < c
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
c_3
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
END_LOOP
Propogating All
EXPRESSION c = x
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
Propogating All
END_IF
Propogating All
EXPRESSION x = (a / x + x) / 2
Propogating All
x_2
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
IF_LOOP x < c
clearing ir...?
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
Phi
[i]Type for a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(bool) = a_1 > 3
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_49(bool) = a_1 > 3
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_2(uint256) := a_1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: c_2, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Name: c, Num: 2
Globalname: c, contract_name: VaderMath
End popogation
c_2(uint256) := a_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(uint256) = a_1 (c)/ 2
[i] TMP_50 cleared
clearing ir...?
TMP_51(uint256) = TMP_50 (c)+ 1
[i] TMP_51 cleared
clearing ir...?
x_1(uint256) := TMP_51(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
Name: x, Num: 1
Globalname: x, contract_name: VaderMath
End popogation
TMP_50(uint256) = a_1 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_51(uint256) = TMP_50 (c)+ 1
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_51(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_56(bool) = a_1 != 0
[i] TMP_56 cleared
clearing ir...?
CONDITION TMP_56
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_1(uint256) := 1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: c_1, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: c, Num: 1
Globalname: c, contract_name: VaderMath
End popogation
c_1(uint256) := 1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_3(uint256) := ϕ(['c_4', 'c_2'])
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i] x cleared
clearing ir...?
TMP_52(bool) = x_2 < c_3
[i] TMP_52 cleared
clearing ir...?
CONDITION TMP_52
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
End popogation
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
c_3(uint256) := ϕ(['c_4', 'c_2'])
Phi

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_2(uint256) := ϕ(['x_1', 'x_3'])
Phi

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef


END==================================
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(bool) = x_2 < c_3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
c_4(uint256) := x_2(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_4, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 4
Globalname: c, contract_name: VaderMath
End popogation
c_4(uint256) := x_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_53(uint256) = a_1 (c)/ x_2
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = TMP_53 (c)+ x_2
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ 2
[i] TMP_55 cleared
clearing ir...?
x_3(uint256) := TMP_55(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_3, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Name: x, Num: 3
Globalname: x, contract_name: VaderMath
End popogation
TMP_53(uint256) = a_1 (c)/ x_2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = TMP_53 (c)+ x_2
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
x_3(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
Phi
[i]Type for a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(bool) = a_1 > 3
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_49(bool) = a_1 > 3
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_2(uint256) := a_1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: c_2, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: c, Num: 2
Globalname: c, contract_name: VaderMath
End popogation
c_2(uint256) := a_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(uint256) = a_1 (c)/ 2
[i] TMP_50 cleared
clearing ir...?
TMP_51(uint256) = TMP_50 (c)+ 1
[i] TMP_51 cleared
clearing ir...?
x_1(uint256) := TMP_51(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: x, Num: 1
Globalname: x, contract_name: VaderMath
End popogation
TMP_50(uint256) = a_1 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_51(uint256) = TMP_50 (c)+ 1
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_51(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_56(bool) = a_1 != 0
[i] TMP_56 cleared
clearing ir...?
CONDITION TMP_56
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_1(uint256) := 1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: c_1, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: c, Num: 1
Globalname: c, contract_name: VaderMath
End popogation
c_1(uint256) := 1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_3(uint256) := ϕ(['c_4', 'c_2'])
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i] x cleared
clearing ir...?
TMP_52(bool) = x_2 < c_3
[i] TMP_52 cleared
clearing ir...?
CONDITION TMP_52
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
End popogation
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
c_3(uint256) := ϕ(['c_4', 'c_2'])
Phi

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_2(uint256) := ϕ(['x_1', 'x_3'])
Phi

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(bool) = x_2 < c_3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
c_4(uint256) := x_2(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_4, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 4
Globalname: c, contract_name: VaderMath
End popogation
c_4(uint256) := x_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_53(uint256) = a_1 (c)/ x_2
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = TMP_53 (c)+ x_2
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ 2
[i] TMP_55 cleared
clearing ir...?
x_3(uint256) := TMP_55(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Ssa_name: x_3, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: x, Num: 3
Globalname: x, contract_name: VaderMath
End popogation
TMP_53(uint256) = a_1 (c)/ x_2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = TMP_53 (c)+ x_2
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
x_3(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Source address: u
Source address: u
[i]Type for TMP_39

Name: TMP_39 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_40(uint256) = TMP_36 (c)* TMP_39
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_40

Name: TMP_40 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
numeratorA_1(uint256) := TMP_40(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: reserveIn_1, name: reserveIn

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveIn_1 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: reserveIn, Num: 1
Globalname: reserveIn, contract_name: VaderMath
Ssa_name: numeratorB_1, name: numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
End popogation
TMP_41(uint256) = y2_1 (c)* reserveIn_1
A: 0 B: u
lnorm: 0 rnorm: u
[i]Type for TMP_41

Name: TMP_41 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
numeratorB_1(uint256) := TMP_41(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: XY_1, name: XY

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: XY_1, name: XY

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: numeratorC_1, name: numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
End popogation
numeratorC_1(uint256) := XY_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: numeratorA_1, name: numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numeratorA, Num: 1
Globalname: numeratorA, contract_name: VaderMath
Ssa_name: numeratorC_1, name: numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: numeratorB_1, name: numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: numeratorA_1, name: numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: numeratorA, Num: 1
Globalname: numeratorA, contract_name: VaderMath
Ssa_name: numeratorC_1, name: numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Ssa_name: numeratorB_1, name: numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: numerator_1, name: numerator

Name: numerator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
End popogation
TMP_42(uint256) = numeratorC_1 (c)- numeratorA_1
Source address: u
[i]Type for TMP_42

Name: TMP_42 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
TMP_43(uint256) = TMP_42 (c)- numeratorB_1
Source address: u
[i]Type for TMP_43

Name: TMP_43 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
numerator_1(uint256) := TMP_43(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for numerator

Name: numerator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: y2_1, name: y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
End popogation
denominator_1(uint256) := y2_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: numerator_1, name: numerator

Name: numerator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: numerator_1, name: numerator

Name: numerator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: amountIn_1, name: amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_44(uint256) = numerator_1 (c)/ denominator_1
A: 0 B: 0
lnorm: 0 rnorm: 0
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_44

Name: TMP_44 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := TMP_44(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: amountIn_1, name: amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: amountIn_1, name: amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
RETURN amountIn_1
RETURN

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u
Reading Function: delta
Checking funcion...



delta
Function name: delta
Finding type for a(uint256 ... )
Value: u
Finding type for b(uint256 ... )
Value: u
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u']]
FIND RETURN
ENTRY_POINT
delta(uint256,uint256)


a_1(uint256) := ϕ(['vaderAsset_1'])
b_1(uint256) := ϕ(['assetVader_1'])
TMP_45(bool) = a_1 > b_1
CONDITION TMP_45
TMP_47(uint256) = b_1 (c)- a_1
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
RETURN TMP_46


clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for a

Name: a Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for b

Name: b Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_47(uint256) = b_1 (c)- a_1
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_46(uint256) = a_1 (c)- b_1
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


a_1(uint256) := ϕ(['vaderAsset_1'])
b_1(uint256) := ϕ(['assetVader_1'])
TMP_45(bool) = a_1 > b_1
CONDITION TMP_45
TMP_47(uint256) = b_1 (c)- a_1
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
RETURN TMP_46


clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for a

Name: a Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for b

Name: b Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_47(uint256) = b_1 (c)- a_1
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: b, Num: 1
Globalname: b, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_46(uint256) = a_1 (c)- b_1
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Reading Function: pow
Checking funcion...



pow
Function name: pow
Finding type for a(uint256 ... )
Value: u
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
FIND RETURN
ENTRY_POINT
pow(uint256)


a_1(uint256) := ϕ(['TMP_28'])
TMP_48(uint256) = a_1 (c)* a_1
RETURN TMP_48


clearing ir...?
a_1(uint256) := ϕ(['TMP_28'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
a_1(uint256) := ϕ(['TMP_28'])
Phi

Name: TMP_28 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for a

Name: a Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_48(uint256) = a_1 (c)* a_1
[i] TMP_48 cleared
clearing ir...?
RETURN TMP_48
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_48(uint256) = a_1 (c)* a_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_48
RETURN

Name: TMP_48 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


a_1(uint256) := ϕ(['TMP_28'])
TMP_48(uint256) = a_1 (c)* a_1
RETURN TMP_48


clearing ir...?
a_1(uint256) := ϕ(['TMP_28'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
a_1(uint256) := ϕ(['TMP_28'])
Phi

Name: TMP_28 Function: calculateSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for a

Name: a Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_48(uint256) = a_1 (c)* a_1
[i] TMP_48 cleared
clearing ir...?
RETURN TMP_48
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_48(uint256) = a_1 (c)* a_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_48
RETURN

Name: TMP_48 Function: pow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Reading Function: root
Checking funcion...



root
Function name: root
Finding type for a(uint256 ... )
Value: 0
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 0]]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
FIND RETURN
ENTRY_POINT
root(uint256)


a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
TMP_49(bool) = a_1 > 3
CONDITION TMP_49
c_2(uint256) := a_1(uint256)
TMP_50(uint256) = a_1 (c)/ 2
TMP_51(uint256) = TMP_50 (c)+ 1
x_1(uint256) := TMP_51(uint256)
TMP_56(bool) = a_1 != 0
CONDITION TMP_56
c_1(uint256) := 1(uint256)
c_3(uint256) := ϕ(['c_4', 'c_2'])
x_2(uint256) := ϕ(['x_1', 'x_3'])
TMP_52(bool) = x_2 < c_3
CONDITION TMP_52
c_4(uint256) := x_2(uint256)
TMP_53(uint256) = a_1 (c)/ x_2
TMP_54(uint256) = TMP_53 (c)+ x_2
TMP_55(uint256) = TMP_54 (c)/ 2
x_3(uint256) := TMP_55(uint256)


clearing ir...?
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
Phi

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef

Name: TMP_38 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for a

Name: a Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(bool) = a_1 > 3
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_49(bool) = a_1 > 3
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_2(uint256) := a_1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: c_2, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: c, Num: 2
Globalname: c, contract_name: VaderMath
End popogation
c_2(uint256) := a_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(uint256) = a_1 (c)/ 2
[i] TMP_50 cleared
clearing ir...?
TMP_51(uint256) = TMP_50 (c)+ 1
[i] TMP_51 cleared
clearing ir...?
x_1(uint256) := TMP_51(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: x, Num: 1
Globalname: x, contract_name: VaderMath
End popogation
TMP_50(uint256) = a_1 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_51(uint256) = TMP_50 (c)+ 1
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_51(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_56(bool) = a_1 != 0
[i] TMP_56 cleared
clearing ir...?
CONDITION TMP_56
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_1(uint256) := 1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: c_1, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: c, Num: 1
Globalname: c, contract_name: VaderMath
End popogation
c_1(uint256) := 1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_3(uint256) := ϕ(['c_4', 'c_2'])
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i] x cleared
clearing ir...?
TMP_52(bool) = x_2 < c_3
[i] TMP_52 cleared
clearing ir...?
CONDITION TMP_52
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
End popogation
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
c_3(uint256) := ϕ(['c_4', 'c_2'])
Phi

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_2(uint256) := ϕ(['x_1', 'x_3'])
Phi

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(bool) = x_2 < c_3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
c_4(uint256) := x_2(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_4, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 4
Globalname: c, contract_name: VaderMath
End popogation
c_4(uint256) := x_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_53(uint256) = a_1 (c)/ x_2
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = TMP_53 (c)+ x_2
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ 2
[i] TMP_55 cleared
clearing ir...?
x_3(uint256) := TMP_55(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_3, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: x, Num: 3
Globalname: x, contract_name: VaderMath
End popogation
TMP_53(uint256) = a_1 (c)/ x_2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = TMP_53 (c)+ x_2
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
x_3(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX


a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
TMP_49(bool) = a_1 > 3
CONDITION TMP_49
c_2(uint256) := a_1(uint256)
TMP_50(uint256) = a_1 (c)/ 2
TMP_51(uint256) = TMP_50 (c)+ 1
x_1(uint256) := TMP_51(uint256)
TMP_56(bool) = a_1 != 0
CONDITION TMP_56
c_1(uint256) := 1(uint256)
c_3(uint256) := ϕ(['c_4', 'c_2'])
x_2(uint256) := ϕ(['x_1', 'x_3'])
TMP_52(bool) = x_2 < c_3
CONDITION TMP_52
c_4(uint256) := x_2(uint256)
TMP_53(uint256) = a_1 (c)/ x_2
TMP_54(uint256) = TMP_53 (c)+ x_2
TMP_55(uint256) = TMP_54 (c)/ 2
x_3(uint256) := TMP_55(uint256)


clearing ir...?
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i] a cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
Phi

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef

Name: TMP_38 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for a

Name: a Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_49(bool) = a_1 > 3
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Copied ftype
Name: a, Num: 1
Globalname: a, contract_name: VaderMath
End popogation
TMP_49(bool) = a_1 > 3
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_2(uint256) := a_1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: c_2, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 2
Globalname: c, contract_name: VaderMath
End popogation
c_2(uint256) := a_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_50(uint256) = a_1 (c)/ 2
[i] TMP_50 cleared
clearing ir...?
TMP_51(uint256) = TMP_50 (c)+ 1
[i] TMP_51 cleared
clearing ir...?
x_1(uint256) := TMP_51(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_1, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
Name: x, Num: 1
Globalname: x, contract_name: VaderMath
End popogation
TMP_50(uint256) = a_1 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_51(uint256) = TMP_50 (c)+ 1
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_51(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_56(bool) = a_1 != 0
[i] TMP_56 cleared
clearing ir...?
CONDITION TMP_56
Propogating parameters and globals to SSA variables...
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_1(uint256) := 1(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: c_1, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: c, Num: 1
Globalname: c, contract_name: VaderMath
End popogation
c_1(uint256) := 1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
c_3(uint256) := ϕ(['c_4', 'c_2'])
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i] x cleared
clearing ir...?
TMP_52(bool) = x_2 < c_3
[i] TMP_52 cleared
clearing ir...?
CONDITION TMP_52
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
End popogation
Ssa_name: c_3, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 3
Globalname: c, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
c_3(uint256) := ϕ(['c_4', 'c_2'])
Phi

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_2(uint256) := ϕ(['x_1', 'x_3'])
Phi

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef


END==================================
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(bool) = x_2 < c_3
A: 0 B: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
c_4(uint256) := x_2(uint256)
[i] c cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: c_4, name: c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: c, Num: 4
Globalname: c, contract_name: VaderMath
End popogation
c_4(uint256) := x_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_53(uint256) = a_1 (c)/ x_2
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = TMP_53 (c)+ x_2
[i] TMP_54 cleared
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ 2
[i] TMP_55 cleared
clearing ir...?
x_3(uint256) := TMP_55(uint256)
[i] x cleared
Propogating parameters and globals to SSA variables...
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_2, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: x, Num: 2
Globalname: x, contract_name: VaderMath
Ssa_name: a_1, name: a

Name: a_1 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: x_3, name: x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Name: x, Num: 3
Globalname: x, contract_name: VaderMath
End popogation
TMP_53(uint256) = a_1 (c)/ x_2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = TMP_53 (c)+ x_2
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = TMP_54 (c)/ 2
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
x_3(uint256) := TMP_55(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Source address: u
Reading Function: slitherConstructorConstantVariables
Function slitherConstructorConstantVariables not marked
Address: 1, Label: global:_owner
Address: 2, Label: global:_tokenApprovals
Address: 3, Label: global:_owners
Address: -999, Label: swap:to
Head Addr: 1
    Norm: u
    Set: {1}
    Fin: NULL
Head Addr: 2
    Norm: u
    Set: {2}
    Fin: NULL
Head Addr: 3
    Norm: u
    Set: {3}
    Fin: NULL
Head Addr: -999
    Norm: u
    Set: {-999}
    Fin: NULL
Function count: 19
Time elapsed: 0.5526001453399658
Analyzed_contracts_count: 24
total compilations: 5, contracts: 24
contract name: BasePool
Add to address_to_label {'global:_owner': 1, 'global:_tokenApprovals': 2, 'global:_owners': 3, 'swap:to': -999, 'mint:to': -998}
Addr:mint_to : 0
Add to address_to_label {'global:_owner': 1, 'global:_tokenApprovals': 2, 'global:_owners': 3, 'swap:to': -999, 'mint:to': -998, 'global:nativeAsset': 4}
Addr:global_nativeAsset : 6
Add to address_to_label {'global:_owner': 1, 'global:_tokenApprovals': 2, 'global:_owners': 3, 'swap:to': -999, 'mint:to': -998, 'global:nativeAsset': 4, 'global:foreignAsset': 5}
Addr:global_foreignAsset : 18
Mark functions Adding: BasePool, constructor, True
[X]No Binary
Mark functions Adding: BasePool, getReserves, True
[X]No Binary
Mark functions Adding: BasePool, name, True
[X]No Binary
Mark functions Adding: BasePool, mint, True
[*]Marked
Mark functions Adding: BasePool, _burn, True
[x] Not visible 
Mark functions Adding: BasePool, swap, True
[X]No Binary
Mark functions Adding: BasePool, swap, True
[*]Marked
Mark functions Adding: BasePool, _update, True
[x] Not visible 
Mark functions Adding: BasePool, slitherConstructorConstantVariables, True
[x] Not visible 
State_var: ONE
Finding type for ONE(uint256 ... )
Value: u
Source address: u
State_var: _NOT_ENTERED
Finding type for _NOT_ENTERED(uint256 ... )
Value: u
Source address: u
State_var: _ENTERED
Finding type for _ENTERED(uint256 ... )
Value: u
Source address: u
State_var: _status
Finding type for _status(uint256 ... )
Value: u
Source address: u
State_var: _balances
Finding type for _balances(mapping(address => uint256) ... )
Value: u
Source address: u
State_var: _tokenApprovals
Finding type for _tokenApprovals(mapping(uint256 => address) ... )
prev address? u
Head Addr: 2
    Norm: 0
    Set: {2}
    Fin: NULL
Source address: 2
State_var: _owner
Finding type for _owner(address ... )
prev address? u
Head Addr: 1
    Norm: 0
    Set: {1}
    Fin: NULL
Source address: 1
State_var: _name
Finding type for _name(string ... )
Value: u
Source address: u
State_var: _owners
Finding type for _owners(mapping(uint256 => address) ... )
prev address? u
Head Addr: 3
    Norm: 0
    Set: {3}
    Fin: NULL
Source address: 3
State_var: _operatorApprovals
Finding type for _operatorApprovals(mapping(address => mapping(address => bool)) ... )
Value: u
Source address: u
State_var: foreignAsset
Finding type for foreignAsset(IERC20 ... )
Value: u
Source address: u
State_var: nativeAsset
Finding type for nativeAsset(IERC20 ... )
Value: u
Source address: u
State_var: positionId
Finding type for positionId(uint256 ... )
Value: u
Source address: u
State_var: totalSupply
Finding type for totalSupply(uint256 ... )
Value: u
Source address: u
State_var: positions
Finding type for positions(mapping(uint256 => IBasePool.Position) ... )
global
positions
creation
OUT KEY: global_positions_creation
global
positions
liquidity
OUT KEY: global_positions_liquidity
global
positions
originalNative
OUT KEY: global_positions_originalNative
global
positions
originalForeign
OUT KEY: global_positions_originalForeign
Value: u
Source address: u
State_var: _ONE_YEAR
Finding type for _ONE_YEAR(uint256 ... )
Value: u
Source address: u
State_var: _symbol
Finding type for _symbol(string ... )
Value: u
Source address: u
State_var: _blockTimestampLast
Finding type for _blockTimestampLast(uint32 ... )
Value: u
Source address: u
State_var: priceForeignCumulativeLast
Finding type for priceForeignCumulativeLast(uint256 ... )
Value: u
Source address: u
State_var: priceNativeCumulativeLast
Finding type for priceNativeCumulativeLast(uint256 ... )
Value: u
Source address: u
State_var: _reserveForeign
Finding type for _reserveForeign(uint112 ... )
Value: u
Source address: u
State_var: _reserveNative
Finding type for _reserveNative(uint112 ... )
Value: u
Source address: u
contract name: GasThrottle
contract name: UQ112x112
contract name: IBasePool
contract name: IAggregator
contract name: IERC20Extended
contract name: VaderMath
Addr:global__owner : 0
Addr:global__tokenApprovals : 0
Addr:global__owners : 0
Addr:swap_to : 0
Mark functions Adding: VaderMath, calculateLiquidityUnits, True
[*]Marked
Mark functions Adding: VaderMath, calculateSlipAdjustment, True
[*]Marked
Mark functions Adding: VaderMath, calculateLoss, True
[*]Marked
Mark functions Adding: VaderMath, calculateSwap, True
[*]Marked
Mark functions Adding: VaderMath, calculateSwapReverse, True
[*]Marked
Mark functions Adding: VaderMath, delta, True
[*]Marked
Mark functions Adding: VaderMath, pow, True
[*]Marked
Mark functions Adding: VaderMath, root, True
[*]Marked
Mark functions Adding: VaderMath, slitherConstructorConstantVariables, True
[x] Not visible 
State_var: ONE
Source address: u
contract name: Ownable
contract name: ReentrancyGuard
contract name: IERC20
contract name: IERC20Permit
contract name: SafeERC20
contract name: ERC721
contract name: IERC721
contract name: IERC721Receiver
contract name: IERC721Metadata
contract name: Address
contract name: Context
contract name: Strings
contract name: ERC165
contract name: IERC165
contract name: Math
contract name: SignedMath
contract name: ProtocolConstants
Running check on BasePool
Reading Function: constructor
Function constructor not marked
Reading Function: getReserves
Function getReserves not marked
Reading Function: name
Function name not marked
Reading Function: mint
Checking funcion...



mint
Function name: mint
Finding type for to(address ... )
prev address? u
Head Addr: -998
    Norm: 0
    Set: {-998}
    Fin: NULL
New param cache [[[], [], 0, 'to', [], -1, -998, 'u']]
FIND RETURN
ENTRY_POINT
mint(address)


nativeAsset_2(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13'])
foreignAsset_2(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
positionId_1(uint256) := ϕ(['positionId_0', 'positionId_6'])
totalSupply_1(uint256) := ϕ(['totalSupply_13', 'totalSupply_6', 'totalSupply_0'])
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
TUPLE_0(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
reserveNative_1(uint112)= UNPACK TUPLE_0 index: 0 
reserveForeign_1(uint112)= UNPACK TUPLE_0 index: 1 
TMP_139 = CONVERT this to address
TMP_140(uint256) = HIGH_LEVEL_CALL, dest:nativeAsset_4(IERC20), function:balanceOf, arguments:['TMP_139']  
nativeAsset_5(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_4'])
foreignAsset_5(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_4', 'foreignAsset_6', 'foreignAsset_10'])
positionId_4(uint256) := ϕ(['positionId_6', 'positionId_3'])
totalSupply_4(uint256) := ϕ(['totalSupply_3', 'totalSupply_13', 'totalSupply_6'])
balanceNative_1(uint256) := TMP_140(uint256)
TMP_141 = CONVERT this to address
TMP_142(uint256) = HIGH_LEVEL_CALL, dest:foreignAsset_5(IERC20), function:balanceOf, arguments:['TMP_141']  
foreignAsset_6(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_5'])
positionId_5(uint256) := ϕ(['positionId_4', 'positionId_6'])
totalSupply_5(uint256) := ϕ(['totalSupply_13', 'totalSupply_6', 'totalSupply_4'])
balanceForeign_1(uint256) := TMP_142(uint256)
TMP_143(uint256) = balanceNative_1 (c)- reserveNative_1
nativeDeposit_1(uint256) := TMP_143(uint256)
TMP_144(uint256) = balanceForeign_1 (c)- reserveForeign_1
foreignDeposit_1(uint256) := TMP_144(uint256)
totalLiquidityUnits_1(uint256) := totalSupply_5(uint256)
TMP_145(bool) = totalLiquidityUnits_1 == 0
CONDITION TMP_145
liquidity_1(uint256) := nativeDeposit_1(uint256)
TMP_146(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateLiquidityUnits(uint256,uint256,uint256,uint256,uint256), arguments:['nativeDeposit_1', 'reserveNative_1', 'foreignDeposit_1', 'reserveForeign_1', 'totalLiquidityUnits_1'] 
liquidity_2(uint256) := TMP_146(uint256)
liquidity_3(uint256) := ϕ(['liquidity_1', 'liquidity_2'])
TMP_147(bool) = liquidity_3 > 0
TMP_148(None) = SOLIDITY_CALL require(bool,string)(TMP_147,BasePool::mint: Insufficient Liquidity Provided)
TMP_149(uint256) := positionId_5(uint256)
positionId_6(uint256) = positionId_5 (c)+ 1
id_1(uint256) := TMP_149(uint256)
totalSupply_6(uint256) = totalSupply_5 (c)+ liquidity_3
INTERNAL_CALL, ERC721._mint(address,uint256)(to_1,id_1)
REF_41(IBasePool.Position) -> positions_0[id_1]
TMP_151 = new Position(block.timestamp,liquidity_3,nativeDeposit_1,foreignDeposit_1)
positions_1(mapping(uint256 => IBasePool.Position)) := ϕ(['positions_0'])
REF_41 (->positions_1) := TMP_151(IBasePool.Position)
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(balanceNative_1,balanceForeign_1,reserveNative_1,reserveForeign_1)
Emit Mint(msg.sender,to_1,nativeDeposit_1,foreignDeposit_1)
Emit PositionOpened(msg.sender,id_1,liquidity_3)


clearing ir...?
nativeAsset_2(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13'])
[i] nativeAsset cleared
clearing ir...?
foreignAsset_2(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
[i] foreignAsset cleared
clearing ir...?
positionId_1(uint256) := ϕ(['positionId_0', 'positionId_6'])
[i] positionId cleared
clearing ir...?
totalSupply_1(uint256) := ϕ(['totalSupply_13', 'totalSupply_6', 'totalSupply_0'])
[i] totalSupply cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: nativeAsset_2, name: nativeAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAsset, Num: 2
Globalname: nativeAsset, contract_name: BasePool
global...

Name: PIC_32 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: foreignAsset_2, name: foreignAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAsset, Num: 2
Globalname: foreignAsset, contract_name: BasePool
global...

Name: PIC_31 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: positionId_1, name: positionId

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: positionId, Num: 1
Globalname: positionId, contract_name: BasePool
global...

Name: PIC_33 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: totalSupply_1, name: totalSupply

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: totalSupply, Num: 1
Globalname: totalSupply, contract_name: BasePool
global...

Name: PIC_34 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
nativeAsset_2(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13'])
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAsset_2(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positionId_1(uint256) := ϕ(['positionId_0', 'positionId_6'])
Phi
[i]Type for positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalSupply_1(uint256) := ϕ(['totalSupply_13', 'totalSupply_6', 'totalSupply_0'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
New param cache []
FIND RETURN
ENTRY_POINT
nonReentrant()
ENTRY_POINT
Propogating All
EXPRESSION _nonReentrantBefore()
Propogating All
_
Propogating All
EXPRESSION _nonReentrantAfter()
Propogating All
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
INTERNAL_CALL, ReentrancyGuard._nonReentrantBefore()()
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, ReentrancyGuard._nonReentrantBefore()()
New param cache []
FIND RETURN
ENTRY_POINT
_nonReentrantBefore()
ENTRY_POINT
Propogating All
EXPRESSION require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)
Propogating All
EXPRESSION _status = _ENTERED
Propogating All
clearing ir...?
_ENTERED_1(uint256) := ϕ(['_ENTERED_0'])
[i] _ENTERED cleared
clearing ir...?
_status_2(uint256) := ϕ(['_status_0', '_status_3', '_status_1', '_status_4'])
[i] _status cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _ENTERED_1, name: _ENTERED

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _ENTERED, Num: 1
Globalname: _ENTERED, contract_name: BasePool
global...

Name: PIC_23 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _status_2, name: _status

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _status, Num: 2
Globalname: _status, contract_name: BasePool
global...

Name: PIC_24 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
_ENTERED_1(uint256) := ϕ(['_ENTERED_0'])
Phi
[i]Type for _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_status_2(uint256) := ϕ(['_status_0', '_status_3', '_status_1', '_status_4'])
Phi
[i]Type for _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_0(bool) = _status_2 != _ENTERED_1
[i] TMP_0 cleared
clearing ir...?
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,ReentrancyGuard: reentrant call)
Propogating parameters and globals to SSA variables...
Ssa_name: _status_2, name: _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _ENTERED_1, name: _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _status_2, name: _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _ENTERED_1, name: _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_0(bool) = _status_2 != _ENTERED_1
[i]Type for TMP_0

Name: TMP_0 Function: _nonReentrantBefore
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,ReentrancyGuard: reentrant call)
[i]Type for TMP_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
_status_3(uint256) := _ENTERED_1(uint256)
[i] _status cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _ENTERED_1, name: _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _ENTERED_1, name: _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _status_3, name: _status

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _status, Num: 3
Globalname: _status, contract_name: BasePool
global...

Name: PIC_24 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
_status_3(uint256) := _ENTERED_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _status
Source address: u
clearing ir...?
_ENTERED_1(uint256) := ϕ(['_ENTERED_0'])
[i] _ENTERED cleared
clearing ir...?
_status_2(uint256) := ϕ(['_status_0', '_status_3', '_status_1', '_status_4'])
[i] _status cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _ENTERED_1, name: _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _ENTERED, Num: 1
Globalname: _ENTERED, contract_name: BasePool
global...

Name: PIC_23 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _status_2, name: _status

Name: _status Function: _nonReentrantBefore
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _status, Num: 2
Globalname: _status, contract_name: BasePool
global...

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
_ENTERED_1(uint256) := ϕ(['_ENTERED_0'])
Phi
[i]Type for _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_status_2(uint256) := ϕ(['_status_0', '_status_3', '_status_1', '_status_4'])
Phi
[i]Type for _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_0(bool) = _status_2 != _ENTERED_1
[i] TMP_0 cleared
clearing ir...?
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,ReentrancyGuard: reentrant call)
Propogating parameters and globals to SSA variables...
Ssa_name: _status_2, name: _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _ENTERED_1, name: _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _status_2, name: _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _ENTERED_1, name: _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_0(bool) = _status_2 != _ENTERED_1
[i]Type for TMP_0

Name: TMP_0 Function: _nonReentrantBefore
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,ReentrancyGuard: reentrant call)
[i]Type for TMP_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
_status_3(uint256) := _ENTERED_1(uint256)
[i] _status cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _ENTERED_1, name: _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _ENTERED_1, name: _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _status_3, name: _status

Name: _status Function: _nonReentrantBefore
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _status, Num: 3
Globalname: _status, contract_name: BasePool
global...

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
_status_3(uint256) := _ENTERED_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _status
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
INTERNAL_CALL, ReentrancyGuard._nonReentrantAfter()()
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, ReentrancyGuard._nonReentrantAfter()()
New param cache []
FIND RETURN
ENTRY_POINT
_nonReentrantAfter()
ENTRY_POINT
Propogating All
EXPRESSION _status = _NOT_ENTERED
Propogating All
clearing ir...?
_NOT_ENTERED_2(uint256) := ϕ(['_NOT_ENTERED_0'])
[i] _NOT_ENTERED cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _NOT_ENTERED_2, name: _NOT_ENTERED

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _NOT_ENTERED, Num: 2
Globalname: _NOT_ENTERED, contract_name: BasePool
global...

Name: PIC_22 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
_NOT_ENTERED_2(uint256) := ϕ(['_NOT_ENTERED_0'])
Phi
[i]Type for _NOT_ENTERED

Name: _NOT_ENTERED Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
_status_4(uint256) := _NOT_ENTERED_2(uint256)
[i] _status cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _NOT_ENTERED_2, name: _NOT_ENTERED

Name: _NOT_ENTERED Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _NOT_ENTERED_2, name: _NOT_ENTERED

Name: _NOT_ENTERED Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _status_4, name: _status

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _status, Num: 4
Globalname: _status, contract_name: BasePool
global...

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
_status_4(uint256) := _NOT_ENTERED_2(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _status

Name: _status Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _status
Source address: u
clearing ir...?
_NOT_ENTERED_2(uint256) := ϕ(['_NOT_ENTERED_0'])
[i] _NOT_ENTERED cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _NOT_ENTERED_2, name: _NOT_ENTERED

Name: _NOT_ENTERED Function: _nonReentrantAfter
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _NOT_ENTERED, Num: 2
Globalname: _NOT_ENTERED, contract_name: BasePool
global...

Name: PIC_22 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
_NOT_ENTERED_2(uint256) := ϕ(['_NOT_ENTERED_0'])
Phi
[i]Type for _NOT_ENTERED

Name: _NOT_ENTERED Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
_status_4(uint256) := _NOT_ENTERED_2(uint256)
[i] _status cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _NOT_ENTERED_2, name: _NOT_ENTERED

Name: _NOT_ENTERED Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _NOT_ENTERED_2, name: _NOT_ENTERED

Name: _NOT_ENTERED Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _status_4, name: _status

Name: _status Function: _nonReentrantAfter
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _status, Num: 4
Globalname: _status, contract_name: BasePool
global...

Name: _status Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
_status_4(uint256) := _NOT_ENTERED_2(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _status

Name: _status Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _status
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
INTERNAL_CALL, ReentrancyGuard._nonReentrantBefore()()
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, ReentrancyGuard._nonReentrantBefore()()
New param cache []
Old param cache: []
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
INTERNAL_CALL, ReentrancyGuard._nonReentrantAfter()()
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, ReentrancyGuard._nonReentrantAfter()()
New param cache []
Old param cache: []
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TUPLE_0(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
[i] TUPLE_0 cleared
clearing ir...?
reserveNative_1(uint112)= UNPACK TUPLE_0 index: 0 
[i] reserveNative cleared
clearing ir...?
reserveForeign_1(uint112)= UNPACK TUPLE_0 index: 1 
[i] reserveForeign cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveNative_1, name: reserveNative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserveNative, Num: 1
Globalname: reserveNative, contract_name: BasePool
Ssa_name: reserveForeign_1, name: reserveForeign

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserveForeign, Num: 1
Globalname: reserveForeign, contract_name: BasePool
End popogation
TUPLE_0(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
New param cache []
FIND RETURN
ENTRY_POINT
getReserves()
ENTRY_POINT
Propogating All
EXPRESSION reserveNative = _reserveNative
Propogating All
EXPRESSION reserveForeign = _reserveForeign
Propogating All
EXPRESSION blockTimestampLast = _blockTimestampLast
Propogating All
RETURN (reserveNative,reserveForeign,blockTimestampLast)
Propogating All
reserveNative_1
Ssa_name: reserveNative_1, name: reserveNative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
blockTimestampLast_1
Ssa_name: blockTimestampLast_1, name: blockTimestampLast

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserveForeign_1
Ssa_name: reserveForeign_1, name: reserveForeign

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
_reserveNative_1(uint112) := ϕ(['_reserveNative_0', '_reserveNative_2'])
[i] _reserveNative cleared
clearing ir...?
_reserveForeign_1(uint112) := ϕ(['_reserveForeign_0', '_reserveForeign_2'])
[i] _reserveForeign cleared
clearing ir...?
_blockTimestampLast_1(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _reserveNative_1, name: _reserveNative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveNative, Num: 1
Globalname: _reserveNative, contract_name: BasePool
global...

Name: PIC_42 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _reserveForeign_1, name: _reserveForeign

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveForeign, Num: 1
Globalname: _reserveForeign, contract_name: BasePool
global...

Name: PIC_41 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _blockTimestampLast_1, name: _blockTimestampLast

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 1
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: PIC_38 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
_reserveNative_1(uint112) := ϕ(['_reserveNative_0', '_reserveNative_2'])
Phi
[i]Type for _reserveNative

Name: _reserveNative Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserveForeign_1(uint112) := ϕ(['_reserveForeign_0', '_reserveForeign_2'])
Phi
[i]Type for _reserveForeign

Name: _reserveForeign Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_blockTimestampLast_1(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
Phi
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
reserveNative_1(uint112) := _reserveNative_1(uint112)
[i] reserveNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _reserveNative_1, name: _reserveNative

Name: _reserveNative Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _reserveNative_1, name: _reserveNative

Name: _reserveNative Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserveNative, Num: 1
Globalname: reserveNative, contract_name: BasePool
End popogation
reserveNative_1(uint112) := _reserveNative_1(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for reserveNative

Name: reserveNative Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
reserveForeign_1(uint112) := _reserveForeign_1(uint112)
[i] reserveForeign cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _reserveForeign_1, name: _reserveForeign

Name: _reserveForeign Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _reserveForeign_1, name: _reserveForeign

Name: _reserveForeign Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserveForeign, Num: 1
Globalname: reserveForeign, contract_name: BasePool
End popogation
reserveForeign_1(uint112) := _reserveForeign_1(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for reserveForeign

Name: reserveForeign Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
blockTimestampLast_1(uint32) := _blockTimestampLast_1(uint32)
[i] blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _blockTimestampLast_1, name: _blockTimestampLast

Name: _blockTimestampLast Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _blockTimestampLast_1, name: _blockTimestampLast

Name: _blockTimestampLast Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestampLast_1, name: blockTimestampLast

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestampLast, Num: 1
Globalname: blockTimestampLast, contract_name: BasePool
End popogation
blockTimestampLast_1(uint32) := _blockTimestampLast_1(uint32)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
RETURN reserveNative_1,reserveForeign_1,blockTimestampLast_1
Propogating parameters and globals to SSA variables...
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestampLast_1, name: blockTimestampLast

Name: blockTimestampLast Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestampLast_1, name: blockTimestampLast

Name: blockTimestampLast Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
RETURN reserveNative_1,reserveForeign_1,blockTimestampLast_1
RETURN

Name: reserveNative Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: reserveForeign Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: blockTimestampLast Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
_reserveNative_1(uint112) := ϕ(['_reserveNative_0', '_reserveNative_2'])
[i] _reserveNative cleared
clearing ir...?
_reserveForeign_1(uint112) := ϕ(['_reserveForeign_0', '_reserveForeign_2'])
[i] _reserveForeign cleared
clearing ir...?
_blockTimestampLast_1(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _reserveNative_1, name: _reserveNative

Name: _reserveNative Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveNative, Num: 1
Globalname: _reserveNative, contract_name: BasePool
global...

Name: PIC_42 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _reserveForeign_1, name: _reserveForeign

Name: _reserveForeign Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveForeign, Num: 1
Globalname: _reserveForeign, contract_name: BasePool
global...

Name: PIC_41 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _blockTimestampLast_1, name: _blockTimestampLast

Name: _blockTimestampLast Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 1
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: PIC_38 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
_reserveNative_1(uint112) := ϕ(['_reserveNative_0', '_reserveNative_2'])
Phi
[i]Type for _reserveNative

Name: _reserveNative Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserveForeign_1(uint112) := ϕ(['_reserveForeign_0', '_reserveForeign_2'])
Phi
[i]Type for _reserveForeign

Name: _reserveForeign Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_blockTimestampLast_1(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
Phi
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
reserveNative_1(uint112) := _reserveNative_1(uint112)
[i] reserveNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _reserveNative_1, name: _reserveNative

Name: _reserveNative Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _reserveNative_1, name: _reserveNative

Name: _reserveNative Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserveNative, Num: 1
Globalname: reserveNative, contract_name: BasePool
End popogation
reserveNative_1(uint112) := _reserveNative_1(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for reserveNative

Name: reserveNative Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
reserveForeign_1(uint112) := _reserveForeign_1(uint112)
[i] reserveForeign cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _reserveForeign_1, name: _reserveForeign

Name: _reserveForeign Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _reserveForeign_1, name: _reserveForeign

Name: _reserveForeign Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserveForeign, Num: 1
Globalname: reserveForeign, contract_name: BasePool
End popogation
reserveForeign_1(uint112) := _reserveForeign_1(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for reserveForeign

Name: reserveForeign Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
blockTimestampLast_1(uint32) := _blockTimestampLast_1(uint32)
[i] blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _blockTimestampLast_1, name: _blockTimestampLast

Name: _blockTimestampLast Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _blockTimestampLast_1, name: _blockTimestampLast

Name: _blockTimestampLast Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestampLast_1, name: blockTimestampLast

Name: blockTimestampLast Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestampLast, Num: 1
Globalname: blockTimestampLast, contract_name: BasePool
End popogation
blockTimestampLast_1(uint32) := _blockTimestampLast_1(uint32)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
RETURN reserveNative_1,reserveForeign_1,blockTimestampLast_1
Propogating parameters and globals to SSA variables...
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestampLast_1, name: blockTimestampLast

Name: blockTimestampLast Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestampLast_1, name: blockTimestampLast

Name: blockTimestampLast Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
RETURN reserveNative_1,reserveForeign_1,blockTimestampLast_1
RETURN

Name: reserveNative Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: reserveForeign Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: blockTimestampLast Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TUPLE_0

Name: TUPLE_0 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveNative_1(uint112)= UNPACK TUPLE_0 index: 0 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for reserveNative

Name: reserveNative Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint112)= UNPACK TUPLE_0 index: 1 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for reserveForeign

Name: reserveForeign Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_139 = CONVERT this to address
[i] TMP_139 cleared
clearing ir...?
TMP_140(uint256) = HIGH_LEVEL_CALL, dest:nativeAsset_4(IERC20), function:balanceOf, arguments:['TMP_139']  
[i] TMP_140 cleared
clearing ir...?
nativeAsset_5(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_4'])
[i] nativeAsset cleared
clearing ir...?
foreignAsset_5(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_4', 'foreignAsset_6', 'foreignAsset_10'])
[i] foreignAsset cleared
clearing ir...?
positionId_4(uint256) := ϕ(['positionId_6', 'positionId_3'])
[i] positionId cleared
clearing ir...?
totalSupply_4(uint256) := ϕ(['totalSupply_3', 'totalSupply_13', 'totalSupply_6'])
[i] totalSupply cleared
clearing ir...?
balanceNative_1(uint256) := TMP_140(uint256)
[i] balanceNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAsset_4, name: nativeAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAsset, Num: 4
Globalname: nativeAsset, contract_name: BasePool
global...

Name: PIC_32 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: nativeAsset_4, name: nativeAsset

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: balanceNative_1, name: balanceNative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: balanceNative, Num: 1
Globalname: balanceNative, contract_name: BasePool
End popogation
Ssa_name: nativeAsset_5, name: nativeAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAsset, Num: 5
Globalname: nativeAsset, contract_name: BasePool
global...

Name: PIC_32 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: foreignAsset_5, name: foreignAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAsset, Num: 5
Globalname: foreignAsset, contract_name: BasePool
global...

Name: PIC_31 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: positionId_4, name: positionId

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: positionId, Num: 4
Globalname: positionId, contract_name: BasePool
global...

Name: PIC_33 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: totalSupply_4, name: totalSupply

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: totalSupply, Num: 4
Globalname: totalSupply, contract_name: BasePool
global...

Name: PIC_34 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_139 = CONVERT this to address
Converting this
new address made for this
prev address? u
global assignment: 6
6
6
[i]Type for TMP_139

Name: TMP_139 Function: mint
Num: -1
Den: -1
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_140(uint256) = HIGH_LEVEL_CALL, dest:nativeAsset_4(IERC20), function:balanceOf, arguments:['TMP_139']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
u
prev address? u
global assignment: 7
7
[i]Type for TMP_140

Name: TMP_140 Function: mint
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
nativeAsset_5(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_4'])
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAsset_5(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_4', 'foreignAsset_6', 'foreignAsset_10'])
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positionId_4(uint256) := ϕ(['positionId_6', 'positionId_3'])
Phi
[i]Type for positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalSupply_4(uint256) := ϕ(['totalSupply_3', 'totalSupply_13', 'totalSupply_6'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceNative_1(uint256) := TMP_140(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for balanceNative

Name: balanceNative Function: mint
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_141 = CONVERT this to address
[i] TMP_141 cleared
clearing ir...?
TMP_142(uint256) = HIGH_LEVEL_CALL, dest:foreignAsset_5(IERC20), function:balanceOf, arguments:['TMP_141']  
[i] TMP_142 cleared
clearing ir...?
foreignAsset_6(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_5'])
[i] foreignAsset cleared
clearing ir...?
positionId_5(uint256) := ϕ(['positionId_4', 'positionId_6'])
[i] positionId cleared
clearing ir...?
totalSupply_5(uint256) := ϕ(['totalSupply_13', 'totalSupply_6', 'totalSupply_4'])
[i] totalSupply cleared
clearing ir...?
balanceForeign_1(uint256) := TMP_142(uint256)
[i] balanceForeign cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAsset_5, name: foreignAsset

Name: foreignAsset Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAsset_5, name: foreignAsset

Name: foreignAsset Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: balanceForeign_1, name: balanceForeign

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: balanceForeign, Num: 1
Globalname: balanceForeign, contract_name: BasePool
End popogation
Ssa_name: foreignAsset_6, name: foreignAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAsset, Num: 6
Globalname: foreignAsset, contract_name: BasePool
global...

Name: PIC_31 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: positionId_5, name: positionId

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: positionId, Num: 5
Globalname: positionId, contract_name: BasePool
global...

Name: PIC_33 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: totalSupply_5, name: totalSupply

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: totalSupply, Num: 5
Globalname: totalSupply, contract_name: BasePool
global...

Name: PIC_34 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_141 = CONVERT this to address
Converting this
6
[i]Type for TMP_141

Name: TMP_141 Function: mint
Num: -1
Den: -1
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_142(uint256) = HIGH_LEVEL_CALL, dest:foreignAsset_5(IERC20), function:balanceOf, arguments:['TMP_141']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
u
prev address? u
global assignment: 8
8
[i]Type for TMP_142

Name: TMP_142 Function: mint
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
foreignAsset_6(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_5'])
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positionId_5(uint256) := ϕ(['positionId_4', 'positionId_6'])
Phi
[i]Type for positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalSupply_5(uint256) := ϕ(['totalSupply_13', 'totalSupply_6', 'totalSupply_4'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceForeign_1(uint256) := TMP_142(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for balanceForeign

Name: balanceForeign Function: mint
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_143(uint256) = balanceNative_1 (c)- reserveNative_1
[i] TMP_143 cleared
clearing ir...?
nativeDeposit_1(uint256) := TMP_143(uint256)
[i] nativeDeposit cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: mint
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: mint
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeDeposit_1, name: nativeDeposit

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeDeposit, Num: 1
Globalname: nativeDeposit, contract_name: BasePool
End popogation
TMP_143(uint256) = balanceNative_1 (c)- reserveNative_1
Source address: u
[i]Type for TMP_143

Name: TMP_143 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
nativeDeposit_1(uint256) := TMP_143(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for nativeDeposit

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_144(uint256) = balanceForeign_1 (c)- reserveForeign_1
[i] TMP_144 cleared
clearing ir...?
foreignDeposit_1(uint256) := TMP_144(uint256)
[i] foreignDeposit cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: mint
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: mint
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignDeposit_1, name: foreignDeposit

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignDeposit, Num: 1
Globalname: foreignDeposit, contract_name: BasePool
End popogation
TMP_144(uint256) = balanceForeign_1 (c)- reserveForeign_1
Source address: u
[i]Type for TMP_144

Name: TMP_144 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
foreignDeposit_1(uint256) := TMP_144(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for foreignDeposit

Name: foreignDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
totalLiquidityUnits_1(uint256) := totalSupply_5(uint256)
[i] totalLiquidityUnits cleared
Propogating parameters and globals to SSA variables...
Ssa_name: totalSupply_5, name: totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalSupply_5, name: totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalLiquidityUnits_1, name: totalLiquidityUnits

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: totalLiquidityUnits, Num: 1
Globalname: totalLiquidityUnits, contract_name: BasePool
End popogation
totalLiquidityUnits_1(uint256) := totalSupply_5(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for totalLiquidityUnits

Name: totalLiquidityUnits Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_145(bool) = totalLiquidityUnits_1 == 0
[i] TMP_145 cleared
clearing ir...?
CONDITION TMP_145
Propogating parameters and globals to SSA variables...
Ssa_name: totalLiquidityUnits_1, name: totalLiquidityUnits

Name: totalLiquidityUnits Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalLiquidityUnits_1, name: totalLiquidityUnits

Name: totalLiquidityUnits Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_145(bool) = totalLiquidityUnits_1 == 0
[i]Type for TMP_145

Name: TMP_145 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
liquidity_1(uint256) := nativeDeposit_1(uint256)
[i] liquidity cleared
Propogating parameters and globals to SSA variables...
Ssa_name: nativeDeposit_1, name: nativeDeposit

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeDeposit_1, name: nativeDeposit

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: liquidity_1, name: liquidity

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: liquidity, Num: 1
Globalname: liquidity, contract_name: BasePool
End popogation
liquidity_1(uint256) := nativeDeposit_1(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_146(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateLiquidityUnits(uint256,uint256,uint256,uint256,uint256), arguments:['nativeDeposit_1', 'reserveNative_1', 'foreignDeposit_1', 'reserveForeign_1', 'totalLiquidityUnits_1'] 
[i] TMP_146 cleared
clearing ir...?
liquidity_2(uint256) := TMP_146(uint256)
[i] liquidity cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalLiquidityUnits_1, name: totalLiquidityUnits

Name: totalLiquidityUnits Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeDeposit_1, name: nativeDeposit

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignDeposit_1, name: foreignDeposit

Name: foreignDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalLiquidityUnits_1, name: totalLiquidityUnits

Name: totalLiquidityUnits Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeDeposit_1, name: nativeDeposit

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignDeposit_1, name: foreignDeposit

Name: foreignDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: liquidity_2, name: liquidity

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: liquidity, Num: 2
Globalname: liquidity, contract_name: BasePool
End popogation
TMP_146(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateLiquidityUnits(uint256,uint256,uint256,uint256,uint256), arguments:['nativeDeposit_1', 'reserveNative_1', 'foreignDeposit_1', 'reserveForeign_1', 'totalLiquidityUnits_1'] 
Found: calculateLiquidityUnits

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: reserveNative Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: foreignDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: reserveForeign Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: totalLiquidityUnits Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: 0
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: 0
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 4
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
New param cache [[[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
Param: vaderDeposited
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: vaderDeposited Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: vaderBalance
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: vaderBalance Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: assetDeposited
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: assetDeposited Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: assetBalance
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: assetBalance Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: totalPoolUnits
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: totalPoolUnits Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
calculateLiquidityUnits(uint256,uint256,uint256,uint256,uint256)
ENTRY_POINT
Propogating All
NEW VARIABLE slip = calculateSlipAdjustment(vaderDeposited,vaderBalance,assetDeposited,assetBalance)
Propogating All
vaderBalance_1
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
vaderDeposited_1
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
assetDeposited_1
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
assetBalance_1
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE poolUnitFactor = (vaderBalance * assetDeposited) + (vaderDeposited * assetBalance)
Propogating All
vaderBalance_1
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
vaderDeposited_1
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
assetDeposited_1
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
assetBalance_1
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE denominator = ONE * 2 * vaderBalance * assetBalance
Propogating All
vaderBalance_1
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
assetBalance_1
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
RETURN ((totalPoolUnits * poolUnitFactor) / denominator) * slip
Propogating All
totalPoolUnits_1
Ssa_name: totalPoolUnits_1, name: totalPoolUnits

Name: totalPoolUnits_1 Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: totalPoolUnits_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
slip_1
Ssa_name: slip_1, name: slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
denominator_1
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
poolUnitFactor_1
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
ONE_1(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
[i] ONE cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: ONE_1, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 1
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
ONE_1(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
Phi
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
[i] TMP_0 cleared
clearing ir...?
ONE_2(uint256) := ϕ(['ONE_4'])
[i] ONE cleared
clearing ir...?
slip_1(uint256) := TMP_0(uint256)
[i] slip cleared
Propogating parameters and globals to SSA variables...
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: slip_1, name: slip

Name: slip Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: slip, Num: 1
Globalname: slip, contract_name: VaderMath
End popogation
Ssa_name: ONE_2, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 2
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
New param cache [[[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u']]
Param: vaderDeposited
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: vaderBalance
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: assetDeposited
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: assetBalance
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
calculateSlipAdjustment(uint256,uint256,uint256,uint256)
ENTRY_POINT
Propogating All
NEW VARIABLE vaderAsset = vaderBalance * assetDeposited
Propogating All
assetDeposited_1
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
vaderBalance_1
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE assetVader = assetBalance * vaderDeposited
Propogating All
assetBalance_1
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
vaderDeposited_1
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
NEW VARIABLE denominator = (vaderDeposited + vaderBalance) * (assetDeposited + assetBalance)
Propogating All
assetBalance_1
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
assetDeposited_1
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
vaderBalance_1
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
vaderDeposited_1
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN ONE - (delta(vaderAsset,assetVader) / denominator)
Propogating All
denominator_1
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assetVader_1
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
vaderAsset_1
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i] vaderDeposited cleared
clearing ir...?
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i] vaderBalance cleared
clearing ir...?
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i] assetDeposited cleared
clearing ir...?
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i] assetBalance cleared
clearing ir...?
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
[i] ONE cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: ONE_3, name: ONE

Name: ONE Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 3
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
Phi
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
Phi
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
Phi
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
Phi
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
Phi
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i] TMP_10 cleared
clearing ir...?
vaderAsset_1(uint256) := TMP_10(uint256)
[i] vaderAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
End popogation
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
vaderAsset_1(uint256) := TMP_10(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
[i] TMP_11 cleared
clearing ir...?
assetVader_1(uint256) := TMP_11(uint256)
[i] assetVader cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
End popogation
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
assetVader_1(uint256) := TMP_11(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i] TMP_12 cleared
clearing ir...?
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i] TMP_13 cleared
clearing ir...?
TMP_14(uint256) = TMP_12 (c)* TMP_13
[i] TMP_14 cleared
clearing ir...?
denominator_1(uint256) := TMP_14(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
Source address: u
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
Source address: u
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_14(uint256) = TMP_12 (c)* TMP_13
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
denominator_1(uint256) := TMP_14(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
[i] TMP_15 cleared
clearing ir...?
TMP_16(uint256) = TMP_15 (c)/ denominator_1
[i] TMP_16 cleared
clearing ir...?
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i] TMP_17 cleared
clearing ir...?
RETURN TMP_17
Propogating parameters and globals to SSA variables...
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
New param cache [[[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], 0, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u']]
Param: a
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: b
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
FIND RETURN
ENTRY_POINT
delta(uint256,uint256)
ENTRY_POINT
Propogating All
IF a > b
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN b - a
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN a - b
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: b_1, name: b

Name: b Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
([-1], [-1], 'u', 'u', 'u', 0)
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_16(uint256) = TMP_15 (c)/ denominator_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_17(uint256) = ONE_4 (c)- TMP_16
Source address: u
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_17
RETURN

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i] vaderDeposited cleared
clearing ir...?
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i] vaderBalance cleared
clearing ir...?
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i] assetDeposited cleared
clearing ir...?
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i] assetBalance cleared
clearing ir...?
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
[i] ONE cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: ONE_3, name: ONE

Name: ONE Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 3
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
Phi
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
Phi
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
Phi
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
Phi
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
Phi
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i] TMP_10 cleared
clearing ir...?
vaderAsset_1(uint256) := TMP_10(uint256)
[i] vaderAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
End popogation
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
vaderAsset_1(uint256) := TMP_10(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
[i] TMP_11 cleared
clearing ir...?
assetVader_1(uint256) := TMP_11(uint256)
[i] assetVader cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
End popogation
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
assetVader_1(uint256) := TMP_11(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i] TMP_12 cleared
clearing ir...?
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i] TMP_13 cleared
clearing ir...?
TMP_14(uint256) = TMP_12 (c)* TMP_13
[i] TMP_14 cleared
clearing ir...?
denominator_1(uint256) := TMP_14(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
Source address: u
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
Source address: u
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_14(uint256) = TMP_12 (c)* TMP_13
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
denominator_1(uint256) := TMP_14(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
[i] TMP_15 cleared
clearing ir...?
TMP_16(uint256) = TMP_15 (c)/ denominator_1
[i] TMP_16 cleared
clearing ir...?
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i] TMP_17 cleared
clearing ir...?
RETURN TMP_17
Propogating parameters and globals to SSA variables...
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
New param cache [[[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], 0, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u']]
Param: a
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: b
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
FIND RETURN
ENTRY_POINT
delta(uint256,uint256)
ENTRY_POINT
Propogating All
IF a > b
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN b - a
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN a - b
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: b_1, name: b

Name: b Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
([-1], [-1], 'u', 'u', 'u', 0)
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_16(uint256) = TMP_15 (c)/ denominator_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_17(uint256) = ONE_4 (c)- TMP_16
Source address: u
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_17
RETURN

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
Source address: u
[i]Type for TMP_0

Name: TMP_0 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
ONE_2(uint256) := ϕ(['ONE_4'])
Phi
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
slip_1(uint256) := TMP_0(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i] TMP_1 cleared
clearing ir...?
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
[i] TMP_2 cleared
clearing ir...?
TMP_3(uint256) = TMP_1 (c)+ TMP_2
[i] TMP_3 cleared
clearing ir...?
poolUnitFactor_1(uint256) := TMP_3(uint256)
[i] poolUnitFactor cleared
Propogating parameters and globals to SSA variables...
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolUnitFactor, Num: 1
Globalname: poolUnitFactor, contract_name: VaderMath
End popogation
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_1

Name: TMP_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_2

Name: TMP_2 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_3(uint256) = TMP_1 (c)+ TMP_2
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_3

Name: TMP_3 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
poolUnitFactor_1(uint256) := TMP_3(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_4(uint256) = ONE_2 (c)* 2
[i] TMP_4 cleared
clearing ir...?
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
[i] TMP_5 cleared
clearing ir...?
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
[i] TMP_6 cleared
clearing ir...?
denominator_1(uint256) := TMP_6(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: ONE_2, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: ONE_2, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_4(uint256) = ONE_2 (c)* 2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_4

Name: TMP_4 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
A: 0 B: u
lnorm: 0 rnorm: u
Source address: u
[i]Type for TMP_5

Name: TMP_5 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
A: 0 B: u
lnorm: 0 rnorm: u
Source address: u
[i]Type for TMP_6

Name: TMP_6 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
denominator_1(uint256) := TMP_6(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
[i] TMP_7 cleared
clearing ir...?
TMP_8(uint256) = TMP_7 (c)/ denominator_1
[i] TMP_8 cleared
clearing ir...?
TMP_9(uint256) = TMP_8 (c)* slip_1
[i] TMP_9 cleared
clearing ir...?
RETURN TMP_9
Propogating parameters and globals to SSA variables...
Ssa_name: totalPoolUnits_1, name: totalPoolUnits

Name: totalPoolUnits_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: slip_1, name: slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: totalPoolUnits_1, name: totalPoolUnits

Name: totalPoolUnits_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: slip_1, name: slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_7

Name: TMP_7 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_8(uint256) = TMP_7 (c)/ denominator_1
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_8

Name: TMP_8 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: raw balance
XXXX
TMP_9(uint256) = TMP_8 (c)* slip_1
A: 0 B: u
lnorm: 0 rnorm: u
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_9

Name: TMP_9 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_9
RETURN

Name: TMP_9 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: raw balance
clearing ir...?
ONE_1(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
[i] ONE cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: ONE_1, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 1
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
ONE_1(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
Phi
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
[i] TMP_0 cleared
clearing ir...?
ONE_2(uint256) := ϕ(['ONE_4'])
[i] ONE cleared
clearing ir...?
slip_1(uint256) := TMP_0(uint256)
[i] slip cleared
Propogating parameters and globals to SSA variables...
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: slip_1, name: slip

Name: slip Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: slip, Num: 1
Globalname: slip, contract_name: VaderMath
End popogation
Ssa_name: ONE_2, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 2
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
New param cache [[[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u']]
Param: vaderDeposited
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: vaderBalance
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: assetDeposited
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: assetBalance
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
calculateSlipAdjustment(uint256,uint256,uint256,uint256)
ENTRY_POINT
Propogating All
NEW VARIABLE vaderAsset = vaderBalance * assetDeposited
Propogating All
assetDeposited_1
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
vaderBalance_1
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE assetVader = assetBalance * vaderDeposited
Propogating All
assetBalance_1
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
vaderDeposited_1
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
NEW VARIABLE denominator = (vaderDeposited + vaderBalance) * (assetDeposited + assetBalance)
Propogating All
assetBalance_1
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
assetDeposited_1
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
vaderBalance_1
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
vaderDeposited_1
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN ONE - (delta(vaderAsset,assetVader) / denominator)
Propogating All
denominator_1
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetVader_1
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
vaderAsset_1
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i] vaderDeposited cleared
clearing ir...?
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i] vaderBalance cleared
clearing ir...?
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i] assetDeposited cleared
clearing ir...?
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i] assetBalance cleared
clearing ir...?
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
[i] ONE cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: ONE_3, name: ONE

Name: ONE Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 3
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
Phi
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
Phi
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
Phi
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
Phi
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
Phi
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i] TMP_10 cleared
clearing ir...?
vaderAsset_1(uint256) := TMP_10(uint256)
[i] vaderAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
End popogation
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
vaderAsset_1(uint256) := TMP_10(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
[i] TMP_11 cleared
clearing ir...?
assetVader_1(uint256) := TMP_11(uint256)
[i] assetVader cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
End popogation
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
assetVader_1(uint256) := TMP_11(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i] TMP_12 cleared
clearing ir...?
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i] TMP_13 cleared
clearing ir...?
TMP_14(uint256) = TMP_12 (c)* TMP_13
[i] TMP_14 cleared
clearing ir...?
denominator_1(uint256) := TMP_14(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
Source address: u
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
Source address: u
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_14(uint256) = TMP_12 (c)* TMP_13
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
denominator_1(uint256) := TMP_14(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
[i] TMP_15 cleared
clearing ir...?
TMP_16(uint256) = TMP_15 (c)/ denominator_1
[i] TMP_16 cleared
clearing ir...?
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i] TMP_17 cleared
clearing ir...?
RETURN TMP_17
Propogating parameters and globals to SSA variables...
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
New param cache [[[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], 0, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u']]
Param: a
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: b
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
FIND RETURN
ENTRY_POINT
delta(uint256,uint256)
ENTRY_POINT
Propogating All
IF a > b
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN b - a
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN a - b
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: b_1, name: b

Name: b Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
([-1], [-1], 'u', 'u', 'u', 0)
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_16(uint256) = TMP_15 (c)/ denominator_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_17(uint256) = ONE_4 (c)- TMP_16
Source address: u
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_17
RETURN

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i] vaderDeposited cleared
clearing ir...?
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i] vaderBalance cleared
clearing ir...?
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i] assetDeposited cleared
clearing ir...?
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i] assetBalance cleared
clearing ir...?
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
[i] ONE cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: ONE_3, name: ONE

Name: ONE Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 3
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
Phi
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
Phi
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
Phi
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
Phi
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
Phi
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i] TMP_10 cleared
clearing ir...?
vaderAsset_1(uint256) := TMP_10(uint256)
[i] vaderAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
End popogation
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
vaderAsset_1(uint256) := TMP_10(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
[i] TMP_11 cleared
clearing ir...?
assetVader_1(uint256) := TMP_11(uint256)
[i] assetVader cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
End popogation
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
assetVader_1(uint256) := TMP_11(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i] TMP_12 cleared
clearing ir...?
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i] TMP_13 cleared
clearing ir...?
TMP_14(uint256) = TMP_12 (c)* TMP_13
[i] TMP_14 cleared
clearing ir...?
denominator_1(uint256) := TMP_14(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
Source address: u
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
Source address: u
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_14(uint256) = TMP_12 (c)* TMP_13
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
denominator_1(uint256) := TMP_14(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
[i] TMP_15 cleared
clearing ir...?
TMP_16(uint256) = TMP_15 (c)/ denominator_1
[i] TMP_16 cleared
clearing ir...?
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i] TMP_17 cleared
clearing ir...?
RETURN TMP_17
Propogating parameters and globals to SSA variables...
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
New param cache [[[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], 0, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u']]
Param: a
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: b
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
FIND RETURN
ENTRY_POINT
delta(uint256,uint256)
ENTRY_POINT
Propogating All
IF a > b
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN b - a
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN a - b
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: b_1, name: b

Name: b Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
([-1], [-1], 'u', 'u', 'u', 0)
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_16(uint256) = TMP_15 (c)/ denominator_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_17(uint256) = ONE_4 (c)- TMP_16
Source address: u
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_17
RETURN

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
Source address: u
[i]Type for TMP_0

Name: TMP_0 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
ONE_2(uint256) := ϕ(['ONE_4'])
Phi
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
slip_1(uint256) := TMP_0(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i] TMP_1 cleared
clearing ir...?
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
[i] TMP_2 cleared
clearing ir...?
TMP_3(uint256) = TMP_1 (c)+ TMP_2
[i] TMP_3 cleared
clearing ir...?
poolUnitFactor_1(uint256) := TMP_3(uint256)
[i] poolUnitFactor cleared
Propogating parameters and globals to SSA variables...
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolUnitFactor, Num: 1
Globalname: poolUnitFactor, contract_name: VaderMath
End popogation
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_1

Name: TMP_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_2

Name: TMP_2 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_3(uint256) = TMP_1 (c)+ TMP_2
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_3

Name: TMP_3 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
poolUnitFactor_1(uint256) := TMP_3(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_4(uint256) = ONE_2 (c)* 2
[i] TMP_4 cleared
clearing ir...?
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
[i] TMP_5 cleared
clearing ir...?
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
[i] TMP_6 cleared
clearing ir...?
denominator_1(uint256) := TMP_6(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: ONE_2, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: ONE_2, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_4(uint256) = ONE_2 (c)* 2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_4

Name: TMP_4 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
A: 0 B: u
lnorm: 0 rnorm: u
Source address: u
[i]Type for TMP_5

Name: TMP_5 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
A: 0 B: u
lnorm: 0 rnorm: u
Source address: u
[i]Type for TMP_6

Name: TMP_6 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
denominator_1(uint256) := TMP_6(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
[i] TMP_7 cleared
clearing ir...?
TMP_8(uint256) = TMP_7 (c)/ denominator_1
[i] TMP_8 cleared
clearing ir...?
TMP_9(uint256) = TMP_8 (c)* slip_1
[i] TMP_9 cleared
clearing ir...?
RETURN TMP_9
Propogating parameters and globals to SSA variables...
Ssa_name: totalPoolUnits_1, name: totalPoolUnits

Name: totalPoolUnits_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: slip_1, name: slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: totalPoolUnits_1, name: totalPoolUnits

Name: totalPoolUnits_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: slip_1, name: slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_7

Name: TMP_7 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_8(uint256) = TMP_7 (c)/ denominator_1
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_8

Name: TMP_8 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: raw balance
XXXX
TMP_9(uint256) = TMP_8 (c)* slip_1
A: 0 B: u
lnorm: 0 rnorm: u
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_9

Name: TMP_9 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_9
RETURN

Name: TMP_9 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: raw balance
Source address: u
Source address: u
[i]Type for TMP_146

Name: TMP_146 Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: raw balance
XXXX
liquidity_2(uint256) := TMP_146(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
liquidity_3(uint256) := ϕ(['liquidity_1', 'liquidity_2'])
[i] liquidity cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: liquidity_3, name: liquidity

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: liquidity, Num: 3
Globalname: liquidity, contract_name: BasePool
liquidity_3(uint256) := ϕ(['liquidity_1', 'liquidity_2'])
Phi

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: raw balance


END==================================
[i]Type for liquidity

Name: liquidity Function: mint
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_147(bool) = liquidity_3 > 0
[i] TMP_147 cleared
clearing ir...?
TMP_148(None) = SOLIDITY_CALL require(bool,string)(TMP_147,BasePool::mint: Insufficient Liquidity Provided)
Propogating parameters and globals to SSA variables...
Ssa_name: liquidity_3, name: liquidity

Name: liquidity Function: mint
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Name: liquidity, Num: 3
Globalname: liquidity, contract_name: BasePool
Ssa_name: liquidity_3, name: liquidity

Name: liquidity Function: mint
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Name: liquidity, Num: 3
Globalname: liquidity, contract_name: BasePool
End popogation
TMP_147(bool) = liquidity_3 > 0
A: 0 B: 0
lnorm: 0 rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_147

Name: TMP_147 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_148(None) = SOLIDITY_CALL require(bool,string)(TMP_147,BasePool::mint: Insufficient Liquidity Provided)
[i]Type for TMP_148

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_149(uint256) := positionId_5(uint256)
[i] TMP_149 cleared
clearing ir...?
positionId_6(uint256) = positionId_5 (c)+ 1
[i] positionId cleared
clearing ir...?
id_1(uint256) := TMP_149(uint256)
[i] id cleared
Propogating parameters and globals to SSA variables...
Ssa_name: positionId_5, name: positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: positionId_5, name: positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: positionId_6, name: positionId

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: positionId, Num: 6
Globalname: positionId, contract_name: BasePool
global...

Name: PIC_33 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: id_1, name: id

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: id, Num: 1
Globalname: id, contract_name: BasePool
End popogation
TMP_149(uint256) := positionId_5(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_149

Name: TMP_149 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positionId_6(uint256) = positionId_5 (c)+ 1
Source address: u
[i]Type for positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
id_1(uint256) := TMP_149(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for id

Name: id Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positionId
Source address: u
clearing ir...?
totalSupply_6(uint256) = totalSupply_5 (c)+ liquidity_3
[i] totalSupply cleared
Propogating parameters and globals to SSA variables...
Ssa_name: liquidity_3, name: liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: totalSupply_5, name: totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalSupply_5, name: totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: liquidity_3, name: liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: totalSupply_6, name: totalSupply

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: totalSupply, Num: 6
Globalname: totalSupply, contract_name: BasePool
global...

Name: PIC_34 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
totalSupply_6(uint256) = totalSupply_5 (c)+ liquidity_3
Source address: u
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied totalSupply
Source address: u
clearing ir...?
INTERNAL_CALL, ERC721._mint(address,uint256)(to_1,id_1)
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: id_1, name: id

Name: id Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to_1 Function: mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: id_1, name: id

Name: id Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, ERC721._mint(address,uint256)(to_1,id_1)
New param cache [[[], [], 0, 'to', [], -1, -998, 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Param: to
[[], [], 0, 'to', [], -1, -998, 'u']

Name: to Function: None
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Param: tokenId
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: tokenId Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_mint(address,uint256)
ENTRY_POINT
Propogating All
EXPRESSION require(bool,string)(to != address(0),ERC721: mint to the zero address)
Propogating All
to_1
Ssa_name: to_1, name: to

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION require(bool,string)(! _exists(tokenId),ERC721: token already minted)
Propogating All
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION _beforeTokenTransfer(address(0),to,tokenId,1)
Propogating All
to_1
Ssa_name: to_1, name: to

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION require(bool,string)(! _exists(tokenId),ERC721: token already minted)
Propogating All
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION _balances[to] += 1
Propogating All
to_1
Ssa_name: to_1, name: to

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION _owners[tokenId] = to
Propogating All
to_1
Ssa_name: to_1, name: to

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION Transfer(address(0),to,tokenId)
Propogating All
to_1
Ssa_name: to_1, name: to

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION _afterTokenTransfer(address(0),to,tokenId,1)
Propogating All
to_1
Ssa_name: to_1, name: to

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1'])
[i] to cleared
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'id_1'])
[i] tokenId cleared
clearing ir...?
_balances_2(mapping(address => uint256)) := ϕ(['_balances_17', '_balances_11', '_balances_1', '_balances_6', '_balances_19', '_balances_0'])
[i] _balances cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: to_1, name: to

Name: to_1 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _balances_2, name: _balances

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _balances, Num: 2
Globalname: _balances, contract_name: BasePool
global...

Name: PIC_25 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
to_1(address) := ϕ(['to_1', 'to_1'])
Phi
[i]Type for to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
tokenId_1(uint256) := ϕ(['tokenId_1', 'id_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_balances_2(mapping(address => uint256)) := ϕ(['_balances_17', '_balances_11', '_balances_1', '_balances_6', '_balances_19', '_balances_0'])
Phi
[i]Type for _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_79 = CONVERT 0 to address
[i] TMP_79 cleared
clearing ir...?
TMP_80(bool) = to_1 != TMP_79
[i] TMP_80 cleared
clearing ir...?
TMP_81(None) = SOLIDITY_CALL require(bool,string)(TMP_80,ERC721: mint to the zero address)
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_79 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_79

Name: TMP_79 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_80(bool) = to_1 != TMP_79
[i]Type for TMP_80

Name: TMP_80 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_81(None) = SOLIDITY_CALL require(bool,string)(TMP_80,ERC721: mint to the zero address)
[i]Type for TMP_81

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_82(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
[i] TMP_82 cleared
clearing ir...?
TMP_83 = ! TMP_82 
clearing ir...?
TMP_84(None) = SOLIDITY_CALL require(bool,string)(TMP_83,ERC721: token already minted)
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_82(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Param: tokenId
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: tokenId Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_exists(uint256)
ENTRY_POINT
Propogating All
RETURN _ownerOf(tokenId) != address(0)
Propogating All
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _exists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _exists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
[i] TMP_64 cleared
clearing ir...?
TMP_65 = CONVERT 0 to address
[i] TMP_65 cleared
clearing ir...?
TMP_66(bool) = TMP_64 != TMP_65
[i] TMP_66 cleared
clearing ir...?
RETURN TMP_66
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Param: tokenId
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: tokenId Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_ownerOf(uint256)
ENTRY_POINT
Propogating All
RETURN _owners[tokenId]
Propogating All
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
clearing ir...?
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
[i] _owners cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owners_1, name: _owners

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 1
Globalname: _owners, contract_name: BasePool
global...

Name: PIC_29 Function: None
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
Phi
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(address) -> _owners_1[tokenId_1]
[i] REF_10 cleared
clearing ir...?
RETURN REF_10
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_10(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_10
RETURN

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
clearing ir...?
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
[i] _owners cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 1
Globalname: _owners, contract_name: BasePool
global...

Name: PIC_29 Function: None
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
Phi
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(address) -> _owners_1[tokenId_1]
[i] REF_10 cleared
clearing ir...?
RETURN REF_10
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_10(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_10
RETURN

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
Source address: 3
[i]Type for TMP_64

Name: TMP_64 Function: _exists
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_65 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_65

Name: TMP_65 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_66(bool) = TMP_64 != TMP_65
[i]Type for TMP_66

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_66
RETURN

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _exists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
[i] TMP_64 cleared
clearing ir...?
TMP_65 = CONVERT 0 to address
[i] TMP_65 cleared
clearing ir...?
TMP_66(bool) = TMP_64 != TMP_65
[i] TMP_66 cleared
clearing ir...?
RETURN TMP_66
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u']]
Source address: 3
[i]Type for TMP_64

Name: TMP_64 Function: _exists
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_65 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_65

Name: TMP_65 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_66(bool) = TMP_64 != TMP_65
[i]Type for TMP_66

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_66
RETURN

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_82

Name: TMP_82 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_83 = ! TMP_82 
[i]Type for TMP_83

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_84(None) = SOLIDITY_CALL require(bool,string)(TMP_83,ERC721: token already minted)
[i]Type for TMP_84

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_85 = CONVERT 0 to address
[i] TMP_85 cleared
clearing ir...?
INTERNAL_CALL, ERC721._beforeTokenTransfer(address,address,uint256,uint256)(TMP_85,to_1,tokenId_1,1)
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_85 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_85

Name: TMP_85 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC721._beforeTokenTransfer(address,address,uint256,uint256)(TMP_85,to_1,tokenId_1,1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 'u'], [[], [], 0, 'to', [], -1, -998, 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 0, None, [], -1, 'u', 'u']]
Param: from
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: from Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
Param: to
[[], [], 0, 'to', [], -1, -998, 'u']

Name: to Function: None
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Param: firstTokenId
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: firstTokenId Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: batchSize
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: batchSize Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_beforeTokenTransfer(address,address,uint256,uint256)
ENTRY_POINT
Propogating All
clearing ir...?
from_1(address) := ϕ(['TMP_85', 'owner_1', 'from_1'])
[i] from cleared
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_95'])
[i] to cleared
clearing ir...?
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
[i] firstTokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: from_1, name: from

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: from_1 Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: to_1, name: to

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _beforeTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: firstTokenId_1, name: firstTokenId

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: firstTokenId_1 Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
from_1(address) := ϕ(['TMP_85', 'owner_1', 'from_1'])
Phi
[i]Type for from

Name: from Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_95'])
Phi
[i]Type for to

Name: to Function: _beforeTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
Phi
[i]Type for firstTokenId

Name: firstTokenId Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
from_1(address) := ϕ(['TMP_85', 'owner_1', 'from_1'])
[i] from cleared
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_95'])
[i] to cleared
clearing ir...?
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
[i] firstTokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: from_1, name: from

Name: from Function: _beforeTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: from_1 Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: to_1, name: to

Name: to Function: _beforeTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _beforeTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: firstTokenId_1, name: firstTokenId

Name: firstTokenId Function: _beforeTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: firstTokenId_1 Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
from_1(address) := ϕ(['TMP_85', 'owner_1', 'from_1'])
Phi
[i]Type for from

Name: from Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_95'])
Phi
[i]Type for to

Name: to Function: _beforeTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
Phi
[i]Type for firstTokenId

Name: firstTokenId Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_87(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
[i] TMP_87 cleared
clearing ir...?
TMP_88 = ! TMP_87 
clearing ir...?
TMP_89(None) = SOLIDITY_CALL require(bool,string)(TMP_88,ERC721: token already minted)
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_87(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u']]
[i]Type for TMP_87

Name: TMP_87 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_88 = ! TMP_87 
[i]Type for TMP_88

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_89(None) = SOLIDITY_CALL require(bool,string)(TMP_88,ERC721: token already minted)
[i]Type for TMP_89

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_12(uint256) -> _balances_5[to_1]
[i] REF_12 cleared
clearing ir...?
_balances_6(mapping(address => uint256)) := ϕ(['_balances_5'])
[i] _balances cleared
clearing ir...?
REF_12(-> _balances_6) = REF_12 + 1
[i] REF_12 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: _balances_6, name: _balances

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _balances, Num: 6
Globalname: _balances, contract_name: BasePool
global...

Name: PIC_25 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: _balances_6, name: _balances

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _balances_6, name: _balances

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: _balances_6, name: _balances

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(uint256) -> _balances_5[to_1]
INDEX
REFERENCE RIGHT VALUE PROPAGATION
[i]Type for REF_12

Name: None Function: None
Num: -998
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
_balances_6(mapping(address => uint256)) := ϕ(['_balances_5'])
Phi
[i]Type for _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_12(-> _balances_6) = REF_12 + 1
-998
-1
[i]Type for REF_12

Name: REF_12 Function: _mint
Num: -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied _balances
Source address: u
clearing ir...?
REF_13(address) -> _owners_1[tokenId_1]
[i] REF_13 cleared
clearing ir...?
_owners_2(mapping(uint256 => address)) := ϕ(['_owners_1'])
[i] _owners cleared
clearing ir...?
REF_13 (->_owners_2) := to_1(address)
[i] REF_13 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _owners_2, name: _owners

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 2
Globalname: _owners, contract_name: BasePool
global...

Name: PIC_29 Function: None
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
End popogation
Ssa_name: _owners_2, name: _owners

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
REF_13(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_13

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
_owners_2(mapping(uint256 => address)) := ϕ(['_owners_1'])
Phi
[i]Type for _owners

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_13 (->_owners_2) := to_1(address)
asgn
Finance type key: (-1, -1)
[i]Type for REF_13

Name: REF_13 Function: _mint
Num: 
Den: 
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied _owners
Source address: 3
clearing ir...?
TMP_90 = CONVERT 0 to address
[i] TMP_90 cleared
clearing ir...?
Emit Transfer(TMP_90,to_1,tokenId_1)
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_90 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_90

Name: TMP_90 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_92 = CONVERT 0 to address
[i] TMP_92 cleared
clearing ir...?
INTERNAL_CALL, ERC721._afterTokenTransfer(address,address,uint256,uint256)(TMP_92,to_1,tokenId_1,1)
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_92 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_92

Name: TMP_92 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC721._afterTokenTransfer(address,address,uint256,uint256)(TMP_92,to_1,tokenId_1,1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 'u'], [[], [], 0, 'to', [], -1, -998, 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 0, None, [], -1, 'u', 'u']]
Param: from
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: from Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
Param: to
[[], [], 0, 'to', [], -1, -998, 'u']

Name: to Function: None
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Param: firstTokenId
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: firstTokenId Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: batchSize
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: batchSize Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_afterTokenTransfer(address,address,uint256,uint256)
ENTRY_POINT
Propogating All
clearing ir...?
from_1(address) := ϕ(['owner_2', 'TMP_92', 'from_1'])
[i] from cleared
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_100'])
[i] to cleared
clearing ir...?
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
[i] firstTokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: from_1, name: from

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: from_1 Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: to_1, name: to

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _afterTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: firstTokenId_1, name: firstTokenId

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: firstTokenId_1 Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
from_1(address) := ϕ(['owner_2', 'TMP_92', 'from_1'])
Phi
[i]Type for from

Name: from Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_100'])
Phi
[i]Type for to

Name: to Function: _afterTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
Phi
[i]Type for firstTokenId

Name: firstTokenId Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
from_1(address) := ϕ(['owner_2', 'TMP_92', 'from_1'])
[i] from cleared
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_100'])
[i] to cleared
clearing ir...?
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
[i] firstTokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: from_1, name: from

Name: from Function: _afterTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: from_1 Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: to_1, name: to

Name: to Function: _afterTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _afterTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: firstTokenId_1, name: firstTokenId

Name: firstTokenId Function: _afterTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: firstTokenId_1 Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
from_1(address) := ϕ(['owner_2', 'TMP_92', 'from_1'])
Phi
[i]Type for from

Name: from Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_100'])
Phi
[i]Type for to

Name: to Function: _afterTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
Phi
[i]Type for firstTokenId

Name: firstTokenId Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1'])
[i] to cleared
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'id_1'])
[i] tokenId cleared
clearing ir...?
_balances_2(mapping(address => uint256)) := ϕ(['_balances_17', '_balances_11', '_balances_1', '_balances_6', '_balances_19', '_balances_0'])
[i] _balances cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _balances_2, name: _balances

Name: _balances Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _balances, Num: 2
Globalname: _balances, contract_name: BasePool
global...

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
to_1(address) := ϕ(['to_1', 'to_1'])
Phi
[i]Type for to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
tokenId_1(uint256) := ϕ(['tokenId_1', 'id_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_balances_2(mapping(address => uint256)) := ϕ(['_balances_17', '_balances_11', '_balances_1', '_balances_6', '_balances_19', '_balances_0'])
Phi
[i]Type for _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_79 = CONVERT 0 to address
[i] TMP_79 cleared
clearing ir...?
TMP_80(bool) = to_1 != TMP_79
[i] TMP_80 cleared
clearing ir...?
TMP_81(None) = SOLIDITY_CALL require(bool,string)(TMP_80,ERC721: mint to the zero address)
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_79 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_79

Name: TMP_79 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_80(bool) = to_1 != TMP_79
[i]Type for TMP_80

Name: TMP_80 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_81(None) = SOLIDITY_CALL require(bool,string)(TMP_80,ERC721: mint to the zero address)
[i]Type for TMP_81

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_82(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
[i] TMP_82 cleared
clearing ir...?
TMP_83 = ! TMP_82 
clearing ir...?
TMP_84(None) = SOLIDITY_CALL require(bool,string)(TMP_83,ERC721: token already minted)
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_82(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u']]
[i]Type for TMP_82

Name: TMP_82 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_83 = ! TMP_82 
[i]Type for TMP_83

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_84(None) = SOLIDITY_CALL require(bool,string)(TMP_83,ERC721: token already minted)
[i]Type for TMP_84

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_85 = CONVERT 0 to address
[i] TMP_85 cleared
clearing ir...?
INTERNAL_CALL, ERC721._beforeTokenTransfer(address,address,uint256,uint256)(TMP_85,to_1,tokenId_1,1)
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_85 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_85

Name: TMP_85 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC721._beforeTokenTransfer(address,address,uint256,uint256)(TMP_85,to_1,tokenId_1,1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 'u'], [[], [], 0, 'to', [], -1, -998, 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 0, None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 0, None, [], -1, 'u'], [[], [], 0, 'to', [], -1, -998], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 0, None, [], -1, 'u']]
clearing ir...?
TMP_87(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
[i] TMP_87 cleared
clearing ir...?
TMP_88 = ! TMP_87 
clearing ir...?
TMP_89(None) = SOLIDITY_CALL require(bool,string)(TMP_88,ERC721: token already minted)
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_87(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u']]
[i]Type for TMP_87

Name: TMP_87 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_88 = ! TMP_87 
[i]Type for TMP_88

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_89(None) = SOLIDITY_CALL require(bool,string)(TMP_88,ERC721: token already minted)
[i]Type for TMP_89

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_12(uint256) -> _balances_5[to_1]
[i] REF_12 cleared
clearing ir...?
_balances_6(mapping(address => uint256)) := ϕ(['_balances_5'])
[i] _balances cleared
clearing ir...?
REF_12(-> _balances_6) = REF_12 + 1
[i] REF_12 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: _balances_6, name: _balances

Name: _balances Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _balances, Num: 6
Globalname: _balances, contract_name: BasePool
global...

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: _balances_6, name: _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _balances_6, name: _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: _balances_6, name: _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(uint256) -> _balances_5[to_1]
INDEX
REFERENCE RIGHT VALUE PROPAGATION
[i]Type for REF_12

Name: None Function: None
Num: -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
_balances_6(mapping(address => uint256)) := ϕ(['_balances_5'])
Phi
[i]Type for _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_12(-> _balances_6) = REF_12 + 1
-998
-1
[i]Type for REF_12

Name: REF_12 Function: _mint
Num: -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied _balances
Source address: u
clearing ir...?
REF_13(address) -> _owners_1[tokenId_1]
[i] REF_13 cleared
clearing ir...?
_owners_2(mapping(uint256 => address)) := ϕ(['_owners_1'])
[i] _owners cleared
clearing ir...?
REF_13 (->_owners_2) := to_1(address)
[i] REF_13 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _owners_2, name: _owners

Name: _owners Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 2
Globalname: _owners, contract_name: BasePool
global...

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
End popogation
Ssa_name: _owners_2, name: _owners

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
REF_13(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_13

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
_owners_2(mapping(uint256 => address)) := ϕ(['_owners_1'])
Phi
[i]Type for _owners

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_13 (->_owners_2) := to_1(address)
asgn
Finance type key: (-1, -1)
[i]Type for REF_13

Name: REF_13 Function: _mint
Num: 
Den: 
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied _owners
Source address: 3
clearing ir...?
TMP_90 = CONVERT 0 to address
[i] TMP_90 cleared
clearing ir...?
Emit Transfer(TMP_90,to_1,tokenId_1)
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_90 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_90

Name: TMP_90 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_92 = CONVERT 0 to address
[i] TMP_92 cleared
clearing ir...?
INTERNAL_CALL, ERC721._afterTokenTransfer(address,address,uint256,uint256)(TMP_92,to_1,tokenId_1,1)
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_92 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_92

Name: TMP_92 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC721._afterTokenTransfer(address,address,uint256,uint256)(TMP_92,to_1,tokenId_1,1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 'u'], [[], [], 0, 'to', [], -1, -998, 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 0, None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 0, None, [], -1, 'u'], [[], [], 0, 'to', [], -1, -998], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 0, None, [], -1, 'u']]
clearing ir...?
REF_41(IBasePool.Position) -> positions_0[id_1]
[i] REF_41 cleared
clearing ir...?
TMP_151 = new Position(block.timestamp,liquidity_3,nativeDeposit_1,foreignDeposit_1)
clearing ir...?
positions_1(mapping(uint256 => IBasePool.Position)) := ϕ(['positions_0'])
[i] positions cleared
clearing ir...?
REF_41 (->positions_1) := TMP_151(IBasePool.Position)
[i] REF_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignDeposit_1, name: foreignDeposit

Name: foreignDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeDeposit_1, name: nativeDeposit

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: liquidity_3, name: liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: id_1, name: id

Name: id Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignDeposit_1, name: foreignDeposit

Name: foreignDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeDeposit_1, name: nativeDeposit

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: liquidity_3, name: liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: id_1, name: id

Name: id Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: positions_1, name: positions

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: positions, Num: 1
Globalname: positions, contract_name: BasePool
global...

Name: PIC_35 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Ssa_name: positions_1, name: positions

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_41(IBasePool.Position) -> positions_0[id_1]
INDEX
[i]Type for REF_41

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_151 = new Position(block.timestamp,liquidity_3,nativeDeposit_1,foreignDeposit_1)
[i]Type for TMP_151

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_1(mapping(uint256 => IBasePool.Position)) := ϕ(['positions_0'])
Phi
[i]Type for positions

Name: positions Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_41 (->positions_1) := TMP_151(IBasePool.Position)
asgn
Finance type key: (-1, -1)
[i]Type for REF_41

Name: REF_41 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied positions
Source address: u
clearing ir...?
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(balanceNative_1,balanceForeign_1,reserveNative_1,reserveForeign_1)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: mint
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: mint
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: mint
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: mint
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(balanceNative_1,balanceForeign_1,reserveNative_1,reserveForeign_1)
New param cache [[[7], [-1], 'u', None, [], 0, 'u', 'u'], [[8], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Param: balanceNative
[[7], [-1], 'u', None, [], 0, 'u', 'u']

Name: balanceNative Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: balanceForeign
[[8], [-1], 'u', None, [], 0, 'u', 'u']

Name: balanceForeign Function: None
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: reserveNative
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: reserveNative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: reserveForeign
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: reserveForeign Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_update(uint256,uint256,uint112,uint112)
ENTRY_POINT
Propogating All
EXPRESSION require(bool,string)(balanceNative <= type()(uint112).max && balanceForeign <= type()(uint112).max,BasePool::_update: Balance Overflow)
Propogating All
balanceNative_1
Ssa_name: balanceNative_1, name: balanceNative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceNative_1 Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
balanceForeign_1
Ssa_name: balanceForeign_1, name: balanceForeign

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceForeign_1 Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
NEW VARIABLE blockTimestamp = uint32(block.timestamp % 2 ** 32)
Propogating All
NEW VARIABLE timeElapsed = blockTimestamp - _blockTimestampLast
Propogating All
blockTimestamp_1
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
IF timeElapsed > 0 && reserveNative != 0 && reserveForeign != 0
Propogating All
reserveForeign_1
Ssa_name: reserveForeign_1, name: reserveForeign

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
reserveNative_1
Ssa_name: reserveNative_1, name: reserveNative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
timeElapsed_1
Ssa_name: timeElapsed_1, name: timeElapsed

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
Propogating All
EXPRESSION priceNativeCumulativeLast += uint256(UQ112x112.encode(reserveForeign).uqdiv(reserveNative)) * timeElapsed
Propogating All
reserveForeign_1
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
reserveNative_1
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
timeElapsed_1
Ssa_name: timeElapsed_1, name: timeElapsed

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION _reserveNative = uint112(balanceNative)
Propogating All
balanceNative_1
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative_1 Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceNative_1 Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
EXPRESSION priceForeignCumulativeLast += uint256(UQ112x112.encode(reserveNative).uqdiv(reserveForeign)) * timeElapsed
Propogating All
reserveForeign_1
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
reserveNative_1
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
timeElapsed_1
Ssa_name: timeElapsed_1, name: timeElapsed

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
EXPRESSION _reserveForeign = uint112(balanceForeign)
Propogating All
balanceForeign_1
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign_1 Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceForeign_1 Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
EXPRESSION _blockTimestampLast = blockTimestamp
Propogating All
blockTimestamp_1
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION Sync(balanceNative,balanceForeign)
Propogating All
balanceNative_1
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative_1 Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceNative_1 Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
balanceForeign_1
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign_1 Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceForeign_1 Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
clearing ir...?
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
[i] balanceNative cleared
clearing ir...?
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
[i] balanceForeign cleared
clearing ir...?
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
[i] reserveNative cleared
clearing ir...?
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
[i] reserveForeign cleared
clearing ir...?
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
[i] priceNativeCumulativeLast cleared
clearing ir...?
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
[i] priceForeignCumulativeLast cleared
clearing ir...?
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceNative_1 Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceForeign_1 Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 1
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: PIC_40 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 1
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: PIC_39 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 2
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: PIC_38 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
Phi
[i]Type for balanceNative

Name: balanceNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
Phi
[i]Type for balanceForeign

Name: balanceForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
Phi
[i]Type for reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
Phi
[i]Type for reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
Phi
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
Phi
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
Phi
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_235 cleared
clearing ir...?
TMP_236(bool) = balanceNative_1 <= TMP_235
[i] TMP_236 cleared
clearing ir...?
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_238 cleared
clearing ir...?
TMP_239(bool) = balanceForeign_1 <= TMP_238
[i] TMP_239 cleared
clearing ir...?
TMP_240(bool) = TMP_236 && TMP_239
[i] TMP_240 cleared
clearing ir...?
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_235

Name: TMP_235 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_236(bool) = balanceNative_1 <= TMP_235
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_236

Name: TMP_236 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_238

Name: TMP_238 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_239(bool) = balanceForeign_1 <= TMP_238
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_239

Name: TMP_239 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_240(bool) = TMP_236 && TMP_239
[i]Type for TMP_240

Name: TMP_240 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_242(uint256) = 2 (c)** 32
[i] TMP_242 cleared
clearing ir...?
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i] TMP_243 cleared
clearing ir...?
TMP_244 = CONVERT TMP_243 to uint32
[i] TMP_244 cleared
clearing ir...?
blockTimestamp_1(uint32) := TMP_244(uint32)
[i] blockTimestamp cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
End popogation
TMP_242(uint256) = 2 (c)** 32
[i]Type for TMP_242

Name: TMP_242 Function: _update
Num: -1
Den: -1
Address: u
Norm: 32
LF: None
Value: 4294967296
Fields: 
Finance Type: undef
XXXX
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i]Type for TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244 = CONVERT TMP_243 to uint32
Converting TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_244

Name: TMP_244 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
blockTimestamp_1(uint32) := TMP_244(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
[i] TMP_245 cleared
clearing ir...?
timeElapsed_1(uint32) := TMP_245(uint32)
[i] timeElapsed cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: timeElapsed_1, name: timeElapsed

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: timeElapsed, Num: 1
Globalname: timeElapsed, contract_name: BasePool
End popogation
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
Source address: u
[i]Type for TMP_245

Name: TMP_245 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint32) := TMP_245(uint32)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_246(bool) = timeElapsed_1 > 0
[i] TMP_246 cleared
clearing ir...?
TMP_247(bool) = reserveNative_1 != 0
[i] TMP_247 cleared
clearing ir...?
TMP_248(bool) = TMP_246 && TMP_247
[i] TMP_248 cleared
clearing ir...?
TMP_249(bool) = reserveForeign_1 != 0
[i] TMP_249 cleared
clearing ir...?
TMP_250(bool) = TMP_248 && TMP_249
[i] TMP_250 cleared
clearing ir...?
CONDITION TMP_250
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_246(bool) = timeElapsed_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_246

Name: TMP_246 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_247(bool) = reserveNative_1 != 0
[i]Type for TMP_247

Name: TMP_247 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_248(bool) = TMP_246 && TMP_247
[i]Type for TMP_248

Name: TMP_248 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_249(bool) = reserveForeign_1 != 0
[i]Type for TMP_249

Name: TMP_249 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_250(bool) = TMP_248 && TMP_249
[i]Type for TMP_250

Name: TMP_250 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
[i] TMP_251 cleared
clearing ir...?
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
[i] TMP_252 cleared
clearing ir...?
TMP_253 = CONVERT TMP_252 to uint256
[i] TMP_253 cleared
clearing ir...?
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
[i] TMP_254 cleared
clearing ir...?
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
[i] priceNativeCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_2, name: priceNativeCumulativeLast

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 2
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: PIC_40 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_251

Name: TMP_251 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_253 = CONVERT TMP_252 to uint256
Converting TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_253

Name: TMP_253 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_254

Name: TMP_254 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
Source address: u
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceNativeCumulativeLast
Source address: u
clearing ir...?
TMP_259 = CONVERT balanceNative_1 to uint112
[i] TMP_259 cleared
clearing ir...?
_reserveNative_2(uint112) := TMP_259(uint112)
[i] _reserveNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveNative_2, name: _reserveNative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveNative, Num: 2
Globalname: _reserveNative, contract_name: BasePool
global...

Name: PIC_42 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_259 = CONVERT balanceNative_1 to uint112
Converting balanceNative_1

Name: balanceNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_259

Name: TMP_259 Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveNative_2(uint112) := TMP_259(uint112)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for _reserveNative

Name: _reserveNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveNative
Source address: u
clearing ir...?
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
[i] TMP_255 cleared
clearing ir...?
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
[i] TMP_256 cleared
clearing ir...?
TMP_257 = CONVERT TMP_256 to uint256
[i] TMP_257 cleared
clearing ir...?
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
[i] TMP_258 cleared
clearing ir...?
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
[i] priceForeignCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_2, name: priceForeignCumulativeLast

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 2
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: PIC_39 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_255

Name: TMP_255 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_257 = CONVERT TMP_256 to uint256
Converting TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_257

Name: TMP_257 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_258

Name: TMP_258 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
Source address: u
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceForeignCumulativeLast
Source address: u
clearing ir...?
TMP_260 = CONVERT balanceForeign_1 to uint112
[i] TMP_260 cleared
clearing ir...?
_reserveForeign_2(uint112) := TMP_260(uint112)
[i] _reserveForeign cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveForeign_2, name: _reserveForeign

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveForeign, Num: 2
Globalname: _reserveForeign, contract_name: BasePool
global...

Name: PIC_41 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_260 = CONVERT balanceForeign_1 to uint112
Converting balanceForeign_1

Name: balanceForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_260

Name: TMP_260 Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveForeign_2(uint112) := TMP_260(uint112)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for _reserveForeign

Name: _reserveForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveForeign
Source address: u
clearing ir...?
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_3, name: _blockTimestampLast

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 3
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: PIC_38 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _blockTimestampLast
Source address: u
clearing ir...?
Emit Sync(balanceNative_1,balanceForeign_1)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
clearing ir...?
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
[i] balanceNative cleared
clearing ir...?
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
[i] balanceForeign cleared
clearing ir...?
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
[i] reserveNative cleared
clearing ir...?
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
[i] reserveForeign cleared
clearing ir...?
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
[i] priceNativeCumulativeLast cleared
clearing ir...?
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
[i] priceForeignCumulativeLast cleared
clearing ir...?
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceNative_1 Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceForeign_1 Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 1
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 1
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 2
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
Phi
[i]Type for balanceNative

Name: balanceNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
Phi
[i]Type for balanceForeign

Name: balanceForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
Phi
[i]Type for reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
Phi
[i]Type for reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
Phi
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
Phi
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
Phi
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_235 cleared
clearing ir...?
TMP_236(bool) = balanceNative_1 <= TMP_235
[i] TMP_236 cleared
clearing ir...?
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_238 cleared
clearing ir...?
TMP_239(bool) = balanceForeign_1 <= TMP_238
[i] TMP_239 cleared
clearing ir...?
TMP_240(bool) = TMP_236 && TMP_239
[i] TMP_240 cleared
clearing ir...?
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_235

Name: TMP_235 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_236(bool) = balanceNative_1 <= TMP_235
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_236

Name: TMP_236 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_238

Name: TMP_238 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_239(bool) = balanceForeign_1 <= TMP_238
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_239

Name: TMP_239 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_240(bool) = TMP_236 && TMP_239
[i]Type for TMP_240

Name: TMP_240 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_242(uint256) = 2 (c)** 32
[i] TMP_242 cleared
clearing ir...?
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i] TMP_243 cleared
clearing ir...?
TMP_244 = CONVERT TMP_243 to uint32
[i] TMP_244 cleared
clearing ir...?
blockTimestamp_1(uint32) := TMP_244(uint32)
[i] blockTimestamp cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
End popogation
TMP_242(uint256) = 2 (c)** 32
[i]Type for TMP_242

Name: TMP_242 Function: _update
Num: 
Den: 
Address: u
Norm: 32
LF: None
Value: 4294967296
Fields: 
Finance Type: undef
XXXX
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i]Type for TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244 = CONVERT TMP_243 to uint32
Converting TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_244

Name: TMP_244 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
blockTimestamp_1(uint32) := TMP_244(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
[i] TMP_245 cleared
clearing ir...?
timeElapsed_1(uint32) := TMP_245(uint32)
[i] timeElapsed cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: timeElapsed, Num: 1
Globalname: timeElapsed, contract_name: BasePool
End popogation
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
Source address: u
[i]Type for TMP_245

Name: TMP_245 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint32) := TMP_245(uint32)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_246(bool) = timeElapsed_1 > 0
[i] TMP_246 cleared
clearing ir...?
TMP_247(bool) = reserveNative_1 != 0
[i] TMP_247 cleared
clearing ir...?
TMP_248(bool) = TMP_246 && TMP_247
[i] TMP_248 cleared
clearing ir...?
TMP_249(bool) = reserveForeign_1 != 0
[i] TMP_249 cleared
clearing ir...?
TMP_250(bool) = TMP_248 && TMP_249
[i] TMP_250 cleared
clearing ir...?
CONDITION TMP_250
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_246(bool) = timeElapsed_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_246

Name: TMP_246 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_247(bool) = reserveNative_1 != 0
[i]Type for TMP_247

Name: TMP_247 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_248(bool) = TMP_246 && TMP_247
[i]Type for TMP_248

Name: TMP_248 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_249(bool) = reserveForeign_1 != 0
[i]Type for TMP_249

Name: TMP_249 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_250(bool) = TMP_248 && TMP_249
[i]Type for TMP_250

Name: TMP_250 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
[i] TMP_251 cleared
clearing ir...?
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
[i] TMP_252 cleared
clearing ir...?
TMP_253 = CONVERT TMP_252 to uint256
[i] TMP_253 cleared
clearing ir...?
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
[i] TMP_254 cleared
clearing ir...?
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
[i] priceNativeCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_2, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 2
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_251

Name: TMP_251 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_253 = CONVERT TMP_252 to uint256
Converting TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_253

Name: TMP_253 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_254

Name: TMP_254 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
Source address: u
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceNativeCumulativeLast
Source address: u
clearing ir...?
TMP_259 = CONVERT balanceNative_1 to uint112
[i] TMP_259 cleared
clearing ir...?
_reserveNative_2(uint112) := TMP_259(uint112)
[i] _reserveNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveNative_2, name: _reserveNative

Name: _reserveNative Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveNative, Num: 2
Globalname: _reserveNative, contract_name: BasePool
global...

Name: _reserveNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_259 = CONVERT balanceNative_1 to uint112
Converting balanceNative_1

Name: balanceNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_259

Name: TMP_259 Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveNative_2(uint112) := TMP_259(uint112)
asgn
7
-1
Finance type key: (0, -1)
[i]Type for _reserveNative

Name: _reserveNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveNative
Source address: u
clearing ir...?
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
[i] TMP_255 cleared
clearing ir...?
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
[i] TMP_256 cleared
clearing ir...?
TMP_257 = CONVERT TMP_256 to uint256
[i] TMP_257 cleared
clearing ir...?
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
[i] TMP_258 cleared
clearing ir...?
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
[i] priceForeignCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_2, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 2
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_255

Name: TMP_255 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_257 = CONVERT TMP_256 to uint256
Converting TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_257

Name: TMP_257 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_258

Name: TMP_258 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
Source address: u
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceForeignCumulativeLast
Source address: u
clearing ir...?
TMP_260 = CONVERT balanceForeign_1 to uint112
[i] TMP_260 cleared
clearing ir...?
_reserveForeign_2(uint112) := TMP_260(uint112)
[i] _reserveForeign cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveForeign_2, name: _reserveForeign

Name: _reserveForeign Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveForeign, Num: 2
Globalname: _reserveForeign, contract_name: BasePool
global...

Name: _reserveForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_260 = CONVERT balanceForeign_1 to uint112
Converting balanceForeign_1

Name: balanceForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_260

Name: TMP_260 Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveForeign_2(uint112) := TMP_260(uint112)
asgn
8
-1
Finance type key: (0, -1)
[i]Type for _reserveForeign

Name: _reserveForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveForeign
Source address: u
clearing ir...?
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_3, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 3
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _blockTimestampLast
Source address: u
clearing ir...?
Emit Sync(balanceNative_1,balanceForeign_1)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
clearing ir...?
Emit Mint(msg.sender,to_1,nativeDeposit_1,foreignDeposit_1)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignDeposit_1, name: foreignDeposit

Name: foreignDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeDeposit_1, name: nativeDeposit

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: to_1, name: to

Name: to_1 Function: mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignDeposit_1, name: foreignDeposit

Name: foreignDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeDeposit_1, name: nativeDeposit

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: to_1, name: to

Name: to_1 Function: mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
End popogation
clearing ir...?
Emit PositionOpened(msg.sender,id_1,liquidity_3)
Propogating parameters and globals to SSA variables...
Ssa_name: liquidity_3, name: liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: id_1, name: id

Name: id Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: liquidity_3, name: liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: id_1, name: id

Name: id Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation


nativeAsset_2(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13'])
foreignAsset_2(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
positionId_1(uint256) := ϕ(['positionId_0', 'positionId_6'])
totalSupply_1(uint256) := ϕ(['totalSupply_13', 'totalSupply_6', 'totalSupply_0'])
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
TUPLE_0(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
reserveNative_1(uint112)= UNPACK TUPLE_0 index: 0 
reserveForeign_1(uint112)= UNPACK TUPLE_0 index: 1 
TMP_139 = CONVERT this to address
TMP_140(uint256) = HIGH_LEVEL_CALL, dest:nativeAsset_4(IERC20), function:balanceOf, arguments:['TMP_139']  
nativeAsset_5(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_4'])
foreignAsset_5(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_4', 'foreignAsset_6', 'foreignAsset_10'])
positionId_4(uint256) := ϕ(['positionId_6', 'positionId_3'])
totalSupply_4(uint256) := ϕ(['totalSupply_3', 'totalSupply_13', 'totalSupply_6'])
balanceNative_1(uint256) := TMP_140(uint256)
TMP_141 = CONVERT this to address
TMP_142(uint256) = HIGH_LEVEL_CALL, dest:foreignAsset_5(IERC20), function:balanceOf, arguments:['TMP_141']  
foreignAsset_6(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_5'])
positionId_5(uint256) := ϕ(['positionId_4', 'positionId_6'])
totalSupply_5(uint256) := ϕ(['totalSupply_13', 'totalSupply_6', 'totalSupply_4'])
balanceForeign_1(uint256) := TMP_142(uint256)
TMP_143(uint256) = balanceNative_1 (c)- reserveNative_1
nativeDeposit_1(uint256) := TMP_143(uint256)
TMP_144(uint256) = balanceForeign_1 (c)- reserveForeign_1
foreignDeposit_1(uint256) := TMP_144(uint256)
totalLiquidityUnits_1(uint256) := totalSupply_5(uint256)
TMP_145(bool) = totalLiquidityUnits_1 == 0
CONDITION TMP_145
liquidity_1(uint256) := nativeDeposit_1(uint256)
TMP_146(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateLiquidityUnits(uint256,uint256,uint256,uint256,uint256), arguments:['nativeDeposit_1', 'reserveNative_1', 'foreignDeposit_1', 'reserveForeign_1', 'totalLiquidityUnits_1'] 
liquidity_2(uint256) := TMP_146(uint256)
liquidity_3(uint256) := ϕ(['liquidity_1', 'liquidity_2'])
TMP_147(bool) = liquidity_3 > 0
TMP_148(None) = SOLIDITY_CALL require(bool,string)(TMP_147,BasePool::mint: Insufficient Liquidity Provided)
TMP_149(uint256) := positionId_5(uint256)
positionId_6(uint256) = positionId_5 (c)+ 1
id_1(uint256) := TMP_149(uint256)
totalSupply_6(uint256) = totalSupply_5 (c)+ liquidity_3
INTERNAL_CALL, ERC721._mint(address,uint256)(to_1,id_1)
REF_41(IBasePool.Position) -> positions_0[id_1]
TMP_151 = new Position(block.timestamp,liquidity_3,nativeDeposit_1,foreignDeposit_1)
positions_1(mapping(uint256 => IBasePool.Position)) := ϕ(['positions_0'])
REF_41 (->positions_1) := TMP_151(IBasePool.Position)
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(balanceNative_1,balanceForeign_1,reserveNative_1,reserveForeign_1)
Emit Mint(msg.sender,to_1,nativeDeposit_1,foreignDeposit_1)
Emit PositionOpened(msg.sender,id_1,liquidity_3)


clearing ir...?
nativeAsset_2(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13'])
[i] nativeAsset cleared
clearing ir...?
foreignAsset_2(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
[i] foreignAsset cleared
clearing ir...?
positionId_1(uint256) := ϕ(['positionId_0', 'positionId_6'])
[i] positionId cleared
clearing ir...?
totalSupply_1(uint256) := ϕ(['totalSupply_13', 'totalSupply_6', 'totalSupply_0'])
[i] totalSupply cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: nativeAsset_2, name: nativeAsset

Name: nativeAsset Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAsset, Num: 2
Globalname: nativeAsset, contract_name: BasePool
global...

Name: PIC_32 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: foreignAsset_2, name: foreignAsset

Name: foreignAsset Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAsset, Num: 2
Globalname: foreignAsset, contract_name: BasePool
global...

Name: PIC_31 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: positionId_1, name: positionId

Name: positionId Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: positionId, Num: 1
Globalname: positionId, contract_name: BasePool
global...

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u
Ssa_name: totalSupply_1, name: totalSupply

Name: totalSupply Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: totalSupply, Num: 1
Globalname: totalSupply, contract_name: BasePool
global...

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
nativeAsset_2(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13'])
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAsset_2(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positionId_1(uint256) := ϕ(['positionId_0', 'positionId_6'])
Phi
[i]Type for positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
totalSupply_1(uint256) := ϕ(['totalSupply_13', 'totalSupply_6', 'totalSupply_0'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
New param cache []
Old param cache: []
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TUPLE_0(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
[i] TUPLE_0 cleared
clearing ir...?
reserveNative_1(uint112)= UNPACK TUPLE_0 index: 0 
[i] reserveNative cleared
clearing ir...?
reserveForeign_1(uint112)= UNPACK TUPLE_0 index: 1 
[i] reserveForeign cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserveNative, Num: 1
Globalname: reserveNative, contract_name: BasePool
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserveForeign, Num: 1
Globalname: reserveForeign, contract_name: BasePool
End popogation
TUPLE_0(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
New param cache []
Old param cache: []
[i]Type for TUPLE_0

Name: TUPLE_0 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveNative_1(uint112)= UNPACK TUPLE_0 index: 0 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for reserveNative

Name: reserveNative Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint112)= UNPACK TUPLE_0 index: 1 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for reserveForeign

Name: reserveForeign Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_139 = CONVERT this to address
[i] TMP_139 cleared
clearing ir...?
TMP_140(uint256) = HIGH_LEVEL_CALL, dest:nativeAsset_4(IERC20), function:balanceOf, arguments:['TMP_139']  
[i] TMP_140 cleared
clearing ir...?
nativeAsset_5(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_4'])
[i] nativeAsset cleared
clearing ir...?
foreignAsset_5(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_4', 'foreignAsset_6', 'foreignAsset_10'])
[i] foreignAsset cleared
clearing ir...?
positionId_4(uint256) := ϕ(['positionId_6', 'positionId_3'])
[i] positionId cleared
clearing ir...?
totalSupply_4(uint256) := ϕ(['totalSupply_3', 'totalSupply_13', 'totalSupply_6'])
[i] totalSupply cleared
clearing ir...?
balanceNative_1(uint256) := TMP_140(uint256)
[i] balanceNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAsset_4, name: nativeAsset

Name: None Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAsset_4, name: nativeAsset

Name: None Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: balanceNative, Num: 1
Globalname: balanceNative, contract_name: BasePool
End popogation
Ssa_name: nativeAsset_5, name: nativeAsset

Name: nativeAsset Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAsset, Num: 5
Globalname: nativeAsset, contract_name: BasePool
global...

Name: PIC_32 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: foreignAsset_5, name: foreignAsset

Name: foreignAsset Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAsset, Num: 5
Globalname: foreignAsset, contract_name: BasePool
global...

Name: PIC_31 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: positionId_4, name: positionId

Name: positionId Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: positionId, Num: 4
Globalname: positionId, contract_name: BasePool
global...

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u
Ssa_name: totalSupply_4, name: totalSupply

Name: totalSupply Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: totalSupply, Num: 4
Globalname: totalSupply, contract_name: BasePool
global...

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
TMP_139 = CONVERT this to address
Converting this
6
[i]Type for TMP_139

Name: TMP_139 Function: mint
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_140(uint256) = HIGH_LEVEL_CALL, dest:nativeAsset_4(IERC20), function:balanceOf, arguments:['TMP_139']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
7
[i]Type for TMP_140

Name: TMP_140 Function: mint
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
nativeAsset_5(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_4'])
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAsset_5(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_4', 'foreignAsset_6', 'foreignAsset_10'])
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positionId_4(uint256) := ϕ(['positionId_6', 'positionId_3'])
Phi
[i]Type for positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
totalSupply_4(uint256) := ϕ(['totalSupply_3', 'totalSupply_13', 'totalSupply_6'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
balanceNative_1(uint256) := TMP_140(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for balanceNative

Name: balanceNative Function: mint
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_141 = CONVERT this to address
[i] TMP_141 cleared
clearing ir...?
TMP_142(uint256) = HIGH_LEVEL_CALL, dest:foreignAsset_5(IERC20), function:balanceOf, arguments:['TMP_141']  
[i] TMP_142 cleared
clearing ir...?
foreignAsset_6(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_5'])
[i] foreignAsset cleared
clearing ir...?
positionId_5(uint256) := ϕ(['positionId_4', 'positionId_6'])
[i] positionId cleared
clearing ir...?
totalSupply_5(uint256) := ϕ(['totalSupply_13', 'totalSupply_6', 'totalSupply_4'])
[i] totalSupply cleared
clearing ir...?
balanceForeign_1(uint256) := TMP_142(uint256)
[i] balanceForeign cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAsset_5, name: foreignAsset

Name: foreignAsset Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAsset_5, name: foreignAsset

Name: foreignAsset Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: balanceForeign, Num: 1
Globalname: balanceForeign, contract_name: BasePool
End popogation
Ssa_name: foreignAsset_6, name: foreignAsset

Name: foreignAsset Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAsset, Num: 6
Globalname: foreignAsset, contract_name: BasePool
global...

Name: PIC_31 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: positionId_5, name: positionId

Name: positionId Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: positionId, Num: 5
Globalname: positionId, contract_name: BasePool
global...

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u
Ssa_name: totalSupply_5, name: totalSupply

Name: totalSupply Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: totalSupply, Num: 5
Globalname: totalSupply, contract_name: BasePool
global...

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
TMP_141 = CONVERT this to address
Converting this
6
[i]Type for TMP_141

Name: TMP_141 Function: mint
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_142(uint256) = HIGH_LEVEL_CALL, dest:foreignAsset_5(IERC20), function:balanceOf, arguments:['TMP_141']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
u
prev address? u
[i]Type for TMP_142

Name: TMP_142 Function: mint
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
foreignAsset_6(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_5'])
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positionId_5(uint256) := ϕ(['positionId_4', 'positionId_6'])
Phi
[i]Type for positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
totalSupply_5(uint256) := ϕ(['totalSupply_13', 'totalSupply_6', 'totalSupply_4'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
balanceForeign_1(uint256) := TMP_142(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for balanceForeign

Name: balanceForeign Function: mint
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_143(uint256) = balanceNative_1 (c)- reserveNative_1
[i] TMP_143 cleared
clearing ir...?
nativeDeposit_1(uint256) := TMP_143(uint256)
[i] nativeDeposit cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: mint
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: mint
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeDeposit_1, name: nativeDeposit

Name: nativeDeposit Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeDeposit, Num: 1
Globalname: nativeDeposit, contract_name: BasePool
End popogation
TMP_143(uint256) = balanceNative_1 (c)- reserveNative_1
Source address: u
[i]Type for TMP_143

Name: TMP_143 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
nativeDeposit_1(uint256) := TMP_143(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for nativeDeposit

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_144(uint256) = balanceForeign_1 (c)- reserveForeign_1
[i] TMP_144 cleared
clearing ir...?
foreignDeposit_1(uint256) := TMP_144(uint256)
[i] foreignDeposit cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: mint
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: mint
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignDeposit_1, name: foreignDeposit

Name: foreignDeposit Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignDeposit, Num: 1
Globalname: foreignDeposit, contract_name: BasePool
End popogation
TMP_144(uint256) = balanceForeign_1 (c)- reserveForeign_1
Source address: u
[i]Type for TMP_144

Name: TMP_144 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
foreignDeposit_1(uint256) := TMP_144(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for foreignDeposit

Name: foreignDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
totalLiquidityUnits_1(uint256) := totalSupply_5(uint256)
[i] totalLiquidityUnits cleared
Propogating parameters and globals to SSA variables...
Ssa_name: totalSupply_5, name: totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: totalSupply_5, name: totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: totalLiquidityUnits_1, name: totalLiquidityUnits

Name: totalLiquidityUnits Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: totalLiquidityUnits, Num: 1
Globalname: totalLiquidityUnits, contract_name: BasePool
End popogation
totalLiquidityUnits_1(uint256) := totalSupply_5(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for totalLiquidityUnits

Name: totalLiquidityUnits Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_145(bool) = totalLiquidityUnits_1 == 0
[i] TMP_145 cleared
clearing ir...?
CONDITION TMP_145
Propogating parameters and globals to SSA variables...
Ssa_name: totalLiquidityUnits_1, name: totalLiquidityUnits

Name: totalLiquidityUnits Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: totalLiquidityUnits_1, name: totalLiquidityUnits

Name: totalLiquidityUnits Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_145(bool) = totalLiquidityUnits_1 == 0
[i]Type for TMP_145

Name: TMP_145 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
liquidity_1(uint256) := nativeDeposit_1(uint256)
[i] liquidity cleared
Propogating parameters and globals to SSA variables...
Ssa_name: nativeDeposit_1, name: nativeDeposit

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeDeposit_1, name: nativeDeposit

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: liquidity_1, name: liquidity

Name: liquidity Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: liquidity, Num: 1
Globalname: liquidity, contract_name: BasePool
End popogation
liquidity_1(uint256) := nativeDeposit_1(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_146(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateLiquidityUnits(uint256,uint256,uint256,uint256,uint256), arguments:['nativeDeposit_1', 'reserveNative_1', 'foreignDeposit_1', 'reserveForeign_1', 'totalLiquidityUnits_1'] 
[i] TMP_146 cleared
clearing ir...?
liquidity_2(uint256) := TMP_146(uint256)
[i] liquidity cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalLiquidityUnits_1, name: totalLiquidityUnits

Name: totalLiquidityUnits Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeDeposit_1, name: nativeDeposit

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignDeposit_1, name: foreignDeposit

Name: foreignDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalLiquidityUnits_1, name: totalLiquidityUnits

Name: totalLiquidityUnits Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeDeposit_1, name: nativeDeposit

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignDeposit_1, name: foreignDeposit

Name: foreignDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: liquidity_2, name: liquidity

Name: liquidity Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Name: liquidity, Num: 2
Globalname: liquidity, contract_name: BasePool
End popogation
TMP_146(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateLiquidityUnits(uint256,uint256,uint256,uint256,uint256), arguments:['nativeDeposit_1', 'reserveNative_1', 'foreignDeposit_1', 'reserveForeign_1', 'totalLiquidityUnits_1'] 
Found: calculateLiquidityUnits

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: reserveNative Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: foreignDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: reserveForeign Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: totalLiquidityUnits Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: 0
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: 0
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 4
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: 0
New param cache [[[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], 0, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
Param: vaderDeposited
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: vaderDeposited Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: vaderBalance
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: vaderBalance Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: assetDeposited
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: assetDeposited Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: assetBalance
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: assetBalance Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: totalPoolUnits
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: totalPoolUnits Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
FIND RETURN
ENTRY_POINT
calculateLiquidityUnits(uint256,uint256,uint256,uint256,uint256)
ENTRY_POINT
Propogating All
NEW VARIABLE slip = calculateSlipAdjustment(vaderDeposited,vaderBalance,assetDeposited,assetBalance)
Propogating All
vaderBalance_1
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
vaderDeposited_1
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
assetDeposited_1
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
assetBalance_1
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE poolUnitFactor = (vaderBalance * assetDeposited) + (vaderDeposited * assetBalance)
Propogating All
vaderBalance_1
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
vaderDeposited_1
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
assetDeposited_1
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
assetBalance_1
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE denominator = ONE * 2 * vaderBalance * assetBalance
Propogating All
vaderBalance_1
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
assetBalance_1
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
RETURN ((totalPoolUnits * poolUnitFactor) / denominator) * slip
Propogating All
totalPoolUnits_1
Ssa_name: totalPoolUnits_1, name: totalPoolUnits

Name: totalPoolUnits_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: totalPoolUnits_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
slip_1
Ssa_name: slip_1, name: slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
poolUnitFactor_1
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
ONE_1(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
[i] ONE cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: ONE_1, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 1
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
ONE_1(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
Phi
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
[i] TMP_0 cleared
clearing ir...?
ONE_2(uint256) := ϕ(['ONE_4'])
[i] ONE cleared
clearing ir...?
slip_1(uint256) := TMP_0(uint256)
[i] slip cleared
Propogating parameters and globals to SSA variables...
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: slip_1, name: slip

Name: slip Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: slip, Num: 1
Globalname: slip, contract_name: VaderMath
End popogation
Ssa_name: ONE_2, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 2
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
New param cache [[[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u']]
Param: vaderDeposited
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: vaderBalance
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: assetDeposited
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: assetBalance
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
calculateSlipAdjustment(uint256,uint256,uint256,uint256)
ENTRY_POINT
Propogating All
NEW VARIABLE vaderAsset = vaderBalance * assetDeposited
Propogating All
assetDeposited_1
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
vaderBalance_1
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE assetVader = assetBalance * vaderDeposited
Propogating All
assetBalance_1
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
vaderDeposited_1
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
NEW VARIABLE denominator = (vaderDeposited + vaderBalance) * (assetDeposited + assetBalance)
Propogating All
assetBalance_1
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
assetDeposited_1
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
vaderBalance_1
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
vaderDeposited_1
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN ONE - (delta(vaderAsset,assetVader) / denominator)
Propogating All
denominator_1
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetVader_1
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
vaderAsset_1
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i] vaderDeposited cleared
clearing ir...?
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i] vaderBalance cleared
clearing ir...?
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i] assetDeposited cleared
clearing ir...?
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i] assetBalance cleared
clearing ir...?
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
[i] ONE cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: ONE_3, name: ONE

Name: ONE Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 3
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
Phi
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
Phi
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
Phi
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
Phi
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
Phi
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i] TMP_10 cleared
clearing ir...?
vaderAsset_1(uint256) := TMP_10(uint256)
[i] vaderAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
End popogation
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
vaderAsset_1(uint256) := TMP_10(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
[i] TMP_11 cleared
clearing ir...?
assetVader_1(uint256) := TMP_11(uint256)
[i] assetVader cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
End popogation
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
assetVader_1(uint256) := TMP_11(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i] TMP_12 cleared
clearing ir...?
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i] TMP_13 cleared
clearing ir...?
TMP_14(uint256) = TMP_12 (c)* TMP_13
[i] TMP_14 cleared
clearing ir...?
denominator_1(uint256) := TMP_14(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
Source address: u
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
Source address: u
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_14(uint256) = TMP_12 (c)* TMP_13
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
denominator_1(uint256) := TMP_14(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
[i] TMP_15 cleared
clearing ir...?
TMP_16(uint256) = TMP_15 (c)/ denominator_1
[i] TMP_16 cleared
clearing ir...?
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i] TMP_17 cleared
clearing ir...?
RETURN TMP_17
Propogating parameters and globals to SSA variables...
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
New param cache [[[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], 0, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u']]
Param: a
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: b
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
FIND RETURN
ENTRY_POINT
delta(uint256,uint256)
ENTRY_POINT
Propogating All
IF a > b
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN b - a
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN a - b
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: b_1, name: b

Name: b Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
([-1], [-1], 'u', 'u', 'u', 0)
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_16(uint256) = TMP_15 (c)/ denominator_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_17(uint256) = ONE_4 (c)- TMP_16
Source address: u
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_17
RETURN

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i] vaderDeposited cleared
clearing ir...?
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i] vaderBalance cleared
clearing ir...?
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i] assetDeposited cleared
clearing ir...?
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i] assetBalance cleared
clearing ir...?
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
[i] ONE cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: ONE_3, name: ONE

Name: ONE Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 3
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
Phi
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
Phi
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
Phi
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
Phi
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
Phi
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i] TMP_10 cleared
clearing ir...?
vaderAsset_1(uint256) := TMP_10(uint256)
[i] vaderAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
End popogation
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
vaderAsset_1(uint256) := TMP_10(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
[i] TMP_11 cleared
clearing ir...?
assetVader_1(uint256) := TMP_11(uint256)
[i] assetVader cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
End popogation
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
assetVader_1(uint256) := TMP_11(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i] TMP_12 cleared
clearing ir...?
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i] TMP_13 cleared
clearing ir...?
TMP_14(uint256) = TMP_12 (c)* TMP_13
[i] TMP_14 cleared
clearing ir...?
denominator_1(uint256) := TMP_14(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
Source address: u
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
Source address: u
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_14(uint256) = TMP_12 (c)* TMP_13
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
denominator_1(uint256) := TMP_14(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
[i] TMP_15 cleared
clearing ir...?
TMP_16(uint256) = TMP_15 (c)/ denominator_1
[i] TMP_16 cleared
clearing ir...?
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i] TMP_17 cleared
clearing ir...?
RETURN TMP_17
Propogating parameters and globals to SSA variables...
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
New param cache [[[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], 0, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u']]
Param: a
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: b
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
FIND RETURN
ENTRY_POINT
delta(uint256,uint256)
ENTRY_POINT
Propogating All
IF a > b
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN b - a
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN a - b
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: b_1, name: b

Name: b Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
([-1], [-1], 'u', 'u', 'u', 0)
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_16(uint256) = TMP_15 (c)/ denominator_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_17(uint256) = ONE_4 (c)- TMP_16
Source address: u
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_17
RETURN

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
Source address: u
[i]Type for TMP_0

Name: TMP_0 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
ONE_2(uint256) := ϕ(['ONE_4'])
Phi
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
slip_1(uint256) := TMP_0(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i] TMP_1 cleared
clearing ir...?
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
[i] TMP_2 cleared
clearing ir...?
TMP_3(uint256) = TMP_1 (c)+ TMP_2
[i] TMP_3 cleared
clearing ir...?
poolUnitFactor_1(uint256) := TMP_3(uint256)
[i] poolUnitFactor cleared
Propogating parameters and globals to SSA variables...
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolUnitFactor, Num: 1
Globalname: poolUnitFactor, contract_name: VaderMath
End popogation
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_1

Name: TMP_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_2

Name: TMP_2 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_3(uint256) = TMP_1 (c)+ TMP_2
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_3

Name: TMP_3 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
poolUnitFactor_1(uint256) := TMP_3(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_4(uint256) = ONE_2 (c)* 2
[i] TMP_4 cleared
clearing ir...?
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
[i] TMP_5 cleared
clearing ir...?
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
[i] TMP_6 cleared
clearing ir...?
denominator_1(uint256) := TMP_6(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: ONE_2, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: ONE_2, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_4(uint256) = ONE_2 (c)* 2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_4

Name: TMP_4 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
A: 0 B: u
lnorm: 0 rnorm: u
Source address: u
[i]Type for TMP_5

Name: TMP_5 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
A: 0 B: u
lnorm: 0 rnorm: u
Source address: u
[i]Type for TMP_6

Name: TMP_6 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
denominator_1(uint256) := TMP_6(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
[i] TMP_7 cleared
clearing ir...?
TMP_8(uint256) = TMP_7 (c)/ denominator_1
[i] TMP_8 cleared
clearing ir...?
TMP_9(uint256) = TMP_8 (c)* slip_1
[i] TMP_9 cleared
clearing ir...?
RETURN TMP_9
Propogating parameters and globals to SSA variables...
Ssa_name: totalPoolUnits_1, name: totalPoolUnits

Name: totalPoolUnits_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: slip_1, name: slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: totalPoolUnits_1, name: totalPoolUnits

Name: totalPoolUnits_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: slip_1, name: slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_7

Name: TMP_7 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_8(uint256) = TMP_7 (c)/ denominator_1
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_8

Name: TMP_8 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: raw balance
XXXX
TMP_9(uint256) = TMP_8 (c)* slip_1
A: 0 B: u
lnorm: 0 rnorm: u
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_9

Name: TMP_9 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_9
RETURN

Name: TMP_9 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: raw balance
clearing ir...?
ONE_1(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
[i] ONE cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: ONE_1, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 1
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
ONE_1(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
Phi
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
[i] TMP_0 cleared
clearing ir...?
ONE_2(uint256) := ϕ(['ONE_4'])
[i] ONE cleared
clearing ir...?
slip_1(uint256) := TMP_0(uint256)
[i] slip cleared
Propogating parameters and globals to SSA variables...
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: slip_1, name: slip

Name: slip Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: slip, Num: 1
Globalname: slip, contract_name: VaderMath
End popogation
Ssa_name: ONE_2, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 2
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
New param cache [[[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u']]
Param: vaderDeposited
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: vaderBalance
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: assetDeposited
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: assetBalance
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
calculateSlipAdjustment(uint256,uint256,uint256,uint256)
ENTRY_POINT
Propogating All
NEW VARIABLE vaderAsset = vaderBalance * assetDeposited
Propogating All
assetDeposited_1
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
vaderBalance_1
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE assetVader = assetBalance * vaderDeposited
Propogating All
assetBalance_1
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
vaderDeposited_1
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
NEW VARIABLE denominator = (vaderDeposited + vaderBalance) * (assetDeposited + assetBalance)
Propogating All
assetBalance_1
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
assetDeposited_1
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
vaderBalance_1
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
vaderDeposited_1
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN ONE - (delta(vaderAsset,assetVader) / denominator)
Propogating All
denominator_1
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetVader_1
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
vaderAsset_1
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i] vaderDeposited cleared
clearing ir...?
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i] vaderBalance cleared
clearing ir...?
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i] assetDeposited cleared
clearing ir...?
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i] assetBalance cleared
clearing ir...?
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
[i] ONE cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: ONE_3, name: ONE

Name: ONE Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 3
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
Phi
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
Phi
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
Phi
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
Phi
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
Phi
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i] TMP_10 cleared
clearing ir...?
vaderAsset_1(uint256) := TMP_10(uint256)
[i] vaderAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
End popogation
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
vaderAsset_1(uint256) := TMP_10(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
[i] TMP_11 cleared
clearing ir...?
assetVader_1(uint256) := TMP_11(uint256)
[i] assetVader cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
End popogation
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
assetVader_1(uint256) := TMP_11(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i] TMP_12 cleared
clearing ir...?
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i] TMP_13 cleared
clearing ir...?
TMP_14(uint256) = TMP_12 (c)* TMP_13
[i] TMP_14 cleared
clearing ir...?
denominator_1(uint256) := TMP_14(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
Source address: u
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
Source address: u
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_14(uint256) = TMP_12 (c)* TMP_13
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
denominator_1(uint256) := TMP_14(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
[i] TMP_15 cleared
clearing ir...?
TMP_16(uint256) = TMP_15 (c)/ denominator_1
[i] TMP_16 cleared
clearing ir...?
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i] TMP_17 cleared
clearing ir...?
RETURN TMP_17
Propogating parameters and globals to SSA variables...
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
New param cache [[[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], 0, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u']]
Param: a
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: b
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
FIND RETURN
ENTRY_POINT
delta(uint256,uint256)
ENTRY_POINT
Propogating All
IF a > b
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN b - a
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN a - b
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: b_1, name: b

Name: b Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
([-1], [-1], 'u', 'u', 'u', 0)
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_16(uint256) = TMP_15 (c)/ denominator_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_17(uint256) = ONE_4 (c)- TMP_16
Source address: u
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_17
RETURN

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i] vaderDeposited cleared
clearing ir...?
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i] vaderBalance cleared
clearing ir...?
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i] assetDeposited cleared
clearing ir...?
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i] assetBalance cleared
clearing ir...?
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
[i] ONE cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: vaderBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetDeposited_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: assetBalance_1 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: ONE_3, name: ONE

Name: ONE Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: ONE, Num: 3
Globalname: ONE, contract_name: VaderMath
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
Phi
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
Phi
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
Phi
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
Phi
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ONE_3(uint256) := ϕ(['ONE_4', 'ONE_0', 'ONE_2'])
Phi
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i] TMP_10 cleared
clearing ir...?
vaderAsset_1(uint256) := TMP_10(uint256)
[i] vaderAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderAsset, Num: 1
Globalname: vaderAsset, contract_name: VaderMath
End popogation
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
vaderAsset_1(uint256) := TMP_10(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
[i] TMP_11 cleared
clearing ir...?
assetVader_1(uint256) := TMP_11(uint256)
[i] assetVader cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: assetVader, Num: 1
Globalname: assetVader, contract_name: VaderMath
End popogation
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
assetVader_1(uint256) := TMP_11(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i] TMP_12 cleared
clearing ir...?
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i] TMP_13 cleared
clearing ir...?
TMP_14(uint256) = TMP_12 (c)* TMP_13
[i] TMP_14 cleared
clearing ir...?
denominator_1(uint256) := TMP_14(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
Source address: u
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
Source address: u
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_14(uint256) = TMP_12 (c)* TMP_13
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
denominator_1(uint256) := TMP_14(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
[i] TMP_15 cleared
clearing ir...?
TMP_16(uint256) = TMP_15 (c)/ denominator_1
[i] TMP_16 cleared
clearing ir...?
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i] TMP_17 cleared
clearing ir...?
RETURN TMP_17
Propogating parameters and globals to SSA variables...
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: ONE_4, name: ONE

Name: ONE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetVader_1, name: assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: vaderAsset_1, name: vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
New param cache [[[-1], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], 0, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u']]
Param: a
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: b
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
FIND RETURN
ENTRY_POINT
delta(uint256,uint256)
ENTRY_POINT
Propogating All
IF a > b
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN b - a
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
RETURN a - b
Propogating All
b_1
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: b_1, name: b

Name: b_1 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
a_1(uint256) := ϕ(['vaderAsset_1'])
[i] a cleared
clearing ir...?
b_1(uint256) := ϕ(['assetVader_1'])
[i] b cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: a_1, name: a

Name: a Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: a_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: b_1, name: b

Name: b Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: b_1 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
a_1(uint256) := ϕ(['vaderAsset_1'])
Phi
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['assetVader_1'])
Phi
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_45(bool) = a_1 > b_1
[i] TMP_45 cleared
clearing ir...?
CONDITION TMP_45
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_45(bool) = a_1 > b_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_47(uint256) = b_1 (c)- a_1
[i] TMP_47 cleared
clearing ir...?
RETURN TMP_47
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_47
RETURN

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
clearing ir...?
TMP_46(uint256) = a_1 (c)- b_1
[i] TMP_46 cleared
clearing ir...?
RETURN TMP_46
Propogating parameters and globals to SSA variables...
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: b_1, name: b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: a_1, name: a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_46
RETURN

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
([-1], [-1], 'u', 'u', 'u', 0)
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_16(uint256) = TMP_15 (c)/ denominator_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_17(uint256) = ONE_4 (c)- TMP_16
Source address: u
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_17
RETURN

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
Source address: u
[i]Type for TMP_0

Name: TMP_0 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
ONE_2(uint256) := ϕ(['ONE_4'])
Phi
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
slip_1(uint256) := TMP_0(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i] TMP_1 cleared
clearing ir...?
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
[i] TMP_2 cleared
clearing ir...?
TMP_3(uint256) = TMP_1 (c)+ TMP_2
[i] TMP_3 cleared
clearing ir...?
poolUnitFactor_1(uint256) := TMP_3(uint256)
[i] poolUnitFactor cleared
Propogating parameters and globals to SSA variables...
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderDeposited_1, name: vaderDeposited

Name: vaderDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetDeposited_1, name: assetDeposited

Name: assetDeposited_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolUnitFactor, Num: 1
Globalname: poolUnitFactor, contract_name: VaderMath
End popogation
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_1

Name: TMP_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_2

Name: TMP_2 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_3(uint256) = TMP_1 (c)+ TMP_2
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_3

Name: TMP_3 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
poolUnitFactor_1(uint256) := TMP_3(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_4(uint256) = ONE_2 (c)* 2
[i] TMP_4 cleared
clearing ir...?
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
[i] TMP_5 cleared
clearing ir...?
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
[i] TMP_6 cleared
clearing ir...?
denominator_1(uint256) := TMP_6(uint256)
[i] denominator cleared
Propogating parameters and globals to SSA variables...
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: ONE_2, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: vaderBalance_1, name: vaderBalance

Name: vaderBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: assetBalance_1, name: assetBalance

Name: assetBalance_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: ONE_2, name: ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateLiquidityUnits
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Name: denominator, Num: 1
Globalname: denominator, contract_name: VaderMath
End popogation
TMP_4(uint256) = ONE_2 (c)* 2
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_4

Name: TMP_4 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
A: 0 B: u
lnorm: 0 rnorm: u
Source address: u
[i]Type for TMP_5

Name: TMP_5 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
A: 0 B: u
lnorm: 0 rnorm: u
Source address: u
[i]Type for TMP_6

Name: TMP_6 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
denominator_1(uint256) := TMP_6(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
[i] TMP_7 cleared
clearing ir...?
TMP_8(uint256) = TMP_7 (c)/ denominator_1
[i] TMP_8 cleared
clearing ir...?
TMP_9(uint256) = TMP_8 (c)* slip_1
[i] TMP_9 cleared
clearing ir...?
RETURN TMP_9
Propogating parameters and globals to SSA variables...
Ssa_name: totalPoolUnits_1, name: totalPoolUnits

Name: totalPoolUnits_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: slip_1, name: slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: totalPoolUnits_1, name: totalPoolUnits

Name: totalPoolUnits_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: slip_1, name: slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: denominator_1, name: denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Ssa_name: poolUnitFactor_1, name: poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
A: u B: u
lnorm: u rnorm: u
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_7

Name: TMP_7 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_8(uint256) = TMP_7 (c)/ denominator_1
A: u B: 0
lnorm: u rnorm: 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_8

Name: TMP_8 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: raw balance
XXXX
TMP_9(uint256) = TMP_8 (c)* slip_1
A: 0 B: u
lnorm: 0 rnorm: u
Finance type key: (0, 0)
Source address: u
[i]Type for TMP_9

Name: TMP_9 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_9
RETURN

Name: TMP_9 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: raw balance
Source address: u
Source address: u
[i]Type for TMP_146

Name: TMP_146 Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: raw balance
XXXX
liquidity_2(uint256) := TMP_146(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
liquidity_3(uint256) := ϕ(['liquidity_1', 'liquidity_2'])
[i] liquidity cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: liquidity_3, name: liquidity

Name: liquidity Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: liquidity, Num: 3
Globalname: liquidity, contract_name: BasePool
liquidity_3(uint256) := ϕ(['liquidity_1', 'liquidity_2'])
Phi

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: raw balance


END==================================
[i]Type for liquidity

Name: liquidity Function: mint
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_147(bool) = liquidity_3 > 0
[i] TMP_147 cleared
clearing ir...?
TMP_148(None) = SOLIDITY_CALL require(bool,string)(TMP_147,BasePool::mint: Insufficient Liquidity Provided)
Propogating parameters and globals to SSA variables...
Ssa_name: liquidity_3, name: liquidity

Name: liquidity Function: mint
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Name: liquidity, Num: 3
Globalname: liquidity, contract_name: BasePool
Ssa_name: liquidity_3, name: liquidity

Name: liquidity Function: mint
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Name: liquidity, Num: 3
Globalname: liquidity, contract_name: BasePool
End popogation
TMP_147(bool) = liquidity_3 > 0
A: 0 B: 0
lnorm: 0 rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_147

Name: TMP_147 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_148(None) = SOLIDITY_CALL require(bool,string)(TMP_147,BasePool::mint: Insufficient Liquidity Provided)
[i]Type for TMP_148

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_149(uint256) := positionId_5(uint256)
[i] TMP_149 cleared
clearing ir...?
positionId_6(uint256) = positionId_5 (c)+ 1
[i] positionId cleared
clearing ir...?
id_1(uint256) := TMP_149(uint256)
[i] id cleared
Propogating parameters and globals to SSA variables...
Ssa_name: positionId_5, name: positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: positionId_5, name: positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: positionId_6, name: positionId

Name: positionId Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: positionId, Num: 6
Globalname: positionId, contract_name: BasePool
global...

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u
Ssa_name: id_1, name: id

Name: id Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: id, Num: 1
Globalname: id, contract_name: BasePool
End popogation
TMP_149(uint256) := positionId_5(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_149

Name: TMP_149 Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
positionId_6(uint256) = positionId_5 (c)+ 1
Source address: u
[i]Type for positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
id_1(uint256) := TMP_149(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for id

Name: id Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Copied positionId
Source address: u
clearing ir...?
totalSupply_6(uint256) = totalSupply_5 (c)+ liquidity_3
[i] totalSupply cleared
Propogating parameters and globals to SSA variables...
Ssa_name: liquidity_3, name: liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: totalSupply_5, name: totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: totalSupply_5, name: totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: liquidity_3, name: liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: totalSupply_6, name: totalSupply

Name: totalSupply Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: totalSupply, Num: 6
Globalname: totalSupply, contract_name: BasePool
global...

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
End popogation
totalSupply_6(uint256) = totalSupply_5 (c)+ liquidity_3
Finance type key: (0, 0)
Source address: u
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied totalSupply
Source address: u
clearing ir...?
INTERNAL_CALL, ERC721._mint(address,uint256)(to_1,id_1)
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to_1 Function: mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: id_1, name: id

Name: id Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to_1 Function: mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: id_1, name: id

Name: id Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, ERC721._mint(address,uint256)(to_1,id_1)
New param cache [[[], [], 0, 'to', [], -1, -998, 'u'], [[-1], [-1], 0, None, [], -1, 'u', 1]]
Old param cache: [[[], [], 0, 'to', [], -1, -998], [[-1], [-1], 'u', None, [], -1, 'u']]
Param: to
[[], [], 0, 'to', [], -1, -998, 'u']

Name: to Function: None
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Param: tokenId
[[-1], [-1], 0, None, [], -1, 'u', 1]

Name: tokenId Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_mint(address,uint256)
ENTRY_POINT
Propogating All
EXPRESSION require(bool,string)(to != address(0),ERC721: mint to the zero address)
Propogating All
to_1
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION require(bool,string)(! _exists(tokenId),ERC721: token already minted)
Propogating All
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION _beforeTokenTransfer(address(0),to,tokenId,1)
Propogating All
to_1
Ssa_name: to_1, name: to

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION require(bool,string)(! _exists(tokenId),ERC721: token already minted)
Propogating All
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION _balances[to] += 1
Propogating All
to_1
Ssa_name: to_1, name: to

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION _owners[tokenId] = to
Propogating All
to_1
Ssa_name: to_1, name: to

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION Transfer(address(0),to,tokenId)
Propogating All
to_1
Ssa_name: to_1, name: to

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION _afterTokenTransfer(address(0),to,tokenId,1)
Propogating All
to_1
Ssa_name: to_1, name: to

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1'])
[i] to cleared
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'id_1'])
[i] tokenId cleared
clearing ir...?
_balances_2(mapping(address => uint256)) := ϕ(['_balances_17', '_balances_11', '_balances_1', '_balances_6', '_balances_19', '_balances_0'])
[i] _balances cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: to_1, name: to

Name: to_1 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _balances_2, name: _balances

Name: _balances Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _balances, Num: 2
Globalname: _balances, contract_name: BasePool
global...

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
to_1(address) := ϕ(['to_1', 'to_1'])
Phi
[i]Type for to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
tokenId_1(uint256) := ϕ(['tokenId_1', 'id_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
_balances_2(mapping(address => uint256)) := ϕ(['_balances_17', '_balances_11', '_balances_1', '_balances_6', '_balances_19', '_balances_0'])
Phi
[i]Type for _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_79 = CONVERT 0 to address
[i] TMP_79 cleared
clearing ir...?
TMP_80(bool) = to_1 != TMP_79
[i] TMP_80 cleared
clearing ir...?
TMP_81(None) = SOLIDITY_CALL require(bool,string)(TMP_80,ERC721: mint to the zero address)
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_79 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_79

Name: TMP_79 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_80(bool) = to_1 != TMP_79
[i]Type for TMP_80

Name: TMP_80 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_81(None) = SOLIDITY_CALL require(bool,string)(TMP_80,ERC721: mint to the zero address)
[i]Type for TMP_81

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_82(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
[i] TMP_82 cleared
clearing ir...?
TMP_83 = ! TMP_82 
clearing ir...?
TMP_84(None) = SOLIDITY_CALL require(bool,string)(TMP_83,ERC721: token already minted)
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_82(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 1]]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u']]
Param: tokenId
[[-1], [-1], 0, None, [], -1, 'u', 1]

Name: tokenId Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_exists(uint256)
ENTRY_POINT
Propogating All
RETURN _ownerOf(tokenId) != address(0)
Propogating All
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
[i] TMP_64 cleared
clearing ir...?
TMP_65 = CONVERT 0 to address
[i] TMP_65 cleared
clearing ir...?
TMP_66(bool) = TMP_64 != TMP_65
[i] TMP_66 cleared
clearing ir...?
RETURN TMP_66
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 1]]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u']]
Param: tokenId
[[-1], [-1], 0, None, [], -1, 'u', 1]

Name: tokenId Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_ownerOf(uint256)
ENTRY_POINT
Propogating All
RETURN _owners[tokenId]
Propogating All
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
clearing ir...?
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
[i] _owners cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 1
Globalname: _owners, contract_name: BasePool
global...

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
Phi
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(address) -> _owners_1[tokenId_1]
[i] REF_10 cleared
clearing ir...?
RETURN REF_10
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_10(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_10
RETURN

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
clearing ir...?
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
[i] _owners cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 1
Globalname: _owners, contract_name: BasePool
global...

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
Phi
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(address) -> _owners_1[tokenId_1]
[i] REF_10 cleared
clearing ir...?
RETURN REF_10
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_10(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_10
RETURN

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
Source address: 3
[i]Type for TMP_64

Name: TMP_64 Function: _exists
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_65 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_65

Name: TMP_65 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_66(bool) = TMP_64 != TMP_65
[i]Type for TMP_66

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_66
RETURN

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
[i] TMP_64 cleared
clearing ir...?
TMP_65 = CONVERT 0 to address
[i] TMP_65 cleared
clearing ir...?
TMP_66(bool) = TMP_64 != TMP_65
[i] TMP_66 cleared
clearing ir...?
RETURN TMP_66
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 1]]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u']]
Param: tokenId
[[-1], [-1], 0, None, [], -1, 'u', 1]

Name: tokenId Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_ownerOf(uint256)
ENTRY_POINT
Propogating All
RETURN _owners[tokenId]
Propogating All
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
clearing ir...?
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
[i] _owners cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 1
Globalname: _owners, contract_name: BasePool
global...

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
Phi
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(address) -> _owners_1[tokenId_1]
[i] REF_10 cleared
clearing ir...?
RETURN REF_10
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_10(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_10
RETURN

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
clearing ir...?
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
[i] _owners cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 1
Globalname: _owners, contract_name: BasePool
global...

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
Phi
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(address) -> _owners_1[tokenId_1]
[i] REF_10 cleared
clearing ir...?
RETURN REF_10
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_10(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_10
RETURN

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
Source address: 3
[i]Type for TMP_64

Name: TMP_64 Function: _exists
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_65 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_65

Name: TMP_65 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_66(bool) = TMP_64 != TMP_65
[i]Type for TMP_66

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_66
RETURN

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_82

Name: TMP_82 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_83 = ! TMP_82 
[i]Type for TMP_83

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_84(None) = SOLIDITY_CALL require(bool,string)(TMP_83,ERC721: token already minted)
[i]Type for TMP_84

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_85 = CONVERT 0 to address
[i] TMP_85 cleared
clearing ir...?
INTERNAL_CALL, ERC721._beforeTokenTransfer(address,address,uint256,uint256)(TMP_85,to_1,tokenId_1,1)
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_85 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_85

Name: TMP_85 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC721._beforeTokenTransfer(address,address,uint256,uint256)(TMP_85,to_1,tokenId_1,1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 'u'], [[], [], 0, 'to', [], -1, -998, 'u'], [[-1], [-1], 0, None, [], -1, 'u', 1], [[-1], [-1], 0, None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 0, None, [], -1, 'u'], [[], [], 0, 'to', [], -1, -998], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 0, None, [], -1, 'u']]
Param: from
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: from Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
Param: to
[[], [], 0, 'to', [], -1, -998, 'u']

Name: to Function: None
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Param: firstTokenId
[[-1], [-1], 0, None, [], -1, 'u', 1]

Name: firstTokenId Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Param: batchSize
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: batchSize Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_beforeTokenTransfer(address,address,uint256,uint256)
ENTRY_POINT
Propogating All
clearing ir...?
from_1(address) := ϕ(['TMP_85', 'owner_1', 'from_1'])
[i] from cleared
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_95'])
[i] to cleared
clearing ir...?
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
[i] firstTokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: from_1, name: from

Name: from Function: _beforeTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: from_1 Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: to_1, name: to

Name: to Function: _beforeTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _beforeTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: firstTokenId_1, name: firstTokenId

Name: firstTokenId Function: _beforeTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: firstTokenId_1 Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
from_1(address) := ϕ(['TMP_85', 'owner_1', 'from_1'])
Phi
[i]Type for from

Name: from Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_95'])
Phi
[i]Type for to

Name: to Function: _beforeTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
Phi
[i]Type for firstTokenId

Name: firstTokenId Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
from_1(address) := ϕ(['TMP_85', 'owner_1', 'from_1'])
[i] from cleared
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_95'])
[i] to cleared
clearing ir...?
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
[i] firstTokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: from_1, name: from

Name: from Function: _beforeTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: from_1 Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: to_1, name: to

Name: to Function: _beforeTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _beforeTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: firstTokenId_1, name: firstTokenId

Name: firstTokenId Function: _beforeTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: firstTokenId_1 Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
from_1(address) := ϕ(['TMP_85', 'owner_1', 'from_1'])
Phi
[i]Type for from

Name: from Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_95'])
Phi
[i]Type for to

Name: to Function: _beforeTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
Phi
[i]Type for firstTokenId

Name: firstTokenId Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_87(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
[i] TMP_87 cleared
clearing ir...?
TMP_88 = ! TMP_87 
clearing ir...?
TMP_89(None) = SOLIDITY_CALL require(bool,string)(TMP_88,ERC721: token already minted)
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_87(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 1]]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u']]
Param: tokenId
[[-1], [-1], 0, None, [], -1, 'u', 1]

Name: tokenId Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_exists(uint256)
ENTRY_POINT
Propogating All
RETURN _ownerOf(tokenId) != address(0)
Propogating All
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
[i] TMP_64 cleared
clearing ir...?
TMP_65 = CONVERT 0 to address
[i] TMP_65 cleared
clearing ir...?
TMP_66(bool) = TMP_64 != TMP_65
[i] TMP_66 cleared
clearing ir...?
RETURN TMP_66
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 1]]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u']]
Param: tokenId
[[-1], [-1], 0, None, [], -1, 'u', 1]

Name: tokenId Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_ownerOf(uint256)
ENTRY_POINT
Propogating All
RETURN _owners[tokenId]
Propogating All
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
clearing ir...?
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
[i] _owners cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 1
Globalname: _owners, contract_name: BasePool
global...

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
Phi
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(address) -> _owners_1[tokenId_1]
[i] REF_10 cleared
clearing ir...?
RETURN REF_10
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_10(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_10
RETURN

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
clearing ir...?
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
[i] _owners cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 1
Globalname: _owners, contract_name: BasePool
global...

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
Phi
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(address) -> _owners_1[tokenId_1]
[i] REF_10 cleared
clearing ir...?
RETURN REF_10
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_10(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_10
RETURN

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
Source address: 3
[i]Type for TMP_64

Name: TMP_64 Function: _exists
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_65 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_65

Name: TMP_65 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_66(bool) = TMP_64 != TMP_65
[i]Type for TMP_66

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_66
RETURN

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
[i] TMP_64 cleared
clearing ir...?
TMP_65 = CONVERT 0 to address
[i] TMP_65 cleared
clearing ir...?
TMP_66(bool) = TMP_64 != TMP_65
[i] TMP_66 cleared
clearing ir...?
RETURN TMP_66
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 1]]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u']]
Param: tokenId
[[-1], [-1], 0, None, [], -1, 'u', 1]

Name: tokenId Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_ownerOf(uint256)
ENTRY_POINT
Propogating All
RETURN _owners[tokenId]
Propogating All
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
clearing ir...?
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
[i] _owners cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 1
Globalname: _owners, contract_name: BasePool
global...

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
Phi
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(address) -> _owners_1[tokenId_1]
[i] REF_10 cleared
clearing ir...?
RETURN REF_10
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_10(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_10
RETURN

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
clearing ir...?
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
[i] _owners cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 1
Globalname: _owners, contract_name: BasePool
global...

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
Phi
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(address) -> _owners_1[tokenId_1]
[i] REF_10 cleared
clearing ir...?
RETURN REF_10
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_10(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_10
RETURN

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
Source address: 3
[i]Type for TMP_64

Name: TMP_64 Function: _exists
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_65 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_65

Name: TMP_65 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_66(bool) = TMP_64 != TMP_65
[i]Type for TMP_66

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_66
RETURN

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_87

Name: TMP_87 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_88 = ! TMP_87 
[i]Type for TMP_88

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_89(None) = SOLIDITY_CALL require(bool,string)(TMP_88,ERC721: token already minted)
[i]Type for TMP_89

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_12(uint256) -> _balances_5[to_1]
[i] REF_12 cleared
clearing ir...?
_balances_6(mapping(address => uint256)) := ϕ(['_balances_5'])
[i] _balances cleared
clearing ir...?
REF_12(-> _balances_6) = REF_12 + 1
[i] REF_12 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: _balances_6, name: _balances

Name: _balances Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _balances, Num: 6
Globalname: _balances, contract_name: BasePool
global...

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: _balances_6, name: _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _balances_6, name: _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: _balances_6, name: _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(uint256) -> _balances_5[to_1]
INDEX
REFERENCE RIGHT VALUE PROPAGATION
[i]Type for REF_12

Name: None Function: None
Num: -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
_balances_6(mapping(address => uint256)) := ϕ(['_balances_5'])
Phi
[i]Type for _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_12(-> _balances_6) = REF_12 + 1
-998
-1
[i]Type for REF_12

Name: REF_12 Function: _mint
Num: -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied _balances
Source address: u
clearing ir...?
REF_13(address) -> _owners_1[tokenId_1]
[i] REF_13 cleared
clearing ir...?
_owners_2(mapping(uint256 => address)) := ϕ(['_owners_1'])
[i] _owners cleared
clearing ir...?
REF_13 (->_owners_2) := to_1(address)
[i] REF_13 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_2, name: _owners

Name: _owners Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 2
Globalname: _owners, contract_name: BasePool
global...

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
End popogation
Ssa_name: _owners_2, name: _owners

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
REF_13(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_13

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
_owners_2(mapping(uint256 => address)) := ϕ(['_owners_1'])
Phi
[i]Type for _owners

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_13 (->_owners_2) := to_1(address)
asgn
Finance type key: (-1, -1)
[i]Type for REF_13

Name: REF_13 Function: _mint
Num: 
Den: 
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied _owners
Source address: 3
clearing ir...?
TMP_90 = CONVERT 0 to address
[i] TMP_90 cleared
clearing ir...?
Emit Transfer(TMP_90,to_1,tokenId_1)
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_90 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_90

Name: TMP_90 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_92 = CONVERT 0 to address
[i] TMP_92 cleared
clearing ir...?
INTERNAL_CALL, ERC721._afterTokenTransfer(address,address,uint256,uint256)(TMP_92,to_1,tokenId_1,1)
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_92 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_92

Name: TMP_92 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC721._afterTokenTransfer(address,address,uint256,uint256)(TMP_92,to_1,tokenId_1,1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 'u'], [[], [], 0, 'to', [], -1, -998, 'u'], [[-1], [-1], 0, None, [], -1, 'u', 1], [[-1], [-1], 0, None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 0, None, [], -1, 'u'], [[], [], 0, 'to', [], -1, -998], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 0, None, [], -1, 'u']]
Param: from
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: from Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
Param: to
[[], [], 0, 'to', [], -1, -998, 'u']

Name: to Function: None
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Param: firstTokenId
[[-1], [-1], 0, None, [], -1, 'u', 1]

Name: firstTokenId Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Param: batchSize
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: batchSize Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_afterTokenTransfer(address,address,uint256,uint256)
ENTRY_POINT
Propogating All
clearing ir...?
from_1(address) := ϕ(['owner_2', 'TMP_92', 'from_1'])
[i] from cleared
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_100'])
[i] to cleared
clearing ir...?
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
[i] firstTokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: from_1, name: from

Name: from Function: _afterTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: from_1 Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: to_1, name: to

Name: to Function: _afterTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _afterTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: firstTokenId_1, name: firstTokenId

Name: firstTokenId Function: _afterTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: firstTokenId_1 Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
from_1(address) := ϕ(['owner_2', 'TMP_92', 'from_1'])
Phi
[i]Type for from

Name: from Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_100'])
Phi
[i]Type for to

Name: to Function: _afterTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
Phi
[i]Type for firstTokenId

Name: firstTokenId Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
from_1(address) := ϕ(['owner_2', 'TMP_92', 'from_1'])
[i] from cleared
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_100'])
[i] to cleared
clearing ir...?
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
[i] firstTokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: from_1, name: from

Name: from Function: _afterTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: from_1 Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: to_1, name: to

Name: to Function: _afterTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _afterTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: firstTokenId_1, name: firstTokenId

Name: firstTokenId Function: _afterTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: firstTokenId_1 Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
from_1(address) := ϕ(['owner_2', 'TMP_92', 'from_1'])
Phi
[i]Type for from

Name: from Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_100'])
Phi
[i]Type for to

Name: to Function: _afterTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
Phi
[i]Type for firstTokenId

Name: firstTokenId Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1'])
[i] to cleared
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'id_1'])
[i] tokenId cleared
clearing ir...?
_balances_2(mapping(address => uint256)) := ϕ(['_balances_17', '_balances_11', '_balances_1', '_balances_6', '_balances_19', '_balances_0'])
[i] _balances cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _balances_2, name: _balances

Name: _balances Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _balances, Num: 2
Globalname: _balances, contract_name: BasePool
global...

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
to_1(address) := ϕ(['to_1', 'to_1'])
Phi
[i]Type for to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
tokenId_1(uint256) := ϕ(['tokenId_1', 'id_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
_balances_2(mapping(address => uint256)) := ϕ(['_balances_17', '_balances_11', '_balances_1', '_balances_6', '_balances_19', '_balances_0'])
Phi
[i]Type for _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_79 = CONVERT 0 to address
[i] TMP_79 cleared
clearing ir...?
TMP_80(bool) = to_1 != TMP_79
[i] TMP_80 cleared
clearing ir...?
TMP_81(None) = SOLIDITY_CALL require(bool,string)(TMP_80,ERC721: mint to the zero address)
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_79 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_79

Name: TMP_79 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_80(bool) = to_1 != TMP_79
[i]Type for TMP_80

Name: TMP_80 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_81(None) = SOLIDITY_CALL require(bool,string)(TMP_80,ERC721: mint to the zero address)
[i]Type for TMP_81

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_82(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
[i] TMP_82 cleared
clearing ir...?
TMP_83 = ! TMP_82 
clearing ir...?
TMP_84(None) = SOLIDITY_CALL require(bool,string)(TMP_83,ERC721: token already minted)
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_82(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 1]]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u']]
Param: tokenId
[[-1], [-1], 0, None, [], -1, 'u', 1]

Name: tokenId Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_exists(uint256)
ENTRY_POINT
Propogating All
RETURN _ownerOf(tokenId) != address(0)
Propogating All
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
[i] TMP_64 cleared
clearing ir...?
TMP_65 = CONVERT 0 to address
[i] TMP_65 cleared
clearing ir...?
TMP_66(bool) = TMP_64 != TMP_65
[i] TMP_66 cleared
clearing ir...?
RETURN TMP_66
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 1]]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u']]
Param: tokenId
[[-1], [-1], 0, None, [], -1, 'u', 1]

Name: tokenId Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_ownerOf(uint256)
ENTRY_POINT
Propogating All
RETURN _owners[tokenId]
Propogating All
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
clearing ir...?
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
[i] _owners cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 1
Globalname: _owners, contract_name: BasePool
global...

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
Phi
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(address) -> _owners_1[tokenId_1]
[i] REF_10 cleared
clearing ir...?
RETURN REF_10
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_10(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_10
RETURN

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
clearing ir...?
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
[i] _owners cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 1
Globalname: _owners, contract_name: BasePool
global...

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
Phi
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(address) -> _owners_1[tokenId_1]
[i] REF_10 cleared
clearing ir...?
RETURN REF_10
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_10(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_10
RETURN

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
Source address: 3
[i]Type for TMP_64

Name: TMP_64 Function: _exists
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_65 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_65

Name: TMP_65 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_66(bool) = TMP_64 != TMP_65
[i]Type for TMP_66

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_66
RETURN

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
[i] TMP_64 cleared
clearing ir...?
TMP_65 = CONVERT 0 to address
[i] TMP_65 cleared
clearing ir...?
TMP_66(bool) = TMP_64 != TMP_65
[i] TMP_66 cleared
clearing ir...?
RETURN TMP_66
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 1]]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u']]
Param: tokenId
[[-1], [-1], 0, None, [], -1, 'u', 1]

Name: tokenId Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_ownerOf(uint256)
ENTRY_POINT
Propogating All
RETURN _owners[tokenId]
Propogating All
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
clearing ir...?
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
[i] _owners cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 1
Globalname: _owners, contract_name: BasePool
global...

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
Phi
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(address) -> _owners_1[tokenId_1]
[i] REF_10 cleared
clearing ir...?
RETURN REF_10
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_10(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_10
RETURN

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
clearing ir...?
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
[i] _owners cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 1
Globalname: _owners, contract_name: BasePool
global...

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
Phi
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(address) -> _owners_1[tokenId_1]
[i] REF_10 cleared
clearing ir...?
RETURN REF_10
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_10(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_10
RETURN

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
Source address: 3
[i]Type for TMP_64

Name: TMP_64 Function: _exists
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_65 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_65

Name: TMP_65 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_66(bool) = TMP_64 != TMP_65
[i]Type for TMP_66

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_66
RETURN

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_82

Name: TMP_82 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_83 = ! TMP_82 
[i]Type for TMP_83

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_84(None) = SOLIDITY_CALL require(bool,string)(TMP_83,ERC721: token already minted)
[i]Type for TMP_84

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_85 = CONVERT 0 to address
[i] TMP_85 cleared
clearing ir...?
INTERNAL_CALL, ERC721._beforeTokenTransfer(address,address,uint256,uint256)(TMP_85,to_1,tokenId_1,1)
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_85 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_85

Name: TMP_85 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC721._beforeTokenTransfer(address,address,uint256,uint256)(TMP_85,to_1,tokenId_1,1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 'u'], [[], [], 0, 'to', [], -1, -998, 'u'], [[-1], [-1], 0, None, [], -1, 'u', 1], [[-1], [-1], 0, None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 0, None, [], -1, 'u'], [[], [], 0, 'to', [], -1, -998], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 0, None, [], -1, 'u']]
Param: from
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: from Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
Param: to
[[], [], 0, 'to', [], -1, -998, 'u']

Name: to Function: None
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Param: firstTokenId
[[-1], [-1], 0, None, [], -1, 'u', 1]

Name: firstTokenId Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Param: batchSize
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: batchSize Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_beforeTokenTransfer(address,address,uint256,uint256)
ENTRY_POINT
Propogating All
clearing ir...?
from_1(address) := ϕ(['TMP_85', 'owner_1', 'from_1'])
[i] from cleared
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_95'])
[i] to cleared
clearing ir...?
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
[i] firstTokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: from_1, name: from

Name: from Function: _beforeTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: from_1 Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: to_1, name: to

Name: to Function: _beforeTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _beforeTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: firstTokenId_1, name: firstTokenId

Name: firstTokenId Function: _beforeTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: firstTokenId_1 Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
from_1(address) := ϕ(['TMP_85', 'owner_1', 'from_1'])
Phi
[i]Type for from

Name: from Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_95'])
Phi
[i]Type for to

Name: to Function: _beforeTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
Phi
[i]Type for firstTokenId

Name: firstTokenId Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
from_1(address) := ϕ(['TMP_85', 'owner_1', 'from_1'])
[i] from cleared
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_95'])
[i] to cleared
clearing ir...?
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
[i] firstTokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: from_1, name: from

Name: from Function: _beforeTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: from_1 Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: to_1, name: to

Name: to Function: _beforeTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _beforeTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: firstTokenId_1, name: firstTokenId

Name: firstTokenId Function: _beforeTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: firstTokenId_1 Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
from_1(address) := ϕ(['TMP_85', 'owner_1', 'from_1'])
Phi
[i]Type for from

Name: from Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_95'])
Phi
[i]Type for to

Name: to Function: _beforeTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
Phi
[i]Type for firstTokenId

Name: firstTokenId Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_87(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
[i] TMP_87 cleared
clearing ir...?
TMP_88 = ! TMP_87 
clearing ir...?
TMP_89(None) = SOLIDITY_CALL require(bool,string)(TMP_88,ERC721: token already minted)
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_87(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 1]]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u']]
Param: tokenId
[[-1], [-1], 0, None, [], -1, 'u', 1]

Name: tokenId Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_exists(uint256)
ENTRY_POINT
Propogating All
RETURN _ownerOf(tokenId) != address(0)
Propogating All
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
[i] TMP_64 cleared
clearing ir...?
TMP_65 = CONVERT 0 to address
[i] TMP_65 cleared
clearing ir...?
TMP_66(bool) = TMP_64 != TMP_65
[i] TMP_66 cleared
clearing ir...?
RETURN TMP_66
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 1]]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u']]
Param: tokenId
[[-1], [-1], 0, None, [], -1, 'u', 1]

Name: tokenId Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_ownerOf(uint256)
ENTRY_POINT
Propogating All
RETURN _owners[tokenId]
Propogating All
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
clearing ir...?
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
[i] _owners cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 1
Globalname: _owners, contract_name: BasePool
global...

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
Phi
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(address) -> _owners_1[tokenId_1]
[i] REF_10 cleared
clearing ir...?
RETURN REF_10
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_10(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_10
RETURN

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
clearing ir...?
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
[i] _owners cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 1
Globalname: _owners, contract_name: BasePool
global...

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
Phi
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(address) -> _owners_1[tokenId_1]
[i] REF_10 cleared
clearing ir...?
RETURN REF_10
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_10(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_10
RETURN

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
Source address: 3
[i]Type for TMP_64

Name: TMP_64 Function: _exists
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_65 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_65

Name: TMP_65 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_66(bool) = TMP_64 != TMP_65
[i]Type for TMP_66

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_66
RETURN

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
[i] TMP_64 cleared
clearing ir...?
TMP_65 = CONVERT 0 to address
[i] TMP_65 cleared
clearing ir...?
TMP_66(bool) = TMP_64 != TMP_65
[i] TMP_66 cleared
clearing ir...?
RETURN TMP_66
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 1]]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u']]
Param: tokenId
[[-1], [-1], 0, None, [], -1, 'u', 1]

Name: tokenId Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_ownerOf(uint256)
ENTRY_POINT
Propogating All
RETURN _owners[tokenId]
Propogating All
tokenId_1
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
clearing ir...?
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
[i] _owners cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId_1 Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 1
Globalname: _owners, contract_name: BasePool
global...

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
Phi
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(address) -> _owners_1[tokenId_1]
[i] REF_10 cleared
clearing ir...?
RETURN REF_10
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_10(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_10
RETURN

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i] tokenId cleared
clearing ir...?
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
[i] _owners cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: tokenId_1 Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 1
Globalname: _owners, contract_name: BasePool
global...

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
Phi
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_2', '_owners_0', '_owners_1', '_owners_8', '_owners_7'])
Phi
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_10(address) -> _owners_1[tokenId_1]
[i] REF_10 cleared
clearing ir...?
RETURN REF_10
Propogating parameters and globals to SSA variables...
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_1, name: _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_10(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_10
RETURN

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
Source address: 3
[i]Type for TMP_64

Name: TMP_64 Function: _exists
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_65 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_65

Name: TMP_65 Function: _exists
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_66(bool) = TMP_64 != TMP_65
[i]Type for TMP_66

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_66
RETURN

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_87

Name: TMP_87 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_88 = ! TMP_87 
[i]Type for TMP_88

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_89(None) = SOLIDITY_CALL require(bool,string)(TMP_88,ERC721: token already minted)
[i]Type for TMP_89

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_12(uint256) -> _balances_5[to_1]
[i] REF_12 cleared
clearing ir...?
_balances_6(mapping(address => uint256)) := ϕ(['_balances_5'])
[i] _balances cleared
clearing ir...?
REF_12(-> _balances_6) = REF_12 + 1
[i] REF_12 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: _balances_6, name: _balances

Name: _balances Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _balances, Num: 6
Globalname: _balances, contract_name: BasePool
global...

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: _balances_6, name: _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _balances_6, name: _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: _balances_6, name: _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(uint256) -> _balances_5[to_1]
INDEX
REFERENCE RIGHT VALUE PROPAGATION
[i]Type for REF_12

Name: None Function: None
Num: -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
_balances_6(mapping(address => uint256)) := ϕ(['_balances_5'])
Phi
[i]Type for _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_12(-> _balances_6) = REF_12 + 1
-998
-1
[i]Type for REF_12

Name: REF_12 Function: _mint
Num: -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied _balances
Source address: u
clearing ir...?
REF_13(address) -> _owners_1[tokenId_1]
[i] REF_13 cleared
clearing ir...?
_owners_2(mapping(uint256 => address)) := ϕ(['_owners_1'])
[i] _owners cleared
clearing ir...?
REF_13 (->_owners_2) := to_1(address)
[i] REF_13 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: _owners_2, name: _owners

Name: _owners Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owners, Num: 2
Globalname: _owners, contract_name: BasePool
global...

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 3
End popogation
Ssa_name: _owners_2, name: _owners

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
REF_13(address) -> _owners_1[tokenId_1]
INDEX
[i]Type for REF_13

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
_owners_2(mapping(uint256 => address)) := ϕ(['_owners_1'])
Phi
[i]Type for _owners

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_13 (->_owners_2) := to_1(address)
asgn
Finance type key: (-1, -1)
[i]Type for REF_13

Name: REF_13 Function: _mint
Num: 
Den: 
Address: 3
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied _owners
Source address: 3
clearing ir...?
TMP_90 = CONVERT 0 to address
[i] TMP_90 cleared
clearing ir...?
Emit Transfer(TMP_90,to_1,tokenId_1)
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_90 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_90

Name: TMP_90 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_92 = CONVERT 0 to address
[i] TMP_92 cleared
clearing ir...?
INTERNAL_CALL, ERC721._afterTokenTransfer(address,address,uint256,uint256)(TMP_92,to_1,tokenId_1,1)
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenId_1, name: tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_92 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_92

Name: TMP_92 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC721._afterTokenTransfer(address,address,uint256,uint256)(TMP_92,to_1,tokenId_1,1)
New param cache [[[-1], [-1], 0, None, [], -1, 'u', 'u'], [[], [], 0, 'to', [], -1, -998, 'u'], [[-1], [-1], 0, None, [], -1, 'u', 1], [[-1], [-1], 0, None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 0, None, [], -1, 'u'], [[], [], 0, 'to', [], -1, -998], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 0, None, [], -1, 'u']]
Param: from
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: from Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
Param: to
[[], [], 0, 'to', [], -1, -998, 'u']

Name: to Function: None
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Param: firstTokenId
[[-1], [-1], 0, None, [], -1, 'u', 1]

Name: firstTokenId Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Param: batchSize
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: batchSize Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_afterTokenTransfer(address,address,uint256,uint256)
ENTRY_POINT
Propogating All
clearing ir...?
from_1(address) := ϕ(['owner_2', 'TMP_92', 'from_1'])
[i] from cleared
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_100'])
[i] to cleared
clearing ir...?
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
[i] firstTokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: from_1, name: from

Name: from Function: _afterTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: from_1 Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: to_1, name: to

Name: to Function: _afterTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _afterTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: firstTokenId_1, name: firstTokenId

Name: firstTokenId Function: _afterTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: firstTokenId_1 Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
from_1(address) := ϕ(['owner_2', 'TMP_92', 'from_1'])
Phi
[i]Type for from

Name: from Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_100'])
Phi
[i]Type for to

Name: to Function: _afterTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
Phi
[i]Type for firstTokenId

Name: firstTokenId Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
from_1(address) := ϕ(['owner_2', 'TMP_92', 'from_1'])
[i] from cleared
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_100'])
[i] to cleared
clearing ir...?
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
[i] firstTokenId cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: from_1, name: from

Name: from Function: _afterTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: from_1 Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: to_1, name: to

Name: to Function: _afterTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: to_1 Function: _afterTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: firstTokenId_1, name: firstTokenId

Name: firstTokenId Function: _afterTokenTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Source address: u

Name: firstTokenId_1 Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Copied ftype
from_1(address) := ϕ(['owner_2', 'TMP_92', 'from_1'])
Phi
[i]Type for from

Name: from Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: from
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['to_1', 'to_1', 'TMP_100'])
Phi
[i]Type for to

Name: to Function: _afterTokenTransfer
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
Phi
[i]Type for firstTokenId

Name: firstTokenId Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_41(IBasePool.Position) -> positions_0[id_1]
[i] REF_41 cleared
clearing ir...?
TMP_151 = new Position(block.timestamp,liquidity_3,nativeDeposit_1,foreignDeposit_1)
clearing ir...?
positions_1(mapping(uint256 => IBasePool.Position)) := ϕ(['positions_0'])
[i] positions cleared
clearing ir...?
REF_41 (->positions_1) := TMP_151(IBasePool.Position)
[i] REF_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignDeposit_1, name: foreignDeposit

Name: foreignDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeDeposit_1, name: nativeDeposit

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: liquidity_3, name: liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: id_1, name: id

Name: id Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: foreignDeposit_1, name: foreignDeposit

Name: foreignDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeDeposit_1, name: nativeDeposit

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: liquidity_3, name: liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: id_1, name: id

Name: id Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: positions_1, name: positions

Name: positions Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: positions, Num: 1
Globalname: positions, contract_name: BasePool
global...

Name: positions Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Ssa_name: positions_1, name: positions

Name: positions Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_41(IBasePool.Position) -> positions_0[id_1]
INDEX
[i]Type for REF_41

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_151 = new Position(block.timestamp,liquidity_3,nativeDeposit_1,foreignDeposit_1)
[i]Type for TMP_151

Name: TMP_151 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_1(mapping(uint256 => IBasePool.Position)) := ϕ(['positions_0'])
Phi
[i]Type for positions

Name: positions Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_41 (->positions_1) := TMP_151(IBasePool.Position)
asgn
Finance type key: (-1, -1)
[i]Type for REF_41

Name: REF_41 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied positions
Source address: u
clearing ir...?
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(balanceNative_1,balanceForeign_1,reserveNative_1,reserveForeign_1)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: mint
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: mint
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: mint
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: mint
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(balanceNative_1,balanceForeign_1,reserveNative_1,reserveForeign_1)
New param cache [[[7], [-1], 'u', None, [], 0, 'u', 'u'], [[8], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[7], [-1], 'u', None, [], 0, 'u'], [[8], [-1], 'u', None, [], 0, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
clearing ir...?
Emit Mint(msg.sender,to_1,nativeDeposit_1,foreignDeposit_1)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignDeposit_1, name: foreignDeposit

Name: foreignDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeDeposit_1, name: nativeDeposit

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: to_1, name: to

Name: to_1 Function: mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignDeposit_1, name: foreignDeposit

Name: foreignDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeDeposit_1, name: nativeDeposit

Name: nativeDeposit Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: to_1, name: to

Name: to_1 Function: mint
Num: 
Den: 
Address: -998
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
End popogation
clearing ir...?
Emit PositionOpened(msg.sender,id_1,liquidity_3)
Propogating parameters and globals to SSA variables...
Ssa_name: liquidity_3, name: liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: id_1, name: id

Name: id Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Ssa_name: liquidity_3, name: liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: id_1, name: id

Name: id Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
Source address: u
Reading Function: _burn
Function _burn not marked
Reading Function: swap
Checking funcion...



swap
Function name: swap
Finding type for nativeAmountIn(uint256 ... )
Value: u
Finding type for foreignAmountIn(uint256 ... )
Value: u
Finding type for to(address ... )
prev address? u
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
Finding type for (bytes ... )
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[], [], 0, 'to', [], -1, -999, 'u'], [[], [], 'u', None, [], -1, 'u', 'u']]
FIND RETURN
ENTRY_POINT
swap(uint256,uint256,address,bytes)


TMP_184(uint256) = INTERNAL_CALL, BasePool.swap(uint256,uint256,address)(nativeAmountIn_1,foreignAmountIn_1,to_1)
RETURN TMP_184


Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_184(uint256) = INTERNAL_CALL, BasePool.swap(uint256,uint256,address)(nativeAmountIn_1,foreignAmountIn_1,to_1)
[i] TMP_184 cleared
clearing ir...?
RETURN TMP_184
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -999

Name: to_1 Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: nativeAmountIn, Num: 1
Globalname: nativeAmountIn, contract_name: BasePool
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: foreignAmountIn, Num: 1
Globalname: foreignAmountIn, contract_name: BasePool
Ssa_name: to_1, name: to

Name: to_1 Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: nativeAmountIn, Num: 1
Globalname: nativeAmountIn, contract_name: BasePool
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: foreignAmountIn, Num: 1
Globalname: foreignAmountIn, contract_name: BasePool
End popogation
TMP_184(uint256) = INTERNAL_CALL, BasePool.swap(uint256,uint256,address)(nativeAmountIn_1,foreignAmountIn_1,to_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u'], [[], [], 'u', None, [], -1, 'u', 'u'], [[], [], 0, 'to', [], -1, -999, 'u']]
Param: nativeAmountIn
[[], [], 'u', None, [], -1, 'u', 'u']

Name: nativeAmountIn Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: foreignAmountIn
[[], [], 'u', None, [], -1, 'u', 'u']

Name: foreignAmountIn Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: to
[[], [], 0, 'to', [], -1, -999, 'u']

Name: to Function: None
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
swap(uint256,uint256,address)
ENTRY_POINT
Propogating All
EXPRESSION nonReentrant()
Propogating All
EXPRESSION validateGas()
Propogating All
EXPRESSION require(bool,string)((nativeAmountIn > 0 && foreignAmountIn == 0) || (nativeAmountIn == 0 && foreignAmountIn > 0),BasePool::swap: Only One-Sided Swaps Supported)
Propogating All
foreignAmountIn_1
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
nativeAmountIn_1
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE nativeReserve
Propogating All
NEW VARIABLE foreignReserve
Propogating All
EXPRESSION (nativeReserve,foreignReserve) = getReserves()
Propogating All
NEW VARIABLE nativeBalance
Propogating All
NEW VARIABLE foreignBalance
Propogating All
NEW VARIABLE nativeAmountOut
Propogating All
NEW VARIABLE foreignAmountOut
Propogating All
NEW VARIABLE _nativeAsset = nativeAsset
Propogating All
NEW VARIABLE _foreignAsset = foreignAsset
Propogating All
EXPRESSION nativeBalance = _nativeAsset.balanceOf(address(this))
Propogating All
_nativeAsset_1
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION foreignBalance = _foreignAsset.balanceOf(address(this))
Propogating All
_foreignAsset_1
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION require(bool,string)(to != address(_nativeAsset) && to != address(_foreignAsset),BasePool::swap: Invalid Receiver)
Propogating All
_nativeAsset_1
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_foreignAsset_1
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
Ssa_name: to_1, name: to

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -999

Name: to_1 Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
IF foreignAmountIn > 0
Propogating All
foreignAmountIn_1
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION require(bool,string)(foreignAmountIn <= foreignBalance - foreignReserve,BasePool::swap: Insufficient Tokens Provided)
Propogating All
foreignReserve_1
Ssa_name: foreignReserve_1, name: foreignReserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
foreignAmountIn_1
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
foreignBalance_1
Ssa_name: foreignBalance_1, name: foreignBalance

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION require(bool,string)(foreignAmountIn <= foreignReserve,BasePool::swap: Unfavourable Trade)
Propogating All
foreignReserve_1
Ssa_name: foreignReserve_1, name: foreignReserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
foreignAmountIn_1
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION require(bool,string)(nativeAmountIn <= nativeBalance - nativeReserve,BasePool::swap: Insufficient Tokens Provided)
Propogating All
nativeAmountIn_1
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
nativeReserve_1
Ssa_name: nativeReserve_1, name: nativeReserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nativeBalance_1
Ssa_name: nativeBalance_1, name: nativeBalance

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION nativeAmountOut = VaderMath.calculateSwap(foreignAmountIn,foreignReserve,nativeReserve)
Propogating All
foreignReserve_1
Ssa_name: foreignReserve_1, name: foreignReserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
foreignAmountIn_1
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
nativeReserve_1
Ssa_name: nativeReserve_1, name: nativeReserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION require(bool,string)(nativeAmountIn <= nativeReserve,BasePool::swap: Unfavourable Trade)
Propogating All
nativeAmountIn_1
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
nativeReserve_1
Ssa_name: nativeReserve_1, name: nativeReserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION require(bool,string)(nativeAmountOut > 0 && nativeAmountOut <= nativeReserve,BasePool::swap: Swap Impossible)
Propogating All
nativeAmountOut_1
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nativeReserve_1
Ssa_name: nativeReserve_1, name: nativeReserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION foreignAmountOut = VaderMath.calculateSwap(nativeAmountIn,nativeReserve,foreignReserve)
Propogating All
foreignReserve_1
Ssa_name: foreignReserve_1, name: foreignReserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nativeAmountIn_1
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
nativeReserve_1
Ssa_name: nativeReserve_1, name: nativeReserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION _nativeAsset.safeTransfer(to,nativeAmountOut)
Propogating All
_nativeAsset_1
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nativeAmountOut_1
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
Ssa_name: to_1, name: to

Name: to_1 Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -999

Name: to_1 Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION require(bool,string)(foreignAmountOut > 0 && foreignAmountOut <= foreignReserve,BasePool::swap: Swap Impossible)
Propogating All
foreignReserve_1
Ssa_name: foreignReserve_1, name: foreignReserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
foreignAmountOut_1
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION _foreignAsset.safeTransfer(to,foreignAmountOut)
Propogating All
foreignAmountOut_1
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_foreignAsset_1
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
Ssa_name: to_1, name: to

Name: to_1 Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -999

Name: to_1 Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
END_IF
Propogating All
EXPRESSION nativeBalance = _nativeAsset.balanceOf(address(this))
Propogating All
_nativeAsset_1
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION foreignBalance = _foreignAsset.balanceOf(address(this))
Propogating All
_foreignAsset_1
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION _update(nativeBalance,foreignBalance,nativeReserve,foreignReserve)
Propogating All
foreignReserve_1
Ssa_name: foreignReserve_1, name: foreignReserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nativeBalance_2
Ssa_name: nativeBalance_2, name: nativeBalance

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
foreignBalance_2
Ssa_name: foreignBalance_2, name: foreignBalance

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nativeReserve_1
Ssa_name: nativeReserve_1, name: nativeReserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION Swap(msg.sender,nativeAmountIn,foreignAmountIn,nativeAmountOut,foreignAmountOut,to)
Propogating All
foreignAmountIn_1
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
nativeAmountIn_1
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
foreignAmountOut_2
Ssa_name: foreignAmountOut_2, name: foreignAmountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
Ssa_name: to_1, name: to

Name: to_1 Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -999

Name: to_1 Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
nativeAmountOut_2
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN nativeAmountOut
Propogating All
nativeAmountOut_2
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
[i] nativeAmountIn cleared
clearing ir...?
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
[i] foreignAmountIn cleared
clearing ir...?
to_1(address) := ϕ(['to_1'])
[i] to cleared
clearing ir...?
nativeAsset_10(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13'])
[i] nativeAsset cleared
clearing ir...?
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
[i] foreignAsset cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: nativeAmountIn, Num: 1
Globalname: nativeAmountIn, contract_name: BasePool
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: foreignAmountIn, Num: 1
Globalname: foreignAmountIn, contract_name: BasePool
Ssa_name: to_1, name: to

Name: to_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -999

Name: to_1 Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: nativeAsset_10, name: nativeAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAsset, Num: 10
Globalname: nativeAsset, contract_name: BasePool
global...

Name: PIC_32 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: foreignAsset_11, name: foreignAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAsset, Num: 11
Globalname: foreignAsset, contract_name: BasePool
global...

Name: PIC_31 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
Phi

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for nativeAmountIn

Name: nativeAmountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
Phi

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for foreignAmountIn

Name: foreignAmountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['to_1'])
Phi
[i]Type for to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
nativeAsset_10(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13'])
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
New param cache []
Old param cache: []
clearing ir...?
MODIFIER_CALL, GasThrottle.validateGas()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, GasThrottle.validateGas()()
New param cache []
FIND RETURN
ENTRY_POINT
validateGas()
ENTRY_POINT
Propogating All
_
Propogating All
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_185(bool) = nativeAmountIn_1 > 0
[i] TMP_185 cleared
clearing ir...?
TMP_186(bool) = foreignAmountIn_1 == 0
[i] TMP_186 cleared
clearing ir...?
TMP_187(bool) = TMP_185 && TMP_186
[i] TMP_187 cleared
clearing ir...?
TMP_188(bool) = nativeAmountIn_1 == 0
[i] TMP_188 cleared
clearing ir...?
TMP_189(bool) = foreignAmountIn_1 > 0
[i] TMP_189 cleared
clearing ir...?
TMP_190(bool) = TMP_188 && TMP_189
[i] TMP_190 cleared
clearing ir...?
TMP_191(bool) = TMP_187 || TMP_190
[i] TMP_191 cleared
clearing ir...?
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: foreignAmountIn, Num: 1
Globalname: foreignAmountIn, contract_name: BasePool
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: nativeAmountIn, Num: 1
Globalname: nativeAmountIn, contract_name: BasePool
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: foreignAmountIn, Num: 1
Globalname: foreignAmountIn, contract_name: BasePool
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: nativeAmountIn, Num: 1
Globalname: nativeAmountIn, contract_name: BasePool
End popogation
TMP_185(bool) = nativeAmountIn_1 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_185

Name: TMP_185 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_186(bool) = foreignAmountIn_1 == 0
[i]Type for TMP_186

Name: TMP_186 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_187(bool) = TMP_185 && TMP_186
[i]Type for TMP_187

Name: TMP_187 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_188(bool) = nativeAmountIn_1 == 0
[i]Type for TMP_188

Name: TMP_188 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_189(bool) = foreignAmountIn_1 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_189

Name: TMP_189 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_190(bool) = TMP_188 && TMP_189
[i]Type for TMP_190

Name: TMP_190 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_191(bool) = TMP_187 || TMP_190
[i]Type for TMP_191

Name: TMP_191 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
[i]Type for TMP_192

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
[i] TUPLE_2 cleared
clearing ir...?
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
[i] nativeReserve cleared
clearing ir...?
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
[i] foreignReserve cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignReserve, Num: 1
Globalname: foreignReserve, contract_name: BasePool
Ssa_name: nativeReserve_1, name: nativeReserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeReserve, Num: 1
Globalname: nativeReserve, contract_name: BasePool
End popogation
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
New param cache []
Old param cache: []
[i]Type for TUPLE_2

Name: TUPLE_2 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
[i] _nativeAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAsset_13, name: nativeAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAsset, Num: 13
Globalname: nativeAsset, contract_name: BasePool
global...

Name: PIC_32 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: nativeAsset_13, name: nativeAsset

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _nativeAsset, Num: 1
Globalname: _nativeAsset, contract_name: BasePool
End popogation
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
[i] _foreignAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAsset_14, name: foreignAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAsset, Num: 14
Globalname: foreignAsset, contract_name: BasePool
global...

Name: PIC_31 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: foreignAsset_14, name: foreignAsset

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _foreignAsset, Num: 1
Globalname: _foreignAsset, contract_name: BasePool
End popogation
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_193 = CONVERT this to address
[i] TMP_193 cleared
clearing ir...?
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
[i] TMP_194 cleared
clearing ir...?
nativeBalance_1(uint256) := TMP_194(uint256)
[i] nativeBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_1, name: nativeBalance

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeBalance, Num: 1
Globalname: nativeBalance, contract_name: BasePool
End popogation
TMP_193 = CONVERT this to address
Converting this
6
[i]Type for TMP_193

Name: TMP_193 Function: swap
Num: -1
Den: -1
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
u
prev address? u
global assignment: 9
9
[i]Type for TMP_194

Name: TMP_194 Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
nativeBalance_1(uint256) := TMP_194(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_195 = CONVERT this to address
[i] TMP_195 cleared
clearing ir...?
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
[i] TMP_196 cleared
clearing ir...?
foreignBalance_1(uint256) := TMP_196(uint256)
[i] foreignBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignBalance_1, name: foreignBalance

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignBalance, Num: 1
Globalname: foreignBalance, contract_name: BasePool
End popogation
TMP_195 = CONVERT this to address
Converting this
6
[i]Type for TMP_195

Name: TMP_195 Function: swap
Num: -1
Den: -1
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
u
prev address? u
global assignment: 10
10
[i]Type for TMP_196

Name: TMP_196 Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
foreignBalance_1(uint256) := TMP_196(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_197 = CONVERT _nativeAsset_1 to address
[i] TMP_197 cleared
clearing ir...?
TMP_198(bool) = to_1 != TMP_197
[i] TMP_198 cleared
clearing ir...?
TMP_199 = CONVERT _foreignAsset_1 to address
[i] TMP_199 cleared
clearing ir...?
TMP_200(bool) = to_1 != TMP_199
[i] TMP_200 cleared
clearing ir...?
TMP_201(bool) = TMP_198 && TMP_200
[i] TMP_201 cleared
clearing ir...?
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
Propogating parameters and globals to SSA variables...
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197 = CONVERT _nativeAsset_1 to address
Converting _nativeAsset_1

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 9
[i]Type for TMP_197

Name: TMP_197 Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_198(bool) = to_1 != TMP_197
[i]Type for TMP_198

Name: TMP_198 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_199 = CONVERT _foreignAsset_1 to address
Converting _foreignAsset_1

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 10
[i]Type for TMP_199

Name: TMP_199 Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_200(bool) = to_1 != TMP_199
[i]Type for TMP_200

Name: TMP_200 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_201(bool) = TMP_198 && TMP_200
[i]Type for TMP_201

Name: TMP_201 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
[i]Type for TMP_202

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_203(bool) = foreignAmountIn_1 > 0
[i] TMP_203 cleared
clearing ir...?
CONDITION TMP_203
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(bool) = foreignAmountIn_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_203

Name: TMP_203 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
[i] TMP_204 cleared
clearing ir...?
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
[i] TMP_205 cleared
clearing ir...?
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignBalance_1, name: foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignBalance_1, name: foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
Source address: u
[i]Type for TMP_204

Name: TMP_204 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_205

Name: TMP_205 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_207

Name: TMP_207 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
[i] TMP_215 cleared
clearing ir...?
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
[i] TMP_216 cleared
clearing ir...?
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_1, name: nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_1, name: nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
Source address: u
[i]Type for TMP_215

Name: TMP_215 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_216

Name: TMP_216 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
[i] TMP_209 cleared
clearing ir...?
nativeAmountOut_1(uint256) := TMP_209(uint256)
[i] nativeAmountOut cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 1
Globalname: nativeAmountOut, contract_name: BasePool
End popogation
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
Found: calculateSwap

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
[i]Type for TMP_209

Name: TMP_209 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nativeAmountOut_1(uint256) := TMP_209(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
[i] TMP_218 cleared
clearing ir...?
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_218

Name: TMP_218 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_219

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_210(bool) = nativeAmountOut_1 > 0
[i] TMP_210 cleared
clearing ir...?
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
[i] TMP_211 cleared
clearing ir...?
TMP_212(bool) = TMP_210 && TMP_211
[i] TMP_212 cleared
clearing ir...?
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 1
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 1
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_210(bool) = nativeAmountOut_1 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_210

Name: TMP_210 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_211

Name: TMP_211 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(bool) = TMP_210 && TMP_211
[i]Type for TMP_212

Name: TMP_212 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
[i]Type for TMP_213

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
[i] TMP_220 cleared
clearing ir...?
foreignAmountOut_1(uint256) := TMP_220(uint256)
[i] foreignAmountOut cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 1
Globalname: foreignAmountOut, contract_name: BasePool
End popogation
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
Found: calculateSwap

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
[i]Type for TMP_220

Name: TMP_220 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAmountOut_1(uint256) := TMP_220(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
Propogating parameters and globals to SSA variables...
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
End popogation
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
clearing ir...?
TMP_221(bool) = foreignAmountOut_1 > 0
[i] TMP_221 cleared
clearing ir...?
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
[i] TMP_222 cleared
clearing ir...?
TMP_223(bool) = TMP_221 && TMP_222
[i] TMP_223 cleared
clearing ir...?
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 1
Globalname: foreignAmountOut, contract_name: BasePool
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 1
Globalname: foreignAmountOut, contract_name: BasePool
End popogation
TMP_221(bool) = foreignAmountOut_1 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_221

Name: TMP_221 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_222

Name: TMP_222 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_223(bool) = TMP_221 && TMP_222
[i]Type for TMP_223

Name: TMP_223 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
End popogation
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
clearing ir...?
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
[i] nativeAmountOut cleared
clearing ir...?
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
[i] foreignAmountOut cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: foreignAmountOut_2, name: foreignAmountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 2
Globalname: foreignAmountOut, contract_name: BasePool
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: foreignAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_226 = CONVERT this to address
[i] TMP_226 cleared
clearing ir...?
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
[i] TMP_227 cleared
clearing ir...?
nativeBalance_2(uint256) := TMP_227(uint256)
[i] nativeBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_2, name: nativeBalance

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeBalance, Num: 2
Globalname: nativeBalance, contract_name: BasePool
End popogation
TMP_226 = CONVERT this to address
Converting this
6
[i]Type for TMP_226

Name: TMP_226 Function: swap
Num: -1
Den: -1
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
9
[i]Type for TMP_227

Name: TMP_227 Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
nativeBalance_2(uint256) := TMP_227(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_228 = CONVERT this to address
[i] TMP_228 cleared
clearing ir...?
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
[i] TMP_229 cleared
clearing ir...?
foreignBalance_2(uint256) := TMP_229(uint256)
[i] foreignBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignBalance_2, name: foreignBalance

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignBalance, Num: 2
Globalname: foreignBalance, contract_name: BasePool
End popogation
TMP_228 = CONVERT this to address
Converting this
6
[i]Type for TMP_228

Name: TMP_228 Function: swap
Num: -1
Den: -1
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
10
[i]Type for TMP_229

Name: TMP_229 Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
foreignBalance_2(uint256) := TMP_229(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_2, name: nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: foreignBalance_2, name: foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_2, name: nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: foreignBalance_2, name: foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
New param cache [[[9], [-1], 'u', None, [], 0, 'u', 'u'], [[10], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[7], [-1], 'u', None, [], 0, 'u'], [[8], [-1], 'u', None, [], 0, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
Param: balanceNative
[[9], [-1], 'u', None, [], 0, 'u', 'u']

Name: balanceNative Function: None
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: balanceForeign
[[10], [-1], 'u', None, [], 0, 'u', 'u']

Name: balanceForeign Function: None
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: reserveNative
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: reserveNative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: reserveForeign
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: reserveForeign Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_update(uint256,uint256,uint112,uint112)
ENTRY_POINT
Propogating All
EXPRESSION require(bool,string)(balanceNative <= type()(uint112).max && balanceForeign <= type()(uint112).max,BasePool::_update: Balance Overflow)
Propogating All
balanceNative_1
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
balanceForeign_1
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
NEW VARIABLE blockTimestamp = uint32(block.timestamp % 2 ** 32)
Propogating All
NEW VARIABLE timeElapsed = blockTimestamp - _blockTimestampLast
Propogating All
blockTimestamp_1
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
IF timeElapsed > 0 && reserveNative != 0 && reserveForeign != 0
Propogating All
reserveForeign_1
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
reserveNative_1
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
timeElapsed_1
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
Propogating All
EXPRESSION priceNativeCumulativeLast += uint256(UQ112x112.encode(reserveForeign).uqdiv(reserveNative)) * timeElapsed
Propogating All
reserveForeign_1
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
reserveNative_1
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
timeElapsed_1
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION _reserveNative = uint112(balanceNative)
Propogating All
balanceNative_1
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
EXPRESSION priceForeignCumulativeLast += uint256(UQ112x112.encode(reserveNative).uqdiv(reserveForeign)) * timeElapsed
Propogating All
reserveForeign_1
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
reserveNative_1
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
timeElapsed_1
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
EXPRESSION _reserveForeign = uint112(balanceForeign)
Propogating All
balanceForeign_1
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
EXPRESSION _blockTimestampLast = blockTimestamp
Propogating All
blockTimestamp_1
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION Sync(balanceNative,balanceForeign)
Propogating All
balanceNative_1
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
balanceForeign_1
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
clearing ir...?
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
[i] balanceNative cleared
clearing ir...?
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
[i] balanceForeign cleared
clearing ir...?
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
[i] reserveNative cleared
clearing ir...?
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
[i] reserveForeign cleared
clearing ir...?
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
[i] priceNativeCumulativeLast cleared
clearing ir...?
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
[i] priceForeignCumulativeLast cleared
clearing ir...?
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 1
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 1
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 2
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
Phi
[i]Type for balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
Phi
[i]Type for balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
Phi
[i]Type for reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
Phi
[i]Type for reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
Phi
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
Phi
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
Phi
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_235 cleared
clearing ir...?
TMP_236(bool) = balanceNative_1 <= TMP_235
[i] TMP_236 cleared
clearing ir...?
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_238 cleared
clearing ir...?
TMP_239(bool) = balanceForeign_1 <= TMP_238
[i] TMP_239 cleared
clearing ir...?
TMP_240(bool) = TMP_236 && TMP_239
[i] TMP_240 cleared
clearing ir...?
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_235

Name: TMP_235 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_236(bool) = balanceNative_1 <= TMP_235
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_236

Name: TMP_236 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_238

Name: TMP_238 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_239(bool) = balanceForeign_1 <= TMP_238
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_239

Name: TMP_239 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_240(bool) = TMP_236 && TMP_239
[i]Type for TMP_240

Name: TMP_240 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_242(uint256) = 2 (c)** 32
[i] TMP_242 cleared
clearing ir...?
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i] TMP_243 cleared
clearing ir...?
TMP_244 = CONVERT TMP_243 to uint32
[i] TMP_244 cleared
clearing ir...?
blockTimestamp_1(uint32) := TMP_244(uint32)
[i] blockTimestamp cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
End popogation
TMP_242(uint256) = 2 (c)** 32
[i]Type for TMP_242

Name: TMP_242 Function: _update
Num: 
Den: 
Address: u
Norm: 32
LF: None
Value: 4294967296
Fields: 
Finance Type: undef
XXXX
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i]Type for TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244 = CONVERT TMP_243 to uint32
Converting TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_244

Name: TMP_244 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
blockTimestamp_1(uint32) := TMP_244(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
[i] TMP_245 cleared
clearing ir...?
timeElapsed_1(uint32) := TMP_245(uint32)
[i] timeElapsed cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: timeElapsed, Num: 1
Globalname: timeElapsed, contract_name: BasePool
End popogation
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
Source address: u
[i]Type for TMP_245

Name: TMP_245 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint32) := TMP_245(uint32)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_246(bool) = timeElapsed_1 > 0
[i] TMP_246 cleared
clearing ir...?
TMP_247(bool) = reserveNative_1 != 0
[i] TMP_247 cleared
clearing ir...?
TMP_248(bool) = TMP_246 && TMP_247
[i] TMP_248 cleared
clearing ir...?
TMP_249(bool) = reserveForeign_1 != 0
[i] TMP_249 cleared
clearing ir...?
TMP_250(bool) = TMP_248 && TMP_249
[i] TMP_250 cleared
clearing ir...?
CONDITION TMP_250
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_246(bool) = timeElapsed_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_246

Name: TMP_246 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_247(bool) = reserveNative_1 != 0
[i]Type for TMP_247

Name: TMP_247 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_248(bool) = TMP_246 && TMP_247
[i]Type for TMP_248

Name: TMP_248 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_249(bool) = reserveForeign_1 != 0
[i]Type for TMP_249

Name: TMP_249 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_250(bool) = TMP_248 && TMP_249
[i]Type for TMP_250

Name: TMP_250 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
[i] TMP_251 cleared
clearing ir...?
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
[i] TMP_252 cleared
clearing ir...?
TMP_253 = CONVERT TMP_252 to uint256
[i] TMP_253 cleared
clearing ir...?
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
[i] TMP_254 cleared
clearing ir...?
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
[i] priceNativeCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_2, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 2
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_251

Name: TMP_251 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_253 = CONVERT TMP_252 to uint256
Converting TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_253

Name: TMP_253 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_254

Name: TMP_254 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
Source address: u
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceNativeCumulativeLast
Source address: u
clearing ir...?
TMP_259 = CONVERT balanceNative_1 to uint112
[i] TMP_259 cleared
clearing ir...?
_reserveNative_2(uint112) := TMP_259(uint112)
[i] _reserveNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveNative_2, name: _reserveNative

Name: _reserveNative Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveNative, Num: 2
Globalname: _reserveNative, contract_name: BasePool
global...

Name: _reserveNative Function: _update
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_259 = CONVERT balanceNative_1 to uint112
Converting balanceNative_1

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_259

Name: TMP_259 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveNative_2(uint112) := TMP_259(uint112)
asgn
9
9
Error with _reserveNative in function _update
Error with: _reserveNative in function _update
Finance type key: (0, -1)
[i]Type for _reserveNative

Name: _reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveNative
Source address: u
clearing ir...?
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
[i] TMP_255 cleared
clearing ir...?
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
[i] TMP_256 cleared
clearing ir...?
TMP_257 = CONVERT TMP_256 to uint256
[i] TMP_257 cleared
clearing ir...?
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
[i] TMP_258 cleared
clearing ir...?
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
[i] priceForeignCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_2, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 2
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_255

Name: TMP_255 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_257 = CONVERT TMP_256 to uint256
Converting TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_257

Name: TMP_257 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_258

Name: TMP_258 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
Source address: u
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceForeignCumulativeLast
Source address: u
clearing ir...?
TMP_260 = CONVERT balanceForeign_1 to uint112
[i] TMP_260 cleared
clearing ir...?
_reserveForeign_2(uint112) := TMP_260(uint112)
[i] _reserveForeign cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveForeign_2, name: _reserveForeign

Name: _reserveForeign Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveForeign, Num: 2
Globalname: _reserveForeign, contract_name: BasePool
global...

Name: _reserveForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_260 = CONVERT balanceForeign_1 to uint112
Converting balanceForeign_1

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_260

Name: TMP_260 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveForeign_2(uint112) := TMP_260(uint112)
asgn
10
10
-1
Finance type key: (0, -1)
[i]Type for _reserveForeign

Name: _reserveForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveForeign
Source address: u
clearing ir...?
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_3, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 3
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _blockTimestampLast
Source address: u
clearing ir...?
Emit Sync(balanceNative_1,balanceForeign_1)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
clearing ir...?
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
[i] balanceNative cleared
clearing ir...?
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
[i] balanceForeign cleared
clearing ir...?
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
[i] reserveNative cleared
clearing ir...?
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
[i] reserveForeign cleared
clearing ir...?
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
[i] priceNativeCumulativeLast cleared
clearing ir...?
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
[i] priceForeignCumulativeLast cleared
clearing ir...?
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 1
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 1
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 2
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
Phi
[i]Type for balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
Phi
[i]Type for balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
Phi
[i]Type for reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
Phi
[i]Type for reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
Phi
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
Phi
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
Phi
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_235 cleared
clearing ir...?
TMP_236(bool) = balanceNative_1 <= TMP_235
[i] TMP_236 cleared
clearing ir...?
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_238 cleared
clearing ir...?
TMP_239(bool) = balanceForeign_1 <= TMP_238
[i] TMP_239 cleared
clearing ir...?
TMP_240(bool) = TMP_236 && TMP_239
[i] TMP_240 cleared
clearing ir...?
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_235

Name: TMP_235 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_236(bool) = balanceNative_1 <= TMP_235
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_236

Name: TMP_236 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_238

Name: TMP_238 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_239(bool) = balanceForeign_1 <= TMP_238
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_239

Name: TMP_239 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_240(bool) = TMP_236 && TMP_239
[i]Type for TMP_240

Name: TMP_240 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_242(uint256) = 2 (c)** 32
[i] TMP_242 cleared
clearing ir...?
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i] TMP_243 cleared
clearing ir...?
TMP_244 = CONVERT TMP_243 to uint32
[i] TMP_244 cleared
clearing ir...?
blockTimestamp_1(uint32) := TMP_244(uint32)
[i] blockTimestamp cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
End popogation
TMP_242(uint256) = 2 (c)** 32
[i]Type for TMP_242

Name: TMP_242 Function: _update
Num: 
Den: 
Address: u
Norm: 32
LF: None
Value: 4294967296
Fields: 
Finance Type: undef
XXXX
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i]Type for TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244 = CONVERT TMP_243 to uint32
Converting TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_244

Name: TMP_244 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
blockTimestamp_1(uint32) := TMP_244(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
[i] TMP_245 cleared
clearing ir...?
timeElapsed_1(uint32) := TMP_245(uint32)
[i] timeElapsed cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: timeElapsed, Num: 1
Globalname: timeElapsed, contract_name: BasePool
End popogation
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
Source address: u
[i]Type for TMP_245

Name: TMP_245 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint32) := TMP_245(uint32)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_246(bool) = timeElapsed_1 > 0
[i] TMP_246 cleared
clearing ir...?
TMP_247(bool) = reserveNative_1 != 0
[i] TMP_247 cleared
clearing ir...?
TMP_248(bool) = TMP_246 && TMP_247
[i] TMP_248 cleared
clearing ir...?
TMP_249(bool) = reserveForeign_1 != 0
[i] TMP_249 cleared
clearing ir...?
TMP_250(bool) = TMP_248 && TMP_249
[i] TMP_250 cleared
clearing ir...?
CONDITION TMP_250
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_246(bool) = timeElapsed_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_246

Name: TMP_246 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_247(bool) = reserveNative_1 != 0
[i]Type for TMP_247

Name: TMP_247 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_248(bool) = TMP_246 && TMP_247
[i]Type for TMP_248

Name: TMP_248 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_249(bool) = reserveForeign_1 != 0
[i]Type for TMP_249

Name: TMP_249 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_250(bool) = TMP_248 && TMP_249
[i]Type for TMP_250

Name: TMP_250 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
[i] TMP_251 cleared
clearing ir...?
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
[i] TMP_252 cleared
clearing ir...?
TMP_253 = CONVERT TMP_252 to uint256
[i] TMP_253 cleared
clearing ir...?
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
[i] TMP_254 cleared
clearing ir...?
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
[i] priceNativeCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_2, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 2
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_251

Name: TMP_251 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_253 = CONVERT TMP_252 to uint256
Converting TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_253

Name: TMP_253 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_254

Name: TMP_254 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
Source address: u
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceNativeCumulativeLast
Source address: u
clearing ir...?
TMP_259 = CONVERT balanceNative_1 to uint112
[i] TMP_259 cleared
clearing ir...?
_reserveNative_2(uint112) := TMP_259(uint112)
[i] _reserveNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveNative_2, name: _reserveNative

Name: _reserveNative Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveNative, Num: 2
Globalname: _reserveNative, contract_name: BasePool
global...

Name: _reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_259 = CONVERT balanceNative_1 to uint112
Converting balanceNative_1

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_259

Name: TMP_259 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveNative_2(uint112) := TMP_259(uint112)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for _reserveNative

Name: _reserveNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveNative
Source address: u
clearing ir...?
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
[i] TMP_255 cleared
clearing ir...?
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
[i] TMP_256 cleared
clearing ir...?
TMP_257 = CONVERT TMP_256 to uint256
[i] TMP_257 cleared
clearing ir...?
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
[i] TMP_258 cleared
clearing ir...?
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
[i] priceForeignCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_2, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 2
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_255

Name: TMP_255 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_257 = CONVERT TMP_256 to uint256
Converting TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_257

Name: TMP_257 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_258

Name: TMP_258 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
Source address: u
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceForeignCumulativeLast
Source address: u
clearing ir...?
TMP_260 = CONVERT balanceForeign_1 to uint112
[i] TMP_260 cleared
clearing ir...?
_reserveForeign_2(uint112) := TMP_260(uint112)
[i] _reserveForeign cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveForeign_2, name: _reserveForeign

Name: _reserveForeign Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveForeign, Num: 2
Globalname: _reserveForeign, contract_name: BasePool
global...

Name: _reserveForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_260 = CONVERT balanceForeign_1 to uint112
Converting balanceForeign_1

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_260

Name: TMP_260 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveForeign_2(uint112) := TMP_260(uint112)
asgn
10
10
-1
Finance type key: (0, -1)
[i]Type for _reserveForeign

Name: _reserveForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveForeign
Source address: u
clearing ir...?
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_3, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 3
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _blockTimestampLast
Source address: u
clearing ir...?
Emit Sync(balanceNative_1,balanceForeign_1)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
clearing ir...?
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_2, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 2
Globalname: foreignAmountOut, contract_name: BasePool
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_2, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 2
Globalname: foreignAmountOut, contract_name: BasePool
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
End popogation
clearing ir...?
RETURN nativeAmountOut_2
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
End popogation
RETURN nativeAmountOut_2
RETURN

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
clearing ir...?
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
[i] nativeAmountIn cleared
clearing ir...?
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
[i] foreignAmountIn cleared
clearing ir...?
to_1(address) := ϕ(['to_1'])
[i] to cleared
clearing ir...?
nativeAsset_10(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13'])
[i] nativeAsset cleared
clearing ir...?
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
[i] foreignAsset cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: nativeAmountIn, Num: 1
Globalname: nativeAmountIn, contract_name: BasePool
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: foreignAmountIn, Num: 1
Globalname: foreignAmountIn, contract_name: BasePool
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -999

Name: to_1 Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: nativeAsset_10, name: nativeAsset

Name: nativeAsset Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAsset, Num: 10
Globalname: nativeAsset, contract_name: BasePool
global...

Name: PIC_32 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: foreignAsset_11, name: foreignAsset

Name: foreignAsset Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAsset, Num: 11
Globalname: foreignAsset, contract_name: BasePool
global...

Name: PIC_31 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
Phi

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for nativeAmountIn

Name: nativeAmountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
Phi

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for foreignAmountIn

Name: foreignAmountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['to_1'])
Phi
[i]Type for to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
nativeAsset_10(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13'])
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
New param cache []
Old param cache: []
clearing ir...?
MODIFIER_CALL, GasThrottle.validateGas()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, GasThrottle.validateGas()()
New param cache []
Old param cache: []
clearing ir...?
TMP_185(bool) = nativeAmountIn_1 > 0
[i] TMP_185 cleared
clearing ir...?
TMP_186(bool) = foreignAmountIn_1 == 0
[i] TMP_186 cleared
clearing ir...?
TMP_187(bool) = TMP_185 && TMP_186
[i] TMP_187 cleared
clearing ir...?
TMP_188(bool) = nativeAmountIn_1 == 0
[i] TMP_188 cleared
clearing ir...?
TMP_189(bool) = foreignAmountIn_1 > 0
[i] TMP_189 cleared
clearing ir...?
TMP_190(bool) = TMP_188 && TMP_189
[i] TMP_190 cleared
clearing ir...?
TMP_191(bool) = TMP_187 || TMP_190
[i] TMP_191 cleared
clearing ir...?
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: foreignAmountIn, Num: 1
Globalname: foreignAmountIn, contract_name: BasePool
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: nativeAmountIn, Num: 1
Globalname: nativeAmountIn, contract_name: BasePool
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: foreignAmountIn, Num: 1
Globalname: foreignAmountIn, contract_name: BasePool
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: nativeAmountIn, Num: 1
Globalname: nativeAmountIn, contract_name: BasePool
End popogation
TMP_185(bool) = nativeAmountIn_1 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_185

Name: TMP_185 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_186(bool) = foreignAmountIn_1 == 0
[i]Type for TMP_186

Name: TMP_186 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_187(bool) = TMP_185 && TMP_186
[i]Type for TMP_187

Name: TMP_187 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_188(bool) = nativeAmountIn_1 == 0
[i]Type for TMP_188

Name: TMP_188 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_189(bool) = foreignAmountIn_1 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_189

Name: TMP_189 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_190(bool) = TMP_188 && TMP_189
[i]Type for TMP_190

Name: TMP_190 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_191(bool) = TMP_187 || TMP_190
[i]Type for TMP_191

Name: TMP_191 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
[i]Type for TMP_192

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
[i] TUPLE_2 cleared
clearing ir...?
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
[i] nativeReserve cleared
clearing ir...?
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
[i] foreignReserve cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignReserve, Num: 1
Globalname: foreignReserve, contract_name: BasePool
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeReserve, Num: 1
Globalname: nativeReserve, contract_name: BasePool
End popogation
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
New param cache []
Old param cache: []
[i]Type for TUPLE_2

Name: TUPLE_2 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
[i] _nativeAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAsset_13, name: nativeAsset

Name: nativeAsset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAsset_13, name: nativeAsset

Name: nativeAsset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _nativeAsset, Num: 1
Globalname: _nativeAsset, contract_name: BasePool
End popogation
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
[i] _foreignAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAsset_14, name: foreignAsset

Name: foreignAsset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAsset_14, name: foreignAsset

Name: foreignAsset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _foreignAsset, Num: 1
Globalname: _foreignAsset, contract_name: BasePool
End popogation
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_193 = CONVERT this to address
[i] TMP_193 cleared
clearing ir...?
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
[i] TMP_194 cleared
clearing ir...?
nativeBalance_1(uint256) := TMP_194(uint256)
[i] nativeBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_1, name: nativeBalance

Name: nativeBalance Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeBalance, Num: 1
Globalname: nativeBalance, contract_name: BasePool
End popogation
TMP_193 = CONVERT this to address
Converting this
6
[i]Type for TMP_193

Name: TMP_193 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
u
prev address? u
[i]Type for TMP_194

Name: TMP_194 Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
nativeBalance_1(uint256) := TMP_194(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_195 = CONVERT this to address
[i] TMP_195 cleared
clearing ir...?
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
[i] TMP_196 cleared
clearing ir...?
foreignBalance_1(uint256) := TMP_196(uint256)
[i] foreignBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignBalance_1, name: foreignBalance

Name: foreignBalance Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignBalance, Num: 1
Globalname: foreignBalance, contract_name: BasePool
End popogation
TMP_195 = CONVERT this to address
Converting this
6
[i]Type for TMP_195

Name: TMP_195 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
u
prev address? u
[i]Type for TMP_196

Name: TMP_196 Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
foreignBalance_1(uint256) := TMP_196(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_197 = CONVERT _nativeAsset_1 to address
[i] TMP_197 cleared
clearing ir...?
TMP_198(bool) = to_1 != TMP_197
[i] TMP_198 cleared
clearing ir...?
TMP_199 = CONVERT _foreignAsset_1 to address
[i] TMP_199 cleared
clearing ir...?
TMP_200(bool) = to_1 != TMP_199
[i] TMP_200 cleared
clearing ir...?
TMP_201(bool) = TMP_198 && TMP_200
[i] TMP_201 cleared
clearing ir...?
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
Propogating parameters and globals to SSA variables...
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197 = CONVERT _nativeAsset_1 to address
Converting _nativeAsset_1

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 9
[i]Type for TMP_197

Name: TMP_197 Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_198(bool) = to_1 != TMP_197
[i]Type for TMP_198

Name: TMP_198 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_199 = CONVERT _foreignAsset_1 to address
Converting _foreignAsset_1

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 10
[i]Type for TMP_199

Name: TMP_199 Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_200(bool) = to_1 != TMP_199
[i]Type for TMP_200

Name: TMP_200 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_201(bool) = TMP_198 && TMP_200
[i]Type for TMP_201

Name: TMP_201 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
[i]Type for TMP_202

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_203(bool) = foreignAmountIn_1 > 0
[i] TMP_203 cleared
clearing ir...?
CONDITION TMP_203
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(bool) = foreignAmountIn_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_203

Name: TMP_203 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
[i] TMP_204 cleared
clearing ir...?
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
[i] TMP_205 cleared
clearing ir...?
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignBalance_1, name: foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignBalance_1, name: foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
Source address: u
[i]Type for TMP_204

Name: TMP_204 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_205

Name: TMP_205 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_207

Name: TMP_207 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
[i] TMP_215 cleared
clearing ir...?
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
[i] TMP_216 cleared
clearing ir...?
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_1, name: nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_1, name: nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
Source address: u
[i]Type for TMP_215

Name: TMP_215 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_216

Name: TMP_216 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
[i] TMP_209 cleared
clearing ir...?
nativeAmountOut_1(uint256) := TMP_209(uint256)
[i] nativeAmountOut cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 1
Globalname: nativeAmountOut, contract_name: BasePool
End popogation
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
Found: calculateSwap

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
[i]Type for TMP_209

Name: TMP_209 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nativeAmountOut_1(uint256) := TMP_209(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
[i] TMP_218 cleared
clearing ir...?
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_218

Name: TMP_218 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_219

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_210(bool) = nativeAmountOut_1 > 0
[i] TMP_210 cleared
clearing ir...?
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
[i] TMP_211 cleared
clearing ir...?
TMP_212(bool) = TMP_210 && TMP_211
[i] TMP_212 cleared
clearing ir...?
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 1
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 1
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_210(bool) = nativeAmountOut_1 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_210

Name: TMP_210 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_211

Name: TMP_211 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(bool) = TMP_210 && TMP_211
[i]Type for TMP_212

Name: TMP_212 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
[i]Type for TMP_213

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
[i] TMP_220 cleared
clearing ir...?
foreignAmountOut_1(uint256) := TMP_220(uint256)
[i] foreignAmountOut cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 1
Globalname: foreignAmountOut, contract_name: BasePool
End popogation
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
Found: calculateSwap

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
[i]Type for TMP_220

Name: TMP_220 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAmountOut_1(uint256) := TMP_220(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
Propogating parameters and globals to SSA variables...
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
End popogation
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
clearing ir...?
TMP_221(bool) = foreignAmountOut_1 > 0
[i] TMP_221 cleared
clearing ir...?
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
[i] TMP_222 cleared
clearing ir...?
TMP_223(bool) = TMP_221 && TMP_222
[i] TMP_223 cleared
clearing ir...?
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 1
Globalname: foreignAmountOut, contract_name: BasePool
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 1
Globalname: foreignAmountOut, contract_name: BasePool
End popogation
TMP_221(bool) = foreignAmountOut_1 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_221

Name: TMP_221 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_222

Name: TMP_222 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_223(bool) = TMP_221 && TMP_222
[i]Type for TMP_223

Name: TMP_223 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
End popogation
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
clearing ir...?
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
[i] nativeAmountOut cleared
clearing ir...?
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
[i] foreignAmountOut cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: foreignAmountOut_2, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 2
Globalname: foreignAmountOut, contract_name: BasePool
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: foreignAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_226 = CONVERT this to address
[i] TMP_226 cleared
clearing ir...?
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
[i] TMP_227 cleared
clearing ir...?
nativeBalance_2(uint256) := TMP_227(uint256)
[i] nativeBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_2, name: nativeBalance

Name: nativeBalance Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeBalance, Num: 2
Globalname: nativeBalance, contract_name: BasePool
End popogation
TMP_226 = CONVERT this to address
Converting this
6
[i]Type for TMP_226

Name: TMP_226 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
9
[i]Type for TMP_227

Name: TMP_227 Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
nativeBalance_2(uint256) := TMP_227(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_228 = CONVERT this to address
[i] TMP_228 cleared
clearing ir...?
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
[i] TMP_229 cleared
clearing ir...?
foreignBalance_2(uint256) := TMP_229(uint256)
[i] foreignBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignBalance_2, name: foreignBalance

Name: foreignBalance Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignBalance, Num: 2
Globalname: foreignBalance, contract_name: BasePool
End popogation
TMP_228 = CONVERT this to address
Converting this
6
[i]Type for TMP_228

Name: TMP_228 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
10
[i]Type for TMP_229

Name: TMP_229 Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
foreignBalance_2(uint256) := TMP_229(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_2, name: nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: foreignBalance_2, name: foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_2, name: nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: foreignBalance_2, name: foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
New param cache [[[9], [-1], 'u', None, [], 0, 'u', 'u'], [[10], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[7], [-1], 'u', None, [], 0, 'u'], [[8], [-1], 'u', None, [], 0, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
Param: balanceNative
[[9], [-1], 'u', None, [], 0, 'u', 'u']

Name: balanceNative Function: None
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: balanceForeign
[[10], [-1], 'u', None, [], 0, 'u', 'u']

Name: balanceForeign Function: None
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: reserveNative
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: reserveNative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: reserveForeign
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: reserveForeign Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_update(uint256,uint256,uint112,uint112)
ENTRY_POINT
Propogating All
EXPRESSION require(bool,string)(balanceNative <= type()(uint112).max && balanceForeign <= type()(uint112).max,BasePool::_update: Balance Overflow)
Propogating All
balanceNative_1
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
balanceForeign_1
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
NEW VARIABLE blockTimestamp = uint32(block.timestamp % 2 ** 32)
Propogating All
NEW VARIABLE timeElapsed = blockTimestamp - _blockTimestampLast
Propogating All
blockTimestamp_1
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
IF timeElapsed > 0 && reserveNative != 0 && reserveForeign != 0
Propogating All
reserveForeign_1
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
reserveNative_1
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
timeElapsed_1
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
Propogating All
EXPRESSION priceNativeCumulativeLast += uint256(UQ112x112.encode(reserveForeign).uqdiv(reserveNative)) * timeElapsed
Propogating All
reserveForeign_1
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
reserveNative_1
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
timeElapsed_1
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION _reserveNative = uint112(balanceNative)
Propogating All
balanceNative_1
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
EXPRESSION priceForeignCumulativeLast += uint256(UQ112x112.encode(reserveNative).uqdiv(reserveForeign)) * timeElapsed
Propogating All
reserveForeign_1
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
reserveNative_1
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
timeElapsed_1
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
EXPRESSION _reserveForeign = uint112(balanceForeign)
Propogating All
balanceForeign_1
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
EXPRESSION _blockTimestampLast = blockTimestamp
Propogating All
blockTimestamp_1
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION Sync(balanceNative,balanceForeign)
Propogating All
balanceNative_1
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
balanceForeign_1
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
clearing ir...?
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
[i] balanceNative cleared
clearing ir...?
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
[i] balanceForeign cleared
clearing ir...?
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
[i] reserveNative cleared
clearing ir...?
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
[i] reserveForeign cleared
clearing ir...?
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
[i] priceNativeCumulativeLast cleared
clearing ir...?
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
[i] priceForeignCumulativeLast cleared
clearing ir...?
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 1
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 1
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 2
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
Phi
[i]Type for balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
Phi
[i]Type for balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
Phi
[i]Type for reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
Phi
[i]Type for reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
Phi
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
Phi
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
Phi
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_235 cleared
clearing ir...?
TMP_236(bool) = balanceNative_1 <= TMP_235
[i] TMP_236 cleared
clearing ir...?
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_238 cleared
clearing ir...?
TMP_239(bool) = balanceForeign_1 <= TMP_238
[i] TMP_239 cleared
clearing ir...?
TMP_240(bool) = TMP_236 && TMP_239
[i] TMP_240 cleared
clearing ir...?
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_235

Name: TMP_235 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_236(bool) = balanceNative_1 <= TMP_235
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_236

Name: TMP_236 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_238

Name: TMP_238 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_239(bool) = balanceForeign_1 <= TMP_238
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_239

Name: TMP_239 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_240(bool) = TMP_236 && TMP_239
[i]Type for TMP_240

Name: TMP_240 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_242(uint256) = 2 (c)** 32
[i] TMP_242 cleared
clearing ir...?
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i] TMP_243 cleared
clearing ir...?
TMP_244 = CONVERT TMP_243 to uint32
[i] TMP_244 cleared
clearing ir...?
blockTimestamp_1(uint32) := TMP_244(uint32)
[i] blockTimestamp cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
End popogation
TMP_242(uint256) = 2 (c)** 32
[i]Type for TMP_242

Name: TMP_242 Function: _update
Num: 
Den: 
Address: u
Norm: 32
LF: None
Value: 4294967296
Fields: 
Finance Type: undef
XXXX
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i]Type for TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244 = CONVERT TMP_243 to uint32
Converting TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_244

Name: TMP_244 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
blockTimestamp_1(uint32) := TMP_244(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
[i] TMP_245 cleared
clearing ir...?
timeElapsed_1(uint32) := TMP_245(uint32)
[i] timeElapsed cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: timeElapsed, Num: 1
Globalname: timeElapsed, contract_name: BasePool
End popogation
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
Source address: u
[i]Type for TMP_245

Name: TMP_245 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint32) := TMP_245(uint32)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_246(bool) = timeElapsed_1 > 0
[i] TMP_246 cleared
clearing ir...?
TMP_247(bool) = reserveNative_1 != 0
[i] TMP_247 cleared
clearing ir...?
TMP_248(bool) = TMP_246 && TMP_247
[i] TMP_248 cleared
clearing ir...?
TMP_249(bool) = reserveForeign_1 != 0
[i] TMP_249 cleared
clearing ir...?
TMP_250(bool) = TMP_248 && TMP_249
[i] TMP_250 cleared
clearing ir...?
CONDITION TMP_250
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_246(bool) = timeElapsed_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_246

Name: TMP_246 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_247(bool) = reserveNative_1 != 0
[i]Type for TMP_247

Name: TMP_247 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_248(bool) = TMP_246 && TMP_247
[i]Type for TMP_248

Name: TMP_248 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_249(bool) = reserveForeign_1 != 0
[i]Type for TMP_249

Name: TMP_249 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_250(bool) = TMP_248 && TMP_249
[i]Type for TMP_250

Name: TMP_250 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
[i] TMP_251 cleared
clearing ir...?
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
[i] TMP_252 cleared
clearing ir...?
TMP_253 = CONVERT TMP_252 to uint256
[i] TMP_253 cleared
clearing ir...?
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
[i] TMP_254 cleared
clearing ir...?
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
[i] priceNativeCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_2, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 2
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_251

Name: TMP_251 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_253 = CONVERT TMP_252 to uint256
Converting TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_253

Name: TMP_253 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_254

Name: TMP_254 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
Source address: u
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceNativeCumulativeLast
Source address: u
clearing ir...?
TMP_259 = CONVERT balanceNative_1 to uint112
[i] TMP_259 cleared
clearing ir...?
_reserveNative_2(uint112) := TMP_259(uint112)
[i] _reserveNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveNative_2, name: _reserveNative

Name: _reserveNative Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveNative, Num: 2
Globalname: _reserveNative, contract_name: BasePool
global...

Name: _reserveNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_259 = CONVERT balanceNative_1 to uint112
Converting balanceNative_1

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_259

Name: TMP_259 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveNative_2(uint112) := TMP_259(uint112)
asgn
9
-1
Finance type key: (0, -1)
[i]Type for _reserveNative

Name: _reserveNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveNative
Source address: u
clearing ir...?
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
[i] TMP_255 cleared
clearing ir...?
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
[i] TMP_256 cleared
clearing ir...?
TMP_257 = CONVERT TMP_256 to uint256
[i] TMP_257 cleared
clearing ir...?
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
[i] TMP_258 cleared
clearing ir...?
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
[i] priceForeignCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_2, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 2
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_255

Name: TMP_255 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_257 = CONVERT TMP_256 to uint256
Converting TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_257

Name: TMP_257 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_258

Name: TMP_258 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
Source address: u
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceForeignCumulativeLast
Source address: u
clearing ir...?
TMP_260 = CONVERT balanceForeign_1 to uint112
[i] TMP_260 cleared
clearing ir...?
_reserveForeign_2(uint112) := TMP_260(uint112)
[i] _reserveForeign cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveForeign_2, name: _reserveForeign

Name: _reserveForeign Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveForeign, Num: 2
Globalname: _reserveForeign, contract_name: BasePool
global...

Name: _reserveForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_260 = CONVERT balanceForeign_1 to uint112
Converting balanceForeign_1

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_260

Name: TMP_260 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveForeign_2(uint112) := TMP_260(uint112)
asgn
10
10
-1
Finance type key: (0, -1)
[i]Type for _reserveForeign

Name: _reserveForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveForeign
Source address: u
clearing ir...?
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_3, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 3
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _blockTimestampLast
Source address: u
clearing ir...?
Emit Sync(balanceNative_1,balanceForeign_1)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
clearing ir...?
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
[i] balanceNative cleared
clearing ir...?
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
[i] balanceForeign cleared
clearing ir...?
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
[i] reserveNative cleared
clearing ir...?
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
[i] reserveForeign cleared
clearing ir...?
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
[i] priceNativeCumulativeLast cleared
clearing ir...?
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
[i] priceForeignCumulativeLast cleared
clearing ir...?
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 1
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 1
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 2
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
Phi
[i]Type for balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
Phi
[i]Type for balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
Phi
[i]Type for reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
Phi
[i]Type for reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
Phi
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
Phi
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
Phi
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_235 cleared
clearing ir...?
TMP_236(bool) = balanceNative_1 <= TMP_235
[i] TMP_236 cleared
clearing ir...?
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_238 cleared
clearing ir...?
TMP_239(bool) = balanceForeign_1 <= TMP_238
[i] TMP_239 cleared
clearing ir...?
TMP_240(bool) = TMP_236 && TMP_239
[i] TMP_240 cleared
clearing ir...?
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_235

Name: TMP_235 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_236(bool) = balanceNative_1 <= TMP_235
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_236

Name: TMP_236 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_238

Name: TMP_238 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_239(bool) = balanceForeign_1 <= TMP_238
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_239

Name: TMP_239 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_240(bool) = TMP_236 && TMP_239
[i]Type for TMP_240

Name: TMP_240 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_242(uint256) = 2 (c)** 32
[i] TMP_242 cleared
clearing ir...?
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i] TMP_243 cleared
clearing ir...?
TMP_244 = CONVERT TMP_243 to uint32
[i] TMP_244 cleared
clearing ir...?
blockTimestamp_1(uint32) := TMP_244(uint32)
[i] blockTimestamp cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
End popogation
TMP_242(uint256) = 2 (c)** 32
[i]Type for TMP_242

Name: TMP_242 Function: _update
Num: 
Den: 
Address: u
Norm: 32
LF: None
Value: 4294967296
Fields: 
Finance Type: undef
XXXX
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i]Type for TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244 = CONVERT TMP_243 to uint32
Converting TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_244

Name: TMP_244 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
blockTimestamp_1(uint32) := TMP_244(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
[i] TMP_245 cleared
clearing ir...?
timeElapsed_1(uint32) := TMP_245(uint32)
[i] timeElapsed cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: timeElapsed, Num: 1
Globalname: timeElapsed, contract_name: BasePool
End popogation
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
Source address: u
[i]Type for TMP_245

Name: TMP_245 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint32) := TMP_245(uint32)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_246(bool) = timeElapsed_1 > 0
[i] TMP_246 cleared
clearing ir...?
TMP_247(bool) = reserveNative_1 != 0
[i] TMP_247 cleared
clearing ir...?
TMP_248(bool) = TMP_246 && TMP_247
[i] TMP_248 cleared
clearing ir...?
TMP_249(bool) = reserveForeign_1 != 0
[i] TMP_249 cleared
clearing ir...?
TMP_250(bool) = TMP_248 && TMP_249
[i] TMP_250 cleared
clearing ir...?
CONDITION TMP_250
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_246(bool) = timeElapsed_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_246

Name: TMP_246 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_247(bool) = reserveNative_1 != 0
[i]Type for TMP_247

Name: TMP_247 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_248(bool) = TMP_246 && TMP_247
[i]Type for TMP_248

Name: TMP_248 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_249(bool) = reserveForeign_1 != 0
[i]Type for TMP_249

Name: TMP_249 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_250(bool) = TMP_248 && TMP_249
[i]Type for TMP_250

Name: TMP_250 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
[i] TMP_251 cleared
clearing ir...?
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
[i] TMP_252 cleared
clearing ir...?
TMP_253 = CONVERT TMP_252 to uint256
[i] TMP_253 cleared
clearing ir...?
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
[i] TMP_254 cleared
clearing ir...?
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
[i] priceNativeCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_2, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 2
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_251

Name: TMP_251 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_253 = CONVERT TMP_252 to uint256
Converting TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_253

Name: TMP_253 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_254

Name: TMP_254 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
Source address: u
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceNativeCumulativeLast
Source address: u
clearing ir...?
TMP_259 = CONVERT balanceNative_1 to uint112
[i] TMP_259 cleared
clearing ir...?
_reserveNative_2(uint112) := TMP_259(uint112)
[i] _reserveNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveNative_2, name: _reserveNative

Name: _reserveNative Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveNative, Num: 2
Globalname: _reserveNative, contract_name: BasePool
global...

Name: _reserveNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_259 = CONVERT balanceNative_1 to uint112
Converting balanceNative_1

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_259

Name: TMP_259 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveNative_2(uint112) := TMP_259(uint112)
asgn
9
-1
Finance type key: (0, -1)
[i]Type for _reserveNative

Name: _reserveNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveNative
Source address: u
clearing ir...?
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
[i] TMP_255 cleared
clearing ir...?
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
[i] TMP_256 cleared
clearing ir...?
TMP_257 = CONVERT TMP_256 to uint256
[i] TMP_257 cleared
clearing ir...?
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
[i] TMP_258 cleared
clearing ir...?
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
[i] priceForeignCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_2, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 2
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_255

Name: TMP_255 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_257 = CONVERT TMP_256 to uint256
Converting TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_257

Name: TMP_257 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_258

Name: TMP_258 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
Source address: u
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceForeignCumulativeLast
Source address: u
clearing ir...?
TMP_260 = CONVERT balanceForeign_1 to uint112
[i] TMP_260 cleared
clearing ir...?
_reserveForeign_2(uint112) := TMP_260(uint112)
[i] _reserveForeign cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveForeign_2, name: _reserveForeign

Name: _reserveForeign Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveForeign, Num: 2
Globalname: _reserveForeign, contract_name: BasePool
global...

Name: _reserveForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_260 = CONVERT balanceForeign_1 to uint112
Converting balanceForeign_1

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_260

Name: TMP_260 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveForeign_2(uint112) := TMP_260(uint112)
asgn
10
10
-1
Finance type key: (0, -1)
[i]Type for _reserveForeign

Name: _reserveForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveForeign
Source address: u
clearing ir...?
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_3, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 3
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _blockTimestampLast
Source address: u
clearing ir...?
Emit Sync(balanceNative_1,balanceForeign_1)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
clearing ir...?
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_2, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 2
Globalname: foreignAmountOut, contract_name: BasePool
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_2, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 2
Globalname: foreignAmountOut, contract_name: BasePool
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
End popogation
clearing ir...?
RETURN nativeAmountOut_2
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
End popogation
RETURN nativeAmountOut_2
RETURN

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_184

Name: TMP_184 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_184
RETURN

Name: TMP_184 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


TMP_184(uint256) = INTERNAL_CALL, BasePool.swap(uint256,uint256,address)(nativeAmountIn_1,foreignAmountIn_1,to_1)
RETURN TMP_184


Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_184(uint256) = INTERNAL_CALL, BasePool.swap(uint256,uint256,address)(nativeAmountIn_1,foreignAmountIn_1,to_1)
[i] TMP_184 cleared
clearing ir...?
RETURN TMP_184
Propogating parameters and globals to SSA variables...
Ssa_name: to_1, name: to

Name: to_1 Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: nativeAmountIn, Num: 1
Globalname: nativeAmountIn, contract_name: BasePool
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: foreignAmountIn, Num: 1
Globalname: foreignAmountIn, contract_name: BasePool
Ssa_name: to_1, name: to

Name: to_1 Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: nativeAmountIn, Num: 1
Globalname: nativeAmountIn, contract_name: BasePool
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: foreignAmountIn, Num: 1
Globalname: foreignAmountIn, contract_name: BasePool
End popogation
TMP_184(uint256) = INTERNAL_CALL, BasePool.swap(uint256,uint256,address)(nativeAmountIn_1,foreignAmountIn_1,to_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u'], [[], [], 'u', None, [], -1, 'u', 'u'], [[], [], 0, 'to', [], -1, -999, 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u'], [[], [], 0, 'to', [], -1, -999]]
[i]Type for TMP_184

Name: TMP_184 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_184
RETURN

Name: TMP_184 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Reading Function: swap
Checking funcion...



swap
Function name: swap
Finding type for nativeAmountIn(uint256 ... )
Value: u
Finding type for foreignAmountIn(uint256 ... )
Value: u
Finding type for to(address ... )
prev address? -999
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[], [], 0, 'to', [], -1, -999, 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u'], [[], [], 'u', None, [], -1, 'u'], [[], [], 0, 'to', [], -1, -999]]
FIND RETURN
ENTRY_POINT
swap(uint256,uint256,address)


nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
to_1(address) := ϕ(['to_1'])
nativeAsset_10(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13'])
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
MODIFIER_CALL, GasThrottle.validateGas()()
TMP_185(bool) = nativeAmountIn_1 > 0
TMP_186(bool) = foreignAmountIn_1 == 0
TMP_187(bool) = TMP_185 && TMP_186
TMP_188(bool) = nativeAmountIn_1 == 0
TMP_189(bool) = foreignAmountIn_1 > 0
TMP_190(bool) = TMP_188 && TMP_189
TMP_191(bool) = TMP_187 || TMP_190
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
TMP_193 = CONVERT this to address
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
nativeBalance_1(uint256) := TMP_194(uint256)
TMP_195 = CONVERT this to address
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
foreignBalance_1(uint256) := TMP_196(uint256)
TMP_197 = CONVERT _nativeAsset_1 to address
TMP_198(bool) = to_1 != TMP_197
TMP_199 = CONVERT _foreignAsset_1 to address
TMP_200(bool) = to_1 != TMP_199
TMP_201(bool) = TMP_198 && TMP_200
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
TMP_203(bool) = foreignAmountIn_1 > 0
CONDITION TMP_203
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
nativeAmountOut_1(uint256) := TMP_209(uint256)
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
TMP_210(bool) = nativeAmountOut_1 > 0
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
TMP_212(bool) = TMP_210 && TMP_211
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
foreignAmountOut_1(uint256) := TMP_220(uint256)
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
TMP_221(bool) = foreignAmountOut_1 > 0
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
TMP_223(bool) = TMP_221 && TMP_222
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
TMP_226 = CONVERT this to address
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
nativeBalance_2(uint256) := TMP_227(uint256)
TMP_228 = CONVERT this to address
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
foreignBalance_2(uint256) := TMP_229(uint256)
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
RETURN nativeAmountOut_2


clearing ir...?
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
[i] nativeAmountIn cleared
clearing ir...?
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
[i] foreignAmountIn cleared
clearing ir...?
to_1(address) := ϕ(['to_1'])
[i] to cleared
clearing ir...?
nativeAsset_10(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13'])
[i] nativeAsset cleared
clearing ir...?
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
[i] foreignAsset cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: nativeAmountIn, Num: 1
Globalname: nativeAmountIn, contract_name: BasePool
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: foreignAmountIn, Num: 1
Globalname: foreignAmountIn, contract_name: BasePool
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -999

Name: to_1 Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: nativeAsset_10, name: nativeAsset

Name: nativeAsset Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAsset, Num: 10
Globalname: nativeAsset, contract_name: BasePool
global...

Name: PIC_32 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: foreignAsset_11, name: foreignAsset

Name: foreignAsset Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAsset, Num: 11
Globalname: foreignAsset, contract_name: BasePool
global...

Name: PIC_31 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
Phi

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for nativeAmountIn

Name: nativeAmountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
Phi

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for foreignAmountIn

Name: foreignAmountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['to_1'])
Phi
[i]Type for to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
nativeAsset_10(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13'])
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
New param cache []
Old param cache: []
clearing ir...?
MODIFIER_CALL, GasThrottle.validateGas()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, GasThrottle.validateGas()()
New param cache []
Old param cache: []
clearing ir...?
TMP_185(bool) = nativeAmountIn_1 > 0
[i] TMP_185 cleared
clearing ir...?
TMP_186(bool) = foreignAmountIn_1 == 0
[i] TMP_186 cleared
clearing ir...?
TMP_187(bool) = TMP_185 && TMP_186
[i] TMP_187 cleared
clearing ir...?
TMP_188(bool) = nativeAmountIn_1 == 0
[i] TMP_188 cleared
clearing ir...?
TMP_189(bool) = foreignAmountIn_1 > 0
[i] TMP_189 cleared
clearing ir...?
TMP_190(bool) = TMP_188 && TMP_189
[i] TMP_190 cleared
clearing ir...?
TMP_191(bool) = TMP_187 || TMP_190
[i] TMP_191 cleared
clearing ir...?
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: foreignAmountIn, Num: 1
Globalname: foreignAmountIn, contract_name: BasePool
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: nativeAmountIn, Num: 1
Globalname: nativeAmountIn, contract_name: BasePool
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: foreignAmountIn, Num: 1
Globalname: foreignAmountIn, contract_name: BasePool
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: nativeAmountIn, Num: 1
Globalname: nativeAmountIn, contract_name: BasePool
End popogation
TMP_185(bool) = nativeAmountIn_1 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_185

Name: TMP_185 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_186(bool) = foreignAmountIn_1 == 0
[i]Type for TMP_186

Name: TMP_186 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_187(bool) = TMP_185 && TMP_186
[i]Type for TMP_187

Name: TMP_187 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_188(bool) = nativeAmountIn_1 == 0
[i]Type for TMP_188

Name: TMP_188 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_189(bool) = foreignAmountIn_1 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_189

Name: TMP_189 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_190(bool) = TMP_188 && TMP_189
[i]Type for TMP_190

Name: TMP_190 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_191(bool) = TMP_187 || TMP_190
[i]Type for TMP_191

Name: TMP_191 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
[i]Type for TMP_192

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
[i] TUPLE_2 cleared
clearing ir...?
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
[i] nativeReserve cleared
clearing ir...?
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
[i] foreignReserve cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignReserve, Num: 1
Globalname: foreignReserve, contract_name: BasePool
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeReserve, Num: 1
Globalname: nativeReserve, contract_name: BasePool
End popogation
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
New param cache []
Old param cache: []
[i]Type for TUPLE_2

Name: TUPLE_2 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
[i] _nativeAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAsset_13, name: nativeAsset

Name: nativeAsset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAsset_13, name: nativeAsset

Name: nativeAsset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _nativeAsset, Num: 1
Globalname: _nativeAsset, contract_name: BasePool
End popogation
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
[i] _foreignAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAsset_14, name: foreignAsset

Name: foreignAsset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAsset_14, name: foreignAsset

Name: foreignAsset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _foreignAsset, Num: 1
Globalname: _foreignAsset, contract_name: BasePool
End popogation
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_193 = CONVERT this to address
[i] TMP_193 cleared
clearing ir...?
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
[i] TMP_194 cleared
clearing ir...?
nativeBalance_1(uint256) := TMP_194(uint256)
[i] nativeBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_1, name: nativeBalance

Name: nativeBalance Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeBalance, Num: 1
Globalname: nativeBalance, contract_name: BasePool
End popogation
TMP_193 = CONVERT this to address
Converting this
6
[i]Type for TMP_193

Name: TMP_193 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
u
prev address? u
[i]Type for TMP_194

Name: TMP_194 Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
nativeBalance_1(uint256) := TMP_194(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_195 = CONVERT this to address
[i] TMP_195 cleared
clearing ir...?
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
[i] TMP_196 cleared
clearing ir...?
foreignBalance_1(uint256) := TMP_196(uint256)
[i] foreignBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignBalance_1, name: foreignBalance

Name: foreignBalance Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignBalance, Num: 1
Globalname: foreignBalance, contract_name: BasePool
End popogation
TMP_195 = CONVERT this to address
Converting this
6
[i]Type for TMP_195

Name: TMP_195 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
u
prev address? u
[i]Type for TMP_196

Name: TMP_196 Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
foreignBalance_1(uint256) := TMP_196(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_197 = CONVERT _nativeAsset_1 to address
[i] TMP_197 cleared
clearing ir...?
TMP_198(bool) = to_1 != TMP_197
[i] TMP_198 cleared
clearing ir...?
TMP_199 = CONVERT _foreignAsset_1 to address
[i] TMP_199 cleared
clearing ir...?
TMP_200(bool) = to_1 != TMP_199
[i] TMP_200 cleared
clearing ir...?
TMP_201(bool) = TMP_198 && TMP_200
[i] TMP_201 cleared
clearing ir...?
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
Propogating parameters and globals to SSA variables...
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197 = CONVERT _nativeAsset_1 to address
Converting _nativeAsset_1

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 9
[i]Type for TMP_197

Name: TMP_197 Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_198(bool) = to_1 != TMP_197
[i]Type for TMP_198

Name: TMP_198 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_199 = CONVERT _foreignAsset_1 to address
Converting _foreignAsset_1

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 10
[i]Type for TMP_199

Name: TMP_199 Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_200(bool) = to_1 != TMP_199
[i]Type for TMP_200

Name: TMP_200 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_201(bool) = TMP_198 && TMP_200
[i]Type for TMP_201

Name: TMP_201 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
[i]Type for TMP_202

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_203(bool) = foreignAmountIn_1 > 0
[i] TMP_203 cleared
clearing ir...?
CONDITION TMP_203
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(bool) = foreignAmountIn_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_203

Name: TMP_203 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
[i] TMP_204 cleared
clearing ir...?
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
[i] TMP_205 cleared
clearing ir...?
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignBalance_1, name: foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignBalance_1, name: foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
Source address: u
[i]Type for TMP_204

Name: TMP_204 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_205

Name: TMP_205 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_207

Name: TMP_207 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
[i] TMP_215 cleared
clearing ir...?
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
[i] TMP_216 cleared
clearing ir...?
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_1, name: nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_1, name: nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
Source address: u
[i]Type for TMP_215

Name: TMP_215 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_216

Name: TMP_216 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
[i] TMP_209 cleared
clearing ir...?
nativeAmountOut_1(uint256) := TMP_209(uint256)
[i] nativeAmountOut cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 1
Globalname: nativeAmountOut, contract_name: BasePool
End popogation
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
Found: calculateSwap

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
[i]Type for TMP_209

Name: TMP_209 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nativeAmountOut_1(uint256) := TMP_209(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
[i] TMP_218 cleared
clearing ir...?
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_218

Name: TMP_218 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_219

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_210(bool) = nativeAmountOut_1 > 0
[i] TMP_210 cleared
clearing ir...?
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
[i] TMP_211 cleared
clearing ir...?
TMP_212(bool) = TMP_210 && TMP_211
[i] TMP_212 cleared
clearing ir...?
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 1
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 1
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_210(bool) = nativeAmountOut_1 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_210

Name: TMP_210 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_211

Name: TMP_211 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(bool) = TMP_210 && TMP_211
[i]Type for TMP_212

Name: TMP_212 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
[i]Type for TMP_213

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
[i] TMP_220 cleared
clearing ir...?
foreignAmountOut_1(uint256) := TMP_220(uint256)
[i] foreignAmountOut cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 1
Globalname: foreignAmountOut, contract_name: BasePool
End popogation
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
Found: calculateSwap

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
[i]Type for TMP_220

Name: TMP_220 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAmountOut_1(uint256) := TMP_220(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
Propogating parameters and globals to SSA variables...
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
End popogation
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
clearing ir...?
TMP_221(bool) = foreignAmountOut_1 > 0
[i] TMP_221 cleared
clearing ir...?
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
[i] TMP_222 cleared
clearing ir...?
TMP_223(bool) = TMP_221 && TMP_222
[i] TMP_223 cleared
clearing ir...?
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 1
Globalname: foreignAmountOut, contract_name: BasePool
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 1
Globalname: foreignAmountOut, contract_name: BasePool
End popogation
TMP_221(bool) = foreignAmountOut_1 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_221

Name: TMP_221 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_222

Name: TMP_222 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_223(bool) = TMP_221 && TMP_222
[i]Type for TMP_223

Name: TMP_223 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
End popogation
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
clearing ir...?
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
[i] nativeAmountOut cleared
clearing ir...?
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
[i] foreignAmountOut cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: foreignAmountOut_2, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 2
Globalname: foreignAmountOut, contract_name: BasePool
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: foreignAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_226 = CONVERT this to address
[i] TMP_226 cleared
clearing ir...?
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
[i] TMP_227 cleared
clearing ir...?
nativeBalance_2(uint256) := TMP_227(uint256)
[i] nativeBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_2, name: nativeBalance

Name: nativeBalance Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeBalance, Num: 2
Globalname: nativeBalance, contract_name: BasePool
End popogation
TMP_226 = CONVERT this to address
Converting this
6
[i]Type for TMP_226

Name: TMP_226 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
9
[i]Type for TMP_227

Name: TMP_227 Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
nativeBalance_2(uint256) := TMP_227(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_228 = CONVERT this to address
[i] TMP_228 cleared
clearing ir...?
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
[i] TMP_229 cleared
clearing ir...?
foreignBalance_2(uint256) := TMP_229(uint256)
[i] foreignBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignBalance_2, name: foreignBalance

Name: foreignBalance Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignBalance, Num: 2
Globalname: foreignBalance, contract_name: BasePool
End popogation
TMP_228 = CONVERT this to address
Converting this
6
[i]Type for TMP_228

Name: TMP_228 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
10
[i]Type for TMP_229

Name: TMP_229 Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
foreignBalance_2(uint256) := TMP_229(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_2, name: nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: foreignBalance_2, name: foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_2, name: nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: foreignBalance_2, name: foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
New param cache [[[9], [-1], 'u', None, [], 0, 'u', 'u'], [[10], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[7], [-1], 'u', None, [], 0, 'u'], [[8], [-1], 'u', None, [], 0, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
Param: balanceNative
[[9], [-1], 'u', None, [], 0, 'u', 'u']

Name: balanceNative Function: None
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: balanceForeign
[[10], [-1], 'u', None, [], 0, 'u', 'u']

Name: balanceForeign Function: None
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: reserveNative
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: reserveNative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: reserveForeign
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: reserveForeign Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_update(uint256,uint256,uint112,uint112)
ENTRY_POINT
Propogating All
EXPRESSION require(bool,string)(balanceNative <= type()(uint112).max && balanceForeign <= type()(uint112).max,BasePool::_update: Balance Overflow)
Propogating All
balanceNative_1
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
balanceForeign_1
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
NEW VARIABLE blockTimestamp = uint32(block.timestamp % 2 ** 32)
Propogating All
NEW VARIABLE timeElapsed = blockTimestamp - _blockTimestampLast
Propogating All
blockTimestamp_1
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
IF timeElapsed > 0 && reserveNative != 0 && reserveForeign != 0
Propogating All
reserveForeign_1
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
reserveNative_1
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
timeElapsed_1
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
Propogating All
EXPRESSION priceNativeCumulativeLast += uint256(UQ112x112.encode(reserveForeign).uqdiv(reserveNative)) * timeElapsed
Propogating All
reserveForeign_1
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
reserveNative_1
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
timeElapsed_1
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION _reserveNative = uint112(balanceNative)
Propogating All
balanceNative_1
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
EXPRESSION priceForeignCumulativeLast += uint256(UQ112x112.encode(reserveNative).uqdiv(reserveForeign)) * timeElapsed
Propogating All
reserveForeign_1
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
reserveNative_1
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
timeElapsed_1
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
EXPRESSION _reserveForeign = uint112(balanceForeign)
Propogating All
balanceForeign_1
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
EXPRESSION _blockTimestampLast = blockTimestamp
Propogating All
blockTimestamp_1
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION Sync(balanceNative,balanceForeign)
Propogating All
balanceNative_1
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
balanceForeign_1
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
clearing ir...?
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
[i] balanceNative cleared
clearing ir...?
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
[i] balanceForeign cleared
clearing ir...?
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
[i] reserveNative cleared
clearing ir...?
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
[i] reserveForeign cleared
clearing ir...?
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
[i] priceNativeCumulativeLast cleared
clearing ir...?
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
[i] priceForeignCumulativeLast cleared
clearing ir...?
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 1
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 1
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 2
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
Phi
[i]Type for balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
Phi
[i]Type for balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
Phi
[i]Type for reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
Phi
[i]Type for reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
Phi
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
Phi
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
Phi
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_235 cleared
clearing ir...?
TMP_236(bool) = balanceNative_1 <= TMP_235
[i] TMP_236 cleared
clearing ir...?
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_238 cleared
clearing ir...?
TMP_239(bool) = balanceForeign_1 <= TMP_238
[i] TMP_239 cleared
clearing ir...?
TMP_240(bool) = TMP_236 && TMP_239
[i] TMP_240 cleared
clearing ir...?
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_235

Name: TMP_235 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_236(bool) = balanceNative_1 <= TMP_235
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_236

Name: TMP_236 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_238

Name: TMP_238 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_239(bool) = balanceForeign_1 <= TMP_238
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_239

Name: TMP_239 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_240(bool) = TMP_236 && TMP_239
[i]Type for TMP_240

Name: TMP_240 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_242(uint256) = 2 (c)** 32
[i] TMP_242 cleared
clearing ir...?
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i] TMP_243 cleared
clearing ir...?
TMP_244 = CONVERT TMP_243 to uint32
[i] TMP_244 cleared
clearing ir...?
blockTimestamp_1(uint32) := TMP_244(uint32)
[i] blockTimestamp cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
End popogation
TMP_242(uint256) = 2 (c)** 32
[i]Type for TMP_242

Name: TMP_242 Function: _update
Num: 
Den: 
Address: u
Norm: 32
LF: None
Value: 4294967296
Fields: 
Finance Type: undef
XXXX
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i]Type for TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244 = CONVERT TMP_243 to uint32
Converting TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_244

Name: TMP_244 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
blockTimestamp_1(uint32) := TMP_244(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
[i] TMP_245 cleared
clearing ir...?
timeElapsed_1(uint32) := TMP_245(uint32)
[i] timeElapsed cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: timeElapsed, Num: 1
Globalname: timeElapsed, contract_name: BasePool
End popogation
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
Source address: u
[i]Type for TMP_245

Name: TMP_245 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint32) := TMP_245(uint32)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_246(bool) = timeElapsed_1 > 0
[i] TMP_246 cleared
clearing ir...?
TMP_247(bool) = reserveNative_1 != 0
[i] TMP_247 cleared
clearing ir...?
TMP_248(bool) = TMP_246 && TMP_247
[i] TMP_248 cleared
clearing ir...?
TMP_249(bool) = reserveForeign_1 != 0
[i] TMP_249 cleared
clearing ir...?
TMP_250(bool) = TMP_248 && TMP_249
[i] TMP_250 cleared
clearing ir...?
CONDITION TMP_250
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_246(bool) = timeElapsed_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_246

Name: TMP_246 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_247(bool) = reserveNative_1 != 0
[i]Type for TMP_247

Name: TMP_247 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_248(bool) = TMP_246 && TMP_247
[i]Type for TMP_248

Name: TMP_248 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_249(bool) = reserveForeign_1 != 0
[i]Type for TMP_249

Name: TMP_249 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_250(bool) = TMP_248 && TMP_249
[i]Type for TMP_250

Name: TMP_250 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
[i] TMP_251 cleared
clearing ir...?
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
[i] TMP_252 cleared
clearing ir...?
TMP_253 = CONVERT TMP_252 to uint256
[i] TMP_253 cleared
clearing ir...?
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
[i] TMP_254 cleared
clearing ir...?
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
[i] priceNativeCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_2, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 2
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_251

Name: TMP_251 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_253 = CONVERT TMP_252 to uint256
Converting TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_253

Name: TMP_253 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_254

Name: TMP_254 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
Source address: u
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceNativeCumulativeLast
Source address: u
clearing ir...?
TMP_259 = CONVERT balanceNative_1 to uint112
[i] TMP_259 cleared
clearing ir...?
_reserveNative_2(uint112) := TMP_259(uint112)
[i] _reserveNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveNative_2, name: _reserveNative

Name: _reserveNative Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveNative, Num: 2
Globalname: _reserveNative, contract_name: BasePool
global...

Name: _reserveNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_259 = CONVERT balanceNative_1 to uint112
Converting balanceNative_1

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_259

Name: TMP_259 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveNative_2(uint112) := TMP_259(uint112)
asgn
9
-1
Finance type key: (0, -1)
[i]Type for _reserveNative

Name: _reserveNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveNative
Source address: u
clearing ir...?
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
[i] TMP_255 cleared
clearing ir...?
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
[i] TMP_256 cleared
clearing ir...?
TMP_257 = CONVERT TMP_256 to uint256
[i] TMP_257 cleared
clearing ir...?
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
[i] TMP_258 cleared
clearing ir...?
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
[i] priceForeignCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_2, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 2
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_255

Name: TMP_255 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_257 = CONVERT TMP_256 to uint256
Converting TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_257

Name: TMP_257 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_258

Name: TMP_258 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
Source address: u
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceForeignCumulativeLast
Source address: u
clearing ir...?
TMP_260 = CONVERT balanceForeign_1 to uint112
[i] TMP_260 cleared
clearing ir...?
_reserveForeign_2(uint112) := TMP_260(uint112)
[i] _reserveForeign cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveForeign_2, name: _reserveForeign

Name: _reserveForeign Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveForeign, Num: 2
Globalname: _reserveForeign, contract_name: BasePool
global...

Name: _reserveForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_260 = CONVERT balanceForeign_1 to uint112
Converting balanceForeign_1

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_260

Name: TMP_260 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveForeign_2(uint112) := TMP_260(uint112)
asgn
10
10
-1
Finance type key: (0, -1)
[i]Type for _reserveForeign

Name: _reserveForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveForeign
Source address: u
clearing ir...?
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_3, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 3
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _blockTimestampLast
Source address: u
clearing ir...?
Emit Sync(balanceNative_1,balanceForeign_1)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
clearing ir...?
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
[i] balanceNative cleared
clearing ir...?
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
[i] balanceForeign cleared
clearing ir...?
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
[i] reserveNative cleared
clearing ir...?
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
[i] reserveForeign cleared
clearing ir...?
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
[i] priceNativeCumulativeLast cleared
clearing ir...?
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
[i] priceForeignCumulativeLast cleared
clearing ir...?
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 1
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 1
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 2
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
Phi
[i]Type for balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
Phi
[i]Type for balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
Phi
[i]Type for reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
Phi
[i]Type for reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
Phi
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
Phi
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
Phi
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_235 cleared
clearing ir...?
TMP_236(bool) = balanceNative_1 <= TMP_235
[i] TMP_236 cleared
clearing ir...?
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_238 cleared
clearing ir...?
TMP_239(bool) = balanceForeign_1 <= TMP_238
[i] TMP_239 cleared
clearing ir...?
TMP_240(bool) = TMP_236 && TMP_239
[i] TMP_240 cleared
clearing ir...?
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_235

Name: TMP_235 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_236(bool) = balanceNative_1 <= TMP_235
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_236

Name: TMP_236 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_238

Name: TMP_238 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_239(bool) = balanceForeign_1 <= TMP_238
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_239

Name: TMP_239 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_240(bool) = TMP_236 && TMP_239
[i]Type for TMP_240

Name: TMP_240 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_242(uint256) = 2 (c)** 32
[i] TMP_242 cleared
clearing ir...?
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i] TMP_243 cleared
clearing ir...?
TMP_244 = CONVERT TMP_243 to uint32
[i] TMP_244 cleared
clearing ir...?
blockTimestamp_1(uint32) := TMP_244(uint32)
[i] blockTimestamp cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
End popogation
TMP_242(uint256) = 2 (c)** 32
[i]Type for TMP_242

Name: TMP_242 Function: _update
Num: 
Den: 
Address: u
Norm: 32
LF: None
Value: 4294967296
Fields: 
Finance Type: undef
XXXX
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i]Type for TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244 = CONVERT TMP_243 to uint32
Converting TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_244

Name: TMP_244 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
blockTimestamp_1(uint32) := TMP_244(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
[i] TMP_245 cleared
clearing ir...?
timeElapsed_1(uint32) := TMP_245(uint32)
[i] timeElapsed cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: timeElapsed, Num: 1
Globalname: timeElapsed, contract_name: BasePool
End popogation
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
Source address: u
[i]Type for TMP_245

Name: TMP_245 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint32) := TMP_245(uint32)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_246(bool) = timeElapsed_1 > 0
[i] TMP_246 cleared
clearing ir...?
TMP_247(bool) = reserveNative_1 != 0
[i] TMP_247 cleared
clearing ir...?
TMP_248(bool) = TMP_246 && TMP_247
[i] TMP_248 cleared
clearing ir...?
TMP_249(bool) = reserveForeign_1 != 0
[i] TMP_249 cleared
clearing ir...?
TMP_250(bool) = TMP_248 && TMP_249
[i] TMP_250 cleared
clearing ir...?
CONDITION TMP_250
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_246(bool) = timeElapsed_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_246

Name: TMP_246 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_247(bool) = reserveNative_1 != 0
[i]Type for TMP_247

Name: TMP_247 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_248(bool) = TMP_246 && TMP_247
[i]Type for TMP_248

Name: TMP_248 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_249(bool) = reserveForeign_1 != 0
[i]Type for TMP_249

Name: TMP_249 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_250(bool) = TMP_248 && TMP_249
[i]Type for TMP_250

Name: TMP_250 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
[i] TMP_251 cleared
clearing ir...?
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
[i] TMP_252 cleared
clearing ir...?
TMP_253 = CONVERT TMP_252 to uint256
[i] TMP_253 cleared
clearing ir...?
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
[i] TMP_254 cleared
clearing ir...?
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
[i] priceNativeCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_2, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 2
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_251

Name: TMP_251 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_253 = CONVERT TMP_252 to uint256
Converting TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_253

Name: TMP_253 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_254

Name: TMP_254 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
Source address: u
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceNativeCumulativeLast
Source address: u
clearing ir...?
TMP_259 = CONVERT balanceNative_1 to uint112
[i] TMP_259 cleared
clearing ir...?
_reserveNative_2(uint112) := TMP_259(uint112)
[i] _reserveNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveNative_2, name: _reserveNative

Name: _reserveNative Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveNative, Num: 2
Globalname: _reserveNative, contract_name: BasePool
global...

Name: _reserveNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_259 = CONVERT balanceNative_1 to uint112
Converting balanceNative_1

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_259

Name: TMP_259 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveNative_2(uint112) := TMP_259(uint112)
asgn
9
-1
Finance type key: (0, -1)
[i]Type for _reserveNative

Name: _reserveNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveNative
Source address: u
clearing ir...?
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
[i] TMP_255 cleared
clearing ir...?
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
[i] TMP_256 cleared
clearing ir...?
TMP_257 = CONVERT TMP_256 to uint256
[i] TMP_257 cleared
clearing ir...?
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
[i] TMP_258 cleared
clearing ir...?
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
[i] priceForeignCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_2, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 2
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_255

Name: TMP_255 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_257 = CONVERT TMP_256 to uint256
Converting TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_257

Name: TMP_257 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_258

Name: TMP_258 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
Source address: u
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceForeignCumulativeLast
Source address: u
clearing ir...?
TMP_260 = CONVERT balanceForeign_1 to uint112
[i] TMP_260 cleared
clearing ir...?
_reserveForeign_2(uint112) := TMP_260(uint112)
[i] _reserveForeign cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveForeign_2, name: _reserveForeign

Name: _reserveForeign Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveForeign, Num: 2
Globalname: _reserveForeign, contract_name: BasePool
global...

Name: _reserveForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_260 = CONVERT balanceForeign_1 to uint112
Converting balanceForeign_1

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_260

Name: TMP_260 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveForeign_2(uint112) := TMP_260(uint112)
asgn
10
10
-1
Finance type key: (0, -1)
[i]Type for _reserveForeign

Name: _reserveForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveForeign
Source address: u
clearing ir...?
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_3, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 3
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _blockTimestampLast
Source address: u
clearing ir...?
Emit Sync(balanceNative_1,balanceForeign_1)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
clearing ir...?
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_2, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 2
Globalname: foreignAmountOut, contract_name: BasePool
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_2, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 2
Globalname: foreignAmountOut, contract_name: BasePool
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
End popogation
clearing ir...?
RETURN nativeAmountOut_2
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
End popogation
RETURN nativeAmountOut_2
RETURN

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
to_1(address) := ϕ(['to_1'])
nativeAsset_10(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13'])
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
MODIFIER_CALL, GasThrottle.validateGas()()
TMP_185(bool) = nativeAmountIn_1 > 0
TMP_186(bool) = foreignAmountIn_1 == 0
TMP_187(bool) = TMP_185 && TMP_186
TMP_188(bool) = nativeAmountIn_1 == 0
TMP_189(bool) = foreignAmountIn_1 > 0
TMP_190(bool) = TMP_188 && TMP_189
TMP_191(bool) = TMP_187 || TMP_190
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
TMP_193 = CONVERT this to address
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
nativeBalance_1(uint256) := TMP_194(uint256)
TMP_195 = CONVERT this to address
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
foreignBalance_1(uint256) := TMP_196(uint256)
TMP_197 = CONVERT _nativeAsset_1 to address
TMP_198(bool) = to_1 != TMP_197
TMP_199 = CONVERT _foreignAsset_1 to address
TMP_200(bool) = to_1 != TMP_199
TMP_201(bool) = TMP_198 && TMP_200
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
TMP_203(bool) = foreignAmountIn_1 > 0
CONDITION TMP_203
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
nativeAmountOut_1(uint256) := TMP_209(uint256)
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
TMP_210(bool) = nativeAmountOut_1 > 0
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
TMP_212(bool) = TMP_210 && TMP_211
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
foreignAmountOut_1(uint256) := TMP_220(uint256)
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
TMP_221(bool) = foreignAmountOut_1 > 0
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
TMP_223(bool) = TMP_221 && TMP_222
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
TMP_226 = CONVERT this to address
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
nativeBalance_2(uint256) := TMP_227(uint256)
TMP_228 = CONVERT this to address
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
foreignBalance_2(uint256) := TMP_229(uint256)
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
RETURN nativeAmountOut_2


clearing ir...?
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
[i] nativeAmountIn cleared
clearing ir...?
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
[i] foreignAmountIn cleared
clearing ir...?
to_1(address) := ϕ(['to_1'])
[i] to cleared
clearing ir...?
nativeAsset_10(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13'])
[i] nativeAsset cleared
clearing ir...?
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
[i] foreignAsset cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: nativeAmountIn, Num: 1
Globalname: nativeAmountIn, contract_name: BasePool
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: foreignAmountIn, Num: 1
Globalname: foreignAmountIn, contract_name: BasePool
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -999

Name: to_1 Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: nativeAsset_10, name: nativeAsset

Name: nativeAsset Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAsset, Num: 10
Globalname: nativeAsset, contract_name: BasePool
global...

Name: PIC_32 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: foreignAsset_11, name: foreignAsset

Name: foreignAsset Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAsset, Num: 11
Globalname: foreignAsset, contract_name: BasePool
global...

Name: PIC_31 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
Phi

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for nativeAmountIn

Name: nativeAmountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
Phi

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for foreignAmountIn

Name: foreignAmountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['to_1'])
Phi
[i]Type for to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
nativeAsset_10(IERC20) := ϕ(['nativeAsset_9', 'nativeAsset_1', 'nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13'])
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
New param cache []
Old param cache: []
clearing ir...?
MODIFIER_CALL, GasThrottle.validateGas()()
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, GasThrottle.validateGas()()
New param cache []
Old param cache: []
clearing ir...?
TMP_185(bool) = nativeAmountIn_1 > 0
[i] TMP_185 cleared
clearing ir...?
TMP_186(bool) = foreignAmountIn_1 == 0
[i] TMP_186 cleared
clearing ir...?
TMP_187(bool) = TMP_185 && TMP_186
[i] TMP_187 cleared
clearing ir...?
TMP_188(bool) = nativeAmountIn_1 == 0
[i] TMP_188 cleared
clearing ir...?
TMP_189(bool) = foreignAmountIn_1 > 0
[i] TMP_189 cleared
clearing ir...?
TMP_190(bool) = TMP_188 && TMP_189
[i] TMP_190 cleared
clearing ir...?
TMP_191(bool) = TMP_187 || TMP_190
[i] TMP_191 cleared
clearing ir...?
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: foreignAmountIn, Num: 1
Globalname: foreignAmountIn, contract_name: BasePool
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: nativeAmountIn, Num: 1
Globalname: nativeAmountIn, contract_name: BasePool
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: foreignAmountIn, Num: 1
Globalname: foreignAmountIn, contract_name: BasePool
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: nativeAmountIn, Num: 1
Globalname: nativeAmountIn, contract_name: BasePool
End popogation
TMP_185(bool) = nativeAmountIn_1 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_185

Name: TMP_185 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_186(bool) = foreignAmountIn_1 == 0
[i]Type for TMP_186

Name: TMP_186 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_187(bool) = TMP_185 && TMP_186
[i]Type for TMP_187

Name: TMP_187 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_188(bool) = nativeAmountIn_1 == 0
[i]Type for TMP_188

Name: TMP_188 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_189(bool) = foreignAmountIn_1 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_189

Name: TMP_189 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_190(bool) = TMP_188 && TMP_189
[i]Type for TMP_190

Name: TMP_190 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_191(bool) = TMP_187 || TMP_190
[i]Type for TMP_191

Name: TMP_191 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
[i]Type for TMP_192

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
[i] TUPLE_2 cleared
clearing ir...?
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
[i] nativeReserve cleared
clearing ir...?
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
[i] foreignReserve cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignReserve, Num: 1
Globalname: foreignReserve, contract_name: BasePool
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeReserve, Num: 1
Globalname: nativeReserve, contract_name: BasePool
End popogation
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
New param cache []
Old param cache: []
[i]Type for TUPLE_2

Name: TUPLE_2 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
[i] _nativeAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAsset_13, name: nativeAsset

Name: nativeAsset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAsset_13, name: nativeAsset

Name: nativeAsset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _nativeAsset, Num: 1
Globalname: _nativeAsset, contract_name: BasePool
End popogation
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
[i] _foreignAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAsset_14, name: foreignAsset

Name: foreignAsset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAsset_14, name: foreignAsset

Name: foreignAsset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _foreignAsset, Num: 1
Globalname: _foreignAsset, contract_name: BasePool
End popogation
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_193 = CONVERT this to address
[i] TMP_193 cleared
clearing ir...?
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
[i] TMP_194 cleared
clearing ir...?
nativeBalance_1(uint256) := TMP_194(uint256)
[i] nativeBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_1, name: nativeBalance

Name: nativeBalance Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeBalance, Num: 1
Globalname: nativeBalance, contract_name: BasePool
End popogation
TMP_193 = CONVERT this to address
Converting this
6
[i]Type for TMP_193

Name: TMP_193 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
u
prev address? u
[i]Type for TMP_194

Name: TMP_194 Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
nativeBalance_1(uint256) := TMP_194(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_195 = CONVERT this to address
[i] TMP_195 cleared
clearing ir...?
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
[i] TMP_196 cleared
clearing ir...?
foreignBalance_1(uint256) := TMP_196(uint256)
[i] foreignBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignBalance_1, name: foreignBalance

Name: foreignBalance Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignBalance, Num: 1
Globalname: foreignBalance, contract_name: BasePool
End popogation
TMP_195 = CONVERT this to address
Converting this
6
[i]Type for TMP_195

Name: TMP_195 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
u
prev address? u
[i]Type for TMP_196

Name: TMP_196 Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
foreignBalance_1(uint256) := TMP_196(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_197 = CONVERT _nativeAsset_1 to address
[i] TMP_197 cleared
clearing ir...?
TMP_198(bool) = to_1 != TMP_197
[i] TMP_198 cleared
clearing ir...?
TMP_199 = CONVERT _foreignAsset_1 to address
[i] TMP_199 cleared
clearing ir...?
TMP_200(bool) = to_1 != TMP_199
[i] TMP_200 cleared
clearing ir...?
TMP_201(bool) = TMP_198 && TMP_200
[i] TMP_201 cleared
clearing ir...?
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
Propogating parameters and globals to SSA variables...
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197 = CONVERT _nativeAsset_1 to address
Converting _nativeAsset_1

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 9
[i]Type for TMP_197

Name: TMP_197 Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_198(bool) = to_1 != TMP_197
[i]Type for TMP_198

Name: TMP_198 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_199 = CONVERT _foreignAsset_1 to address
Converting _foreignAsset_1

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: 10
[i]Type for TMP_199

Name: TMP_199 Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_200(bool) = to_1 != TMP_199
[i]Type for TMP_200

Name: TMP_200 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_201(bool) = TMP_198 && TMP_200
[i]Type for TMP_201

Name: TMP_201 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
[i]Type for TMP_202

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_203(bool) = foreignAmountIn_1 > 0
[i] TMP_203 cleared
clearing ir...?
CONDITION TMP_203
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(bool) = foreignAmountIn_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_203

Name: TMP_203 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
[i] TMP_204 cleared
clearing ir...?
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
[i] TMP_205 cleared
clearing ir...?
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignBalance_1, name: foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignBalance_1, name: foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
Source address: u
[i]Type for TMP_204

Name: TMP_204 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_205

Name: TMP_205 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_207

Name: TMP_207 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
[i] TMP_215 cleared
clearing ir...?
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
[i] TMP_216 cleared
clearing ir...?
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_1, name: nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_1, name: nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
Source address: u
[i]Type for TMP_215

Name: TMP_215 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_216

Name: TMP_216 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
[i] TMP_209 cleared
clearing ir...?
nativeAmountOut_1(uint256) := TMP_209(uint256)
[i] nativeAmountOut cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 1
Globalname: nativeAmountOut, contract_name: BasePool
End popogation
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
Found: calculateSwap

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
[i]Type for TMP_209

Name: TMP_209 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nativeAmountOut_1(uint256) := TMP_209(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
[i] TMP_218 cleared
clearing ir...?
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_218

Name: TMP_218 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_219

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_210(bool) = nativeAmountOut_1 > 0
[i] TMP_210 cleared
clearing ir...?
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
[i] TMP_211 cleared
clearing ir...?
TMP_212(bool) = TMP_210 && TMP_211
[i] TMP_212 cleared
clearing ir...?
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 1
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 1
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_210(bool) = nativeAmountOut_1 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_210

Name: TMP_210 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_211

Name: TMP_211 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(bool) = TMP_210 && TMP_211
[i]Type for TMP_212

Name: TMP_212 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
[i]Type for TMP_213

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
[i] TMP_220 cleared
clearing ir...?
foreignAmountOut_1(uint256) := TMP_220(uint256)
[i] foreignAmountOut cleared
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 1
Globalname: foreignAmountOut, contract_name: BasePool
End popogation
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
Found: calculateSwap

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
[i]Type for TMP_220

Name: TMP_220 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAmountOut_1(uint256) := TMP_220(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
Propogating parameters and globals to SSA variables...
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_1, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
End popogation
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
clearing ir...?
TMP_221(bool) = foreignAmountOut_1 > 0
[i] TMP_221 cleared
clearing ir...?
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
[i] TMP_222 cleared
clearing ir...?
TMP_223(bool) = TMP_221 && TMP_222
[i] TMP_223 cleared
clearing ir...?
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 1
Globalname: foreignAmountOut, contract_name: BasePool
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 1
Globalname: foreignAmountOut, contract_name: BasePool
End popogation
TMP_221(bool) = foreignAmountOut_1 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_221

Name: TMP_221 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_222

Name: TMP_222 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_223(bool) = TMP_221 && TMP_222
[i]Type for TMP_223

Name: TMP_223 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_1, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
End popogation
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
clearing ir...?
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
[i] nativeAmountOut cleared
clearing ir...?
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
[i] foreignAmountOut cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: foreignAmountOut_2, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 2
Globalname: foreignAmountOut, contract_name: BasePool
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: foreignAmountOut Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_226 = CONVERT this to address
[i] TMP_226 cleared
clearing ir...?
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
[i] TMP_227 cleared
clearing ir...?
nativeBalance_2(uint256) := TMP_227(uint256)
[i] nativeBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _nativeAsset_1, name: _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_2, name: nativeBalance

Name: nativeBalance Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeBalance, Num: 2
Globalname: nativeBalance, contract_name: BasePool
End popogation
TMP_226 = CONVERT this to address
Converting this
6
[i]Type for TMP_226

Name: TMP_226 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
9
[i]Type for TMP_227

Name: TMP_227 Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
nativeBalance_2(uint256) := TMP_227(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
TMP_228 = CONVERT this to address
[i] TMP_228 cleared
clearing ir...?
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
[i] TMP_229 cleared
clearing ir...?
foreignBalance_2(uint256) := TMP_229(uint256)
[i] foreignBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _foreignAsset_1, name: _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignBalance_2, name: foreignBalance

Name: foreignBalance Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignBalance, Num: 2
Globalname: foreignBalance, contract_name: BasePool
End popogation
TMP_228 = CONVERT this to address
Converting this
6
[i]Type for TMP_228

Name: TMP_228 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
10
[i]Type for TMP_229

Name: TMP_229 Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
foreignBalance_2(uint256) := TMP_229(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
clearing ir...?
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_2, name: nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: foreignBalance_2, name: foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignReserve_1, name: foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeBalance_2, name: nativeBalance

Name: nativeBalance Function: swap
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: foreignBalance_2, name: foreignBalance

Name: foreignBalance Function: swap
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: nativeReserve_1, name: nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
New param cache [[[9], [-1], 'u', None, [], 0, 'u', 'u'], [[10], [-1], 'u', None, [], 0, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[7], [-1], 'u', None, [], 0, 'u'], [[8], [-1], 'u', None, [], 0, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
Param: balanceNative
[[9], [-1], 'u', None, [], 0, 'u', 'u']

Name: balanceNative Function: None
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: balanceForeign
[[10], [-1], 'u', None, [], 0, 'u', 'u']

Name: balanceForeign Function: None
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Param: reserveNative
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: reserveNative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: reserveForeign
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: reserveForeign Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_update(uint256,uint256,uint112,uint112)
ENTRY_POINT
Propogating All
EXPRESSION require(bool,string)(balanceNative <= type()(uint112).max && balanceForeign <= type()(uint112).max,BasePool::_update: Balance Overflow)
Propogating All
balanceNative_1
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
balanceForeign_1
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
NEW VARIABLE blockTimestamp = uint32(block.timestamp % 2 ** 32)
Propogating All
NEW VARIABLE timeElapsed = blockTimestamp - _blockTimestampLast
Propogating All
blockTimestamp_1
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
IF timeElapsed > 0 && reserveNative != 0 && reserveForeign != 0
Propogating All
reserveForeign_1
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
reserveNative_1
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
timeElapsed_1
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
Propogating All
EXPRESSION priceNativeCumulativeLast += uint256(UQ112x112.encode(reserveForeign).uqdiv(reserveNative)) * timeElapsed
Propogating All
reserveForeign_1
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
reserveNative_1
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
timeElapsed_1
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION _reserveNative = uint112(balanceNative)
Propogating All
balanceNative_1
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
EXPRESSION priceForeignCumulativeLast += uint256(UQ112x112.encode(reserveNative).uqdiv(reserveForeign)) * timeElapsed
Propogating All
reserveForeign_1
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
reserveNative_1
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
timeElapsed_1
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
EXPRESSION _reserveForeign = uint112(balanceForeign)
Propogating All
balanceForeign_1
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
EXPRESSION _blockTimestampLast = blockTimestamp
Propogating All
blockTimestamp_1
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION Sync(balanceNative,balanceForeign)
Propogating All
balanceNative_1
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
balanceForeign_1
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
clearing ir...?
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
[i] balanceNative cleared
clearing ir...?
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
[i] balanceForeign cleared
clearing ir...?
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
[i] reserveNative cleared
clearing ir...?
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
[i] reserveForeign cleared
clearing ir...?
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
[i] priceNativeCumulativeLast cleared
clearing ir...?
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
[i] priceForeignCumulativeLast cleared
clearing ir...?
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign_1 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 1
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 1
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 2
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
Phi
[i]Type for balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
Phi
[i]Type for balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
Phi
[i]Type for reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
Phi
[i]Type for reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
Phi
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
Phi
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
Phi
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_235 cleared
clearing ir...?
TMP_236(bool) = balanceNative_1 <= TMP_235
[i] TMP_236 cleared
clearing ir...?
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_238 cleared
clearing ir...?
TMP_239(bool) = balanceForeign_1 <= TMP_238
[i] TMP_239 cleared
clearing ir...?
TMP_240(bool) = TMP_236 && TMP_239
[i] TMP_240 cleared
clearing ir...?
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_235

Name: TMP_235 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_236(bool) = balanceNative_1 <= TMP_235
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_236

Name: TMP_236 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_238

Name: TMP_238 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_239(bool) = balanceForeign_1 <= TMP_238
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_239

Name: TMP_239 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_240(bool) = TMP_236 && TMP_239
[i]Type for TMP_240

Name: TMP_240 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_242(uint256) = 2 (c)** 32
[i] TMP_242 cleared
clearing ir...?
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i] TMP_243 cleared
clearing ir...?
TMP_244 = CONVERT TMP_243 to uint32
[i] TMP_244 cleared
clearing ir...?
blockTimestamp_1(uint32) := TMP_244(uint32)
[i] blockTimestamp cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
End popogation
TMP_242(uint256) = 2 (c)** 32
[i]Type for TMP_242

Name: TMP_242 Function: _update
Num: 
Den: 
Address: u
Norm: 32
LF: None
Value: 4294967296
Fields: 
Finance Type: undef
XXXX
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i]Type for TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244 = CONVERT TMP_243 to uint32
Converting TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_244

Name: TMP_244 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
blockTimestamp_1(uint32) := TMP_244(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
[i] TMP_245 cleared
clearing ir...?
timeElapsed_1(uint32) := TMP_245(uint32)
[i] timeElapsed cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: timeElapsed, Num: 1
Globalname: timeElapsed, contract_name: BasePool
End popogation
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
Source address: u
[i]Type for TMP_245

Name: TMP_245 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint32) := TMP_245(uint32)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_246(bool) = timeElapsed_1 > 0
[i] TMP_246 cleared
clearing ir...?
TMP_247(bool) = reserveNative_1 != 0
[i] TMP_247 cleared
clearing ir...?
TMP_248(bool) = TMP_246 && TMP_247
[i] TMP_248 cleared
clearing ir...?
TMP_249(bool) = reserveForeign_1 != 0
[i] TMP_249 cleared
clearing ir...?
TMP_250(bool) = TMP_248 && TMP_249
[i] TMP_250 cleared
clearing ir...?
CONDITION TMP_250
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_246(bool) = timeElapsed_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_246

Name: TMP_246 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_247(bool) = reserveNative_1 != 0
[i]Type for TMP_247

Name: TMP_247 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_248(bool) = TMP_246 && TMP_247
[i]Type for TMP_248

Name: TMP_248 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_249(bool) = reserveForeign_1 != 0
[i]Type for TMP_249

Name: TMP_249 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_250(bool) = TMP_248 && TMP_249
[i]Type for TMP_250

Name: TMP_250 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
[i] TMP_251 cleared
clearing ir...?
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
[i] TMP_252 cleared
clearing ir...?
TMP_253 = CONVERT TMP_252 to uint256
[i] TMP_253 cleared
clearing ir...?
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
[i] TMP_254 cleared
clearing ir...?
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
[i] priceNativeCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_2, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 2
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_251

Name: TMP_251 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_253 = CONVERT TMP_252 to uint256
Converting TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_253

Name: TMP_253 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_254

Name: TMP_254 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
Source address: u
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceNativeCumulativeLast
Source address: u
clearing ir...?
TMP_259 = CONVERT balanceNative_1 to uint112
[i] TMP_259 cleared
clearing ir...?
_reserveNative_2(uint112) := TMP_259(uint112)
[i] _reserveNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveNative_2, name: _reserveNative

Name: _reserveNative Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveNative, Num: 2
Globalname: _reserveNative, contract_name: BasePool
global...

Name: _reserveNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_259 = CONVERT balanceNative_1 to uint112
Converting balanceNative_1

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_259

Name: TMP_259 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveNative_2(uint112) := TMP_259(uint112)
asgn
9
-1
Finance type key: (0, -1)
[i]Type for _reserveNative

Name: _reserveNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveNative
Source address: u
clearing ir...?
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
[i] TMP_255 cleared
clearing ir...?
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
[i] TMP_256 cleared
clearing ir...?
TMP_257 = CONVERT TMP_256 to uint256
[i] TMP_257 cleared
clearing ir...?
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
[i] TMP_258 cleared
clearing ir...?
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
[i] priceForeignCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_2, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 2
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_255

Name: TMP_255 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_257 = CONVERT TMP_256 to uint256
Converting TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_257

Name: TMP_257 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_258

Name: TMP_258 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
Source address: u
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceForeignCumulativeLast
Source address: u
clearing ir...?
TMP_260 = CONVERT balanceForeign_1 to uint112
[i] TMP_260 cleared
clearing ir...?
_reserveForeign_2(uint112) := TMP_260(uint112)
[i] _reserveForeign cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveForeign_2, name: _reserveForeign

Name: _reserveForeign Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveForeign, Num: 2
Globalname: _reserveForeign, contract_name: BasePool
global...

Name: _reserveForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_260 = CONVERT balanceForeign_1 to uint112
Converting balanceForeign_1

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_260

Name: TMP_260 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveForeign_2(uint112) := TMP_260(uint112)
asgn
10
10
-1
Finance type key: (0, -1)
[i]Type for _reserveForeign

Name: _reserveForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveForeign
Source address: u
clearing ir...?
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_3, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 3
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _blockTimestampLast
Source address: u
clearing ir...?
Emit Sync(balanceNative_1,balanceForeign_1)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
clearing ir...?
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
[i] balanceNative cleared
clearing ir...?
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
[i] balanceForeign cleared
clearing ir...?
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
[i] reserveNative cleared
clearing ir...?
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
[i] reserveForeign cleared
clearing ir...?
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
[i] priceNativeCumulativeLast cleared
clearing ir...?
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
[i] priceForeignCumulativeLast cleared
clearing ir...?
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceNative_1 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: balanceForeign_1 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Copied ftype
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveNative_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: reserveForeign_1 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 1
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 1
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 2
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
Phi
[i]Type for balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
Phi
[i]Type for balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
Phi
[i]Type for reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
Phi
[i]Type for reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
Phi
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
Phi
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
Phi
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_235 cleared
clearing ir...?
TMP_236(bool) = balanceNative_1 <= TMP_235
[i] TMP_236 cleared
clearing ir...?
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
[i] TMP_238 cleared
clearing ir...?
TMP_239(bool) = balanceForeign_1 <= TMP_238
[i] TMP_239 cleared
clearing ir...?
TMP_240(bool) = TMP_236 && TMP_239
[i] TMP_240 cleared
clearing ir...?
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_235

Name: TMP_235 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_236(bool) = balanceNative_1 <= TMP_235
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_236

Name: TMP_236 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_238

Name: TMP_238 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
XXXX
TMP_239(bool) = balanceForeign_1 <= TMP_238
A: u B: u
lnorm: u rnorm: 0
[i]Type for TMP_239

Name: TMP_239 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_240(bool) = TMP_236 && TMP_239
[i]Type for TMP_240

Name: TMP_240 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_242(uint256) = 2 (c)** 32
[i] TMP_242 cleared
clearing ir...?
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i] TMP_243 cleared
clearing ir...?
TMP_244 = CONVERT TMP_243 to uint32
[i] TMP_244 cleared
clearing ir...?
blockTimestamp_1(uint32) := TMP_244(uint32)
[i] blockTimestamp cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
End popogation
TMP_242(uint256) = 2 (c)** 32
[i]Type for TMP_242

Name: TMP_242 Function: _update
Num: 
Den: 
Address: u
Norm: 32
LF: None
Value: 4294967296
Fields: 
Finance Type: undef
XXXX
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i]Type for TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244 = CONVERT TMP_243 to uint32
Converting TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_244

Name: TMP_244 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
blockTimestamp_1(uint32) := TMP_244(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
[i] TMP_245 cleared
clearing ir...?
timeElapsed_1(uint32) := TMP_245(uint32)
[i] timeElapsed cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _blockTimestampLast_2, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: timeElapsed, Num: 1
Globalname: timeElapsed, contract_name: BasePool
End popogation
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
Source address: u
[i]Type for TMP_245

Name: TMP_245 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint32) := TMP_245(uint32)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_246(bool) = timeElapsed_1 > 0
[i] TMP_246 cleared
clearing ir...?
TMP_247(bool) = reserveNative_1 != 0
[i] TMP_247 cleared
clearing ir...?
TMP_248(bool) = TMP_246 && TMP_247
[i] TMP_248 cleared
clearing ir...?
TMP_249(bool) = reserveForeign_1 != 0
[i] TMP_249 cleared
clearing ir...?
TMP_250(bool) = TMP_248 && TMP_249
[i] TMP_250 cleared
clearing ir...?
CONDITION TMP_250
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_246(bool) = timeElapsed_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_246

Name: TMP_246 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_247(bool) = reserveNative_1 != 0
[i]Type for TMP_247

Name: TMP_247 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_248(bool) = TMP_246 && TMP_247
[i]Type for TMP_248

Name: TMP_248 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_249(bool) = reserveForeign_1 != 0
[i]Type for TMP_249

Name: TMP_249 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_250(bool) = TMP_248 && TMP_249
[i]Type for TMP_250

Name: TMP_250 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
[i] TMP_251 cleared
clearing ir...?
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
[i] TMP_252 cleared
clearing ir...?
TMP_253 = CONVERT TMP_252 to uint256
[i] TMP_253 cleared
clearing ir...?
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
[i] TMP_254 cleared
clearing ir...?
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
[i] priceNativeCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_1, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceNativeCumulativeLast_2, name: priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceNativeCumulativeLast, Num: 2
Globalname: priceNativeCumulativeLast, contract_name: BasePool
global...

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveForeign
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_251

Name: TMP_251 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_251
reserveNative
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_253 = CONVERT TMP_252 to uint256
Converting TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_253

Name: TMP_253 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_254

Name: TMP_254 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
Source address: u
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceNativeCumulativeLast
Source address: u
clearing ir...?
TMP_259 = CONVERT balanceNative_1 to uint112
[i] TMP_259 cleared
clearing ir...?
_reserveNative_2(uint112) := TMP_259(uint112)
[i] _reserveNative cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveNative_2, name: _reserveNative

Name: _reserveNative Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveNative, Num: 2
Globalname: _reserveNative, contract_name: BasePool
global...

Name: _reserveNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_259 = CONVERT balanceNative_1 to uint112
Converting balanceNative_1

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_259

Name: TMP_259 Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveNative_2(uint112) := TMP_259(uint112)
asgn
9
-1
Finance type key: (0, -1)
[i]Type for _reserveNative

Name: _reserveNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveNative
Source address: u
clearing ir...?
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
[i] TMP_255 cleared
clearing ir...?
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
[i] TMP_256 cleared
clearing ir...?
TMP_257 = CONVERT TMP_256 to uint256
[i] TMP_257 cleared
clearing ir...?
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
[i] TMP_258 cleared
clearing ir...?
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
[i] priceForeignCumulativeLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveForeign_1, name: reserveForeign

Name: reserveForeign Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserveNative_1, name: reserveNative

Name: reserveNative Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_1, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: timeElapsed_1, name: timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: priceForeignCumulativeLast_2, name: priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: priceForeignCumulativeLast, Num: 2
Globalname: priceForeignCumulativeLast, contract_name: BasePool
global...

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
Found: None
Written func info: UQ112x112, encode
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
reserveNative
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_255

Name: TMP_255 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
Found: None
Written func info: UQ112x112, uqdiv
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
Retvar: ('t', ['1'], ['2'], 1, "'u'", 'u')
TMP_255
reserveForeign
hers norm: u
([-1, -1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_257 = CONVERT TMP_256 to uint256
Converting TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_257

Name: TMP_257 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_258

Name: TMP_258 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
Source address: u
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied priceForeignCumulativeLast
Source address: u
clearing ir...?
TMP_260 = CONVERT balanceForeign_1 to uint112
[i] TMP_260 cleared
clearing ir...?
_reserveForeign_2(uint112) := TMP_260(uint112)
[i] _reserveForeign cleared
Propogating parameters and globals to SSA variables...
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _reserveForeign_2, name: _reserveForeign

Name: _reserveForeign Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _reserveForeign, Num: 2
Globalname: _reserveForeign, contract_name: BasePool
global...

Name: _reserveForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_260 = CONVERT balanceForeign_1 to uint112
Converting balanceForeign_1

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_260

Name: TMP_260 Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_reserveForeign_2(uint112) := TMP_260(uint112)
asgn
10
10
-1
Finance type key: (0, -1)
[i]Type for _reserveForeign

Name: _reserveForeign Function: _update
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied _reserveForeign
Source address: u
clearing ir...?
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
[i] _blockTimestampLast cleared
Propogating parameters and globals to SSA variables...
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: blockTimestamp_1, name: blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: blockTimestamp, Num: 1
Globalname: blockTimestamp, contract_name: BasePool
Ssa_name: _blockTimestampLast_3, name: _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _blockTimestampLast, Num: 3
Globalname: _blockTimestampLast, contract_name: BasePool
global...

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
asgn
Finance type key: (-1, -1)
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _blockTimestampLast
Source address: u
clearing ir...?
Emit Sync(balanceNative_1,balanceForeign_1)
Propogating parameters and globals to SSA variables...
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceNative_1, name: balanceNative

Name: balanceNative Function: _update
Num: 9
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: balanceForeign_1, name: balanceForeign

Name: balanceForeign Function: _update
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
clearing ir...?
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
Propogating parameters and globals to SSA variables...
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_2, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 2
Globalname: foreignAmountOut, contract_name: BasePool
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: foreignAmountOut_2, name: foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: foreignAmountOut, Num: 2
Globalname: foreignAmountOut, contract_name: BasePool
Ssa_name: to_1, name: to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
End popogation
clearing ir...?
RETURN nativeAmountOut_2
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
Ssa_name: nativeAmountOut_2, name: nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAmountOut, Num: 2
Globalname: nativeAmountOut, contract_name: BasePool
End popogation
RETURN nativeAmountOut_2
RETURN

Name: nativeAmountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Reading Function: _update
Function _update not marked
Reading Function: slitherConstructorConstantVariables
Function slitherConstructorConstantVariables not marked
Address: 1, Label: global:_owner
Address: 2, Label: global:_tokenApprovals
Address: 3, Label: global:_owners
Address: -999, Label: swap:to
Address: -998, Label: mint:to
Address: 4, Label: global:nativeAsset
Address: 5, Label: global:foreignAsset
Address: 6, Label: mint:TMP_139
Address: 6, Label: global:this
Address: 7, Label: None:None
Address: 8, Label: mint:foreignAsset
Address: 9, Label: swap:_nativeAsset
Address: 10, Label: swap:_foreignAsset
Head Addr: 1
    Norm: 0
    Set: {1}
    Fin: NULL
Head Addr: 2
    Norm: 0
    Set: {2}
    Fin: NULL
Head Addr: 3
    Norm: 0
    Set: {3}
    Fin: NULL
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
Head Addr: -998
    Norm: 0
    Set: {-998}
    Fin: NULL
Head Addr: 4
    Norm: u
    Set: {4}
    Fin: NULL
Head Addr: 5
    Norm: u
    Set: {5}
    Fin: NULL
Head Addr: 6
    Norm: u
    Set: {6}
    Fin: NULL
Head Addr: 7
    Norm: u
    Set: {7}
    Fin: NULL
Head Addr: 8
    Norm: u
    Set: {8}
    Fin: NULL
Head Addr: 9
    Norm: u
    Set: {9}
    Fin: NULL
Head Addr: 10
    Norm: u
    Set: {10}
    Fin: NULL
Function count: 69
Time elapsed: 0.8935370445251465
Analyzed_contracts_count: 16
total compilations: 5, contracts: 16
contract name: VaderRouter
Addr:global_nativeAsset : 18
Addr:global_foreignAsset : 6
Addr:global__owner : 0
Addr:global__tokenApprovals : 0
Addr:global__owners : 0
Add to address_to_label {'global:_owner': 1, 'global:_tokenApprovals': 2, 'global:_owners': 3, 'swap:to': -999, 'mint:to': -998, 'global:nativeAsset': 4, 'global:foreignAsset': 5, 'mint:TMP_139': 6, 'global:this': 6, 'None:None': 7, 'mint:foreignAsset': 8, 'swap:_nativeAsset': 9, 'swap:_foreignAsset': 10, 'global:_ZERO_ADDRESS': 11}
Addr:global__ZERO_ADDRESS : 0
Add to address_to_label {'global:_owner': 1, 'global:_tokenApprovals': 2, 'global:_owners': 3, 'swap:to': -999, 'mint:to': -998, 'global:nativeAsset': 4, 'global:foreignAsset': 5, 'mint:TMP_139': 6, 'global:this': 6, 'None:None': 7, 'mint:foreignAsset': 8, 'swap:_nativeAsset': 9, 'swap:_foreignAsset': 10, 'global:_ZERO_ADDRESS': 11, 'removeLiquidity:tokenA': -997}
Addr:removeLiquidity_tokenA : 18
Add to address_to_label {'global:_owner': 1, 'global:_tokenApprovals': 2, 'global:_owners': 3, 'swap:to': -999, 'mint:to': -998, 'global:nativeAsset': 4, 'global:foreignAsset': 5, 'mint:TMP_139': 6, 'global:this': 6, 'None:None': 7, 'mint:foreignAsset': 8, 'swap:_nativeAsset': 9, 'swap:_foreignAsset': 10, 'global:_ZERO_ADDRESS': 11, 'removeLiquidity:tokenA': -997, 'removeLiquidity:tokenB': -996}
Addr:removeLiquidity_tokenB : 6
Add to address_to_label {'global:_owner': 1, 'global:_tokenApprovals': 2, 'global:_owners': 3, 'swap:to': -999, 'mint:to': -998, 'global:nativeAsset': 4, 'global:foreignAsset': 5, 'mint:TMP_139': 6, 'global:this': 6, 'None:None': 7, 'mint:foreignAsset': 8, 'swap:_nativeAsset': 9, 'swap:_foreignAsset': 10, 'global:_ZERO_ADDRESS': 11, 'removeLiquidity:tokenA': -997, 'removeLiquidity:tokenB': -996, 'removeLiquidity:to': -995}
Addr:removeLiquidity_to : 0
Add to address_to_label {'global:_owner': 1, 'global:_tokenApprovals': 2, 'global:_owners': 3, 'swap:to': -999, 'mint:to': -998, 'global:nativeAsset': 4, 'global:foreignAsset': 5, 'mint:TMP_139': 6, 'global:this': 6, 'None:None': 7, 'mint:foreignAsset': 8, 'swap:_nativeAsset': 9, 'swap:_foreignAsset': 10, 'global:_ZERO_ADDRESS': 11, 'removeLiquidity:tokenA': -997, 'removeLiquidity:tokenB': -996, 'removeLiquidity:to': -995, 'swapExactTokensForTokens:path': -994}
Addr:swapExactTokensForTokens_path : 0
Add to address_to_label {'global:_owner': 1, 'global:_tokenApprovals': 2, 'global:_owners': 3, 'swap:to': -999, 'mint:to': -998, 'global:nativeAsset': 4, 'global:foreignAsset': 5, 'mint:TMP_139': 6, 'global:this': 6, 'None:None': 7, 'mint:foreignAsset': 8, 'swap:_nativeAsset': 9, 'swap:_foreignAsset': 10, 'global:_ZERO_ADDRESS': 11, 'removeLiquidity:tokenA': -997, 'removeLiquidity:tokenB': -996, 'removeLiquidity:to': -995, 'swapExactTokensForTokens:path': -994, 'swapExactTokensForTokens:to': -993}
Addr:swapExactTokensForTokens_to : 0
Add to address_to_label {'global:_owner': 1, 'global:_tokenApprovals': 2, 'global:_owners': 3, 'swap:to': -999, 'mint:to': -998, 'global:nativeAsset': 4, 'global:foreignAsset': 5, 'mint:TMP_139': 6, 'global:this': 6, 'None:None': 7, 'mint:foreignAsset': 8, 'swap:_nativeAsset': 9, 'swap:_foreignAsset': 10, 'global:_ZERO_ADDRESS': 11, 'removeLiquidity:tokenA': -997, 'removeLiquidity:tokenB': -996, 'removeLiquidity:to': -995, 'swapExactTokensForTokens:path': -994, 'swapExactTokensForTokens:to': -993, 'swapTokensForExactTokens:path': -992}
Addr:swapTokensForExactTokens_path : 0
Add to address_to_label {'global:_owner': 1, 'global:_tokenApprovals': 2, 'global:_owners': 3, 'swap:to': -999, 'mint:to': -998, 'global:nativeAsset': 4, 'global:foreignAsset': 5, 'mint:TMP_139': 6, 'global:this': 6, 'None:None': 7, 'mint:foreignAsset': 8, 'swap:_nativeAsset': 9, 'swap:_foreignAsset': 10, 'global:_ZERO_ADDRESS': 11, 'removeLiquidity:tokenA': -997, 'removeLiquidity:tokenB': -996, 'removeLiquidity:to': -995, 'swapExactTokensForTokens:path': -994, 'swapExactTokensForTokens:to': -993, 'swapTokensForExactTokens:path': -992, 'swapTokensForExactTokens:to': -991}
Addr:swapTokensForExactTokens_to : 0
Add to address_to_label {'global:_owner': 1, 'global:_tokenApprovals': 2, 'global:_owners': 3, 'swap:to': -999, 'mint:to': -998, 'global:nativeAsset': 4, 'global:foreignAsset': 5, 'mint:TMP_139': 6, 'global:this': 6, 'None:None': 7, 'mint:foreignAsset': 8, 'swap:_nativeAsset': 9, 'swap:_foreignAsset': 10, 'global:_ZERO_ADDRESS': 11, 'removeLiquidity:tokenA': -997, 'removeLiquidity:tokenB': -996, 'removeLiquidity:to': -995, 'swapExactTokensForTokens:path': -994, 'swapExactTokensForTokens:to': -993, 'swapTokensForExactTokens:path': -992, 'swapTokensForExactTokens:to': -991, 'calculateInGivenOut:path': -990}
Addr:calculateInGivenOut_path : 0
Add to address_to_label {'global:_owner': 1, 'global:_tokenApprovals': 2, 'global:_owners': 3, 'swap:to': -999, 'mint:to': -998, 'global:nativeAsset': 4, 'global:foreignAsset': 5, 'mint:TMP_139': 6, 'global:this': 6, 'None:None': 7, 'mint:foreignAsset': 8, 'swap:_nativeAsset': 9, 'swap:_foreignAsset': 10, 'global:_ZERO_ADDRESS': 11, 'removeLiquidity:tokenA': -997, 'removeLiquidity:tokenB': -996, 'removeLiquidity:to': -995, 'swapExactTokensForTokens:path': -994, 'swapExactTokensForTokens:to': -993, 'swapTokensForExactTokens:path': -992, 'swapTokensForExactTokens:to': -991, 'calculateInGivenOut:path': -990, 'calculateOutGivenIn:path': -989}
Addr:calculateOutGivenIn_path : 0
Mark functions Adding: VaderRouter, constructor, True
[*]Marked
Mark functions Adding: VaderRouter, addLiquidity, True
[X]No Binary
Mark functions Adding: VaderRouter, addLiquidity, True
[X]No Binary
Mark functions Adding: VaderRouter, removeLiquidity, True
[*]Marked
Mark functions Adding: VaderRouter, swapExactTokensForTokens, True
[*]Marked
Mark functions Adding: VaderRouter, swapTokensForExactTokens, True
[*]Marked
Mark functions Adding: VaderRouter, initialize, True
[*]Marked
Mark functions Adding: VaderRouter, _swap, True
[x] Not visible 
Mark functions Adding: VaderRouter, _addLiquidity, True
[x] Not visible 
Mark functions Adding: VaderRouter, calculateInGivenOut, True
[*]Marked
Mark functions Adding: VaderRouter, calculateOutGivenIn, True
[*]Marked
Mark functions Adding: VaderRouter, slitherConstructorConstantVariables, True
[x] Not visible 
State_var: _owner
Finding type for _owner(address ... )
prev address? u
Head Addr: 1
    Norm: 0
    Set: {1}
    Fin: NULL
Source address: 1
State_var: factory
Finding type for factory(IVaderPoolFactory ... )
Value: u
Source address: u
State_var: _ONE_YEAR
Finding type for _ONE_YEAR(uint256 ... )
Value: u
Source address: u
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS(address ... )
prev address? u
Head Addr: 11
    Norm: 0
    Set: {11}
    Fin: NULL
Source address: 11
State_var: reserve
Finding type for reserve(IVaderReserve ... )
Value: u
Source address: u
contract name: IBasePool
contract name: IVaderPool
contract name: IVaderPoolFactory
contract name: IVaderRouter
contract name: IVaderReserve
contract name: VaderMath
Addr:global__owner : 0
Addr:global__tokenApprovals : 0
Addr:global__owners : 0
Addr:swap_to : 0
Mark functions Adding: VaderMath, calculateLiquidityUnits, True
[*]Marked
Mark functions Adding: VaderMath, calculateSlipAdjustment, True
[*]Marked
Mark functions Adding: VaderMath, calculateLoss, True
[*]Marked
Mark functions Adding: VaderMath, calculateSwap, True
[*]Marked
Mark functions Adding: VaderMath, calculateSwapReverse, True
[*]Marked
Mark functions Adding: VaderMath, delta, True
[*]Marked
Mark functions Adding: VaderMath, pow, True
[*]Marked
Mark functions Adding: VaderMath, root, True
[*]Marked
Mark functions Adding: VaderMath, slitherConstructorConstantVariables, True
[x] Not visible 
State_var: ONE
Source address: u
contract name: Ownable
contract name: IERC20
contract name: IERC20Permit
contract name: SafeERC20
contract name: IERC721
contract name: Address
contract name: Context
contract name: IERC165
contract name: ProtocolConstants
Running check on VaderRouter
Reading Function: constructor
Checking funcion...



constructor
Function name: constructor
Finding type for _factory(IVaderPoolFactory ... )
Value: u
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u']]
FIND RETURN
ENTRY_POINT
constructor(IVaderPoolFactory)


_ZERO_ADDRESS_1(address) := ϕ(['_ZERO_ADDRESS_0', '_ZERO_ADDRESS_5', '_ZERO_ADDRESS_3'])
TMP_15 = CONVERT _ZERO_ADDRESS_1 to IVaderPoolFactory
TMP_16(bool) = _factory_1 != TMP_15
TMP_17(None) = SOLIDITY_CALL require(bool,string)(TMP_16,VaderRouter::constructor: Incorrect Arguments)
factory_1(IVaderPoolFactory) := _factory_1(IVaderPoolFactory)


clearing ir...?
_ZERO_ADDRESS_1(address) := ϕ(['_ZERO_ADDRESS_0', '_ZERO_ADDRESS_5', '_ZERO_ADDRESS_3'])
[i] _ZERO_ADDRESS cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _ZERO_ADDRESS_1, name: _ZERO_ADDRESS

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _ZERO_ADDRESS, Num: 1
Globalname: _ZERO_ADDRESS, contract_name: VaderRouter
global...

Name: PIC_106 Function: None
Num: -1
Den: -1
Address: 11
Norm: 0
LF: _ZERO_ADDRESS
Value: u
Fields: 
Finance Type: undef
Source address: 11
_ZERO_ADDRESS_1(address) := ϕ(['_ZERO_ADDRESS_0', '_ZERO_ADDRESS_5', '_ZERO_ADDRESS_3'])
Phi
[i]Type for _ZERO_ADDRESS

Name: _ZERO_ADDRESS Function: constructor
Num: -1
Den: -1
Address: 11
Norm: 0
LF: _ZERO_ADDRESS
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_15 = CONVERT _ZERO_ADDRESS_1 to IVaderPoolFactory
[i] TMP_15 cleared
clearing ir...?
TMP_16(bool) = _factory_1 != TMP_15
[i] TMP_16 cleared
clearing ir...?
TMP_17(None) = SOLIDITY_CALL require(bool,string)(TMP_16,VaderRouter::constructor: Incorrect Arguments)
Propogating parameters and globals to SSA variables...
Ssa_name: _factory_1, name: _factory

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _factory_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _factory, Num: 1
Globalname: _factory, contract_name: VaderRouter
Ssa_name: _ZERO_ADDRESS_1, name: _ZERO_ADDRESS

Name: _ZERO_ADDRESS Function: constructor
Num: -1
Den: -1
Address: 11
Norm: 0
LF: _ZERO_ADDRESS
Value: u
Fields: 
Finance Type: undef
Ssa_name: _ZERO_ADDRESS_1, name: _ZERO_ADDRESS

Name: _ZERO_ADDRESS Function: constructor
Num: -1
Den: -1
Address: 11
Norm: 0
LF: _ZERO_ADDRESS
Value: u
Fields: 
Finance Type: undef
Ssa_name: _factory_1, name: _factory

Name: _factory_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _factory_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _factory, Num: 1
Globalname: _factory, contract_name: VaderRouter
End popogation
TMP_15 = CONVERT _ZERO_ADDRESS_1 to IVaderPoolFactory
Converting _ZERO_ADDRESS_1

Name: _ZERO_ADDRESS Function: constructor
Num: -1
Den: -1
Address: 11
Norm: 0
LF: _ZERO_ADDRESS
Value: u
Fields: 
Finance Type: undef
Source address: 11
VaderPoolFactory
[i]Type for TMP_15

Name: TMP_15 Function: constructor
Num: -1
Den: -1
Address: 11
Norm: 0
LF: VaderPoolFactory
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_16(bool) = _factory_1 != TMP_15
[i]Type for TMP_16

Name: TMP_16 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_17(None) = SOLIDITY_CALL require(bool,string)(TMP_16,VaderRouter::constructor: Incorrect Arguments)
[i]Type for TMP_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
factory_1(IVaderPoolFactory) := _factory_1(IVaderPoolFactory)
[i] factory cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _factory_1, name: _factory

Name: _factory_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _factory_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _factory, Num: 1
Globalname: _factory, contract_name: VaderRouter
Ssa_name: _factory_1, name: _factory

Name: _factory_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _factory_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _factory, Num: 1
Globalname: _factory, contract_name: VaderRouter
Ssa_name: factory_1, name: factory

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: factory, Num: 1
Globalname: factory, contract_name: VaderRouter
global...

Name: PIC_104 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
factory_1(IVaderPoolFactory) := _factory_1(IVaderPoolFactory)
asgn
Finance type key: (-1, -1)
[i]Type for factory

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied factory
Source address: u


_ZERO_ADDRESS_1(address) := ϕ(['_ZERO_ADDRESS_0', '_ZERO_ADDRESS_5', '_ZERO_ADDRESS_3'])
TMP_15 = CONVERT _ZERO_ADDRESS_1 to IVaderPoolFactory
TMP_16(bool) = _factory_1 != TMP_15
TMP_17(None) = SOLIDITY_CALL require(bool,string)(TMP_16,VaderRouter::constructor: Incorrect Arguments)
factory_1(IVaderPoolFactory) := _factory_1(IVaderPoolFactory)


clearing ir...?
_ZERO_ADDRESS_1(address) := ϕ(['_ZERO_ADDRESS_0', '_ZERO_ADDRESS_5', '_ZERO_ADDRESS_3'])
[i] _ZERO_ADDRESS cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _ZERO_ADDRESS_1, name: _ZERO_ADDRESS

Name: _ZERO_ADDRESS Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: _ZERO_ADDRESS
Value: u
Fields: 
Finance Type: undef
Name: _ZERO_ADDRESS, Num: 1
Globalname: _ZERO_ADDRESS, contract_name: VaderRouter
global...

Name: PIC_106 Function: None
Num: -1
Den: -1
Address: 11
Norm: 0
LF: _ZERO_ADDRESS
Value: u
Fields: 
Finance Type: undef
Source address: 11
_ZERO_ADDRESS_1(address) := ϕ(['_ZERO_ADDRESS_0', '_ZERO_ADDRESS_5', '_ZERO_ADDRESS_3'])
Phi
[i]Type for _ZERO_ADDRESS

Name: _ZERO_ADDRESS Function: constructor
Num: -1
Den: -1
Address: 11
Norm: 0
LF: _ZERO_ADDRESS
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_15 = CONVERT _ZERO_ADDRESS_1 to IVaderPoolFactory
[i] TMP_15 cleared
clearing ir...?
TMP_16(bool) = _factory_1 != TMP_15
[i] TMP_16 cleared
clearing ir...?
TMP_17(None) = SOLIDITY_CALL require(bool,string)(TMP_16,VaderRouter::constructor: Incorrect Arguments)
Propogating parameters and globals to SSA variables...
Ssa_name: _factory_1, name: _factory

Name: _factory_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _factory_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _factory, Num: 1
Globalname: _factory, contract_name: VaderRouter
Ssa_name: _ZERO_ADDRESS_1, name: _ZERO_ADDRESS

Name: _ZERO_ADDRESS Function: constructor
Num: -1
Den: -1
Address: 11
Norm: 0
LF: _ZERO_ADDRESS
Value: u
Fields: 
Finance Type: undef
Ssa_name: _ZERO_ADDRESS_1, name: _ZERO_ADDRESS

Name: _ZERO_ADDRESS Function: constructor
Num: -1
Den: -1
Address: 11
Norm: 0
LF: _ZERO_ADDRESS
Value: u
Fields: 
Finance Type: undef
Ssa_name: _factory_1, name: _factory

Name: _factory_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _factory_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _factory, Num: 1
Globalname: _factory, contract_name: VaderRouter
End popogation
TMP_15 = CONVERT _ZERO_ADDRESS_1 to IVaderPoolFactory
Converting _ZERO_ADDRESS_1

Name: _ZERO_ADDRESS Function: constructor
Num: -1
Den: -1
Address: 11
Norm: 0
LF: _ZERO_ADDRESS
Value: u
Fields: 
Finance Type: undef
Source address: 11
VaderPoolFactory
[i]Type for TMP_15

Name: TMP_15 Function: constructor
Num: -1
Den: -1
Address: 11
Norm: 0
LF: VaderPoolFactory
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_16(bool) = _factory_1 != TMP_15
[i]Type for TMP_16

Name: TMP_16 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_17(None) = SOLIDITY_CALL require(bool,string)(TMP_16,VaderRouter::constructor: Incorrect Arguments)
[i]Type for TMP_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
factory_1(IVaderPoolFactory) := _factory_1(IVaderPoolFactory)
[i] factory cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _factory_1, name: _factory

Name: _factory_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _factory_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _factory, Num: 1
Globalname: _factory, contract_name: VaderRouter
Ssa_name: _factory_1, name: _factory

Name: _factory_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _factory_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _factory, Num: 1
Globalname: _factory, contract_name: VaderRouter
Ssa_name: factory_1, name: factory

Name: factory Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: factory, Num: 1
Globalname: factory, contract_name: VaderRouter
global...

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
factory_1(IVaderPoolFactory) := _factory_1(IVaderPoolFactory)
asgn
Finance type key: (-1, -1)
[i]Type for factory

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied factory
Source address: u
Reading Function: addLiquidity
Function addLiquidity not marked
Reading Function: addLiquidity
Function addLiquidity not marked
Reading Function: removeLiquidity
Checking funcion...



removeLiquidity
Function name: removeLiquidity
Finding type for tokenA(address ... )
prev address? u
Head Addr: -997
    Norm: 18
    Set: {-997}
    Fin: NULL
Finding type for tokenB(address ... )
prev address? u
Head Addr: -996
    Norm: 6
    Set: {-996}
    Fin: NULL
Finding type for id(uint256 ... )
Value: u
Finding type for amountAMin(uint256 ... )
Value: u
Finding type for amountBMin(uint256 ... )
Value: u
Finding type for to(address ... )
prev address? u
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
Finding type for deadline(uint256 ... )
Value: u
New param cache [[[], [], 18, 'tokenA', [], -1, -997, 'u'], [[], [], 6, 'tokenB', [], -1, -996, 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[], [], 0, 'to', [], -1, -995, 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
FIND RETURN
ENTRY_POINT
removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)


factory_2(IVaderPoolFactory) := ϕ(['factory_0', 'factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24'])
reserve_1(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_0'])
MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
TMP_26(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_3(IVaderPoolFactory), function:getPool, arguments:['tokenA_1', 'tokenB_1']  
factory_4(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_3'])
reserve_3(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_2'])
pool_1(IVaderPool) := TMP_26(IVaderPool)
TMP_27 = CONVERT pool_1 to address
HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:transferFrom, arguments:['msg.sender', 'TMP_27', 'id_1']  
factory_5(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_4'])
reserve_4(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_3'])
TUPLE_2(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:burn, arguments:['id_1', 'to_1']  
factory_6(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_5'])
reserve_5(IVaderReserve) := ϕ(['reserve_4', 'reserve_8', 'reserve_7'])
amountNative_1(uint256)= UNPACK TUPLE_2 index: 0 
amountForeign_1(uint256)= UNPACK TUPLE_2 index: 1 
coveredLoss_1(uint256)= UNPACK TUPLE_2 index: 2 
TMP_35(address) = HIGH_LEVEL_CALL, dest:factory_6(IVaderPoolFactory), function:nativeAsset, arguments:[]  
factory_7(IVaderPoolFactory) := ϕ(['factory_16', 'factory_6', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24'])
reserve_6(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_5'])
TMP_36(bool) = tokenA_1 == TMP_35
CONDITION TMP_36
amountA_2(uint256) := amountNative_1(uint256)
amountB_2(uint256) := amountForeign_1(uint256)
amountA_1(uint256) := amountForeign_1(uint256)
amountB_1(uint256) := amountNative_1(uint256)
amountA_3(uint256) := ϕ(['amountA_1', 'amountA_2'])
amountB_3(uint256) := ϕ(['amountB_1', 'amountB_2'])
TMP_29(bool) = amountA_3 >= amountAMin_1
TMP_30(None) = SOLIDITY_CALL require(bool,string)(TMP_29,UniswapV2Router: INSUFFICIENT_A_AMOUNT)
TMP_31(bool) = amountB_3 >= amountBMin_1
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,UniswapV2Router: INSUFFICIENT_B_AMOUNT)
HIGH_LEVEL_CALL, dest:reserve_6(IVaderReserve), function:reimburseImpermanentLoss, arguments:['msg.sender', 'coveredLoss_1']  
reserve_7(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_6'])


clearing ir...?
factory_2(IVaderPoolFactory) := ϕ(['factory_0', 'factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24'])
[i] factory cleared
clearing ir...?
reserve_1(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_0'])
[i] reserve cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: factory_2, name: factory

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: factory, Num: 2
Globalname: factory, contract_name: VaderRouter
global...

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: reserve_1, name: reserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserve, Num: 1
Globalname: reserve, contract_name: VaderRouter
global...

Name: PIC_107 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
factory_2(IVaderPoolFactory) := ϕ(['factory_0', 'factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24'])
Phi
[i]Type for factory

Name: factory Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve_1(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_0'])
Phi
[i]Type for reserve

Name: reserve Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
Propogating parameters and globals to SSA variables...
Ssa_name: deadline_1, name: deadline

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: deadline_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: deadline, Num: 1
Globalname: deadline, contract_name: VaderRouter
Ssa_name: deadline_1, name: deadline

Name: deadline_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: deadline_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: deadline, Num: 1
Globalname: deadline, contract_name: VaderRouter
End popogation
MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u']]
Param: deadline
[[], [], 'u', None, [], -1, 'u', 'u']

Name: deadline Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
ensure(uint256)
ENTRY_POINT
Propogating All
EXPRESSION require(bool,string)(deadline >= block.timestamp,VaderRouter::ensure: Expired)
Propogating All
deadline_1
Ssa_name: deadline_1, name: deadline

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: deadline_1 Function: ensure
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_
Propogating All
clearing ir...?
deadline_1(uint256) := ϕ(['deadline_1', 'deadline_1', 'deadline_1', 'deadline_1'])
[i] deadline cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: deadline_1, name: deadline

Name: deadline_1 Function: ensure
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: deadline_1 Function: ensure
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: deadline, Num: 1
Globalname: deadline, contract_name: VaderRouter
deadline_1(uint256) := ϕ(['deadline_1', 'deadline_1', 'deadline_1', 'deadline_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: deadline_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for deadline

Name: deadline Function: ensure
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_112(bool) = deadline_1 >= block.timestamp
[i] TMP_112 cleared
clearing ir...?
TMP_113(None) = SOLIDITY_CALL require(bool,string)(TMP_112,VaderRouter::ensure: Expired)
Propogating parameters and globals to SSA variables...
Ssa_name: deadline_1, name: deadline

Name: deadline Function: ensure
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: deadline_1 Function: ensure
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: deadline, Num: 1
Globalname: deadline, contract_name: VaderRouter
Ssa_name: deadline_1, name: deadline

Name: deadline_1 Function: ensure
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: deadline_1 Function: ensure
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: deadline, Num: 1
Globalname: deadline, contract_name: VaderRouter
End popogation
TMP_112(bool) = deadline_1 >= block.timestamp
A: u B: u
lnorm: u rnorm: u
Source address: u
Source address: u
[i]Type for TMP_112

Name: TMP_112 Function: ensure
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_113(None) = SOLIDITY_CALL require(bool,string)(TMP_112,VaderRouter::ensure: Expired)
[i]Type for TMP_113

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
deadline_1(uint256) := ϕ(['deadline_1', 'deadline_1', 'deadline_1', 'deadline_1'])
[i] deadline cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: deadline_1, name: deadline

Name: deadline_1 Function: ensure
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: deadline_1 Function: ensure
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: deadline, Num: 1
Globalname: deadline, contract_name: VaderRouter
deadline_1(uint256) := ϕ(['deadline_1', 'deadline_1', 'deadline_1', 'deadline_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: deadline_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for deadline

Name: deadline Function: ensure
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_112(bool) = deadline_1 >= block.timestamp
[i] TMP_112 cleared
clearing ir...?
TMP_113(None) = SOLIDITY_CALL require(bool,string)(TMP_112,VaderRouter::ensure: Expired)
Propogating parameters and globals to SSA variables...
Ssa_name: deadline_1, name: deadline

Name: deadline Function: ensure
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: deadline_1 Function: ensure
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: deadline, Num: 1
Globalname: deadline, contract_name: VaderRouter
Ssa_name: deadline_1, name: deadline

Name: deadline_1 Function: ensure
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: deadline_1 Function: ensure
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: deadline, Num: 1
Globalname: deadline, contract_name: VaderRouter
End popogation
TMP_112(bool) = deadline_1 >= block.timestamp
A: u B: u
lnorm: u rnorm: u
Source address: u
Source address: u
[i]Type for TMP_112

Name: TMP_112 Function: ensure
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_113(None) = SOLIDITY_CALL require(bool,string)(TMP_112,VaderRouter::ensure: Expired)
[i]Type for TMP_113

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TMP_26(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_3(IVaderPoolFactory), function:getPool, arguments:['tokenA_1', 'tokenB_1']  
[i] TMP_26 cleared
clearing ir...?
factory_4(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_3'])
[i] factory cleared
clearing ir...?
reserve_3(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_2'])
[i] reserve cleared
clearing ir...?
pool_1(IVaderPool) := TMP_26(IVaderPool)
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: tokenB_1, name: tokenB

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -996

Name: tokenB_1 Function: removeLiquidity
Num: 
Den: 
Address: -996
Norm: 6
LF: tokenB
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: tokenA_1, name: tokenA

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -997

Name: tokenA_1 Function: removeLiquidity
Num: 
Den: 
Address: -997
Norm: 18
LF: tokenA
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: factory_3, name: factory

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: factory, Num: 3
Globalname: factory, contract_name: VaderRouter
global...

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: tokenB_1, name: tokenB

Name: tokenB_1 Function: removeLiquidity
Num: 
Den: 
Address: -996
Norm: 6
LF: tokenB
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenA_1, name: tokenA

Name: tokenA_1 Function: removeLiquidity
Num: 
Den: 
Address: -997
Norm: 18
LF: tokenA
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_3, name: factory

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1, name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool, Num: 1
Globalname: pool, contract_name: VaderRouter
End popogation
Ssa_name: factory_4, name: factory

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: factory, Num: 4
Globalname: factory, contract_name: VaderRouter
global...

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: reserve_3, name: reserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserve, Num: 3
Globalname: reserve, contract_name: VaderRouter
global...

Name: PIC_107 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_26(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_3(IVaderPoolFactory), function:getPool, arguments:['tokenA_1', 'tokenB_1']  
High Call: getPool
Running querryfc
Found: None
Written func info: IVaderPoolFactory, getPool
[i]Type for TMP_26

Name: TMP_26 Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
factory_4(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_3'])
Phi
[i]Type for factory

Name: factory Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve_3(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_2'])
Phi
[i]Type for reserve

Name: reserve Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool_1(IVaderPool) := TMP_26(IVaderPool)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool

Name: pool Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_27 = CONVERT pool_1 to address
[i] TMP_27 cleared
clearing ir...?
HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:transferFrom, arguments:['msg.sender', 'TMP_27', 'id_1']  
clearing ir...?
factory_5(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_4'])
[i] factory cleared
clearing ir...?
reserve_4(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_3'])
[i] reserve cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1, name: pool

Name: pool Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: id_1, name: id

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: id_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: id, Num: 1
Globalname: id, contract_name: VaderRouter
Ssa_name: pool_1, name: pool

Name: pool Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: id_1, name: id

Name: id_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: id_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: id, Num: 1
Globalname: id, contract_name: VaderRouter
End popogation
Ssa_name: factory_5, name: factory

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: factory, Num: 5
Globalname: factory, contract_name: VaderRouter
global...

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: reserve_4, name: reserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserve, Num: 4
Globalname: reserve, contract_name: VaderRouter
global...

Name: PIC_107 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_27 = CONVERT pool_1 to address
Converting pool_1

Name: pool Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_27

Name: TMP_27 Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:transferFrom, arguments:['msg.sender', 'TMP_27', 'id_1']  
High Call: transferFrom
factory_5(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_4'])
Phi
[i]Type for factory

Name: factory Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve_4(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_3'])
Phi
[i]Type for reserve

Name: reserve Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TUPLE_2(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:burn, arguments:['id_1', 'to_1']  
[i] TUPLE_2 cleared
clearing ir...?
factory_6(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_5'])
[i] factory cleared
clearing ir...?
reserve_5(IVaderReserve) := ϕ(['reserve_4', 'reserve_8', 'reserve_7'])
[i] reserve cleared
clearing ir...?
amountNative_1(uint256)= UNPACK TUPLE_2 index: 0 
[i] amountNative cleared
clearing ir...?
amountForeign_1(uint256)= UNPACK TUPLE_2 index: 1 
[i] amountForeign cleared
clearing ir...?
coveredLoss_1(uint256)= UNPACK TUPLE_2 index: 2 
[i] coveredLoss cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1, name: pool

Name: pool Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -995

Name: to_1 Function: removeLiquidity
Num: 
Den: 
Address: -995
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: id_1, name: id

Name: id_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: id_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: id, Num: 1
Globalname: id, contract_name: VaderRouter
Ssa_name: pool_1, name: pool

Name: pool Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: to_1, name: to

Name: to_1 Function: removeLiquidity
Num: 
Den: 
Address: -995
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: id_1, name: id

Name: id_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: id_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: id, Num: 1
Globalname: id, contract_name: VaderRouter
Ssa_name: coveredLoss_1, name: coveredLoss

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: coveredLoss, Num: 1
Globalname: coveredLoss, contract_name: VaderRouter
Ssa_name: amountNative_1, name: amountNative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountNative, Num: 1
Globalname: amountNative, contract_name: VaderRouter
Ssa_name: amountForeign_1, name: amountForeign

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountForeign, Num: 1
Globalname: amountForeign, contract_name: VaderRouter
End popogation
Ssa_name: factory_6, name: factory

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: factory, Num: 6
Globalname: factory, contract_name: VaderRouter
global...

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: reserve_5, name: reserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserve, Num: 5
Globalname: reserve, contract_name: VaderRouter
global...

Name: PIC_107 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TUPLE_2(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:burn, arguments:['id_1', 'to_1']  
High Call: burn
Running querryfc
Found: None
Written func info: IVaderPool, burn
[i]Type for TUPLE_2

Name: TUPLE_2 Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
factory_6(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_5'])
Phi
[i]Type for factory

Name: factory Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve_5(IVaderReserve) := ϕ(['reserve_4', 'reserve_8', 'reserve_7'])
Phi
[i]Type for reserve

Name: reserve Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountNative_1(uint256)= UNPACK TUPLE_2 index: 0 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for amountNative

Name: amountNative Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountForeign_1(uint256)= UNPACK TUPLE_2 index: 1 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for amountForeign

Name: amountForeign Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
coveredLoss_1(uint256)= UNPACK TUPLE_2 index: 2 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for coveredLoss

Name: coveredLoss Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_35(address) = HIGH_LEVEL_CALL, dest:factory_6(IVaderPoolFactory), function:nativeAsset, arguments:[]  
[i] TMP_35 cleared
clearing ir...?
factory_7(IVaderPoolFactory) := ϕ(['factory_16', 'factory_6', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24'])
[i] factory cleared
clearing ir...?
reserve_6(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_5'])
[i] reserve cleared
clearing ir...?
TMP_36(bool) = tokenA_1 == TMP_35
[i] TMP_36 cleared
clearing ir...?
CONDITION TMP_36
Propogating parameters and globals to SSA variables...
Ssa_name: tokenA_1, name: tokenA

Name: tokenA_1 Function: removeLiquidity
Num: 
Den: 
Address: -997
Norm: 18
LF: tokenA
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_6, name: factory

Name: factory Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenA_1, name: tokenA

Name: tokenA_1 Function: removeLiquidity
Num: 
Den: 
Address: -997
Norm: 18
LF: tokenA
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_6, name: factory

Name: factory Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: factory_7, name: factory

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: factory, Num: 7
Globalname: factory, contract_name: VaderRouter
global...

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: reserve_6, name: reserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserve, Num: 6
Globalname: reserve, contract_name: VaderRouter
global...

Name: PIC_107 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_35(address) = HIGH_LEVEL_CALL, dest:factory_6(IVaderPoolFactory), function:nativeAsset, arguments:[]  
High Call: nativeAsset
Running querryfc
Found: None
Written func info: IVaderPoolFactory, nativeAsset
Retvar: ('c', ['global:nativeAsset'], ['-1'], 18, "'u'", 'u')
{'global:_owner': 1, 'global:_tokenApprovals': 2, 'global:_owners': 3, 'swap:to': -999, 'mint:to': -998, 'global:nativeAsset': 4, 'global:foreignAsset': 5, 'mint:TMP_139': 6, 'global:this': 6, 'None:None': 7, 'mint:foreignAsset': 8, 'swap:_nativeAsset': 9, 'swap:_foreignAsset': 10, 'global:_ZERO_ADDRESS': 11, 'removeLiquidity:tokenA': -997, 'removeLiquidity:tokenB': -996, 'removeLiquidity:to': -995, 'swapExactTokensForTokens:path': -994, 'swapExactTokensForTokens:to': -993, 'swapTokensForExactTokens:path': -992, 'swapTokensForExactTokens:to': -991, 'calculateInGivenOut:path': -990, 'calculateOutGivenIn:path': -989}
([4], [-1], 18, "'u'", 'u', -1)
[i]Type for TMP_35

Name: TMP_35 Function: removeLiquidity
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
factory_7(IVaderPoolFactory) := ϕ(['factory_16', 'factory_6', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24'])
Phi
[i]Type for factory

Name: factory Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve_6(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_5'])
Phi
[i]Type for reserve

Name: reserve Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_36(bool) = tokenA_1 == TMP_35
[i]Type for TMP_36

Name: TMP_36 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
amountA_2(uint256) := amountNative_1(uint256)
[i] amountA cleared
clearing ir...?
amountB_2(uint256) := amountForeign_1(uint256)
[i] amountB cleared
Propogating parameters and globals to SSA variables...
Ssa_name: amountNative_1, name: amountNative

Name: amountNative Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountForeign_1, name: amountForeign

Name: amountForeign Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountNative_1, name: amountNative

Name: amountNative Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountForeign_1, name: amountForeign

Name: amountForeign Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountA_2, name: amountA

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountA, Num: 2
Globalname: amountA, contract_name: VaderRouter
Ssa_name: amountB_2, name: amountB

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountB, Num: 2
Globalname: amountB, contract_name: VaderRouter
End popogation
amountA_2(uint256) := amountNative_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for amountA

Name: amountA Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountB_2(uint256) := amountForeign_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for amountB

Name: amountB Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
amountA_1(uint256) := amountForeign_1(uint256)
[i] amountA cleared
clearing ir...?
amountB_1(uint256) := amountNative_1(uint256)
[i] amountB cleared
Propogating parameters and globals to SSA variables...
Ssa_name: amountNative_1, name: amountNative

Name: amountNative Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountForeign_1, name: amountForeign

Name: amountForeign Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountNative_1, name: amountNative

Name: amountNative Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountForeign_1, name: amountForeign

Name: amountForeign Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountA_1, name: amountA

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountA, Num: 1
Globalname: amountA, contract_name: VaderRouter
Ssa_name: amountB_1, name: amountB

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountB, Num: 1
Globalname: amountB, contract_name: VaderRouter
End popogation
amountA_1(uint256) := amountForeign_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for amountA

Name: amountA Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountB_1(uint256) := amountNative_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for amountB

Name: amountB Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
amountA_3(uint256) := ϕ(['amountA_1', 'amountA_2'])
[i] amountA cleared
clearing ir...?
amountB_3(uint256) := ϕ(['amountB_1', 'amountB_2'])
[i] amountB cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: amountA_3, name: amountA

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountA, Num: 3
Globalname: amountA, contract_name: VaderRouter
Ssa_name: amountB_3, name: amountB

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountB, Num: 3
Globalname: amountB, contract_name: VaderRouter
amountA_3(uint256) := ϕ(['amountA_1', 'amountA_2'])
Phi

Name: amountA Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountA Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for amountA

Name: amountA Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountB_3(uint256) := ϕ(['amountB_1', 'amountB_2'])
Phi

Name: amountB Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountB Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for amountB

Name: amountB Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_29(bool) = amountA_3 >= amountAMin_1
[i] TMP_29 cleared
clearing ir...?
TMP_30(None) = SOLIDITY_CALL require(bool,string)(TMP_29,UniswapV2Router: INSUFFICIENT_A_AMOUNT)
Propogating parameters and globals to SSA variables...
Ssa_name: amountA_3, name: amountA

Name: amountA Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountA, Num: 3
Globalname: amountA, contract_name: VaderRouter
Ssa_name: amountAMin_1, name: amountAMin

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountAMin_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountAMin, Num: 1
Globalname: amountAMin, contract_name: VaderRouter
Ssa_name: amountA_3, name: amountA

Name: amountA Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountA, Num: 3
Globalname: amountA, contract_name: VaderRouter
Ssa_name: amountAMin_1, name: amountAMin

Name: amountAMin_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountAMin_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountAMin, Num: 1
Globalname: amountAMin, contract_name: VaderRouter
End popogation
TMP_29(bool) = amountA_3 >= amountAMin_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_29

Name: TMP_29 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_30(None) = SOLIDITY_CALL require(bool,string)(TMP_29,UniswapV2Router: INSUFFICIENT_A_AMOUNT)
[i]Type for TMP_30

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_31(bool) = amountB_3 >= amountBMin_1
[i] TMP_31 cleared
clearing ir...?
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,UniswapV2Router: INSUFFICIENT_B_AMOUNT)
Propogating parameters and globals to SSA variables...
Ssa_name: amountB_3, name: amountB

Name: amountB Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountB, Num: 3
Globalname: amountB, contract_name: VaderRouter
Ssa_name: amountBMin_1, name: amountBMin

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountBMin_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountBMin, Num: 1
Globalname: amountBMin, contract_name: VaderRouter
Ssa_name: amountB_3, name: amountB

Name: amountB Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountB, Num: 3
Globalname: amountB, contract_name: VaderRouter
Ssa_name: amountBMin_1, name: amountBMin

Name: amountBMin_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountBMin_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountBMin, Num: 1
Globalname: amountBMin, contract_name: VaderRouter
End popogation
TMP_31(bool) = amountB_3 >= amountBMin_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_31

Name: TMP_31 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,UniswapV2Router: INSUFFICIENT_B_AMOUNT)
[i]Type for TMP_32

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
HIGH_LEVEL_CALL, dest:reserve_6(IVaderReserve), function:reimburseImpermanentLoss, arguments:['msg.sender', 'coveredLoss_1']  
clearing ir...?
reserve_7(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_6'])
[i] reserve cleared
Propogating parameters and globals to SSA variables...
Ssa_name: coveredLoss_1, name: coveredLoss

Name: coveredLoss Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserve_6, name: reserve

Name: reserve Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: coveredLoss_1, name: coveredLoss

Name: coveredLoss Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserve_6, name: reserve

Name: reserve Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: reserve_7, name: reserve

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserve, Num: 7
Globalname: reserve, contract_name: VaderRouter
global...

Name: PIC_107 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
HIGH_LEVEL_CALL, dest:reserve_6(IVaderReserve), function:reimburseImpermanentLoss, arguments:['msg.sender', 'coveredLoss_1']  
High Call: reimburseImpermanentLoss
reserve_7(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_6'])
Phi
[i]Type for reserve

Name: reserve Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


factory_2(IVaderPoolFactory) := ϕ(['factory_0', 'factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24'])
reserve_1(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_0'])
MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
TMP_26(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_3(IVaderPoolFactory), function:getPool, arguments:['tokenA_1', 'tokenB_1']  
factory_4(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_3'])
reserve_3(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_2'])
pool_1(IVaderPool) := TMP_26(IVaderPool)
TMP_27 = CONVERT pool_1 to address
HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:transferFrom, arguments:['msg.sender', 'TMP_27', 'id_1']  
factory_5(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_4'])
reserve_4(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_3'])
TUPLE_2(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:burn, arguments:['id_1', 'to_1']  
factory_6(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_5'])
reserve_5(IVaderReserve) := ϕ(['reserve_4', 'reserve_8', 'reserve_7'])
amountNative_1(uint256)= UNPACK TUPLE_2 index: 0 
amountForeign_1(uint256)= UNPACK TUPLE_2 index: 1 
coveredLoss_1(uint256)= UNPACK TUPLE_2 index: 2 
TMP_35(address) = HIGH_LEVEL_CALL, dest:factory_6(IVaderPoolFactory), function:nativeAsset, arguments:[]  
factory_7(IVaderPoolFactory) := ϕ(['factory_16', 'factory_6', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24'])
reserve_6(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_5'])
TMP_36(bool) = tokenA_1 == TMP_35
CONDITION TMP_36
amountA_2(uint256) := amountNative_1(uint256)
amountB_2(uint256) := amountForeign_1(uint256)
amountA_1(uint256) := amountForeign_1(uint256)
amountB_1(uint256) := amountNative_1(uint256)
amountA_3(uint256) := ϕ(['amountA_1', 'amountA_2'])
amountB_3(uint256) := ϕ(['amountB_1', 'amountB_2'])
TMP_29(bool) = amountA_3 >= amountAMin_1
TMP_30(None) = SOLIDITY_CALL require(bool,string)(TMP_29,UniswapV2Router: INSUFFICIENT_A_AMOUNT)
TMP_31(bool) = amountB_3 >= amountBMin_1
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,UniswapV2Router: INSUFFICIENT_B_AMOUNT)
HIGH_LEVEL_CALL, dest:reserve_6(IVaderReserve), function:reimburseImpermanentLoss, arguments:['msg.sender', 'coveredLoss_1']  
reserve_7(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_6'])


clearing ir...?
factory_2(IVaderPoolFactory) := ϕ(['factory_0', 'factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24'])
[i] factory cleared
clearing ir...?
reserve_1(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_0'])
[i] reserve cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: factory_2, name: factory

Name: factory Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: factory, Num: 2
Globalname: factory, contract_name: VaderRouter
global...

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: reserve_1, name: reserve

Name: reserve Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserve, Num: 1
Globalname: reserve, contract_name: VaderRouter
global...

Name: PIC_107 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
factory_2(IVaderPoolFactory) := ϕ(['factory_0', 'factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24'])
Phi
[i]Type for factory

Name: factory Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve_1(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_0'])
Phi
[i]Type for reserve

Name: reserve Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
Propogating parameters and globals to SSA variables...
Ssa_name: deadline_1, name: deadline

Name: deadline_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: deadline_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: deadline, Num: 1
Globalname: deadline, contract_name: VaderRouter
Ssa_name: deadline_1, name: deadline

Name: deadline_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: deadline_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: deadline, Num: 1
Globalname: deadline, contract_name: VaderRouter
End popogation
MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
clearing ir...?
TMP_26(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_3(IVaderPoolFactory), function:getPool, arguments:['tokenA_1', 'tokenB_1']  
[i] TMP_26 cleared
clearing ir...?
factory_4(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_3'])
[i] factory cleared
clearing ir...?
reserve_3(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_2'])
[i] reserve cleared
clearing ir...?
pool_1(IVaderPool) := TMP_26(IVaderPool)
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: tokenB_1, name: tokenB

Name: tokenB_1 Function: removeLiquidity
Num: 
Den: 
Address: -996
Norm: 6
LF: tokenB
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenA_1, name: tokenA

Name: tokenA_1 Function: removeLiquidity
Num: 
Den: 
Address: -997
Norm: 18
LF: tokenA
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_3, name: factory

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenB_1, name: tokenB

Name: tokenB_1 Function: removeLiquidity
Num: 
Den: 
Address: -996
Norm: 6
LF: tokenB
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenA_1, name: tokenA

Name: tokenA_1 Function: removeLiquidity
Num: 
Den: 
Address: -997
Norm: 18
LF: tokenA
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_3, name: factory

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1, name: pool

Name: pool Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool, Num: 1
Globalname: pool, contract_name: VaderRouter
End popogation
Ssa_name: factory_4, name: factory

Name: factory Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: factory, Num: 4
Globalname: factory, contract_name: VaderRouter
global...

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: reserve_3, name: reserve

Name: reserve Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserve, Num: 3
Globalname: reserve, contract_name: VaderRouter
global...

Name: PIC_107 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_26(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_3(IVaderPoolFactory), function:getPool, arguments:['tokenA_1', 'tokenB_1']  
High Call: getPool
Running querryfc
Found: None
Written func info: IVaderPoolFactory, getPool
[i]Type for TMP_26

Name: TMP_26 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
factory_4(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_3'])
Phi
[i]Type for factory

Name: factory Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve_3(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_2'])
Phi
[i]Type for reserve

Name: reserve Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool_1(IVaderPool) := TMP_26(IVaderPool)
asgn
Finance type key: (-1, -1)
[i]Type for pool

Name: pool Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_27 = CONVERT pool_1 to address
[i] TMP_27 cleared
clearing ir...?
HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:transferFrom, arguments:['msg.sender', 'TMP_27', 'id_1']  
clearing ir...?
factory_5(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_4'])
[i] factory cleared
clearing ir...?
reserve_4(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_3'])
[i] reserve cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1, name: pool

Name: pool Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool, Num: 1
Globalname: pool, contract_name: VaderRouter
Ssa_name: id_1, name: id

Name: id_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: id_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: id, Num: 1
Globalname: id, contract_name: VaderRouter
Ssa_name: pool_1, name: pool

Name: pool Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool, Num: 1
Globalname: pool, contract_name: VaderRouter
Ssa_name: id_1, name: id

Name: id_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: id_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: id, Num: 1
Globalname: id, contract_name: VaderRouter
End popogation
Ssa_name: factory_5, name: factory

Name: factory Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: factory, Num: 5
Globalname: factory, contract_name: VaderRouter
global...

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: reserve_4, name: reserve

Name: reserve Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserve, Num: 4
Globalname: reserve, contract_name: VaderRouter
global...

Name: PIC_107 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_27 = CONVERT pool_1 to address
Converting pool_1

Name: pool Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_27

Name: TMP_27 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:transferFrom, arguments:['msg.sender', 'TMP_27', 'id_1']  
High Call: transferFrom
factory_5(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_4'])
Phi
[i]Type for factory

Name: factory Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve_4(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_3'])
Phi
[i]Type for reserve

Name: reserve Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
TUPLE_2(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:burn, arguments:['id_1', 'to_1']  
[i] TUPLE_2 cleared
clearing ir...?
factory_6(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_5'])
[i] factory cleared
clearing ir...?
reserve_5(IVaderReserve) := ϕ(['reserve_4', 'reserve_8', 'reserve_7'])
[i] reserve cleared
clearing ir...?
amountNative_1(uint256)= UNPACK TUPLE_2 index: 0 
[i] amountNative cleared
clearing ir...?
amountForeign_1(uint256)= UNPACK TUPLE_2 index: 1 
[i] amountForeign cleared
clearing ir...?
coveredLoss_1(uint256)= UNPACK TUPLE_2 index: 2 
[i] coveredLoss cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1, name: pool

Name: pool Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool, Num: 1
Globalname: pool, contract_name: VaderRouter
Ssa_name: to_1, name: to

Name: to_1 Function: removeLiquidity
Num: 
Den: 
Address: -995
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: id_1, name: id

Name: id_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: id_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: id, Num: 1
Globalname: id, contract_name: VaderRouter
Ssa_name: pool_1, name: pool

Name: pool Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool, Num: 1
Globalname: pool, contract_name: VaderRouter
Ssa_name: to_1, name: to

Name: to_1 Function: removeLiquidity
Num: 
Den: 
Address: -995
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: id_1, name: id

Name: id_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: id_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: id, Num: 1
Globalname: id, contract_name: VaderRouter
Ssa_name: coveredLoss_1, name: coveredLoss

Name: coveredLoss Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: coveredLoss, Num: 1
Globalname: coveredLoss, contract_name: VaderRouter
Ssa_name: amountNative_1, name: amountNative

Name: amountNative Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountNative, Num: 1
Globalname: amountNative, contract_name: VaderRouter
Ssa_name: amountForeign_1, name: amountForeign

Name: amountForeign Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountForeign, Num: 1
Globalname: amountForeign, contract_name: VaderRouter
End popogation
Ssa_name: factory_6, name: factory

Name: factory Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: factory, Num: 6
Globalname: factory, contract_name: VaderRouter
global...

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: reserve_5, name: reserve

Name: reserve Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserve, Num: 5
Globalname: reserve, contract_name: VaderRouter
global...

Name: PIC_107 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TUPLE_2(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:burn, arguments:['id_1', 'to_1']  
High Call: burn
Running querryfc
Found: None
Written func info: IVaderPool, burn
[i]Type for TUPLE_2

Name: TUPLE_2 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
factory_6(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_5'])
Phi
[i]Type for factory

Name: factory Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve_5(IVaderReserve) := ϕ(['reserve_4', 'reserve_8', 'reserve_7'])
Phi
[i]Type for reserve

Name: reserve Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountNative_1(uint256)= UNPACK TUPLE_2 index: 0 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for amountNative

Name: amountNative Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountForeign_1(uint256)= UNPACK TUPLE_2 index: 1 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for amountForeign

Name: amountForeign Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
coveredLoss_1(uint256)= UNPACK TUPLE_2 index: 2 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for coveredLoss

Name: coveredLoss Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_35(address) = HIGH_LEVEL_CALL, dest:factory_6(IVaderPoolFactory), function:nativeAsset, arguments:[]  
[i] TMP_35 cleared
clearing ir...?
factory_7(IVaderPoolFactory) := ϕ(['factory_16', 'factory_6', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24'])
[i] factory cleared
clearing ir...?
reserve_6(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_5'])
[i] reserve cleared
clearing ir...?
TMP_36(bool) = tokenA_1 == TMP_35
[i] TMP_36 cleared
clearing ir...?
CONDITION TMP_36
Propogating parameters and globals to SSA variables...
Ssa_name: tokenA_1, name: tokenA

Name: tokenA_1 Function: removeLiquidity
Num: 
Den: 
Address: -997
Norm: 18
LF: tokenA
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_6, name: factory

Name: factory Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: tokenA_1, name: tokenA

Name: tokenA_1 Function: removeLiquidity
Num: 
Den: 
Address: -997
Norm: 18
LF: tokenA
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_6, name: factory

Name: factory Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: factory_7, name: factory

Name: factory Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: factory, Num: 7
Globalname: factory, contract_name: VaderRouter
global...

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: reserve_6, name: reserve

Name: reserve Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserve, Num: 6
Globalname: reserve, contract_name: VaderRouter
global...

Name: PIC_107 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_35(address) = HIGH_LEVEL_CALL, dest:factory_6(IVaderPoolFactory), function:nativeAsset, arguments:[]  
High Call: nativeAsset
Running querryfc
Found: None
Written func info: IVaderPoolFactory, nativeAsset
Retvar: ('c', ['global:nativeAsset'], ['-1'], 18, "'u'", 'u')
{'global:_owner': 1, 'global:_tokenApprovals': 2, 'global:_owners': 3, 'swap:to': -999, 'mint:to': -998, 'global:nativeAsset': 4, 'global:foreignAsset': 5, 'mint:TMP_139': 6, 'global:this': 6, 'None:None': 7, 'mint:foreignAsset': 8, 'swap:_nativeAsset': 9, 'swap:_foreignAsset': 10, 'global:_ZERO_ADDRESS': 11, 'removeLiquidity:tokenA': -997, 'removeLiquidity:tokenB': -996, 'removeLiquidity:to': -995, 'swapExactTokensForTokens:path': -994, 'swapExactTokensForTokens:to': -993, 'swapTokensForExactTokens:path': -992, 'swapTokensForExactTokens:to': -991, 'calculateInGivenOut:path': -990, 'calculateOutGivenIn:path': -989}
([4], [-1], 18, "'u'", 'u', -1)
[i]Type for TMP_35

Name: TMP_35 Function: removeLiquidity
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
factory_7(IVaderPoolFactory) := ϕ(['factory_16', 'factory_6', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24'])
Phi
[i]Type for factory

Name: factory Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve_6(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_5'])
Phi
[i]Type for reserve

Name: reserve Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_36(bool) = tokenA_1 == TMP_35
[i]Type for TMP_36

Name: TMP_36 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
amountA_2(uint256) := amountNative_1(uint256)
[i] amountA cleared
clearing ir...?
amountB_2(uint256) := amountForeign_1(uint256)
[i] amountB cleared
Propogating parameters and globals to SSA variables...
Ssa_name: amountNative_1, name: amountNative

Name: amountNative Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountForeign_1, name: amountForeign

Name: amountForeign Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountNative_1, name: amountNative

Name: amountNative Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountForeign_1, name: amountForeign

Name: amountForeign Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountA_2, name: amountA

Name: amountA Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountA, Num: 2
Globalname: amountA, contract_name: VaderRouter
Ssa_name: amountB_2, name: amountB

Name: amountB Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountB, Num: 2
Globalname: amountB, contract_name: VaderRouter
End popogation
amountA_2(uint256) := amountNative_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for amountA

Name: amountA Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountB_2(uint256) := amountForeign_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for amountB

Name: amountB Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
amountA_1(uint256) := amountForeign_1(uint256)
[i] amountA cleared
clearing ir...?
amountB_1(uint256) := amountNative_1(uint256)
[i] amountB cleared
Propogating parameters and globals to SSA variables...
Ssa_name: amountNative_1, name: amountNative

Name: amountNative Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountForeign_1, name: amountForeign

Name: amountForeign Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountNative_1, name: amountNative

Name: amountNative Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountForeign_1, name: amountForeign

Name: amountForeign Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountA_1, name: amountA

Name: amountA Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountA, Num: 1
Globalname: amountA, contract_name: VaderRouter
Ssa_name: amountB_1, name: amountB

Name: amountB Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountB, Num: 1
Globalname: amountB, contract_name: VaderRouter
End popogation
amountA_1(uint256) := amountForeign_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for amountA

Name: amountA Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountB_1(uint256) := amountNative_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for amountB

Name: amountB Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
amountA_3(uint256) := ϕ(['amountA_1', 'amountA_2'])
[i] amountA cleared
clearing ir...?
amountB_3(uint256) := ϕ(['amountB_1', 'amountB_2'])
[i] amountB cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: amountA_3, name: amountA

Name: amountA Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountA, Num: 3
Globalname: amountA, contract_name: VaderRouter
Ssa_name: amountB_3, name: amountB

Name: amountB Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountB, Num: 3
Globalname: amountB, contract_name: VaderRouter
amountA_3(uint256) := ϕ(['amountA_1', 'amountA_2'])
Phi

Name: amountA Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountA Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for amountA

Name: amountA Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountB_3(uint256) := ϕ(['amountB_1', 'amountB_2'])
Phi

Name: amountB Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountB Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for amountB

Name: amountB Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_29(bool) = amountA_3 >= amountAMin_1
[i] TMP_29 cleared
clearing ir...?
TMP_30(None) = SOLIDITY_CALL require(bool,string)(TMP_29,UniswapV2Router: INSUFFICIENT_A_AMOUNT)
Propogating parameters and globals to SSA variables...
Ssa_name: amountA_3, name: amountA

Name: amountA Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountA, Num: 3
Globalname: amountA, contract_name: VaderRouter
Ssa_name: amountAMin_1, name: amountAMin

Name: amountAMin_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountAMin_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountAMin, Num: 1
Globalname: amountAMin, contract_name: VaderRouter
Ssa_name: amountA_3, name: amountA

Name: amountA Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountA, Num: 3
Globalname: amountA, contract_name: VaderRouter
Ssa_name: amountAMin_1, name: amountAMin

Name: amountAMin_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountAMin_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountAMin, Num: 1
Globalname: amountAMin, contract_name: VaderRouter
End popogation
TMP_29(bool) = amountA_3 >= amountAMin_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_29

Name: TMP_29 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_30(None) = SOLIDITY_CALL require(bool,string)(TMP_29,UniswapV2Router: INSUFFICIENT_A_AMOUNT)
[i]Type for TMP_30

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_31(bool) = amountB_3 >= amountBMin_1
[i] TMP_31 cleared
clearing ir...?
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,UniswapV2Router: INSUFFICIENT_B_AMOUNT)
Propogating parameters and globals to SSA variables...
Ssa_name: amountB_3, name: amountB

Name: amountB Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountB, Num: 3
Globalname: amountB, contract_name: VaderRouter
Ssa_name: amountBMin_1, name: amountBMin

Name: amountBMin_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountBMin_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountBMin, Num: 1
Globalname: amountBMin, contract_name: VaderRouter
Ssa_name: amountB_3, name: amountB

Name: amountB Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountB, Num: 3
Globalname: amountB, contract_name: VaderRouter
Ssa_name: amountBMin_1, name: amountBMin

Name: amountBMin_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountBMin_1 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountBMin, Num: 1
Globalname: amountBMin, contract_name: VaderRouter
End popogation
TMP_31(bool) = amountB_3 >= amountBMin_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_31

Name: TMP_31 Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,UniswapV2Router: INSUFFICIENT_B_AMOUNT)
[i]Type for TMP_32

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
HIGH_LEVEL_CALL, dest:reserve_6(IVaderReserve), function:reimburseImpermanentLoss, arguments:['msg.sender', 'coveredLoss_1']  
clearing ir...?
reserve_7(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_6'])
[i] reserve cleared
Propogating parameters and globals to SSA variables...
Ssa_name: coveredLoss_1, name: coveredLoss

Name: coveredLoss Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserve_6, name: reserve

Name: reserve Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: coveredLoss_1, name: coveredLoss

Name: coveredLoss Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: reserve_6, name: reserve

Name: reserve Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: reserve_7, name: reserve

Name: reserve Function: removeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: reserve, Num: 7
Globalname: reserve, contract_name: VaderRouter
global...

Name: PIC_107 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
HIGH_LEVEL_CALL, dest:reserve_6(IVaderReserve), function:reimburseImpermanentLoss, arguments:['msg.sender', 'coveredLoss_1']  
High Call: reimburseImpermanentLoss
reserve_7(IVaderReserve) := ϕ(['reserve_8', 'reserve_7', 'reserve_6'])
Phi
[i]Type for reserve

Name: reserve Function: removeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Source address: u
Reading Function: swapExactTokensForTokens
Checking funcion...



swapExactTokensForTokens
Function name: swapExactTokensForTokens
Finding type for amountIn(uint256 ... )
Value: u
Finding type for amountOutMin(uint256 ... )
Value: u
Finding type for path(address[] ... )
prev address? u
Head Addr: -994
    Norm: 0
    Set: {-994}
    Fin: NULL
Finding type for to(address ... )
prev address? u
Changed here
Head Addr: -993
    Norm: 0
    Set: {-993}
    Fin: NULL
Finding type for deadline(uint256 ... )
Value: u
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[], [], 0, None, [], -1, -994, 'u'], [[], [], 0, 'to', [], -1, -993, 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
FIND RETURN
ENTRY_POINT
swapExactTokensForTokens(uint256,uint256,address[],address,uint256)


MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
TMP_37(uint256) = INTERNAL_CALL, VaderRouter._swap(uint256,address[],address)(amountIn_1,path_1 (-> []),to_1)
amountOut_1(uint256) := TMP_37(uint256)
TMP_38(bool) = amountOut_1 >= amountOutMin_1
TMP_39(None) = SOLIDITY_CALL require(bool,string)(TMP_38,VaderRouter::swapExactTokensForTokens: Insufficient Trade Output)


Propogating parameters and globals to SSA variables...
End popogation
clearing ir...?
MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
Propogating parameters and globals to SSA variables...
Ssa_name: deadline_1, name: deadline

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: deadline_1 Function: swapExactTokensForTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: deadline, Num: 1
Globalname: deadline, contract_name: VaderRouter
Ssa_name: deadline_1, name: deadline

Name: deadline_1 Function: swapExactTokensForTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: deadline_1 Function: swapExactTokensForTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: deadline, Num: 1
Globalname: deadline, contract_name: VaderRouter
End popogation
MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
clearing ir...?
TMP_37(uint256) = INTERNAL_CALL, VaderRouter._swap(uint256,address[],address)(amountIn_1,path_1 (-> []),to_1)
[i] TMP_37 cleared
clearing ir...?
amountOut_1(uint256) := TMP_37(uint256)
[i] amountOut cleared
Propogating parameters and globals to SSA variables...
Ssa_name: amountIn_1, name: amountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: swapExactTokensForTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountIn, Num: 1
Globalname: amountIn, contract_name: VaderRouter
Ssa_name: to_1, name: to

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -993

Name: to_1 Function: swapExactTokensForTokens
Num: 
Den: 
Address: -993
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: path_1 (-> []), name: path

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: path_1 (-> []) Function: swapExactTokensForTokens
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: amountIn_1, name: amountIn

Name: amountIn_1 Function: swapExactTokensForTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: swapExactTokensForTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountIn, Num: 1
Globalname: amountIn, contract_name: VaderRouter
Ssa_name: to_1, name: to

Name: to_1 Function: swapExactTokensForTokens
Num: 
Den: 
Address: -993
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: path_1 (-> []), name: path

Name: path_1 (-> []) Function: swapExactTokensForTokens
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountOut_1, name: amountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountOut, Num: 1
Globalname: amountOut, contract_name: VaderRouter
End popogation
TMP_37(uint256) = INTERNAL_CALL, VaderRouter._swap(uint256,address[],address)(amountIn_1,path_1 (-> []),to_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u'], [[], [], 0, None, [], -1, -994, 'u'], [[], [], 0, 'to', [], -1, -993, 'u']]
Param: amountIn
[[], [], 'u', None, [], -1, 'u', 'u']

Name: amountIn Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: path
[[], [], 0, None, [], -1, -994, 'u']

Name: path Function: None
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Param: to
[[], [], 0, 'to', [], -1, -993, 'u']

Name: to Function: None
Num: 
Den: 
Address: -993
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_swap(uint256,address[],address)
ENTRY_POINT
Propogating All
IF path.length == 3
Propogating All
path_1 (-> [])
Ssa_name: path_1 (-> []), name: path

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION require(bool,string)(path[0] != path[1] && path[1] == factory.nativeAsset() && path[2] != path[1],VaderRouter::_swap: Incorrect Path)
Propogating All
path_1 (-> [])
Ssa_name: path_1 (-> []), name: path

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE pool0 = factory.getPool(path[0],path[1])
Propogating All
path_1 (-> [])
Ssa_name: path_1 (-> []), name: path

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION require(bool,string)(path.length == 2,VaderRouter::_swap: Incorrect Path Length)
Propogating All
path_1 (-> [])
Ssa_name: path_1 (-> []), name: path

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE nativeAsset = factory.nativeAsset()
Propogating All
NEW VARIABLE pool1 = factory.getPool(path[1],path[2])
Propogating All
path_1 (-> [])
Ssa_name: path_1 (-> []), name: path

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION require(bool,string)(path[0] != path[1],VaderRouter::_swap: Incorrect Path)
Propogating All
path_1 (-> [])
Ssa_name: path_1 (-> []), name: path

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION IERC20(path[0]).safeTransferFrom(msg.sender,address(pool0),amountIn)
Propogating All
amountIn_1
Ssa_name: amountIn_1, name: amountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
pool0_1
Ssa_name: pool0_1, name: pool0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
path_1 (-> [])
Ssa_name: path_1 (-> []), name: path

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
NEW VARIABLE pool = factory.getPool(path[0],path[1])
Propogating All
path_1 (-> [])
Ssa_name: path_1 (-> []), name: path

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
RETURN pool1.swap(0,pool0.swap(amountIn,0,address(pool1)),to)
Propogating All
to_1
Ssa_name: to_1, name: to

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -993

Name: to_1 Function: _swap
Num: 
Den: 
Address: -993
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
pool0_1
Ssa_name: pool0_1, name: pool0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
Ssa_name: amountIn_1, name: amountIn

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
pool1_1
Ssa_name: pool1_1, name: pool1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION IERC20(path[0]).safeTransferFrom(msg.sender,address(pool),amountIn)
Propogating All
amountIn_1
Ssa_name: amountIn_1, name: amountIn

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
pool_1
Ssa_name: pool_1, name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
path_1 (-> [])
Ssa_name: path_1 (-> []), name: path

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
IF path[0] == nativeAsset
Propogating All
nativeAsset_1
Ssa_name: nativeAsset_1, name: nativeAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
path_1 (-> [])
Ssa_name: path_1 (-> []), name: path

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION require(bool,string)(path[1] == nativeAsset,VaderRouter::_swap: Incorrect Path)
Propogating All
nativeAsset_1
Ssa_name: nativeAsset_1, name: nativeAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
path_1 (-> [])
Ssa_name: path_1 (-> []), name: path

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
RETURN pool.swap(amountIn,0,to)
Propogating All
pool_1
Ssa_name: pool_1, name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
Ssa_name: amountIn_1, name: amountIn

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
to_1
Ssa_name: to_1, name: to

Name: to_1 Function: _swap
Num: 
Den: 
Address: -993
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -993

Name: to_1 Function: _swap
Num: 
Den: 
Address: -993
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
RETURN pool.swap(0,amountIn,to)
Propogating All
pool_1
Ssa_name: pool_1, name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
Ssa_name: amountIn_1, name: amountIn

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
to_1
Ssa_name: to_1, name: to

Name: to_1 Function: _swap
Num: 
Den: 
Address: -993
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -993

Name: to_1 Function: _swap
Num: 
Den: 
Address: -993
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
clearing ir...?
amountIn_1(uint256) := ϕ(['amountIn_1', 'amountIn_1'])
[i] amountIn cleared
clearing ir...?
path_1 (-> [])(address[]) := ϕ(['path_1 (-> [])', 'path_1 (-> [])'])
[i] path cleared
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1'])
[i] to cleared
clearing ir...?
factory_8(IVaderPoolFactory) := ϕ(['factory_0', 'factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24'])
[i] factory cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: amountIn_1, name: amountIn

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountIn, Num: 1
Globalname: amountIn, contract_name: VaderRouter
Ssa_name: path_1 (-> []), name: path

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: path_1 (-> []) Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: to_1, name: to

Name: to_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -993

Name: to_1 Function: _swap
Num: 
Den: 
Address: -993
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: factory_8, name: factory

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: factory, Num: 8
Globalname: factory, contract_name: VaderRouter
global...

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
amountIn_1(uint256) := ϕ(['amountIn_1', 'amountIn_1'])
Phi

Name: amountIn_1 Function: swapExactTokensForTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for amountIn

Name: amountIn Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
path_1 (-> [])(address[]) := ϕ(['path_1 (-> [])', 'path_1 (-> [])'])
Phi
[i]Type for path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['to_1', 'to_1'])
Phi
[i]Type for to

Name: to Function: _swap
Num: 
Den: 
Address: -993
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
factory_8(IVaderPoolFactory) := ϕ(['factory_0', 'factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24'])
Phi
[i]Type for factory

Name: factory Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_8 -> LENGTH path_1 (-> [])
clearing ir...?
TMP_51(bool) = REF_8 == 3
[i] TMP_51 cleared
clearing ir...?
CONDITION TMP_51
Propogating parameters and globals to SSA variables...
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_8 -> LENGTH path_1 (-> [])
[i]Type for REF_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_51(bool) = REF_8 == 3
[i]Type for TMP_51

Name: TMP_51 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_9(address) -> path_1 (-> [])[0]
[i] REF_9 cleared
clearing ir...?
REF_10(address) -> path_1 (-> [])[1]
[i] REF_10 cleared
clearing ir...?
TMP_52(bool) = REF_9 != REF_10
[i] TMP_52 cleared
clearing ir...?
REF_11(address) -> path_1 (-> [])[1]
[i] REF_11 cleared
clearing ir...?
TMP_53(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
[i] TMP_53 cleared
clearing ir...?
factory_9(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_8'])
[i] factory cleared
clearing ir...?
TMP_54(bool) = REF_11 == TMP_53
[i] TMP_54 cleared
clearing ir...?
TMP_55(bool) = TMP_52 && TMP_54
[i] TMP_55 cleared
clearing ir...?
REF_13(address) -> path_1 (-> [])[2]
[i] REF_13 cleared
clearing ir...?
REF_14(address) -> path_1 (-> [])[1]
[i] REF_14 cleared
clearing ir...?
TMP_56(bool) = REF_13 != REF_14
[i] TMP_56 cleared
clearing ir...?
TMP_57(bool) = TMP_55 && TMP_56
[i] TMP_57 cleared
clearing ir...?
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,VaderRouter::_swap: Incorrect Path)
Propogating parameters and globals to SSA variables...
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_8, name: factory

Name: factory Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_8, name: factory

Name: factory Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: factory_9, name: factory

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: factory, Num: 9
Globalname: factory, contract_name: VaderRouter
global...

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
REF_9(address) -> path_1 (-> [])[0]
INDEX
REFERENCE LEFT VALUE PROPAGATION
Source address: -994
[i]Type for REF_9

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_10(address) -> path_1 (-> [])[1]
INDEX
REFERENCE LEFT VALUE PROPAGATION
Source address: -994
[i]Type for REF_10

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_52(bool) = REF_9 != REF_10
[i]Type for TMP_52

Name: TMP_52 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_11(address) -> path_1 (-> [])[1]
INDEX
REFERENCE LEFT VALUE PROPAGATION
Source address: -994
[i]Type for REF_11

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_53(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
High Call: nativeAsset
Running querryfc
Found: None
Written func info: IVaderPoolFactory, nativeAsset
Retvar: ('c', ['global:nativeAsset'], ['-1'], 18, "'u'", 'u')
{'global:_owner': 1, 'global:_tokenApprovals': 2, 'global:_owners': 3, 'swap:to': -999, 'mint:to': -998, 'global:nativeAsset': 4, 'global:foreignAsset': 5, 'mint:TMP_139': 6, 'global:this': 6, 'None:None': 7, 'mint:foreignAsset': 8, 'swap:_nativeAsset': 9, 'swap:_foreignAsset': 10, 'global:_ZERO_ADDRESS': 11, 'removeLiquidity:tokenA': -997, 'removeLiquidity:tokenB': -996, 'removeLiquidity:to': -995, 'swapExactTokensForTokens:path': -994, 'swapExactTokensForTokens:to': -993, 'swapTokensForExactTokens:path': -992, 'swapTokensForExactTokens:to': -991, 'calculateInGivenOut:path': -990, 'calculateOutGivenIn:path': -989}
([4], [-1], 18, "'u'", 'u', -1)
[i]Type for TMP_53

Name: TMP_53 Function: _swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
factory_9(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_8'])
Phi
[i]Type for factory

Name: factory Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_54(bool) = REF_11 == TMP_53
[i]Type for TMP_54

Name: TMP_54 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_55(bool) = TMP_52 && TMP_54
[i]Type for TMP_55

Name: TMP_55 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_13(address) -> path_1 (-> [])[2]
INDEX
REFERENCE LEFT VALUE PROPAGATION
Source address: -994
[i]Type for REF_13

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_14(address) -> path_1 (-> [])[1]
INDEX
REFERENCE LEFT VALUE PROPAGATION
Source address: -994
[i]Type for REF_14

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_56(bool) = REF_13 != REF_14
[i]Type for TMP_56

Name: TMP_56 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_57(bool) = TMP_55 && TMP_56
[i]Type for TMP_57

Name: TMP_57 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,VaderRouter::_swap: Incorrect Path)
[i]Type for TMP_58

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_16(address) -> path_1 (-> [])[0]
[i] REF_16 cleared
clearing ir...?
REF_17(address) -> path_1 (-> [])[1]
[i] REF_17 cleared
clearing ir...?
TMP_59(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_9(IVaderPoolFactory), function:getPool, arguments:['REF_16', 'REF_17']  
[i] TMP_59 cleared
clearing ir...?
factory_10(IVaderPoolFactory) := ϕ(['factory_16', 'factory_9', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24'])
[i] factory cleared
clearing ir...?
pool0_1(IVaderPool) := TMP_59(IVaderPool)
[i] pool0 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_9, name: factory

Name: factory Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_9, name: factory

Name: factory Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool0_1, name: pool0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool0, Num: 1
Globalname: pool0, contract_name: VaderRouter
End popogation
Ssa_name: factory_10, name: factory

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: factory, Num: 10
Globalname: factory, contract_name: VaderRouter
global...

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
REF_16(address) -> path_1 (-> [])[0]
INDEX
REFERENCE LEFT VALUE PROPAGATION
Source address: -994
[i]Type for REF_16

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_17(address) -> path_1 (-> [])[1]
INDEX
REFERENCE LEFT VALUE PROPAGATION
Source address: -994
[i]Type for REF_17

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_59(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_9(IVaderPoolFactory), function:getPool, arguments:['REF_16', 'REF_17']  
High Call: getPool
Running querryfc
Found: None
Written func info: IVaderPoolFactory, getPool
[i]Type for TMP_59

Name: TMP_59 Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
factory_10(IVaderPoolFactory) := ϕ(['factory_16', 'factory_9', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24'])
Phi
[i]Type for factory

Name: factory Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool0_1(IVaderPool) := TMP_59(IVaderPool)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool0

Name: pool0 Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_25 -> LENGTH path_1 (-> [])
clearing ir...?
TMP_67(bool) = REF_25 == 2
[i] TMP_67 cleared
clearing ir...?
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,VaderRouter::_swap: Incorrect Path Length)
Propogating parameters and globals to SSA variables...
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_25 -> LENGTH path_1 (-> [])
[i]Type for REF_25

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_67(bool) = REF_25 == 2
[i]Type for TMP_67

Name: TMP_67 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,VaderRouter::_swap: Incorrect Path Length)
[i]Type for TMP_68

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_69(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
[i] TMP_69 cleared
clearing ir...?
factory_12(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24'])
[i] factory cleared
clearing ir...?
nativeAsset_1(address) := TMP_69(address)
[i] nativeAsset cleared
Propogating parameters and globals to SSA variables...
Ssa_name: factory_8, name: factory

Name: factory Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_8, name: factory

Name: factory Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAsset_1, name: nativeAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: nativeAsset, Num: 1
Globalname: nativeAsset, contract_name: VaderRouter
End popogation
Ssa_name: factory_12, name: factory

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: factory, Num: 12
Globalname: factory, contract_name: VaderRouter
global...

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_69(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
High Call: nativeAsset
Running querryfc
Found: None
Written func info: IVaderPoolFactory, nativeAsset
Retvar: ('c', ['global:nativeAsset'], ['-1'], 18, "'u'", 'u')
{'global:_owner': 1, 'global:_tokenApprovals': 2, 'global:_owners': 3, 'swap:to': -999, 'mint:to': -998, 'global:nativeAsset': 4, 'global:foreignAsset': 5, 'mint:TMP_139': 6, 'global:this': 6, 'None:None': 7, 'mint:foreignAsset': 8, 'swap:_nativeAsset': 9, 'swap:_foreignAsset': 10, 'global:_ZERO_ADDRESS': 11, 'removeLiquidity:tokenA': -997, 'removeLiquidity:tokenB': -996, 'removeLiquidity:to': -995, 'swapExactTokensForTokens:path': -994, 'swapExactTokensForTokens:to': -993, 'swapTokensForExactTokens:path': -992, 'swapTokensForExactTokens:to': -991, 'calculateInGivenOut:path': -990, 'calculateOutGivenIn:path': -989}
([4], [-1], 18, "'u'", 'u', -1)
[i]Type for TMP_69

Name: TMP_69 Function: _swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
factory_12(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24'])
Phi
[i]Type for factory

Name: factory Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nativeAsset_1(address) := TMP_69(address)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for nativeAsset

Name: nativeAsset Function: _swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_19(address) -> path_1 (-> [])[1]
[i] REF_19 cleared
clearing ir...?
REF_20(address) -> path_1 (-> [])[2]
[i] REF_20 cleared
clearing ir...?
TMP_60(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_10(IVaderPoolFactory), function:getPool, arguments:['REF_19', 'REF_20']  
[i] TMP_60 cleared
clearing ir...?
factory_11(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_10'])
[i] factory cleared
clearing ir...?
pool1_1(IVaderPool) := TMP_60(IVaderPool)
[i] pool1 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_10, name: factory

Name: factory Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_10, name: factory

Name: factory Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool1_1, name: pool1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool1, Num: 1
Globalname: pool1, contract_name: VaderRouter
End popogation
Ssa_name: factory_11, name: factory

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: factory, Num: 11
Globalname: factory, contract_name: VaderRouter
global...

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
REF_19(address) -> path_1 (-> [])[1]
INDEX
REFERENCE LEFT VALUE PROPAGATION
Source address: -994
[i]Type for REF_19

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_20(address) -> path_1 (-> [])[2]
INDEX
REFERENCE LEFT VALUE PROPAGATION
Source address: -994
[i]Type for REF_20

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_60(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_10(IVaderPoolFactory), function:getPool, arguments:['REF_19', 'REF_20']  
High Call: getPool
Running querryfc
Found: None
Written func info: IVaderPoolFactory, getPool
[i]Type for TMP_60

Name: TMP_60 Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
factory_11(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_10'])
Phi
[i]Type for factory

Name: factory Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool1_1(IVaderPool) := TMP_60(IVaderPool)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool1

Name: pool1 Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_27(address) -> path_1 (-> [])[0]
[i] REF_27 cleared
clearing ir...?
REF_28(address) -> path_1 (-> [])[1]
[i] REF_28 cleared
clearing ir...?
TMP_70(bool) = REF_27 != REF_28
[i] TMP_70 cleared
clearing ir...?
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,VaderRouter::_swap: Incorrect Path)
Propogating parameters and globals to SSA variables...
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_27(address) -> path_1 (-> [])[0]
INDEX
REFERENCE LEFT VALUE PROPAGATION
Source address: -994
[i]Type for REF_27

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_28(address) -> path_1 (-> [])[1]
INDEX
REFERENCE LEFT VALUE PROPAGATION
Source address: -994
[i]Type for REF_28

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_70(bool) = REF_27 != REF_28
[i]Type for TMP_70

Name: TMP_70 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,VaderRouter::_swap: Incorrect Path)
[i]Type for TMP_71

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_21(address) -> path_1 (-> [])[0]
[i] REF_21 cleared
clearing ir...?
TMP_61 = CONVERT REF_21 to IERC20
[i] TMP_61 cleared
clearing ir...?
TMP_62 = CONVERT pool0_1 to address
[i] TMP_62 cleared
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_61', 'msg.sender', 'TMP_62', 'amountIn_1'] 
Propogating parameters and globals to SSA variables...
Ssa_name: amountIn_1, name: amountIn

Name: amountIn Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountIn, Num: 1
Globalname: amountIn, contract_name: VaderRouter
Ssa_name: pool0_1, name: pool0

Name: pool0 Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountIn_1, name: amountIn

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountIn, Num: 1
Globalname: amountIn, contract_name: VaderRouter
Ssa_name: pool0_1, name: pool0

Name: pool0 Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_21(address) -> path_1 (-> [])[0]
INDEX
REFERENCE LEFT VALUE PROPAGATION
Source address: -994
[i]Type for REF_21

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_61 = CONVERT REF_21 to IERC20
Converting REF_21

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -994
ERC20
[i]Type for TMP_61

Name: TMP_61 Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: ERC20
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_62 = CONVERT pool0_1 to address
Converting pool0_1

Name: pool0 Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_62

Name: TMP_62 Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_61', 'msg.sender', 'TMP_62', 'amountIn_1'] 
clearing ir...?
REF_30(address) -> path_1 (-> [])[0]
[i] REF_30 cleared
clearing ir...?
REF_31(address) -> path_1 (-> [])[1]
[i] REF_31 cleared
clearing ir...?
TMP_72(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_12(IVaderPoolFactory), function:getPool, arguments:['REF_30', 'REF_31']  
[i] TMP_72 cleared
clearing ir...?
factory_13(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_12'])
[i] factory cleared
clearing ir...?
pool_1(IVaderPool) := TMP_72(IVaderPool)
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_12, name: factory

Name: factory Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: factory_12, name: factory

Name: factory Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1, name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool, Num: 1
Globalname: pool, contract_name: VaderRouter
End popogation
Ssa_name: factory_13, name: factory

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: factory, Num: 13
Globalname: factory, contract_name: VaderRouter
global...

Name: factory Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
REF_30(address) -> path_1 (-> [])[0]
INDEX
REFERENCE LEFT VALUE PROPAGATION
Source address: -994
[i]Type for REF_30

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_31(address) -> path_1 (-> [])[1]
INDEX
REFERENCE LEFT VALUE PROPAGATION
Source address: -994
[i]Type for REF_31

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_72(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_12(IVaderPoolFactory), function:getPool, arguments:['REF_30', 'REF_31']  
High Call: getPool
Running querryfc
Found: None
Written func info: IVaderPoolFactory, getPool
[i]Type for TMP_72

Name: TMP_72 Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
factory_13(IVaderPoolFactory) := ϕ(['factory_16', 'factory_21', 'factory_26', 'factory_13', 'factory_1', 'factory_11', 'factory_15', 'factory_7', 'factory_19', 'factory_24', 'factory_12'])
Phi
[i]Type for factory

Name: factory Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool_1(IVaderPool) := TMP_72(IVaderPool)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool

Name: pool Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_32(address) -> path_1 (-> [])[0]
[i] REF_32 cleared
clearing ir...?
TMP_73 = CONVERT REF_32 to IERC20
[i] TMP_73 cleared
clearing ir...?
TMP_74 = CONVERT pool_1 to address
[i] TMP_74 cleared
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_73', 'msg.sender', 'TMP_74', 'amountIn_1'] 
Propogating parameters and globals to SSA variables...
Ssa_name: amountIn_1, name: amountIn

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountIn, Num: 1
Globalname: amountIn, contract_name: VaderRouter
Ssa_name: pool_1, name: pool

Name: pool Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountIn_1, name: amountIn

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountIn, Num: 1
Globalname: amountIn, contract_name: VaderRouter
Ssa_name: pool_1, name: pool

Name: pool Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_32(address) -> path_1 (-> [])[0]
INDEX
REFERENCE LEFT VALUE PROPAGATION
Source address: -994
[i]Type for REF_32

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_73 = CONVERT REF_32 to IERC20
Converting REF_32

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -994
ERC20
[i]Type for TMP_73

Name: TMP_73 Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: ERC20
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_74 = CONVERT pool_1 to address
Converting pool_1

Name: pool Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_74

Name: TMP_74 Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_73', 'msg.sender', 'TMP_74', 'amountIn_1'] 
clearing ir...?
REF_34(address) -> path_1 (-> [])[0]
[i] REF_34 cleared
clearing ir...?
TMP_76(bool) = REF_34 == nativeAsset_1
[i] TMP_76 cleared
clearing ir...?
CONDITION TMP_76
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAsset_1, name: nativeAsset

Name: nativeAsset Function: _swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAsset_1, name: nativeAsset

Name: nativeAsset Function: _swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_34(address) -> path_1 (-> [])[0]
INDEX
REFERENCE LEFT VALUE PROPAGATION
Source address: -994
[i]Type for REF_34

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_76(bool) = REF_34 == nativeAsset_1
[i]Type for TMP_76

Name: TMP_76 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
REF_36(address) -> path_1 (-> [])[1]
[i] REF_36 cleared
clearing ir...?
TMP_78(bool) = REF_36 == nativeAsset_1
[i] TMP_78 cleared
clearing ir...?
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,VaderRouter::_swap: Incorrect Path)
Propogating parameters and globals to SSA variables...
Ssa_name: nativeAsset_1, name: nativeAsset

Name: nativeAsset Function: _swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: nativeAsset_1, name: nativeAsset

Name: nativeAsset Function: _swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Ssa_name: path_1 (-> []), name: path

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_36(address) -> path_1 (-> [])[1]
INDEX
REFERENCE LEFT VALUE PROPAGATION
Source address: -994
[i]Type for REF_36

Name: path Function: _swap
Num: 
Den: 
Address: -994
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_78(bool) = REF_36 == nativeAsset_1
[i]Type for TMP_78

Name: TMP_78 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,VaderRouter::_swap: Incorrect Path)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
clearing ir...?
TMP_77(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:swap, arguments:['amountIn_1', '0', 'to_1']  
[i] TMP_77 cleared
clearing ir...?
RETURN TMP_77
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1, name: pool

Name: pool Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountIn_1, name: amountIn

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountIn, Num: 1
Globalname: amountIn, contract_name: VaderRouter
Ssa_name: to_1, name: to

Name: to Function: _swap
Num: 
Den: 
Address: -993
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1, name: pool

Name: pool Function: _swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: amountIn_1, name: amountIn

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: amountIn, Num: 1
Globalname: amountIn, contract_name: VaderRouter
Ssa_name: to_1, name: to

Name: to Function: _swap
Num: 
Den: 
Address: -993
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_77(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:swap, arguments:['amountIn_1', '0', 'to_1']  
High Call: swap
Running querryfc
Found: swap

Name: amountIn_1 Function: _swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: _swap
Num: 
Den: 
Address: -993
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
High level cal param_cache
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: 0
    link: to
    fields: []
    fintype: -1
New param cache [[[], [], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 0, None, [], -1, 'u', 'u'], [[], [], 0, 'to', [], -1, -993, 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u'], [[], [], 0, 'to', [], -1, -999], [[], [], 'u', None, [], -1, 'u']]
Param: nativeAmountIn
[[], [], 'u', None, [], -1, 'u', 'u']

Name: nativeAmountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Param: foreignAmountIn
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: foreignAmountIn Function: swap
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Param: to
[[], [], 0, 'to', [], -1, -993, 'u']

Name: to Function: swap
Num: 
Den: 
Address: -993
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
swap(uint256,uint256,address,bytes)
ENTRY_POINT
Propogating All
RETURN swap(nativeAmountIn,foreignAmountIn,to)
Propogating All
to_1
Ssa_name: to_1, name: to

Name: to_1 Function: swap
Num: 
Den: 
Address: -999
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Source address: -993

Name: to_1 Function: swap
Num: 
Den: 
Address: -993
Norm: 0
LF: to
Value: u
Fields: 
Finance Type: undef
Copied ftype
nativeAmountIn_1
Ssa_name: nativeAmountIn_1, name: nativeAmountIn

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: nativeAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
foreignAmountIn_1
Ssa_name: foreignAmountIn_1, name: foreignAmountIn

Name: foreignAmountIn_1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: foreignAmountIn_1 Function: swap
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Currently Omitted (9)
Executing Group 15
[*] Tested 17 warnings for Badger Dao p2
Group 15 complete
Elapsed time: 32.906448259 seconds
Testing complete
