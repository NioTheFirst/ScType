Switched global version to 0.8.4
Checking IIdleToken
Finance file: IIdleToken_ftypes.txt
Add to address_to_label {'balanceOf:a': -999}
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998}
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997}
Reading f file...
['[*c]', 'IIdleToken']
['']
['[xf]', 'redeemIdleToken']
['[t]', 'global', 'balance', 'f: 0']
['[t]', 'global', 'tPWF', '1', '2', '0', 'f: 12']
['[t]', 'global', 'tokenToShare', '2', '1', '0', 'f:12']
Mark functions Adding: IIdleToken, balanceOf
Mark functions Adding: IIdleToken, tokenPriceWithFee
Mark functions Adding: IIdleToken, mintIdleToken
Mark functions Adding: IIdleToken, redeemIdleToken
State_var: tokenToShare
Finding type for tokenToShare(uint256 ... )
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997}
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:u': 1}
(-1, -1, 'u', None, 1, 12)
[*]Type fetched successfully
querrying!!!
Source address: u
Saved name: tokenToShare

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
State_var: tPWF
Finding type for tPWF(uint256 ... )
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:u': 1}
(-1, -1, 'u', None, 1, 12)
[*]Type fetched successfully
querrying!!!
Source address: u
Saved name: tPWF

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
State_var: balance
Finding type for balance(uint256 ... )
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:u': 1}
(-1, -1, 'u', None, 1, 0)
[*]Type fetched successfully
querrying!!!
Source address: u
Saved name: balance

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance



balanceOf
Finding type for a(address ... )
prev address? u
Head Addr: -999
    Norm: 6
    Set: {-999}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: 6
    link: a
    fields: []
    fintype: -1


balance_1(uint256) := ϕ(['balance_0'])
RETURN balance_1


Propogating parameters and globals to SSA variables...
End popogation
Name: balance, Num: 1
Globalname: balance
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid
balance_1(uint256) := ϕ(['balance_0'])
Phi
[i]Type for balance

Name: balance Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN balance_1
RETURN
init
end

Name: balance Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance


balance_1(uint256) := ϕ(['balance_0'])
RETURN balance_1


Propogating parameters and globals to SSA variables...
End popogation

Name: balance Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid
balance_1(uint256) := ϕ(['balance_0'])
Phi
[i]Type for balance

Name: balance Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN balance_1
RETURN
init
end

Name: balance Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance



tokenPriceWithFee
Finding type for a(address ... )
prev address? u
Head Addr: -998
    Norm: 6
    Set: {-998}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: 6
    link: a
    fields: []
    fintype: -1


tPWF_1(uint256) := ϕ(['tPWF_0'])
RETURN tPWF_1


Propogating parameters and globals to SSA variables...
End popogation
Name: tPWF, Num: 1
Globalname: tPWF
global...

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
Phid
tPWF_1(uint256) := ϕ(['tPWF_0'])
Phi
[i]Type for tPWF

Name: tPWF Function: tokenPriceWithFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN tPWF_1
RETURN
init
end

Name: tPWF Function: tokenPriceWithFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio


tPWF_1(uint256) := ϕ(['tPWF_0'])
RETURN tPWF_1


Propogating parameters and globals to SSA variables...
End popogation

Name: tPWF Function: tokenPriceWithFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
Phid
tPWF_1(uint256) := ϕ(['tPWF_0'])
Phi
[i]Type for tPWF

Name: tPWF Function: tokenPriceWithFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN tPWF_1
RETURN
init
end

Name: tPWF Function: tokenPriceWithFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio



mintIdleToken
Finding type for amt(uint256 ... )
Value: u
Finding type for b(bool ... )
Finding type for a(address ... )
prev address? u
Head Addr: -997
    Norm: 6
    Set: {-997}
    Fin: NULL
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: 6
    link: a
    fields: []
    fintype: -1


RETURN amt_1


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: amt, Num: 1
Globalname: amt
End popogation
RETURN amt_1
RETURN
init
end

Name: amt Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


RETURN amt_1


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: amt, Num: 1
Globalname: amt
End popogation
RETURN amt_1
RETURN
init
end

Name: amt Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef



redeemIdleToken
Finding type for share(uint256 ... )
Value: u
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


tokenToShare_1(uint256) := ϕ(['tokenToShare_0'])
TMP_0(uint256) = share_1 (c)* tokenToShare_1
RETURN TMP_0


Propogating parameters and globals to SSA variables...
End popogation
Name: tokenToShare, Num: 1
Globalname: tokenToShare
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
Phid
tokenToShare_1(uint256) := ϕ(['tokenToShare_0'])
Phi
[i]Type for tokenToShare

Name: tokenToShare Function: redeemIdleToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: share, Num: 1
Globalname: share
End popogation
TMP_0(uint256) = share_1 (c)* tokenToShare_1
testing mul...
init
end
init
end

Name: share Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenToShare Function: redeemIdleToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
lnorm: u rnorm: u
init
end
_______________

Name: tokenToShare Function: redeemIdleToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio

Name: TMP_0 Function: redeemIdleToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: updated simple fee ratio
COPY HERE
Source address: u
[i]Type for TMP_0

Name: TMP_0 Function: redeemIdleToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: updated simple fee ratio
XXXX
RETURN TMP_0
RETURN
init
end

Name: TMP_0 Function: redeemIdleToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: updated simple fee ratio


tokenToShare_1(uint256) := ϕ(['tokenToShare_0'])
TMP_0(uint256) = share_1 (c)* tokenToShare_1
RETURN TMP_0


Propogating parameters and globals to SSA variables...
End popogation

Name: tokenToShare Function: redeemIdleToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
Phid
tokenToShare_1(uint256) := ϕ(['tokenToShare_0'])
Phi
[i]Type for tokenToShare

Name: tokenToShare Function: redeemIdleToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: share, Num: 1
Globalname: share
End popogation
TMP_0(uint256) = share_1 (c)* tokenToShare_1
testing mul...
init
end
init
end

Name: share Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenToShare Function: redeemIdleToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
lnorm: u rnorm: u
init
end
_______________

Name: tokenToShare Function: redeemIdleToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio

Name: TMP_0 Function: redeemIdleToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: updated simple fee ratio
COPY HERE
Source address: u
[i]Type for TMP_0

Name: TMP_0 Function: redeemIdleToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: updated simple fee ratio
XXXX
RETURN TMP_0
RETURN
init
end

Name: TMP_0 Function: redeemIdleToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: updated simple fee ratio
Source address: u



slitherConstructorVariables
Address: -999, Label: balanceOf:a
Address: -998, Label: tokenPriceWithFee:a
Address: -997, Label: mintIdleToken:a
Address: 1, Label: global:u
Head Addr: -999
    Norm: 6
    Set: {-999}
    Fin: NULL
Head Addr: -998
    Norm: 6
    Set: {-998}
    Fin: NULL
Head Addr: -997
    Norm: 6
    Set: {-997}
    Fin: NULL
Head Addr: 1
    Norm: u
    Set: {1}
    Fin: NULL
Function count: 4
Checking IdleYieldSource
Checking IIdleToken
Finance file: IdleYieldSource_ftypes.txt
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:u': 1, 'global:idleToken': 2}
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:u': 1, 'global:idleToken': 2, 'global:underlyingAsset': 3}
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:u': 1, 'global:idleToken': 2, 'global:underlyingAsset': 3, 'initialize:_idleToken': -996}
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:u': 1, 'global:idleToken': 2, 'global:underlyingAsset': 3, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995}
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:u': 1, 'global:idleToken': 2, 'global:underlyingAsset': 3, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995, 'transferERC20:erc20Token': -994}
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:u': 1, 'global:idleToken': 2, 'global:underlyingAsset': 3, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995, 'transferERC20:erc20Token': -994, 'transferERC20:to': -993}
Reading f file...
['[*c]', 'IdleYieldSource']
['[xf]', 'transferERC20']
['[t]', 'global', 'ONE_IDLE_TOKEN', '-1', '-1', '0']
['[t]', 'global', 'idleToken', '-1', '-1', '0', 'IIdleToken']
['[t]', 'global', 'underlyingAsset']
['[t]', 'redeemToken', 'redeemAmount', '1', '-1', '0', 'f:0']
Mark functions Adding: IdleYieldSource, initialize
Mark functions Adding: IdleYieldSource, depositToken
Mark functions Adding: IdleYieldSource, supplyTokenTo
Mark functions Adding: IdleYieldSource, redeemToken
Mark functions Adding: IdleYieldSource, transferERC20
Mark functions Adding: IdleYieldSource, sponsor
State_var: ONE_IDLE_TOKEN
Finding type for ONE_IDLE_TOKEN(uint256 ... )
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:u': 1, 'global:idleToken': 2, 'global:underlyingAsset': 3, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995, 'transferERC20:erc20Token': -994, 'transferERC20:to': -993}
(-1, -1, 'u', None, 1, -1)
[*]Type fetched successfully
querrying!!!
Source address: u
Saved name: ONE_IDLE_TOKEN

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: idleToken
Finding type for idleToken(address ... )
prev address? u
Head Addr: 2
    Norm: 0
    Set: {2}
    Fin: NULL
querrying!!!
Source address: 2
Saved name: idleToken

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
State_var: underlyingAsset
Finding type for underlyingAsset(address ... )
prev address? u
Head Addr: 3
    Norm: 6
    Set: {3}
    Fin: NULL
querrying!!!
Source address: 3
Saved name: underlyingAsset

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: 3
Norm: 6
LF: underlyingAsset
Value: u
Fields: 
Finance Type: undef
Finance file: IIdleToken_ftypes.txt
Reading f file...
['[*c]', 'IIdleToken']
['']
['[xf]', 'redeemIdleToken']
['[t]', 'global', 'balance', 'f: 0']
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:u': 1, 'global:idleToken': 2, 'global:underlyingAsset': 3, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995, 'transferERC20:erc20Token': -994, 'transferERC20:to': -993}
['[t]', 'global', 'tPWF', '1', '2', '0', 'f: 12']
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:u': 1, 'global:idleToken': 2, 'global:underlyingAsset': 3, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995, 'transferERC20:erc20Token': -994, 'transferERC20:to': -993}
['[t]', 'global', 'tokenToShare', '2', '1', '0', 'f:12']
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:u': 1, 'global:idleToken': 2, 'global:underlyingAsset': 3, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995, 'transferERC20:erc20Token': -994, 'transferERC20:to': -993}



initialize
Finding type for _idleToken(address ... )
prev address? u
Head Addr: -996
    Norm: 0
    Set: {-996}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: 0
    link: _idleToken
    fields: []
    fintype: -1


idleToken_1(address) := _idleToken_1(address)
Emit IdleYieldSourceInitialized(idleToken_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: -996
Name: idleToken, Num: 1
Globalname: idleToken
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Source address: 2
End popogation
idleToken_1(address) := _idleToken_1(address)
asgn
init
end
_______________

Name: _idleToken Function: None
Num: 
Den: 
Address: -996
Norm: 0
LF: _idleToken
Value: u
Fields: 
Finance Type: undef

Name: idleToken Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Source address: -996
Finance type key: (-1, -1)
[i]Type for idleToken

Name: idleToken Function: initialize
Num: -1
Den: -1
Address: -996
Norm: 0
LF: _idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation


idleToken_1(address) := _idleToken_1(address)
Emit IdleYieldSourceInitialized(idleToken_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
idleToken_1(address) := _idleToken_1(address)
asgn
init
end
_______________

Name: _idleToken Function: None
Num: 
Den: 
Address: -996
Norm: 0
LF: _idleToken
Value: u
Fields: 
Finance Type: undef

Name: idleToken Function: initialize
Num: -1
Den: -1
Address: -996
Norm: 0
LF: _idleToken
Value: u
Fields: 
Finance Type: undef
Source address: -996
Finance type key: (-1, -1)
[i]Type for idleToken

Name: idleToken Function: initialize
Num: -1
Den: -1
Address: -996
Norm: 0
LF: _idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation



depositToken


underlyingAsset_1(address) := ϕ(['underlyingAsset_0'])
RETURN underlyingAsset_1


Propogating parameters and globals to SSA variables...
End popogation
Name: underlyingAsset, Num: 1
Globalname: underlyingAsset
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: 3
Norm: 6
LF: underlyingAsset
Value: u
Fields: 
Finance Type: undef
Source address: 3

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: 6
LF: underlyingAsset
Value: u
Fields: 
Finance Type: undef
Phid
underlyingAsset_1(address) := ϕ(['underlyingAsset_0'])
Phi
[i]Type for underlyingAsset

Name: underlyingAsset Function: depositToken
Num: -1
Den: -1
Address: 3
Norm: 6
LF: underlyingAsset
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN underlyingAsset_1
RETURN
init
end

Name: underlyingAsset Function: depositToken
Num: -1
Den: -1
Address: 3
Norm: 6
LF: underlyingAsset
Value: u
Fields: 
Finance Type: undef


underlyingAsset_1(address) := ϕ(['underlyingAsset_0'])
RETURN underlyingAsset_1


Propogating parameters and globals to SSA variables...
End popogation

Name: underlyingAsset Function: depositToken
Num: -1
Den: -1
Address: 3
Norm: 6
LF: underlyingAsset
Value: u
Fields: 
Finance Type: undef
Phid
underlyingAsset_1(address) := ϕ(['underlyingAsset_0'])
Phi
[i]Type for underlyingAsset

Name: underlyingAsset Function: depositToken
Num: -1
Den: -1
Address: 3
Norm: 6
LF: underlyingAsset
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN underlyingAsset_1
RETURN
init
end

Name: underlyingAsset Function: depositToken
Num: -1
Den: -1
Address: 3
Norm: 6
LF: underlyingAsset
Value: u
Fields: 
Finance Type: undef



_totalShare



_tokenToShares



_sharesToToken



_price



_depositToIdle



supplyTokenTo
Finding type for mintAmount(uint256 ... )
Value: u
Finding type for to(address ... )
prev address? u
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: 0
    link: to
    fields: []
    fintype: -1


TMP_16(uint256) = INTERNAL_CALL, IdleYieldSource._tokenToShares(uint256)(mintAmount_1)
mintedTokenShares_1(uint256) := TMP_16(uint256)
TMP_17(uint256) = INTERNAL_CALL, IdleYieldSource._depositToIdle(uint256)(mintAmount_1)
Emit SuppliedTokenTo(msg.sender,mintedTokenShares_1,mintAmount_1,to_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: mintAmount, Num: 1
Globalname: mintAmount
Name: mintedTokenShares, Num: 1
Globalname: mintedTokenShares
End popogation
TMP_16(uint256) = INTERNAL_CALL, IdleYieldSource._tokenToShares(uint256)(mintAmount_1)
[i]Type for TMP_16

Name: TMP_16 Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
mintedTokenShares_1(uint256) := TMP_16(uint256)
asgn
init
end
_______________

Name: TMP_16 Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: mintedTokenShares Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for mintedTokenShares

Name: mintedTokenShares Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: mintAmount, Num: 1
Globalname: mintAmount
End popogation
TMP_17(uint256) = INTERNAL_CALL, IdleYieldSource._depositToIdle(uint256)(mintAmount_1)
[i]Type for TMP_17

Name: TMP_17 Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: mintedTokenShares, Num: 1
Globalname: mintedTokenShares
Source address: -995
Source address: u
Name: mintAmount, Num: 1
Globalname: mintAmount
End popogation


TMP_16(uint256) = INTERNAL_CALL, IdleYieldSource._tokenToShares(uint256)(mintAmount_1)
mintedTokenShares_1(uint256) := TMP_16(uint256)
TMP_17(uint256) = INTERNAL_CALL, IdleYieldSource._depositToIdle(uint256)(mintAmount_1)
Emit SuppliedTokenTo(msg.sender,mintedTokenShares_1,mintAmount_1,to_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: mintAmount, Num: 1
Globalname: mintAmount
Name: mintedTokenShares, Num: 1
Globalname: mintedTokenShares
End popogation
TMP_16(uint256) = INTERNAL_CALL, IdleYieldSource._tokenToShares(uint256)(mintAmount_1)
[i]Type for TMP_16

Name: TMP_16 Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
mintedTokenShares_1(uint256) := TMP_16(uint256)
asgn
init
end
_______________

Name: TMP_16 Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: mintedTokenShares Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for mintedTokenShares

Name: mintedTokenShares Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: mintAmount, Num: 1
Globalname: mintAmount
End popogation
TMP_17(uint256) = INTERNAL_CALL, IdleYieldSource._depositToIdle(uint256)(mintAmount_1)
[i]Type for TMP_17

Name: TMP_17 Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: mintedTokenShares, Num: 1
Globalname: mintedTokenShares
Source address: u
Name: mintAmount, Num: 1
Globalname: mintAmount
End popogation



redeemToken
Finding type for redeemAmount(uint256 ... )
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:u': 1, 'global:idleToken': 2, 'global:underlyingAsset': 3, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995, 'transferERC20:erc20Token': -994, 'transferERC20:to': -993}
(-1, -1, 'u', None, 1, 0)
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: 0


idleToken_8(address) := ϕ(['idleToken_10', 'idleToken_0', 'idleToken_3', 'idleToken_1', 'idleToken_5', 'idleToken_7'])
TMP_19(int256) = 1 (c)+ 1
a_1(int256) := TMP_19(int256)
TMP_20(uint256) = INTERNAL_CALL, IdleYieldSource._tokenToShares(uint256)(redeemAmount_1)
redeemedShare_1(uint256) := TMP_20(uint256)
TMP_21 = CONVERT idleToken_9 to IIdleToken
TMP_22(uint256) = HIGH_LEVEL_CALL, dest:TMP_21(IIdleToken), function:redeemIdleToken, arguments:['redeemedShare_1']  
idleToken_10(address) := ϕ(['idleToken_10', 'idleToken_3', 'idleToken_1', 'idleToken_5', 'idleToken_7', 'idleToken_9'])
redeemedUnderlyingAsset_1(uint256) := TMP_22(uint256)
Emit RedeemedToken(msg.sender,redeemedShare_1,redeemAmount_1)


Propogating parameters and globals to SSA variables...
End popogation
Name: idleToken, Num: 8
Globalname: idleToken
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Source address: 2

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
idleToken_8(address) := ϕ(['idleToken_10', 'idleToken_0', 'idleToken_3', 'idleToken_1', 'idleToken_5', 'idleToken_7'])
Phi
[i]Type for idleToken

Name: idleToken Function: redeemToken
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: a, Num: 1
Globalname: a
End popogation
TMP_19(int256) = 1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_19 Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_19

Name: TMP_19 Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
a_1(int256) := TMP_19(int256)
asgn
init
end
_______________

Name: TMP_19 Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef

Name: a Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for a

Name: a Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: redeemAmount, Num: 1
Globalname: redeemAmount
Name: redeemedShare, Num: 1
Globalname: redeemedShare
End popogation
TMP_20(uint256) = INTERNAL_CALL, IdleYieldSource._tokenToShares(uint256)(redeemAmount_1)
init
end
[[], [], 'u', None, [], 0, 'u', 'u']

Name: tokens Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
Source address: u
Name: tokens, Num: 1
Globalname: tokens

Name: tokens_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid
Name: ONE_IDLE_TOKEN, Num: 1
Globalname: ONE_IDLE_TOKEN
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
tokens_1(uint256) := ϕ(['redeemAmount_1', 'mintAmount_1'])
Phi

Name: redeemAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: mintAmount_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for tokens

Name: tokens Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
ONE_IDLE_TOKEN_1(uint256) := ϕ(['ONE_IDLE_TOKEN_0', 'ONE_IDLE_TOKEN_2', 'ONE_IDLE_TOKEN_4'])
Phi
[i]Type for ONE_IDLE_TOKEN

Name: ONE_IDLE_TOKEN Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: tokens, Num: 1
Globalname: tokens
Name: shares, Num: 1
Globalname: shares
End popogation
TMP_4(uint256) = tokens_1 (c)* ONE_IDLE_TOKEN_1
testing mul...
init
end
init
end

Name: tokens_1 Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: ONE_IDLE_TOKEN Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: ONE_IDLE_TOKEN Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_4 Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
COPY HERE
Source address: u
[i]Type for TMP_4

Name: TMP_4 Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_5(uint256) = INTERNAL_CALL, IdleYieldSource._price()()
Propogating parameters and globals to SSA variables...
End popogation
Name: idleToken, Num: 4
Globalname: idleToken
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Source address: 2

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
idleToken_4(address) := ϕ(['idleToken_10', 'idleToken_0', 'idleToken_3', 'idleToken_1', 'idleToken_5', 'idleToken_7'])
Phi
[i]Type for idleToken

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: idleToken, Num: 5
Globalname: idleToken
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Source address: 2

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
TMP_10 = CONVERT idleToken_4 to IIdleToken
Converting idleToken_4

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef

Name: TMP_10 Function: _price
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 2
IdleToken
[i]Type for TMP_10

Name: TMP_10 Function: _price
Num: -1
Den: -1
Address: 2
Norm: 0
LF: IdleToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_11 = CONVERT this to address
Converting this
new address made for this
prev address? u
global assignment: 4
4
4
[i]Type for TMP_11

Name: TMP_11 Function: _price
Num: -1
Den: -1
Address: 4
Norm: u
LF: IdleYieldSource
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_12(uint256) = HIGH_LEVEL_CALL, dest:TMP_10(IIdleToken), function:tokenPriceWithFee, arguments:['TMP_11']  
High Call: tokenPriceWithFee
Running querryfc
Found: None
Written func info: IdleToken, tokenPriceWithFee
Handling balance function!
2
Finding type for hlc_0(uint256 ... )
Value: u
[i]Type for TMP_12

Name: TMP_12 Function: _price
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
idleToken_5(address) := ϕ(['idleToken_10', 'idleToken_3', 'idleToken_1', 'idleToken_5', 'idleToken_7', 'idleToken_4'])
Phi
[i]Type for idleToken

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_12
RETURN
init
end

Name: TMP_12 Function: _price
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
idleToken_4(address) := ϕ(['idleToken_10', 'idleToken_0', 'idleToken_3', 'idleToken_1', 'idleToken_5', 'idleToken_7'])
Phi
[i]Type for idleToken

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
TMP_10 = CONVERT idleToken_4 to IIdleToken
Converting idleToken_4

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef

Name: TMP_10 Function: _price
Num: 
Den: 
Address: u
Norm: u
LF: IdleToken
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 2
IdleToken
[i]Type for TMP_10

Name: TMP_10 Function: _price
Num: -1
Den: -1
Address: 2
Norm: 0
LF: IdleToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_11 = CONVERT this to address
Converting this
4
[i]Type for TMP_11

Name: TMP_11 Function: _price
Num: 
Den: 
Address: 4
Norm: u
LF: IdleYieldSource
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_12(uint256) = HIGH_LEVEL_CALL, dest:TMP_10(IIdleToken), function:tokenPriceWithFee, arguments:['TMP_11']  
High Call: tokenPriceWithFee
Running querryfc
Found: None
Written func info: IdleToken, tokenPriceWithFee
Handling balance function!
2
Finding type for hlc_1(uint256 ... )
Value: u
[i]Type for TMP_12

Name: TMP_12 Function: _price
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
idleToken_5(address) := ϕ(['idleToken_10', 'idleToken_3', 'idleToken_1', 'idleToken_5', 'idleToken_7', 'idleToken_4'])
Phi
[i]Type for idleToken

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_12
RETURN
init
end

Name: TMP_12 Function: _price
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_5

Name: TMP_5 Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_6(uint256) = TMP_4 (c)/ TMP_5
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: TMP_4 Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_6 Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
COPY HERE
Source address: u
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_6

Name: TMP_6 Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
shares_1(uint256) := TMP_6(uint256)
asgn
init
end
_______________

Name: TMP_6 Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: shares Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (0, -1)
[i]Type for shares

Name: shares Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN shares_1
RETURN
init
end

Name: shares Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
Source address: u
Name: tokens, Num: 1
Globalname: tokens

Name: tokens_1 Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid

Name: ONE_IDLE_TOKEN Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
tokens_1(uint256) := ϕ(['redeemAmount_1', 'mintAmount_1'])
Phi

Name: redeemAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: mintAmount_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for tokens

Name: tokens Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
ONE_IDLE_TOKEN_1(uint256) := ϕ(['ONE_IDLE_TOKEN_0', 'ONE_IDLE_TOKEN_2', 'ONE_IDLE_TOKEN_4'])
Phi
[i]Type for ONE_IDLE_TOKEN

Name: ONE_IDLE_TOKEN Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: tokens, Num: 1
Globalname: tokens
Name: shares, Num: 1
Globalname: shares
End popogation
TMP_4(uint256) = tokens_1 (c)* ONE_IDLE_TOKEN_1
testing mul...
init
end
init
end

Name: tokens_1 Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: ONE_IDLE_TOKEN Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: ONE_IDLE_TOKEN Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_4 Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
COPY HERE
Source address: u
[i]Type for TMP_4

Name: TMP_4 Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_5(uint256) = INTERNAL_CALL, IdleYieldSource._price()()
init
end
_______________

Name: PIC_8 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_5 Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_5

Name: TMP_5 Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_6(uint256) = TMP_4 (c)/ TMP_5
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: TMP_4 Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_6 Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
COPY HERE
Source address: u
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_6

Name: TMP_6 Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
shares_1(uint256) := TMP_6(uint256)
asgn
init
end
_______________

Name: TMP_6 Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: shares Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
COPY HERE
Source address: u
Finance type key: (0, -1)
[i]Type for shares

Name: shares Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN shares_1
RETURN
init
end

Name: shares Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
Source address: u
[i]Type for TMP_20

Name: TMP_20 Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
redeemedShare_1(uint256) := TMP_20(uint256)
asgn
init
end
_______________

Name: TMP_20 Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: redeemedShare Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (0, -1)
[i]Type for redeemedShare

Name: redeemedShare Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Name: idleToken, Num: 9
Globalname: idleToken
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Source address: 2
Name: redeemedUnderlyingAsset, Num: 1
Globalname: redeemedUnderlyingAsset
End popogation
Name: idleToken, Num: 10
Globalname: idleToken
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Source address: 2

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
TMP_21 = CONVERT idleToken_9 to IIdleToken
Converting idleToken_9

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: idleToken Function: None
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef

Name: TMP_21 Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 2
IdleToken
[i]Type for TMP_21

Name: TMP_21 Function: redeemToken
Num: -1
Den: -1
Address: 2
Norm: 0
LF: IdleToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(uint256) = HIGH_LEVEL_CALL, dest:TMP_21(IIdleToken), function:redeemIdleToken, arguments:['redeemedShare_1']  
High Call: redeemIdleToken
Running querryfc
Found: None
Written func info: IdleToken, redeemIdleToken
Handling balance function!
2
Finding type for hlc_2(uint256 ... )
Value: u
[i]Type for TMP_22

Name: TMP_22 Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
idleToken_10(address) := ϕ(['idleToken_10', 'idleToken_3', 'idleToken_1', 'idleToken_5', 'idleToken_7', 'idleToken_9'])
Phi
[i]Type for idleToken

Name: idleToken Function: redeemToken
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
redeemedUnderlyingAsset_1(uint256) := TMP_22(uint256)
asgn
init
end
_______________

Name: TMP_22 Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: redeemedUnderlyingAsset Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for redeemedUnderlyingAsset

Name: redeemedUnderlyingAsset Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: redeemAmount, Num: 1
Globalname: redeemAmount
End popogation


idleToken_8(address) := ϕ(['idleToken_10', 'idleToken_0', 'idleToken_3', 'idleToken_1', 'idleToken_5', 'idleToken_7'])
TMP_19(int256) = 1 (c)+ 1
a_1(int256) := TMP_19(int256)
TMP_20(uint256) = INTERNAL_CALL, IdleYieldSource._tokenToShares(uint256)(redeemAmount_1)
redeemedShare_1(uint256) := TMP_20(uint256)
TMP_21 = CONVERT idleToken_9 to IIdleToken
TMP_22(uint256) = HIGH_LEVEL_CALL, dest:TMP_21(IIdleToken), function:redeemIdleToken, arguments:['redeemedShare_1']  
idleToken_10(address) := ϕ(['idleToken_10', 'idleToken_3', 'idleToken_1', 'idleToken_5', 'idleToken_7', 'idleToken_9'])
redeemedUnderlyingAsset_1(uint256) := TMP_22(uint256)
Emit RedeemedToken(msg.sender,redeemedShare_1,redeemAmount_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: idleToken Function: redeemToken
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
idleToken_8(address) := ϕ(['idleToken_10', 'idleToken_0', 'idleToken_3', 'idleToken_1', 'idleToken_5', 'idleToken_7'])
Phi
[i]Type for idleToken

Name: idleToken Function: redeemToken
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: a, Num: 1
Globalname: a
End popogation
TMP_19(int256) = 1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_19 Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_19

Name: TMP_19 Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
a_1(int256) := TMP_19(int256)
asgn
init
end
_______________

Name: TMP_19 Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef

Name: a Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for a

Name: a Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: redeemAmount, Num: 1
Globalname: redeemAmount
Name: redeemedShare, Num: 1
Globalname: redeemedShare
End popogation
TMP_20(uint256) = INTERNAL_CALL, IdleYieldSource._tokenToShares(uint256)(redeemAmount_1)
init
end
init
end
_______________

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_20 Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
COPY HERE
Source address: u
[i]Type for TMP_20

Name: TMP_20 Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
redeemedShare_1(uint256) := TMP_20(uint256)
asgn
init
end
_______________

Name: TMP_20 Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: redeemedShare Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
COPY HERE
Source address: u
Finance type key: (0, -1)
[i]Type for redeemedShare

Name: redeemedShare Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Name: redeemedUnderlyingAsset, Num: 1
Globalname: redeemedUnderlyingAsset
End popogation

Name: idleToken Function: redeemToken
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
TMP_21 = CONVERT idleToken_9 to IIdleToken
Converting idleToken_9

Name: idleToken Function: None
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: idleToken Function: None
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef

Name: TMP_21 Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: IdleToken
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 2
IdleToken
[i]Type for TMP_21

Name: TMP_21 Function: redeemToken
Num: -1
Den: -1
Address: 2
Norm: 0
LF: IdleToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(uint256) = HIGH_LEVEL_CALL, dest:TMP_21(IIdleToken), function:redeemIdleToken, arguments:['redeemedShare_1']  
High Call: redeemIdleToken
Running querryfc
Found: None
Written func info: IdleToken, redeemIdleToken
Handling balance function!
2
Finding type for hlc_3(uint256 ... )
Value: u
[i]Type for TMP_22

Name: TMP_22 Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
idleToken_10(address) := ϕ(['idleToken_10', 'idleToken_3', 'idleToken_1', 'idleToken_5', 'idleToken_7', 'idleToken_9'])
Phi
[i]Type for idleToken

Name: idleToken Function: redeemToken
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
redeemedUnderlyingAsset_1(uint256) := TMP_22(uint256)
asgn
init
end
_______________

Name: TMP_22 Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: redeemedUnderlyingAsset Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for redeemedUnderlyingAsset

Name: redeemedUnderlyingAsset Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: redeemAmount, Num: 1
Globalname: redeemAmount
End popogation
Source address: u



transferERC20
Finding type for erc20Token(address ... )
prev address? u
Head Addr: -994
    Norm: 6
    Set: {-994}
    Fin: NULL
Finding type for to(address ... )
prev address? u
Changed here
Head Addr: -993
    Norm: 0
    Set: {-993}
    Fin: NULL
Finding type for amount(uint256 ... )
Value: u
Param: 0
    num: []
    den: []
    norm: 6
    link: erc20Token
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: 0
    link: to
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


idleToken_11(address) := ϕ(['idleToken_10', 'idleToken_0', 'idleToken_3', 'idleToken_1', 'idleToken_5', 'idleToken_7'])
TMP_24(bool) = erc20Token_1 != idleToken_11
TMP_25(None) = SOLIDITY_CALL require(bool,string)(TMP_24,IdleYieldSource/idleDai-transfer-not-allowed)
Emit TransferredERC20(msg.sender,to_1,amount_1,erc20Token_1)


Propogating parameters and globals to SSA variables...
End popogation
Name: idleToken, Num: 11
Globalname: idleToken
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Source address: 2

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
idleToken_11(address) := ϕ(['idleToken_10', 'idleToken_0', 'idleToken_3', 'idleToken_1', 'idleToken_5', 'idleToken_7'])
Phi
[i]Type for idleToken

Name: idleToken Function: transferERC20
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: -994
End popogation
TMP_24(bool) = erc20Token_1 != idleToken_11
[i]Type for TMP_24

Name: TMP_24 Function: transferERC20
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_25(None) = SOLIDITY_CALL require(bool,string)(TMP_24,IdleYieldSource/idleDai-transfer-not-allowed)
[i]Type for TMP_25

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: amount, Num: 1
Globalname: amount
Source address: -993
End popogation


idleToken_11(address) := ϕ(['idleToken_10', 'idleToken_0', 'idleToken_3', 'idleToken_1', 'idleToken_5', 'idleToken_7'])
TMP_24(bool) = erc20Token_1 != idleToken_11
TMP_25(None) = SOLIDITY_CALL require(bool,string)(TMP_24,IdleYieldSource/idleDai-transfer-not-allowed)
Emit TransferredERC20(msg.sender,to_1,amount_1,erc20Token_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: idleToken Function: transferERC20
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
idleToken_11(address) := ϕ(['idleToken_10', 'idleToken_0', 'idleToken_3', 'idleToken_1', 'idleToken_5', 'idleToken_7'])
Phi
[i]Type for idleToken

Name: idleToken Function: transferERC20
Num: -1
Den: -1
Address: 2
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_24(bool) = erc20Token_1 != idleToken_11
[i]Type for TMP_24

Name: TMP_24 Function: transferERC20
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_25(None) = SOLIDITY_CALL require(bool,string)(TMP_24,IdleYieldSource/idleDai-transfer-not-allowed)
[i]Type for TMP_25

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: amount, Num: 1
Globalname: amount
End popogation



sponsor
Finding type for amount(uint256 ... )
Value: u
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


TMP_27(uint256) = INTERNAL_CALL, IdleYieldSource._depositToIdle(uint256)(amount_1)
Emit Sponsored(msg.sender,amount_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: amount, Num: 1
Globalname: amount
End popogation
TMP_27(uint256) = INTERNAL_CALL, IdleYieldSource._depositToIdle(uint256)(amount_1)
[i]Type for TMP_27

Name: TMP_27 Function: sponsor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: amount, Num: 1
Globalname: amount
End popogation


TMP_27(uint256) = INTERNAL_CALL, IdleYieldSource._depositToIdle(uint256)(amount_1)
Emit Sponsored(msg.sender,amount_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: amount, Num: 1
Globalname: amount
End popogation
TMP_27(uint256) = INTERNAL_CALL, IdleYieldSource._depositToIdle(uint256)(amount_1)
[i]Type for TMP_27

Name: TMP_27 Function: sponsor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: amount, Num: 1
Globalname: amount
End popogation



slitherConstructorConstantVariables
Address: -999, Label: balanceOf:a
Address: -998, Label: tokenPriceWithFee:a
Address: -997, Label: mintIdleToken:a
Address: 1, Label: global:u
Address: 2, Label: global:idleToken
Address: 3, Label: global:underlyingAsset
Address: -996, Label: initialize:_idleToken
Address: -995, Label: supplyTokenTo:to
Address: -994, Label: transferERC20:erc20Token
Address: -993, Label: transferERC20:to
Address: 4, Label: _price:TMP_11
Address: 4, Label: global:this
Head Addr: -999
    Norm: 6
    Set: {-999}
    Fin: NULL
Head Addr: -998
    Norm: 6
    Set: {-998}
    Fin: NULL
Head Addr: -997
    Norm: 6
    Set: {-997}
    Fin: NULL
Head Addr: 1
    Norm: u
    Set: {1}
    Fin: NULL
Head Addr: 2
    Norm: 0
    Set: {2}
    Fin: NULL
Head Addr: 3
    Norm: 6
    Set: {3}
    Fin: NULL
Head Addr: -996
    Norm: 0
    Set: {-996}
    Fin: NULL
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
Head Addr: -994
    Norm: 6
    Set: {-994}
    Fin: NULL
Head Addr: -993
    Norm: 0
    Set: {-993}
    Fin: NULL
Head Addr: 4
    Norm: u
    Set: {4}
    Fin: NULL
Function count: 12
Executing Group 3
[*] Tested 1 warning for PoolTogether
Group 3 complete
Testing complete
