Switched global version to 0.8.1
Checking HybridPool
Checking TridentERC20
Checking IBentoBoxMinimal
Checking IMasterDeployer
Checking IPool
Checking ITridentCallee
Checking MathUtils
Finance file: HybridPool_ftypes.txt
Add to address_to_label {'global:bento': 1}
Add to address_to_label {'global:bento': 1, 'global:token0': 2}
Add to address_to_label {'global:bento': 1, 'global:token0': 2, 'global:token1': 3}
Add to address_to_label {'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4}
Add to address_to_label {'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5}
Add to address_to_label {'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999}
Add to address_to_label {'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998}
Add to address_to_label {'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997}
Add to address_to_label {'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996}
Add to address_to_label {'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995}
Add to address_to_label {'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994}
Add to address_to_label {'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993}
Add to address_to_label {'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992}
Add to address_to_label {'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991}
Add to address_to_label {'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990}
Add to address_to_label {'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989}
Add to address_to_label {'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
Reading f file...
['[*c]', 'HybridPool']
['']
['[xf]', 'transferFrom']
['[xf]', 'permit']
['[xf]', 'constructor']
['[xf]', 'mint']
['[xf]', 'burn']
['[xf]', 'burnSingle']
['[xf]', 'swap']
['[xf]', 'getAmountOut']
['']
['[t]', 'global', 'token0']
['[t]', 'global', 'token1']
['[t]', 'global', 'MAX_FEE']
['[t]', 'global', 'swapFee']
['[t]', 'global', 'balanceOf']
['[t]', 'global', 'totalSupply']
['[t]', 'global', 'MINIMUM_LIQUIDITY']
['[t]', 'global', 'barFee']
['[t]', 'global', 'barFeeTo']
['[t]', 'global', 'A_PRECISION']
['[t]', 'global', 'MAX_LOOP_LIMIT']
['[t]', 'global', 'N_A']
['[t]', 'global', 'token0PrecisionMultiplier']
['[t]', 'global', 'token1PrecisionMultiplier']
['[t]', 'global', 'bento']
['[t]', 'global', 'reserve0', 'f: 0']
['[t]', 'global', 'reserve1', 'f:0']
['[t]', 'global', 'unlocked']
['[t]', 'global', 'DOMAIN_SEPARATOR']
['[t]', 'global', 'PERMIT_TYPEHASH']
['[t]', 'global', 'nonces']
['[t]', 'global', 'allowance']
['[t]', 'global', 'masterDeployer']
['[t]', 'global', 'decimals']
['[t]', 'global', 'name']
['']
['[t]', 'flashSwap', 'tokenIn']
['[t]', 'flashSwap', 'recipient']
['[t]', 'flashSwap', 'unwrapBento']
['[t]', 'flashSwap', 'amountIn']
['[t]', 'flashSwap', 'context']
Finding type for balanceOf(mapping(address => uint256) ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, -1)
Finding type for token0(address ... )
prev address? u
Head Addr: 2
    Norm: 0
    Set: {2}
    Fin: NULL
Finding type for token1(address ... )
prev address? u
Head Addr: 3
    Norm: 0
    Set: {3}
    Fin: NULL
Finding type for totalSupply(uint256 ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, -1)
Finding type for MAX_FEE(uint256 ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, -1)
Finding type for swapFee(uint256 ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, -1)
Finding type for MINIMUM_LIQUIDITY(uint256 ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, -1)
Finding type for barFee(uint256 ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, -1)
Finding type for barFeeTo(address ... )
prev address? u
Head Addr: 4
    Norm: 0
    Set: {4}
    Fin: NULL
Finding type for A_PRECISION(uint256 ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, -1)
Finding type for MAX_LOOP_LIMIT(uint256 ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, -1)
Finding type for N_A(uint256 ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, -1)
Finding type for token0PrecisionMultiplier(uint256 ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, -1)
Finding type for token1PrecisionMultiplier(uint256 ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, -1)
Finding type for bento(address ... )
prev address? u
Head Addr: 1
    Norm: 0
    Set: {1}
    Fin: NULL
Finding type for name(string ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, -1)
Finding type for reserve0(uint128 ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, 0)
Finding type for reserve1(uint128 ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, 0)
Finding type for DOMAIN_SEPARATOR(bytes32 ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, -1)
Finding type for PERMIT_TYPEHASH(bytes32 ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, -1)
Finding type for nonces(mapping(address => uint256) ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, -1)
Finding type for allowance(mapping(address => mapping(address => uint256)) ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, -1)
Finding type for unlocked(uint256 ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, -1)
Finding type for masterDeployer(address ... )
prev address? u
Head Addr: 5
    Norm: 0
    Set: {5}
    Fin: NULL
Finding type for decimals(uint8 ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988}
(-1, -1, 'u', None, -1, -1)



constructor
Finding type for _deployData(bytes ... )
Finding type for _masterDeployer(address ... )
prev address? u
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: _masterDeployer
    fields: []
    fintype: -1


decimals_1(uint8) := ϕ(['decimals_0', 'decimals_6'])
MAX_FEE_1(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
TUPLE_0(address,address,uint256,uint256) = SOLIDITY_CALL abi.decode()(_deployData_1(address,address,uint256,uint256))
_token0_1(address)= UNPACK TUPLE_0 index: 0 
_token1_1(address)= UNPACK TUPLE_0 index: 1 
_swapFee_1(uint256)= UNPACK TUPLE_0 index: 2 
a_1(uint256)= UNPACK TUPLE_0 index: 3 
TMP_32 = CONVERT 0 to address
TMP_33(bool) = _token0_1 != TMP_32
TMP_34(None) = SOLIDITY_CALL require(bool,string)(TMP_33,ZERO_ADDRESS)
TMP_35(bool) = _token0_1 != _token1_1
TMP_36(None) = SOLIDITY_CALL require(bool,string)(TMP_35,IDENTICAL_ADDRESSES)
TMP_37(bool) = _swapFee_1 <= MAX_FEE_1
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,INVALID_SWAP_FEE)
TMP_39(bool) = a_1 != 0
TMP_40(None) = SOLIDITY_CALL require(bool,string)(TMP_39,ZERO_A)
REF_22 (->None) := 3242907650(uint256)
TMP_41(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_22)
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_masterDeployer_1, function:staticcall, arguments:['TMP_41']  
decimals_2(uint8) := ϕ(['decimals_6', 'decimals_1'])
_barFee_1(bytes)= UNPACK TUPLE_1 index: 1 
REF_26 (->None) := 201985234(uint256)
TMP_42(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_26)
TUPLE_2(bool,bytes) = LOW_LEVEL_CALL, dest:_masterDeployer_1, function:staticcall, arguments:['TMP_42']  
decimals_3(uint8) := ϕ(['decimals_6', 'decimals_2'])
_barFeeTo_1(bytes)= UNPACK TUPLE_2 index: 1 
REF_30 (->None) := 1302534183(uint256)
TMP_43(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_30)
TUPLE_3(bool,bytes) = LOW_LEVEL_CALL, dest:_masterDeployer_1, function:staticcall, arguments:['TMP_43']  
decimals_4(uint8) := ϕ(['decimals_3', 'decimals_6'])
_bento_1(bytes)= UNPACK TUPLE_3 index: 1 
TMP_44(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(826074471)
TUPLE_4(bool,bytes) = LOW_LEVEL_CALL, dest:_token0_1, function:staticcall, arguments:['TMP_44']  
decimals_5(uint8) := ϕ(['decimals_4', 'decimals_6'])
_decimals0_1(bytes)= UNPACK TUPLE_4 index: 1 
TMP_45(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(826074471)
TUPLE_5(bool,bytes) = LOW_LEVEL_CALL, dest:_token1_1, function:staticcall, arguments:['TMP_45']  
decimals_6(uint8) := ϕ(['decimals_5', 'decimals_6'])
_decimals1_1(bytes)= UNPACK TUPLE_5 index: 1 
token0_1(address) := _token0_1(address)
token1_1(address) := _token1_1(address)
swapFee_1(uint256) := _swapFee_1(uint256)
TMP_46(uint256) = SOLIDITY_CALL abi.decode()(_barFee_1,uint256)
barFee_1(uint256) := TMP_46(uint256)
TMP_47(address) = SOLIDITY_CALL abi.decode()(_barFeeTo_1,address)
barFeeTo_1(address) := TMP_47(address)
TMP_48(address) = SOLIDITY_CALL abi.decode()(_bento_1,address)
bento_1(address) := TMP_48(address)
masterDeployer_1(address) := _masterDeployer_1(address)
A_1(uint256) := a_1(uint256)
TMP_49(uint256) = 2 (c)* a_1
N_A_1(uint256) := TMP_49(uint256)
TMP_50(uint8) = SOLIDITY_CALL abi.decode()(_decimals0_1,uint8)
TMP_51(uint8) = decimals_6 (c)- TMP_50
TMP_52(uint256) = 10 (c)** TMP_51
token0PrecisionMultiplier_1(uint256) := TMP_52(uint256)
TMP_53(uint8) = SOLIDITY_CALL abi.decode()(_decimals1_1,uint8)
TMP_54(uint8) = decimals_6 (c)- TMP_53
TMP_55(uint256) = 10 (c)** TMP_54
token1PrecisionMultiplier_1(uint256) := TMP_55(uint256)
unlocked_1(uint256) := 1(uint256)


Propogating parameters and globals to SSA variables...
End popogation
decimals_1
decimals
decimals

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_1
MAX_FEE
MAX_FEE

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
decimals_1(uint8) := ϕ(['decimals_0', 'decimals_6'])
Phi
[i]Type for decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_1(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_deployData_1
_deployData_1
_deployData
_deployData

Name: _deployData_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token0_1
_token0_1
_token0
_token0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token1_1
_token1_1
_token1
_token1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_swapFee_1
_swapFee_1
_swapFee
_swapFee

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
a_1
a_1
a
a

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_0(address,address,uint256,uint256) = SOLIDITY_CALL abi.decode()(_deployData_1(address,address,uint256,uint256))
[i]Type for TUPLE_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_token0_1(address)= UNPACK TUPLE_0 index: 0 
Finding type for _token0(address ... )
prev address? u
Head Addr: -998
    Norm: 0
    Set: {-998}
    Fin: NULL
[i]Type for _token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_token1_1(address)= UNPACK TUPLE_0 index: 1 
Finding type for _token1(address ... )
prev address? u
Head Addr: -997
    Norm: 0
    Set: {-997}
    Fin: NULL
[i]Type for _token1

Name: _token1 Function: constructor
Num: 
Den: 
Address: -997
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_swapFee_1(uint256)= UNPACK TUPLE_0 index: 2 
Finding type for _swapFee(uint256 ... )
[i]Type for _swapFee

Name: _swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
a_1(uint256)= UNPACK TUPLE_0 index: 3 
Finding type for a(uint256 ... )
[i]Type for a

Name: a Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_token0_1
_token0_1
_token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_32 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(bool) = _token0_1 != TMP_32
[i]Type for TMP_33

Name: TMP_33 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_34(None) = SOLIDITY_CALL require(bool,string)(TMP_33,ZERO_ADDRESS)
[i]Type for TMP_34

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_token0_1
_token0_1
_token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token1_1
_token1_1
_token1

Name: _token1 Function: constructor
Num: 
Den: 
Address: -997
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_35(bool) = _token0_1 != _token1_1
[i]Type for TMP_35

Name: TMP_35 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_36(None) = SOLIDITY_CALL require(bool,string)(TMP_35,IDENTICAL_ADDRESSES)
[i]Type for TMP_36

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_1
MAX_FEE_1
MAX_FEE

Name: MAX_FEE Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_swapFee_1
_swapFee_1
_swapFee

Name: _swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_37(bool) = _swapFee_1 <= MAX_FEE_1
lnorm: u rnorm: u
[i]Type for TMP_37

Name: TMP_37 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,INVALID_SWAP_FEE)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
a_1
a_1
a

Name: a Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_39(bool) = a_1 != 0
[i]Type for TMP_39

Name: TMP_39 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_40(None) = SOLIDITY_CALL require(bool,string)(TMP_39,ZERO_A)
[i]Type for TMP_40

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_masterDeployer_1
_masterDeployer_1
_masterDeployer

Name: _masterDeployer_1 Function: None
Num: 
Den: 
Address: -999
Norm: u
LF: _masterDeployer
Value: u
Fields: 
Finance Type: undef
_barFee_1
_barFee_1
_barFee
_barFee

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
decimals_2
decimals
decimals

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_22 (->None) := 3242907650(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_22

Name: REF_22 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3242907650
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_41(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_22)
[i]Type for TMP_41

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_masterDeployer_1, function:staticcall, arguments:['TMP_41']  
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
decimals_2(uint8) := ϕ(['decimals_6', 'decimals_1'])
Phi
[i]Type for decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_barFee_1(bytes)= UNPACK TUPLE_1 index: 1 
Finding type for _barFee(bytes ... )
[i]Type for _barFee

Name: _barFee Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_masterDeployer_1
_masterDeployer_1
_masterDeployer

Name: _masterDeployer_1 Function: None
Num: 
Den: 
Address: -999
Norm: u
LF: _masterDeployer
Value: u
Fields: 
Finance Type: undef
_barFeeTo_1
_barFeeTo_1
_barFeeTo
_barFeeTo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
decimals_3
decimals
decimals

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_26 (->None) := 201985234(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_26

Name: REF_26 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 201985234
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_42(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_26)
[i]Type for TMP_42

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_2(bool,bytes) = LOW_LEVEL_CALL, dest:_masterDeployer_1, function:staticcall, arguments:['TMP_42']  
[i]Type for TUPLE_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
decimals_3(uint8) := ϕ(['decimals_6', 'decimals_2'])
Phi
[i]Type for decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_barFeeTo_1(bytes)= UNPACK TUPLE_2 index: 1 
Finding type for _barFeeTo(bytes ... )
[i]Type for _barFeeTo

Name: _barFeeTo Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_masterDeployer_1
_masterDeployer_1
_masterDeployer

Name: _masterDeployer_1 Function: None
Num: 
Den: 
Address: -999
Norm: u
LF: _masterDeployer
Value: u
Fields: 
Finance Type: undef
_bento_1
_bento_1
_bento
_bento

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
decimals_4
decimals
decimals

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_30 (->None) := 1302534183(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_30

Name: REF_30 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1302534183
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_43(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_30)
[i]Type for TMP_43

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_3(bool,bytes) = LOW_LEVEL_CALL, dest:_masterDeployer_1, function:staticcall, arguments:['TMP_43']  
[i]Type for TUPLE_3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
decimals_4(uint8) := ϕ(['decimals_3', 'decimals_6'])
Phi
[i]Type for decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_bento_1(bytes)= UNPACK TUPLE_3 index: 1 
Finding type for _bento(bytes ... )
[i]Type for _bento

Name: _bento Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_token0_1
_token0_1
_token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_decimals0_1
_decimals0_1
_decimals0
_decimals0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
decimals_5
decimals
decimals

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_44(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(826074471)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_4(bool,bytes) = LOW_LEVEL_CALL, dest:_token0_1, function:staticcall, arguments:['TMP_44']  
[i]Type for TUPLE_4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
decimals_5(uint8) := ϕ(['decimals_4', 'decimals_6'])
Phi
[i]Type for decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_decimals0_1(bytes)= UNPACK TUPLE_4 index: 1 
Finding type for _decimals0(bytes ... )
[i]Type for _decimals0

Name: _decimals0 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_token1_1
_token1_1
_token1

Name: _token1 Function: constructor
Num: 
Den: 
Address: -997
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_decimals1_1
_decimals1_1
_decimals1
_decimals1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
decimals_6
decimals
decimals

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_45(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(826074471)
[i]Type for TMP_45

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_5(bool,bytes) = LOW_LEVEL_CALL, dest:_token1_1, function:staticcall, arguments:['TMP_45']  
[i]Type for TUPLE_5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
decimals_6(uint8) := ϕ(['decimals_5', 'decimals_6'])
Phi
[i]Type for decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_decimals1_1(bytes)= UNPACK TUPLE_5 index: 1 
Finding type for _decimals1(bytes ... )
[i]Type for _decimals1

Name: _decimals1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_token0_1
_token0_1
_token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_1
token0_1
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
token0_1(address) := _token0_1(address)
asgn
Finance type key: (-1, -1)
[i]Type for token0

Name: token0 Function: constructor
Num: -1
Den: -1
Address: -998
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token0
 To type: None
Propogating parameters and globals to SSA variables...
_token1_1
_token1_1
_token1

Name: _token1 Function: constructor
Num: 
Den: 
Address: -997
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_1
token1_1
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
token1_1(address) := _token1_1(address)
asgn
Finance type key: (-1, -1)
[i]Type for token1

Name: token1 Function: constructor
Num: -1
Den: -1
Address: -997
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token1
 To type: None
Propogating parameters and globals to SSA variables...
_swapFee_1
_swapFee_1
_swapFee

Name: _swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_1
swapFee_1
swapFee
swapFee

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
swapFee_1(uint256) := _swapFee_1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for swapFee

Name: swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied swapFee
 To type: None

Name: swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_barFee_1
_barFee_1
_barFee
_barFee

Name: _barFee Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFee_1
barFee_1
barFee
barFee

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_46(uint256) = SOLIDITY_CALL abi.decode()(_barFee_1,uint256)
[i]Type for TMP_46

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_1(uint256) := TMP_46(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for barFee

Name: barFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied barFee
 To type: None

Name: barFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_barFeeTo_1
_barFeeTo_1
_barFeeTo
_barFeeTo

Name: _barFeeTo Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_1
barFeeTo_1
barFeeTo
barFeeTo

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_47(address) = SOLIDITY_CALL abi.decode()(_barFeeTo_1,address)
[i]Type for TMP_47

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_1(address) := TMP_47(address)
asgn
Finance type key: (-1, -1)
[i]Type for barFeeTo

Name: barFeeTo Function: constructor
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
Copied barFeeTo
 To type: None
Propogating parameters and globals to SSA variables...
_bento_1
_bento_1
_bento
_bento

Name: _bento Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_1
bento_1
bento
bento

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_48(address) = SOLIDITY_CALL abi.decode()(_bento_1,address)
[i]Type for TMP_48

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_1(address) := TMP_48(address)
asgn
Finance type key: (-1, -1)
[i]Type for bento

Name: bento Function: constructor
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Copied bento
 To type: None
Propogating parameters and globals to SSA variables...
_masterDeployer_1
_masterDeployer_1
_masterDeployer

Name: _masterDeployer_1 Function: None
Num: 
Den: 
Address: -999
Norm: u
LF: _masterDeployer
Value: u
Fields: 
Finance Type: undef
masterDeployer_1
masterDeployer_1
masterDeployer
masterDeployer

Name: None Function: None
Num: -1
Den: -1
Address: 5
Norm: u
LF: masterDeployer
Value: u
Fields: 
Finance Type: undef
End popogation
masterDeployer_1(address) := _masterDeployer_1(address)
asgn
Finance type key: (-1, -1)
[i]Type for masterDeployer

Name: masterDeployer Function: constructor
Num: -1
Den: -1
Address: -999
Norm: u
LF: _masterDeployer
Value: u
Fields: 
Finance Type: undef
XXXX
Copied masterDeployer
 To type: None
Propogating parameters and globals to SSA variables...
a_1
a_1
a

Name: a Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_1
A_1
A
A

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
A_1(uint256) := a_1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for A

Name: A Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
a_1
a_1
a

Name: a Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_1
N_A_1
N_A
N_A

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_49(uint256) = 2 (c)* a_1
lnorm: 0 rnorm: u
[i]Type for TMP_49

Name: TMP_49 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
N_A_1(uint256) := TMP_49(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for N_A

Name: N_A Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied N_A
 To type: None

Name: N_A Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
decimals_6
decimals_6
decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_decimals0_1
_decimals0_1
_decimals0
_decimals0

Name: _decimals0 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_1
token0PrecisionMultiplier_1
token0PrecisionMultiplier
token0PrecisionMultiplier

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_50(uint8) = SOLIDITY_CALL abi.decode()(_decimals0_1,uint8)
[i]Type for TMP_50

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(uint8) = decimals_6 (c)- TMP_50
SUB1
lnorm: u rnorm: u
SUB

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_50 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_51

Name: TMP_51 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(uint256) = 10 (c)** TMP_51
[i]Type for TMP_52

Name: TMP_52 Function: constructor
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_1(uint256) := TMP_52(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: constructor
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token0PrecisionMultiplier
 To type: None

Name: token0PrecisionMultiplier Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_decimals1_1
_decimals1_1
_decimals1
_decimals1

Name: _decimals1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
decimals_6
decimals_6
decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_1
token1PrecisionMultiplier_1
token1PrecisionMultiplier
token1PrecisionMultiplier

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_53(uint8) = SOLIDITY_CALL abi.decode()(_decimals1_1,uint8)
[i]Type for TMP_53

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_54(uint8) = decimals_6 (c)- TMP_53
SUB1
lnorm: u rnorm: u
SUB

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_53 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_54

Name: TMP_54 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = 10 (c)** TMP_54
[i]Type for TMP_55

Name: TMP_55 Function: constructor
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_1(uint256) := TMP_55(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: constructor
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token1PrecisionMultiplier
 To type: None

Name: token1PrecisionMultiplier Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unlocked_1
unlocked_1
unlocked
unlocked

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
unlocked_1(uint256) := 1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for unlocked

Name: unlocked Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Copied unlocked
 To type: None

Name: unlocked Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef


decimals_1(uint8) := ϕ(['decimals_0', 'decimals_6'])
MAX_FEE_1(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
TUPLE_0(address,address,uint256,uint256) = SOLIDITY_CALL abi.decode()(_deployData_1(address,address,uint256,uint256))
_token0_1(address)= UNPACK TUPLE_0 index: 0 
_token1_1(address)= UNPACK TUPLE_0 index: 1 
_swapFee_1(uint256)= UNPACK TUPLE_0 index: 2 
a_1(uint256)= UNPACK TUPLE_0 index: 3 
TMP_32 = CONVERT 0 to address
TMP_33(bool) = _token0_1 != TMP_32
TMP_34(None) = SOLIDITY_CALL require(bool,string)(TMP_33,ZERO_ADDRESS)
TMP_35(bool) = _token0_1 != _token1_1
TMP_36(None) = SOLIDITY_CALL require(bool,string)(TMP_35,IDENTICAL_ADDRESSES)
TMP_37(bool) = _swapFee_1 <= MAX_FEE_1
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,INVALID_SWAP_FEE)
TMP_39(bool) = a_1 != 0
TMP_40(None) = SOLIDITY_CALL require(bool,string)(TMP_39,ZERO_A)
REF_22 (->None) := 3242907650(uint256)
TMP_41(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_22)
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_masterDeployer_1, function:staticcall, arguments:['TMP_41']  
decimals_2(uint8) := ϕ(['decimals_6', 'decimals_1'])
_barFee_1(bytes)= UNPACK TUPLE_1 index: 1 
REF_26 (->None) := 201985234(uint256)
TMP_42(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_26)
TUPLE_2(bool,bytes) = LOW_LEVEL_CALL, dest:_masterDeployer_1, function:staticcall, arguments:['TMP_42']  
decimals_3(uint8) := ϕ(['decimals_6', 'decimals_2'])
_barFeeTo_1(bytes)= UNPACK TUPLE_2 index: 1 
REF_30 (->None) := 1302534183(uint256)
TMP_43(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_30)
TUPLE_3(bool,bytes) = LOW_LEVEL_CALL, dest:_masterDeployer_1, function:staticcall, arguments:['TMP_43']  
decimals_4(uint8) := ϕ(['decimals_3', 'decimals_6'])
_bento_1(bytes)= UNPACK TUPLE_3 index: 1 
TMP_44(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(826074471)
TUPLE_4(bool,bytes) = LOW_LEVEL_CALL, dest:_token0_1, function:staticcall, arguments:['TMP_44']  
decimals_5(uint8) := ϕ(['decimals_4', 'decimals_6'])
_decimals0_1(bytes)= UNPACK TUPLE_4 index: 1 
TMP_45(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(826074471)
TUPLE_5(bool,bytes) = LOW_LEVEL_CALL, dest:_token1_1, function:staticcall, arguments:['TMP_45']  
decimals_6(uint8) := ϕ(['decimals_5', 'decimals_6'])
_decimals1_1(bytes)= UNPACK TUPLE_5 index: 1 
token0_1(address) := _token0_1(address)
token1_1(address) := _token1_1(address)
swapFee_1(uint256) := _swapFee_1(uint256)
TMP_46(uint256) = SOLIDITY_CALL abi.decode()(_barFee_1,uint256)
barFee_1(uint256) := TMP_46(uint256)
TMP_47(address) = SOLIDITY_CALL abi.decode()(_barFeeTo_1,address)
barFeeTo_1(address) := TMP_47(address)
TMP_48(address) = SOLIDITY_CALL abi.decode()(_bento_1,address)
bento_1(address) := TMP_48(address)
masterDeployer_1(address) := _masterDeployer_1(address)
A_1(uint256) := a_1(uint256)
TMP_49(uint256) = 2 (c)* a_1
N_A_1(uint256) := TMP_49(uint256)
TMP_50(uint8) = SOLIDITY_CALL abi.decode()(_decimals0_1,uint8)
TMP_51(uint8) = decimals_6 (c)- TMP_50
TMP_52(uint256) = 10 (c)** TMP_51
token0PrecisionMultiplier_1(uint256) := TMP_52(uint256)
TMP_53(uint8) = SOLIDITY_CALL abi.decode()(_decimals1_1,uint8)
TMP_54(uint8) = decimals_6 (c)- TMP_53
TMP_55(uint256) = 10 (c)** TMP_54
token1PrecisionMultiplier_1(uint256) := TMP_55(uint256)
unlocked_1(uint256) := 1(uint256)


Propogating parameters and globals to SSA variables...
End popogation
decimals_1
decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_1
MAX_FEE

Name: MAX_FEE Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
decimals_1(uint8) := ϕ(['decimals_0', 'decimals_6'])
Phi
[i]Type for decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_1(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_deployData_1
_deployData_1
_deployData
_deployData

Name: _deployData_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token0_1
_token0_1
_token0
_token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token1_1
_token1_1
_token1
_token1

Name: _token1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_swapFee_1
_swapFee_1
_swapFee
_swapFee

Name: _swapFee Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
a_1
a_1
a
a

Name: a Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_0(address,address,uint256,uint256) = SOLIDITY_CALL abi.decode()(_deployData_1(address,address,uint256,uint256))
[i]Type for TUPLE_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_token0_1(address)= UNPACK TUPLE_0 index: 0 
Finding type for _token0(address ... )
prev address? u
Head Addr: -998
    Norm: 0
    Set: {-998}
    Fin: NULL
[i]Type for _token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_token1_1(address)= UNPACK TUPLE_0 index: 1 
Finding type for _token1(address ... )
prev address? u
Head Addr: -997
    Norm: 0
    Set: {-997}
    Fin: NULL
[i]Type for _token1

Name: _token1 Function: constructor
Num: 
Den: 
Address: -997
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_swapFee_1(uint256)= UNPACK TUPLE_0 index: 2 
Finding type for _swapFee(uint256 ... )
[i]Type for _swapFee

Name: _swapFee Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
a_1(uint256)= UNPACK TUPLE_0 index: 3 
Finding type for a(uint256 ... )
[i]Type for a

Name: a Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_token0_1
_token0_1
_token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_32 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(bool) = _token0_1 != TMP_32
[i]Type for TMP_33

Name: TMP_33 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_34(None) = SOLIDITY_CALL require(bool,string)(TMP_33,ZERO_ADDRESS)
[i]Type for TMP_34

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_token0_1
_token0_1
_token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token1_1
_token1_1
_token1

Name: _token1 Function: constructor
Num: 
Den: 
Address: -997
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_35(bool) = _token0_1 != _token1_1
[i]Type for TMP_35

Name: TMP_35 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_36(None) = SOLIDITY_CALL require(bool,string)(TMP_35,IDENTICAL_ADDRESSES)
[i]Type for TMP_36

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_1
MAX_FEE_1
MAX_FEE

Name: MAX_FEE Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_swapFee_1
_swapFee_1
_swapFee
_swapFee

Name: _swapFee Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_37(bool) = _swapFee_1 <= MAX_FEE_1
lnorm: u rnorm: u
[i]Type for TMP_37

Name: TMP_37 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,INVALID_SWAP_FEE)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
a_1
a_1
a
a

Name: a Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_39(bool) = a_1 != 0
[i]Type for TMP_39

Name: TMP_39 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_40(None) = SOLIDITY_CALL require(bool,string)(TMP_39,ZERO_A)
[i]Type for TMP_40

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_masterDeployer_1
_masterDeployer_1
_masterDeployer

Name: _masterDeployer Function: None
Num: 
Den: 
Address: -999
Norm: u
LF: _masterDeployer
Value: u
Fields: 
Finance Type: undef
_barFee_1
_barFee_1
_barFee
_barFee

Name: _barFee Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
decimals_2
decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_22 (->None) := 3242907650(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_22

Name: REF_22 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3242907650
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_41(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_22)
[i]Type for TMP_41

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_masterDeployer_1, function:staticcall, arguments:['TMP_41']  
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
decimals_2(uint8) := ϕ(['decimals_6', 'decimals_1'])
Phi
[i]Type for decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_barFee_1(bytes)= UNPACK TUPLE_1 index: 1 
Finding type for _barFee(bytes ... )
[i]Type for _barFee

Name: _barFee Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_masterDeployer_1
_masterDeployer_1
_masterDeployer

Name: _masterDeployer Function: None
Num: 
Den: 
Address: -999
Norm: u
LF: _masterDeployer
Value: u
Fields: 
Finance Type: undef
_barFeeTo_1
_barFeeTo_1
_barFeeTo
_barFeeTo

Name: _barFeeTo Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
decimals_3
decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_26 (->None) := 201985234(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_26

Name: REF_26 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 201985234
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_42(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_26)
[i]Type for TMP_42

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_2(bool,bytes) = LOW_LEVEL_CALL, dest:_masterDeployer_1, function:staticcall, arguments:['TMP_42']  
[i]Type for TUPLE_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
decimals_3(uint8) := ϕ(['decimals_6', 'decimals_2'])
Phi
[i]Type for decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_barFeeTo_1(bytes)= UNPACK TUPLE_2 index: 1 
Finding type for _barFeeTo(bytes ... )
[i]Type for _barFeeTo

Name: _barFeeTo Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_masterDeployer_1
_masterDeployer_1
_masterDeployer

Name: _masterDeployer Function: None
Num: 
Den: 
Address: -999
Norm: u
LF: _masterDeployer
Value: u
Fields: 
Finance Type: undef
_bento_1
_bento_1
_bento
_bento

Name: _bento Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
decimals_4
decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_30 (->None) := 1302534183(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_30

Name: REF_30 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1302534183
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_43(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_30)
[i]Type for TMP_43

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_3(bool,bytes) = LOW_LEVEL_CALL, dest:_masterDeployer_1, function:staticcall, arguments:['TMP_43']  
[i]Type for TUPLE_3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
decimals_4(uint8) := ϕ(['decimals_3', 'decimals_6'])
Phi
[i]Type for decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_bento_1(bytes)= UNPACK TUPLE_3 index: 1 
Finding type for _bento(bytes ... )
[i]Type for _bento

Name: _bento Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_token0_1
_token0_1
_token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_decimals0_1
_decimals0_1
_decimals0
_decimals0

Name: _decimals0 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
decimals_5
decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_44(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(826074471)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_4(bool,bytes) = LOW_LEVEL_CALL, dest:_token0_1, function:staticcall, arguments:['TMP_44']  
[i]Type for TUPLE_4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
decimals_5(uint8) := ϕ(['decimals_4', 'decimals_6'])
Phi
[i]Type for decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_decimals0_1(bytes)= UNPACK TUPLE_4 index: 1 
Finding type for _decimals0(bytes ... )
[i]Type for _decimals0

Name: _decimals0 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_token1_1
_token1_1
_token1

Name: _token1 Function: constructor
Num: 
Den: 
Address: -997
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_decimals1_1
_decimals1_1
_decimals1
_decimals1

Name: _decimals1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
decimals_6
decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_45(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(826074471)
[i]Type for TMP_45

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_5(bool,bytes) = LOW_LEVEL_CALL, dest:_token1_1, function:staticcall, arguments:['TMP_45']  
[i]Type for TUPLE_5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
decimals_6(uint8) := ϕ(['decimals_5', 'decimals_6'])
Phi
[i]Type for decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_decimals1_1(bytes)= UNPACK TUPLE_5 index: 1 
Finding type for _decimals1(bytes ... )
[i]Type for _decimals1

Name: _decimals1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_token0_1
_token0_1
_token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_1
token0_1
token0

Name: token0 Function: constructor
Num: -1
Den: -1
Address: -998
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
token0_1(address) := _token0_1(address)
asgn
Finance type key: (-1, -1)
[i]Type for token0

Name: token0 Function: constructor
Num: -1
Den: -1
Address: -998
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token0
 To type: None
Propogating parameters and globals to SSA variables...
_token1_1
_token1_1
_token1

Name: _token1 Function: constructor
Num: 
Den: 
Address: -997
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_1
token1_1
token1

Name: token1 Function: constructor
Num: -1
Den: -1
Address: -997
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
token1_1(address) := _token1_1(address)
asgn
Finance type key: (-1, -1)
[i]Type for token1

Name: token1 Function: constructor
Num: -1
Den: -1
Address: -997
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token1
 To type: None
Propogating parameters and globals to SSA variables...
_swapFee_1
_swapFee_1
_swapFee
_swapFee

Name: _swapFee Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_1
swapFee_1
swapFee

Name: swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
swapFee_1(uint256) := _swapFee_1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for swapFee

Name: swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied swapFee
 To type: None

Name: swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_barFee_1
_barFee_1
_barFee
_barFee

Name: _barFee Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFee_1
barFee_1
barFee

Name: barFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_46(uint256) = SOLIDITY_CALL abi.decode()(_barFee_1,uint256)
[i]Type for TMP_46

Name: TMP_46 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_1(uint256) := TMP_46(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for barFee

Name: barFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied barFee
 To type: None

Name: barFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_barFeeTo_1
_barFeeTo_1
_barFeeTo
_barFeeTo

Name: _barFeeTo Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_1
barFeeTo_1
barFeeTo

Name: barFeeTo Function: constructor
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_47(address) = SOLIDITY_CALL abi.decode()(_barFeeTo_1,address)
[i]Type for TMP_47

Name: TMP_47 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_1(address) := TMP_47(address)
asgn
Finance type key: (-1, -1)
[i]Type for barFeeTo

Name: barFeeTo Function: constructor
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
Copied barFeeTo
 To type: None
Propogating parameters and globals to SSA variables...
_bento_1
_bento_1
_bento
_bento

Name: _bento Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_1
bento_1
bento

Name: bento Function: constructor
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_48(address) = SOLIDITY_CALL abi.decode()(_bento_1,address)
[i]Type for TMP_48

Name: TMP_48 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_1(address) := TMP_48(address)
asgn
Finance type key: (-1, -1)
[i]Type for bento

Name: bento Function: constructor
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Copied bento
 To type: None
Propogating parameters and globals to SSA variables...
_masterDeployer_1
_masterDeployer_1
_masterDeployer

Name: _masterDeployer Function: None
Num: 
Den: 
Address: -999
Norm: u
LF: _masterDeployer
Value: u
Fields: 
Finance Type: undef
masterDeployer_1
masterDeployer_1
masterDeployer

Name: masterDeployer Function: constructor
Num: -1
Den: -1
Address: -999
Norm: u
LF: _masterDeployer
Value: u
Fields: 
Finance Type: undef
End popogation
masterDeployer_1(address) := _masterDeployer_1(address)
asgn
Finance type key: (-1, -1)
[i]Type for masterDeployer

Name: masterDeployer Function: constructor
Num: -1
Den: -1
Address: -999
Norm: u
LF: _masterDeployer
Value: u
Fields: 
Finance Type: undef
XXXX
Copied masterDeployer
 To type: None
Propogating parameters and globals to SSA variables...
a_1
a_1
a
a

Name: a Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_1
A_1
A

Name: A Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
A_1(uint256) := a_1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for A

Name: A Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
a_1
a_1
a
a

Name: a Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_1
N_A_1
N_A

Name: N_A Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_49(uint256) = 2 (c)* a_1
lnorm: 0 rnorm: u
[i]Type for TMP_49

Name: TMP_49 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
N_A_1(uint256) := TMP_49(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for N_A

Name: N_A Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied N_A
 To type: None

Name: N_A Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
decimals_6
decimals_6
decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_decimals0_1
_decimals0_1
_decimals0
_decimals0

Name: _decimals0 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_1
token0PrecisionMultiplier_1
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: constructor
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_50(uint8) = SOLIDITY_CALL abi.decode()(_decimals0_1,uint8)
[i]Type for TMP_50

Name: TMP_50 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(uint8) = decimals_6 (c)- TMP_50
SUB1
lnorm: u rnorm: u
SUB

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_50 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_51

Name: TMP_51 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(uint256) = 10 (c)** TMP_51
[i]Type for TMP_52

Name: TMP_52 Function: constructor
Num: 
Den: 
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_1(uint256) := TMP_52(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: constructor
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token0PrecisionMultiplier
 To type: None

Name: token0PrecisionMultiplier Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_decimals1_1
_decimals1_1
_decimals1
_decimals1

Name: _decimals1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
decimals_6
decimals_6
decimals

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_1
token1PrecisionMultiplier_1
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: constructor
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_53(uint8) = SOLIDITY_CALL abi.decode()(_decimals1_1,uint8)
[i]Type for TMP_53

Name: TMP_53 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_54(uint8) = decimals_6 (c)- TMP_53
SUB1
lnorm: u rnorm: u
SUB

Name: decimals Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_53 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_54

Name: TMP_54 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = 10 (c)** TMP_54
[i]Type for TMP_55

Name: TMP_55 Function: constructor
Num: 
Den: 
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_1(uint256) := TMP_55(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: constructor
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token1PrecisionMultiplier
 To type: None

Name: token1PrecisionMultiplier Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unlocked_1
unlocked_1
unlocked

Name: unlocked Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
unlocked_1(uint256) := 1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for unlocked

Name: unlocked Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Copied unlocked
 To type: None

Name: unlocked Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef



mint
Finding type for data(bytes ... )
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


totalSupply_5(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
MINIMUM_LIQUIDITY_1(uint256) := ϕ(['MINIMUM_LIQUIDITY_6', 'MINIMUM_LIQUIDITY_0', 'MINIMUM_LIQUIDITY_7'])
MODIFIER_CALL, HybridPool.lock()()
TMP_56(address) = SOLIDITY_CALL abi.decode()(data_1,address)
recipient_1(address) := TMP_56(address)
TUPLE_6(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
_reserve0_1(uint256)= UNPACK TUPLE_6 index: 0 
_reserve1_1(uint256)= UNPACK TUPLE_6 index: 1 
TUPLE_7(uint256,uint256) = INTERNAL_CALL, HybridPool._balance()()
balance0_1(uint256)= UNPACK TUPLE_7 index: 0 
balance1_1(uint256)= UNPACK TUPLE_7 index: 1 
_totalSupply_1(uint256) := totalSupply_8(uint256)
TMP_57(uint256) = balance0_1 (c)- _reserve0_1
amount0_1(uint256) := TMP_57(uint256)
TMP_58(uint256) = balance1_1 (c)- _reserve1_1
amount1_1(uint256) := TMP_58(uint256)
TUPLE_8(uint256,uint256) = INTERNAL_CALL, HybridPool._nonOptimalMintFee(uint256,uint256,uint256,uint256)(amount0_1,amount1_1,_reserve0_1,_reserve1_1)
fee0_1(uint256)= UNPACK TUPLE_8 index: 0 
fee1_1(uint256)= UNPACK TUPLE_8 index: 1 
TMP_59(uint256) = balance0_1 (c)- fee0_1
TMP_60(uint256) = balance1_1 (c)- fee1_1
TMP_61(uint256) = INTERNAL_CALL, HybridPool._computeLiquidity(uint256,uint256)(TMP_59,TMP_60)
newLiq_1(uint256) := TMP_61(uint256)
TMP_62(bool) = _totalSupply_1 == 0
CONDITION TMP_62
TMP_63(uint256) = newLiq_1 (c)- MINIMUM_LIQUIDITY_6
liquidity_2(uint256) := TMP_63(uint256)
TMP_64 = CONVERT 0 to address
INTERNAL_CALL, TridentERC20._mint(address,uint256)(TMP_64,MINIMUM_LIQUIDITY_6)
TMP_66(uint256) = INTERNAL_CALL, HybridPool._computeLiquidity(uint256,uint256)(_reserve0_1,_reserve1_1)
oldLiq_1(uint256) := TMP_66(uint256)
TMP_67(uint256) = newLiq_1 (c)- oldLiq_1
TMP_68(uint256) = TMP_67 (c)* _totalSupply_1
TMP_69(uint256) = TMP_68 (c)/ oldLiq_1
liquidity_1(uint256) := TMP_69(uint256)
liquidity_3(uint256) := ϕ(['liquidity_1', 'liquidity_2'])
TMP_70(bool) = liquidity_3 != 0
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,INSUFFICIENT_LIQUIDITY_MINTED)
INTERNAL_CALL, TridentERC20._mint(address,uint256)(recipient_1,liquidity_3)
INTERNAL_CALL, HybridPool._updateReserves()()
Emit Mint(msg.sender,amount0_1,amount1_1,recipient_1)


Propogating parameters and globals to SSA variables...
End popogation
totalSupply_5
totalSupply
totalSupply

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MINIMUM_LIQUIDITY_1
MINIMUM_LIQUIDITY
MINIMUM_LIQUIDITY

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_5(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MINIMUM_LIQUIDITY_1(uint256) := ϕ(['MINIMUM_LIQUIDITY_6', 'MINIMUM_LIQUIDITY_0', 'MINIMUM_LIQUIDITY_7'])
Phi
[i]Type for MINIMUM_LIQUIDITY

Name: MINIMUM_LIQUIDITY Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, HybridPool.lock()()
Propogating parameters and globals to SSA variables...
End popogation
unlocked_2
unlocked
unlocked

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
unlocked_2(uint256) := ϕ(['unlocked_0', 'unlocked_1', 'unlocked_4'])
Phi
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unlocked_2
unlocked_2
unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_305(bool) = unlocked_2 == 1
[i]Type for TMP_305

Name: TMP_305 Function: lock
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_306(None) = SOLIDITY_CALL require(bool,string)(TMP_305,LOCKED)
[i]Type for TMP_306

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unlocked_3
unlocked_3
unlocked
unlocked

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
unlocked_3(uint256) := 2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
unlocked_4
unlocked_4
unlocked
unlocked

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
unlocked_4(uint256) := 1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
unlocked_2
unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
unlocked_2(uint256) := ϕ(['unlocked_0', 'unlocked_1', 'unlocked_4'])
Phi
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unlocked_2
unlocked_2
unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_305(bool) = unlocked_2 == 1
[i]Type for TMP_305

Name: TMP_305 Function: lock
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_306(None) = SOLIDITY_CALL require(bool,string)(TMP_305,LOCKED)
[i]Type for TMP_306

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unlocked_3
unlocked_3
unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
End popogation
unlocked_3(uint256) := 2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
unlocked_4
unlocked_4
unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
unlocked_4(uint256) := 1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient
recipient

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_56(address) = SOLIDITY_CALL abi.decode()(data_1,address)
[i]Type for TMP_56

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address) := TMP_56(address)
asgn
Finance type key: (-1, -1)
[i]Type for recipient

Name: recipient Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0
_reserve0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1
_reserve1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_6(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
Propogating parameters and globals to SSA variables...
End popogation
token0_38
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_38
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
reserve0_1
reserve0
reserve0

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_1
reserve1
reserve1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_38(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
Phi
[i]Type for token0

Name: token0 Function: _getReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_38(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
Phi
[i]Type for token1

Name: token1 Function: _getReserves
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_1(uint128) := ϕ(['reserve0_2', 'reserve0_0'])
Phi
[i]Type for reserve0

Name: reserve0 Function: _getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_1(uint128) := ϕ(['reserve1_0', 'reserve1_2'])
Phi
[i]Type for reserve1

Name: reserve1 Function: _getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
reserve0_1
reserve0_1
reserve0

Name: reserve0 Function: _getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_1
reserve1_1
reserve1

Name: reserve1 Function: _getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0
_reserve0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1
_reserve1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
_reserve0_1(uint256) := reserve0_1(uint128)
asgn
Finance type key: (-1, -1)
[i]Type for _reserve0

Name: _reserve0 Function: _getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := reserve1_1(uint128)
asgn
Finance type key: (-1, -1)
[i]Type for _reserve1

Name: _reserve1 Function: _getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_38
token0_38
token0

Name: token0 Function: _getReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_reserve0_2
_reserve0_2
_reserve0
_reserve0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_171(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token0_38,_reserve0_1)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
new address made for this
prev address? u
global assignment: 6
6
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: -1
Den: -1
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1
[i]Type for TMP_171

Name: TMP_171 Function: _getReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
_reserve0_2(uint256) := TMP_171(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _reserve0

Name: _reserve0 Function: _getReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1_39
token1_39
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_2
_reserve1_2
_reserve1
_reserve1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_172(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token1_39,_reserve1_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1
[i]Type for TMP_172

Name: TMP_172 Function: _getReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
_reserve1_2(uint256) := TMP_172(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _reserve1

Name: _reserve1 Function: _getReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_2
_reserve0_2
_reserve0

Name: _reserve0 Function: _getReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
_reserve1_2
_reserve1_2
_reserve1

Name: _reserve1 Function: _getReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN _reserve0_2,_reserve1_2
Propogating parameters and globals to SSA variables...
End popogation
token0_38
token0

Name: token0 Function: _getReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_38
token1

Name: token1 Function: _getReserves
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
reserve0_1
reserve0

Name: reserve0 Function: _getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_1
reserve1

Name: reserve1 Function: _getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_38(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
Phi
[i]Type for token0

Name: token0 Function: _getReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_38(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
Phi
[i]Type for token1

Name: token1 Function: _getReserves
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_1(uint128) := ϕ(['reserve0_2', 'reserve0_0'])
Phi
[i]Type for reserve0

Name: reserve0 Function: _getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_1(uint128) := ϕ(['reserve1_0', 'reserve1_2'])
Phi
[i]Type for reserve1

Name: reserve1 Function: _getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
reserve0_1
reserve0_1
reserve0

Name: reserve0 Function: _getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_1
reserve1_1
reserve1

Name: reserve1 Function: _getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0
_reserve0

Name: _reserve0 Function: _getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1
_reserve1

Name: _reserve1 Function: _getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
_reserve0_1(uint256) := reserve0_1(uint128)
asgn
Finance type key: (-1, -1)
[i]Type for _reserve0

Name: _reserve0 Function: _getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := reserve1_1(uint128)
asgn
Finance type key: (-1, -1)
[i]Type for _reserve1

Name: _reserve1 Function: _getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_38
token0_38
token0

Name: token0 Function: _getReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_reserve0_2
_reserve0_2
_reserve0
_reserve0

Name: _reserve0 Function: _getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_171(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token0_38,_reserve0_1)
[i]Type for TMP_171

Name: TMP_171 Function: _getReserves
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
_reserve0_2(uint256) := TMP_171(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _reserve0

Name: _reserve0 Function: _getReserves
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1_39
token1_39
token1

Name: token1 Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_2
_reserve1_2
_reserve1
_reserve1

Name: _reserve1 Function: _getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_172(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token1_39,_reserve1_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1
[i]Type for TMP_172

Name: TMP_172 Function: _getReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
_reserve1_2(uint256) := TMP_172(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _reserve1

Name: _reserve1 Function: _getReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_2
_reserve0_2
_reserve0

Name: _reserve0 Function: _getReserves
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
_reserve1_2
_reserve1_2
_reserve1

Name: _reserve1 Function: _getReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN _reserve0_2,_reserve1_2
[i]Type for TUPLE_6

Name: TUPLE_6 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256)= UNPACK TUPLE_6 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for _reserve0

Name: _reserve0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256)= UNPACK TUPLE_6 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for _reserve1

Name: _reserve1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
balance1_1
balance1_1
balance1
balance1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0
balance0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_7(uint256,uint256) = INTERNAL_CALL, HybridPool._balance()()
Propogating parameters and globals to SSA variables...
End popogation
token0_40
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_41
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
token0_40(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
Phi
[i]Type for token0

Name: token0 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_41(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
Phi
[i]Type for token1

Name: token1 Function: _balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0_40
token0_40
token0

Name: token0 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token0_41
token0_41
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0
balance0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_184(uint256) = INTERNAL_CALL, HybridPool.__balance(address)(token0_40)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_2
bento
bento

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token0_40', 'token1_32', 'token0_35', 'token1_43'])
Phi
[i]Type for token

Name: token Function: __balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token_1
token_1
token

Name: token Function: __balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_2
bento_2
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
___balance_1
___balance_1
___balance
___balance

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_3
bento
bento

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_59 (->None) := 4152920812(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_59

Name: REF_59 Function: __balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4152920812
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_188 = CONVERT this to address
Converting this
6
[i]Type for TMP_188

Name: TMP_188 Function: __balance
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_189(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_59,token_1,TMP_188)
[i]Type for TMP_189

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_21(bool,bytes) = LOW_LEVEL_CALL, dest:bento_2, function:staticcall, arguments:['TMP_189']  
[i]Type for TUPLE_21

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_3(address) := ϕ(['bento_2', 'bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
___balance_1(bytes)= UNPACK TUPLE_21 index: 1 
Finding type for ___balance(bytes ... )
[i]Type for ___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
___balance_1
___balance_1
___balance
___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance_1
balance_1
balance
balance

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_190(uint256) = SOLIDITY_CALL abi.decode()(___balance_1,uint256)
[i]Type for TMP_190

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_190(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: __balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_2
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token0_40', 'token1_32', 'token0_35', 'token1_43'])
Phi
[i]Type for token

Name: token Function: __balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token_1
token_1
token

Name: token Function: __balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_2
bento_2
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
___balance_1
___balance_1
___balance
___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_3
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_59 (->None) := 4152920812(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_59

Name: REF_59 Function: __balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4152920812
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_188 = CONVERT this to address
Converting this
6
[i]Type for TMP_188

Name: TMP_188 Function: __balance
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_189(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_59,token_1,TMP_188)
[i]Type for TMP_189

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_21(bool,bytes) = LOW_LEVEL_CALL, dest:bento_2, function:staticcall, arguments:['TMP_189']  
[i]Type for TUPLE_21

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_3(address) := ϕ(['bento_2', 'bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
___balance_1(bytes)= UNPACK TUPLE_21 index: 1 
Finding type for ___balance(bytes ... )
[i]Type for ___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
___balance_1
___balance_1
___balance
___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance_1
balance_1
balance
balance

Name: balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_190(uint256) = SOLIDITY_CALL abi.decode()(___balance_1,uint256)
[i]Type for TMP_190

Name: TMP_190 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_190(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_184

Name: TMP_184 Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_185(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token0_41,TMP_184)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input
input

Name: input_1 Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input
input

Name: input_1 Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1
[i]Type for TMP_185

Name: TMP_185 Function: _balance
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
balance0_1(uint256) := TMP_185(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for balance0

Name: balance0 Function: _balance
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1_44
token1_44
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
token1_43
token1_43
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1
balance1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_186(uint256) = INTERNAL_CALL, HybridPool.__balance(address)(token1_43)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_2
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token0_40', 'token1_32', 'token0_35', 'token1_43'])
Phi
[i]Type for token

Name: token Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token_1
token_1
token

Name: token Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_2
bento_2
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
___balance_1
___balance_1
___balance
___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_3
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_59 (->None) := 4152920812(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_59

Name: REF_59 Function: __balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4152920812
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_188 = CONVERT this to address
Converting this
6
[i]Type for TMP_188

Name: TMP_188 Function: __balance
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_189(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_59,token_1,TMP_188)
[i]Type for TMP_189

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_21(bool,bytes) = LOW_LEVEL_CALL, dest:bento_2, function:staticcall, arguments:['TMP_189']  
[i]Type for TUPLE_21

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_3(address) := ϕ(['bento_2', 'bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
___balance_1(bytes)= UNPACK TUPLE_21 index: 1 
Finding type for ___balance(bytes ... )
[i]Type for ___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
___balance_1
___balance_1
___balance
___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance_1
balance_1
balance
balance

Name: balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_190(uint256) = SOLIDITY_CALL abi.decode()(___balance_1,uint256)
[i]Type for TMP_190

Name: TMP_190 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_190(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_2
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token0_40', 'token1_32', 'token0_35', 'token1_43'])
Phi
[i]Type for token

Name: token Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token_1
token_1
token

Name: token Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_2
bento_2
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
___balance_1
___balance_1
___balance
___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_3
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_59 (->None) := 4152920812(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_59

Name: REF_59 Function: __balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4152920812
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_188 = CONVERT this to address
Converting this
6
[i]Type for TMP_188

Name: TMP_188 Function: __balance
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_189(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_59,token_1,TMP_188)
[i]Type for TMP_189

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_21(bool,bytes) = LOW_LEVEL_CALL, dest:bento_2, function:staticcall, arguments:['TMP_189']  
[i]Type for TUPLE_21

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_3(address) := ϕ(['bento_2', 'bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
___balance_1(bytes)= UNPACK TUPLE_21 index: 1 
Finding type for ___balance(bytes ... )
[i]Type for ___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
___balance_1
___balance_1
___balance
___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance_1
balance_1
balance
balance

Name: balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_190(uint256) = SOLIDITY_CALL abi.decode()(___balance_1,uint256)
[i]Type for TMP_190

Name: TMP_190 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_190(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_186

Name: TMP_186 Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_187(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token1_44,TMP_186)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input
input

Name: input_1 Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input
input

Name: input_1 Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1
[i]Type for TMP_187

Name: TMP_187 Function: _balance
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
balance1_1(uint256) := TMP_187(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for balance1

Name: balance1 Function: _balance
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balance1_1
balance1_1
balance1

Name: balance1 Function: _balance
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0

Name: balance0 Function: _balance
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN balance0_1,balance1_1
Propogating parameters and globals to SSA variables...
End popogation
token0_40
token0

Name: token0 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_41
token1

Name: token1 Function: _balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
token0_40(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
Phi
[i]Type for token0

Name: token0 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_41(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
Phi
[i]Type for token1

Name: token1 Function: _balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0_40
token0_40
token0

Name: token0 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token0_41
token0_41
token0

Name: token0 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0
balance0

Name: balance0 Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_184(uint256) = INTERNAL_CALL, HybridPool.__balance(address)(token0_40)
[i]Type for TMP_184

Name: TMP_184 Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_185(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token0_41,TMP_184)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input
input

Name: input_1 Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input
input

Name: input_1 Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1
[i]Type for TMP_185

Name: TMP_185 Function: _balance
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
balance0_1(uint256) := TMP_185(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for balance0

Name: balance0 Function: _balance
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1_44
token1_44
token1

Name: token1 Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
token1_43
token1_43
token1

Name: token1 Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1
balance1

Name: balance1 Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_186(uint256) = INTERNAL_CALL, HybridPool.__balance(address)(token1_43)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_2
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token0_40', 'token1_32', 'token0_35', 'token1_43'])
Phi
[i]Type for token

Name: token Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token_1
token_1
token

Name: token Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_2
bento_2
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
___balance_1
___balance_1
___balance
___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_3
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_59 (->None) := 4152920812(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_59

Name: REF_59 Function: __balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4152920812
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_188 = CONVERT this to address
Converting this
6
[i]Type for TMP_188

Name: TMP_188 Function: __balance
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_189(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_59,token_1,TMP_188)
[i]Type for TMP_189

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_21(bool,bytes) = LOW_LEVEL_CALL, dest:bento_2, function:staticcall, arguments:['TMP_189']  
[i]Type for TUPLE_21

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_3(address) := ϕ(['bento_2', 'bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
___balance_1(bytes)= UNPACK TUPLE_21 index: 1 
Finding type for ___balance(bytes ... )
[i]Type for ___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
___balance_1
___balance_1
___balance
___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance_1
balance_1
balance
balance

Name: balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_190(uint256) = SOLIDITY_CALL abi.decode()(___balance_1,uint256)
[i]Type for TMP_190

Name: TMP_190 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_190(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_2
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token0_40', 'token1_32', 'token0_35', 'token1_43'])
Phi
[i]Type for token

Name: token Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token_1
token_1
token

Name: token Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_2
bento_2
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
___balance_1
___balance_1
___balance
___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_3
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_59 (->None) := 4152920812(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_59

Name: REF_59 Function: __balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4152920812
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_188 = CONVERT this to address
Converting this
6
[i]Type for TMP_188

Name: TMP_188 Function: __balance
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_189(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_59,token_1,TMP_188)
[i]Type for TMP_189

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_21(bool,bytes) = LOW_LEVEL_CALL, dest:bento_2, function:staticcall, arguments:['TMP_189']  
[i]Type for TUPLE_21

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_3(address) := ϕ(['bento_2', 'bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
___balance_1(bytes)= UNPACK TUPLE_21 index: 1 
Finding type for ___balance(bytes ... )
[i]Type for ___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
___balance_1
___balance_1
___balance
___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance_1
balance_1
balance
balance

Name: balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_190(uint256) = SOLIDITY_CALL abi.decode()(___balance_1,uint256)
[i]Type for TMP_190

Name: TMP_190 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_190(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_186

Name: TMP_186 Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_187(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token1_44,TMP_186)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input
input

Name: input_1 Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input
input

Name: input_1 Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1
[i]Type for TMP_187

Name: TMP_187 Function: _balance
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
balance1_1(uint256) := TMP_187(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for balance1

Name: balance1 Function: _balance
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balance1_1
balance1_1
balance1

Name: balance1 Function: _balance
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0

Name: balance0 Function: _balance
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN balance0_1,balance1_1
[i]Type for TUPLE_7

Name: TUPLE_7 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance0_1(uint256)= UNPACK TUPLE_7 index: 0 
([-1], [-1], '0', None, -1)
[i]Type for balance0

Name: balance0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance1_1(uint256)= UNPACK TUPLE_7 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for balance1

Name: balance1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
totalSupply_8
totalSupply_8
totalSupply
totalSupply

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_totalSupply_1
_totalSupply_1
_totalSupply
_totalSupply

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
_totalSupply_1(uint256) := totalSupply_8(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _totalSupply

Name: _totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0

Name: balance0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0
amount0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_57(uint256) = balance0_1 (c)- _reserve0_1
SUB1
lnorm: 0 rnorm: u
SUB

Name: balance0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_57

Name: TMP_57 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0_1(uint256) := TMP_57(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount0

Name: amount0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balance1_1
balance1_1
balance1

Name: balance1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1_1
amount1
amount1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_58(uint256) = balance1_1 (c)- _reserve1_1
SUB1
lnorm: 0 rnorm: 0
SUB

Name: balance1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_58

Name: TMP_58 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1_1(uint256) := TMP_58(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount1

Name: amount1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1_1
amount1

Name: amount1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
fee0_1
fee0_1
fee0
fee0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee1_1
fee1_1
fee1
fee1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_8(uint256,uint256) = INTERNAL_CALL, HybridPool._nonOptimalMintFee(uint256,uint256,uint256,uint256)(amount0_1,amount1_1,_reserve0_1,_reserve1_1)
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: _amount0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: _amount1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, -1, 'u']

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _amount0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _amount1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
_amount0_1
_amount0

Name: _amount0_1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_amount1_1
_amount1

Name: _amount1_1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_8
MAX_FEE
MAX_FEE

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_8
swapFee
swapFee

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_amount0_1(uint256) := ϕ(['amount0_1'])
Phi
[i]Type for _amount0

Name: _amount0 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_amount1_1(uint256) := ϕ(['amount1_1'])
Phi
[i]Type for _amount1

Name: _amount1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_8(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_8(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_279(bool) = _reserve0_1 == 0
[i]Type for TMP_279

Name: TMP_279 Function: _nonOptimalMintFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_280(bool) = _reserve1_1 == 0
[i]Type for TMP_280

Name: TMP_280 Function: _nonOptimalMintFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_281(bool) = TMP_279 || TMP_280
[i]Type for TMP_281

Name: TMP_281 Function: _nonOptimalMintFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_amount0_1
_amount0_1
_amount0

Name: _amount0 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1Optimal_1
amount1Optimal_1
amount1Optimal
amount1Optimal

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_282(uint256) = _amount0_1 (c)* _reserve1_1
lnorm: u rnorm: u
[i]Type for TMP_282

Name: TMP_282 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_283(uint256) = TMP_282 (c)/ _reserve0_1
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_283

Name: TMP_283 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1Optimal_1(uint256) := TMP_283(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount1Optimal

Name: amount1Optimal Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_amount1_1
_amount1_1
_amount1

Name: _amount1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1Optimal_1
amount1Optimal_1
amount1Optimal

Name: amount1Optimal Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_284(bool) = amount1Optimal_1 <= _amount1_1
lnorm: u rnorm: u
[i]Type for TMP_284

Name: TMP_284 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_amount1_1
_amount1_1
_amount1

Name: _amount1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0Optimal_1
amount0Optimal_1
amount0Optimal
amount0Optimal

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_289(uint256) = _amount1_1 (c)* _reserve0_1
lnorm: u rnorm: u
[i]Type for TMP_289

Name: TMP_289 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_290(uint256) = TMP_289 (c)/ _reserve1_1
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_290

Name: TMP_290 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0Optimal_1(uint256) := TMP_290(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount0Optimal

Name: amount0Optimal Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_8
MAX_FEE_8
MAX_FEE

Name: MAX_FEE Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_8
swapFee_8
swapFee

Name: swapFee Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_amount1_1
_amount1_1
_amount1

Name: _amount1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1Optimal_1
amount1Optimal_1
amount1Optimal

Name: amount1Optimal Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1Fee_1
token1Fee_1
token1Fee
token1Fee

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_285(uint256) = _amount1_1 (c)- amount1Optimal_1
SUB1
lnorm: u rnorm: u
SUB

Name: _amount1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount1Optimal Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_285

Name: TMP_285 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_286(uint256) = swapFee_8 (c)* TMP_285
lnorm: u rnorm: u
[i]Type for TMP_286

Name: TMP_286 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_287(uint256) = 2 (c)* MAX_FEE_8
lnorm: 0 rnorm: u
[i]Type for TMP_287

Name: TMP_287 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_288(uint256) = TMP_286 (c)/ TMP_287
lnorm: u rnorm: 0
lnorm: u rnorm: 0
[i]Type for TMP_288

Name: TMP_288 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1Fee_1(uint256) := TMP_288(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for token1Fee

Name: token1Fee Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
token0Fee_2
token0Fee
token0Fee

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1Fee_2
token1Fee
token1Fee

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0Fee_2(uint256) := ϕ(['token0Fee_1', 'token0Fee_0'])
Phi
[i]Type for token0Fee

Name: token0Fee Function: _nonOptimalMintFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1Fee_2(uint256) := ϕ(['token1Fee_0', 'token1Fee_1'])
Phi
[i]Type for token1Fee

Name: token1Fee Function: _nonOptimalMintFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
swapFee_8
swapFee_8
swapFee

Name: swapFee Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0Optimal_1
amount0Optimal_1
amount0Optimal

Name: amount0Optimal Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_8
MAX_FEE_8
MAX_FEE

Name: MAX_FEE Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_amount0_1
_amount0_1
_amount0

Name: _amount0 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0Fee_1
token0Fee_1
token0Fee
token0Fee

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_291(uint256) = _amount0_1 (c)- amount0Optimal_1
SUB1
lnorm: u rnorm: u
SUB

Name: _amount0 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount0Optimal Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_291

Name: TMP_291 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_292(uint256) = swapFee_8 (c)* TMP_291
lnorm: u rnorm: u
[i]Type for TMP_292

Name: TMP_292 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_293(uint256) = 2 (c)* MAX_FEE_8
lnorm: 0 rnorm: u
[i]Type for TMP_293

Name: TMP_293 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_294(uint256) = TMP_292 (c)/ TMP_293
lnorm: u rnorm: 0
lnorm: u rnorm: 0
[i]Type for TMP_294

Name: TMP_294 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0Fee_1(uint256) := TMP_294(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for token0Fee

Name: token0Fee Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1Fee_2
token1Fee_2
token1Fee
token1Fee

Name: token1Fee Function: _nonOptimalMintFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0Fee_2
token0Fee_2
token0Fee
token0Fee

Name: token0Fee Function: _nonOptimalMintFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
RETURN token0Fee_2,token1Fee_2
Propogating parameters and globals to SSA variables...
End popogation
RETURN 0,0

Name: _amount0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _amount1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
_amount0_1
_amount0

Name: _amount0_1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_amount1_1
_amount1

Name: _amount1_1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_8
MAX_FEE

Name: MAX_FEE Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_8
swapFee

Name: swapFee Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_amount0_1(uint256) := ϕ(['amount0_1'])
Phi
[i]Type for _amount0

Name: _amount0 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_amount1_1(uint256) := ϕ(['amount1_1'])
Phi
[i]Type for _amount1

Name: _amount1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_8(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_8(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_279(bool) = _reserve0_1 == 0
[i]Type for TMP_279

Name: TMP_279 Function: _nonOptimalMintFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_280(bool) = _reserve1_1 == 0
[i]Type for TMP_280

Name: TMP_280 Function: _nonOptimalMintFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_281(bool) = TMP_279 || TMP_280
[i]Type for TMP_281

Name: TMP_281 Function: _nonOptimalMintFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_amount0_1
_amount0_1
_amount0

Name: _amount0 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1Optimal_1
amount1Optimal_1
amount1Optimal
amount1Optimal

Name: amount1Optimal Function: _nonOptimalMintFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_282(uint256) = _amount0_1 (c)* _reserve1_1
lnorm: u rnorm: u
[i]Type for TMP_282

Name: TMP_282 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_283(uint256) = TMP_282 (c)/ _reserve0_1
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_283

Name: TMP_283 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1Optimal_1(uint256) := TMP_283(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount1Optimal

Name: amount1Optimal Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_amount1_1
_amount1_1
_amount1

Name: _amount1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1Optimal_1
amount1Optimal_1
amount1Optimal

Name: amount1Optimal Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_284(bool) = amount1Optimal_1 <= _amount1_1
lnorm: u rnorm: u
[i]Type for TMP_284

Name: TMP_284 Function: _nonOptimalMintFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_amount1_1
_amount1_1
_amount1

Name: _amount1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0Optimal_1
amount0Optimal_1
amount0Optimal
amount0Optimal

Name: amount0Optimal Function: _nonOptimalMintFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_289(uint256) = _amount1_1 (c)* _reserve0_1
lnorm: u rnorm: u
[i]Type for TMP_289

Name: TMP_289 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_290(uint256) = TMP_289 (c)/ _reserve1_1
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_290

Name: TMP_290 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0Optimal_1(uint256) := TMP_290(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount0Optimal

Name: amount0Optimal Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_8
MAX_FEE_8
MAX_FEE

Name: MAX_FEE Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_8
swapFee_8
swapFee

Name: swapFee Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_amount1_1
_amount1_1
_amount1

Name: _amount1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1Optimal_1
amount1Optimal_1
amount1Optimal

Name: amount1Optimal Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1Fee_1
token1Fee_1
token1Fee
token1Fee

Name: token1Fee Function: _nonOptimalMintFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_285(uint256) = _amount1_1 (c)- amount1Optimal_1
SUB1
lnorm: u rnorm: u
SUB

Name: _amount1 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount1Optimal Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_285

Name: TMP_285 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_286(uint256) = swapFee_8 (c)* TMP_285
lnorm: u rnorm: u
[i]Type for TMP_286

Name: TMP_286 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_287(uint256) = 2 (c)* MAX_FEE_8
lnorm: 0 rnorm: u
[i]Type for TMP_287

Name: TMP_287 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_288(uint256) = TMP_286 (c)/ TMP_287
lnorm: u rnorm: 0
lnorm: u rnorm: 0
[i]Type for TMP_288

Name: TMP_288 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1Fee_1(uint256) := TMP_288(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for token1Fee

Name: token1Fee Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
token0Fee_2
token0Fee
token0Fee

Name: token0Fee Function: _nonOptimalMintFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1Fee_2
token1Fee
token1Fee

Name: token1Fee Function: _nonOptimalMintFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0Fee_2(uint256) := ϕ(['token0Fee_1', 'token0Fee_0'])
Phi
[i]Type for token0Fee

Name: token0Fee Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1Fee_2(uint256) := ϕ(['token1Fee_0', 'token1Fee_1'])
Phi
[i]Type for token1Fee

Name: token1Fee Function: _nonOptimalMintFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
swapFee_8
swapFee_8
swapFee

Name: swapFee Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0Optimal_1
amount0Optimal_1
amount0Optimal

Name: amount0Optimal Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_8
MAX_FEE_8
MAX_FEE

Name: MAX_FEE Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_amount0_1
_amount0_1
_amount0

Name: _amount0 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0Fee_1
token0Fee_1
token0Fee
token0Fee

Name: token0Fee Function: _nonOptimalMintFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_291(uint256) = _amount0_1 (c)- amount0Optimal_1
SUB1
lnorm: u rnorm: u
SUB

Name: _amount0 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount0Optimal Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_291

Name: TMP_291 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_292(uint256) = swapFee_8 (c)* TMP_291
lnorm: u rnorm: u
[i]Type for TMP_292

Name: TMP_292 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_293(uint256) = 2 (c)* MAX_FEE_8
lnorm: 0 rnorm: u
[i]Type for TMP_293

Name: TMP_293 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_294(uint256) = TMP_292 (c)/ TMP_293
lnorm: u rnorm: 0
lnorm: u rnorm: 0
[i]Type for TMP_294

Name: TMP_294 Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0Fee_1(uint256) := TMP_294(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for token0Fee

Name: token0Fee Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1Fee_2
token1Fee_2
token1Fee
token1Fee

Name: token1Fee Function: _nonOptimalMintFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0Fee_2
token0Fee_2
token0Fee

Name: token0Fee Function: _nonOptimalMintFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
RETURN token0Fee_2,token1Fee_2
Propogating parameters and globals to SSA variables...
End popogation
RETURN 0,0
[i]Type for TUPLE_8

Name: TUPLE_8 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee0_1(uint256)= UNPACK TUPLE_8 index: 0 
([-1], [-1], 0, None, -1)
[i]Type for fee0

Name: fee0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee1_1(uint256)= UNPACK TUPLE_8 index: 1 
([-1], [-1], 0, None, -1)
[i]Type for fee1

Name: fee1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balance1_1
balance1_1
balance1

Name: balance1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
fee0_1
fee0_1
fee0

Name: fee0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
fee1_1
fee1_1
fee1

Name: fee1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0

Name: balance0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
newLiq_1
newLiq_1
newLiq
newLiq

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_59(uint256) = balance0_1 (c)- fee0_1
SUB1
Error with TMP_59 in function mint
Error with: TMP_59 in function mint
lnorm: 0 rnorm: 0
SUB

Name: balance0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: fee0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_59

Name: TMP_59 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_60(uint256) = balance1_1 (c)- fee1_1
SUB1
Error with TMP_60 in function mint
Error with: TMP_60 in function mint
lnorm: 0 rnorm: 0
SUB

Name: balance1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: fee1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_60

Name: TMP_60 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_61(uint256) = INTERNAL_CALL, HybridPool._computeLiquidity(uint256,uint256)(TMP_59,TMP_60)
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
_reserve0_1
_reserve0

Name: _reserve0_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_5
token0PrecisionMultiplier
token0PrecisionMultiplier

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_5
token1PrecisionMultiplier
token1PrecisionMultiplier

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1(uint256) := ϕ(['_reserve0_1', 'TMP_59'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', 'TMP_60'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_5(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_5(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_5
token0PrecisionMultiplier_5
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp0_1
xp0_1
xp0
xp0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_212(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_5
lnorm: u rnorm: u
[i]Type for TMP_212

Name: TMP_212 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xp0_1(uint256) := TMP_212(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xp0

Name: xp0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1PrecisionMultiplier_5
token1PrecisionMultiplier_5
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp1_1
xp1_1
xp1
xp1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_213(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_5
lnorm: u rnorm: u
[i]Type for TMP_213

Name: TMP_213 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xp1_1(uint256) := TMP_213(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xp1

Name: xp1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xp1_1
xp1_1
xp1

Name: xp1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp0_1
xp0_1
xp0

Name: xp0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity
liquidity

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_214(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xp0_1,xp1_1)
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: xp0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: xp1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: xp0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: xp1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
xp0_1
xp0

Name: xp0_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp1_1
xp1

Name: xp1_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_LOOP_LIMIT_1
MAX_LOOP_LIMIT
MAX_LOOP_LIMIT

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_2
N_A
N_A

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_PRECISION_1
A_PRECISION
A_PRECISION

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp0_1(uint256) := ϕ(['xp0_1', 'xpIn_3'])
Phi
[i]Type for xp0

Name: xp0 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xp1_1(uint256) := ϕ(['xpOut_3', 'xp1_1'])
Phi
[i]Type for xp1

Name: xp1 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_LOOP_LIMIT_1(uint256) := ϕ(['MAX_LOOP_LIMIT_0'])
Phi
[i]Type for MAX_LOOP_LIMIT

Name: MAX_LOOP_LIMIT Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
N_A_2(uint256) := ϕ(['N_A_0', 'N_A_1'])
Phi
[i]Type for N_A

Name: N_A Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
A_PRECISION_1(uint256) := ϕ(['A_PRECISION_0'])
Phi
[i]Type for A_PRECISION

Name: A_PRECISION Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xp0_1
xp0_1
xp0

Name: xp0 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp1_1
xp1_1
xp1

Name: xp1 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_1
s_1
s
s

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_215(uint256) = xp0_1 (c)+ xp1_1

Name: xp0 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: xp1 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_215

Name: TMP_215 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
s_1(uint256) := TMP_215(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for s

Name: s Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
s_1
s_1
s

Name: s Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_216(bool) = s_1 == 0
[i]Type for TMP_216

Name: TMP_216 Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
computed_1
computed_1
computed
computed

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
computed_1(uint256) := 0(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for computed

Name: computed Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
s_1
s_1
s

Name: s Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_1
D_1
D
D

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
D_1(uint256) := s_1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
i_1
i_1
i
i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
i_1(uint256) := 0(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
i_2
i_2
i
i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_LOOP_LIMIT_1
MAX_LOOP_LIMIT_1
MAX_LOOP_LIMIT

Name: MAX_LOOP_LIMIT Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_2
D_2
D
D

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
i_2
i
i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
D_2
D
D

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
i
i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_2(uint256) := ϕ(['D_3', 'D_1'])
Phi
[i]Type for D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_2(uint256) := ϕ(['i_1', 'i_3'])
Phi
[i]Type for i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = i_2 < MAX_LOOP_LIMIT_1
lnorm: u rnorm: u
[i]Type for TMP_217

Name: TMP_217 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xp0_1
xp0_1
xp0

Name: xp0 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_2
D_2
D
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp1_1
xp1_1
xp1

Name: xp1 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dP_1
dP_1
dP
dP

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_218(uint256) = D_2 (c)* D_2
lnorm: u rnorm: u
[i]Type for TMP_218

Name: TMP_218 Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(uint256) = TMP_218 (c)/ xp0_1
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_219

Name: TMP_219 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(uint256) = TMP_219 (c)* D_2
lnorm: u rnorm: u
[i]Type for TMP_220

Name: TMP_220 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_221(uint256) = TMP_220 (c)/ xp1_1
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_221

Name: TMP_221 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_222(uint256) = TMP_221 (c)/ 4
lnorm: u rnorm: 0
lnorm: u rnorm: 0
[i]Type for TMP_222

Name: TMP_222 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dP_1(uint256) := TMP_222(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dP

Name: dP Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
D_2
D_2
D
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
prevD_1
prevD_1
prevD
prevD

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
prevD_1(uint256) := D_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for prevD

Name: prevD Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
D_3
D_3
D
D

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
computed_2
computed_2
computed
computed

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
computed_2(uint256) := D_3(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for computed

Name: computed Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
D_2
D_2
D
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_PRECISION_1
A_PRECISION_1
A_PRECISION

Name: A_PRECISION Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dP_1
dP_1
dP

Name: dP Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_2
N_A_2
N_A

Name: N_A Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_1
s_1
s

Name: s Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_3
D_3
D
D

Name: D Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_223(uint256) = N_A_2 (c)* s_1
lnorm: u rnorm: u
[i]Type for TMP_223

Name: TMP_223 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_224(uint256) = TMP_223 (c)/ A_PRECISION_1
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_225(uint256) = 2 (c)* dP_1
lnorm: 0 rnorm: 0
[i]Type for TMP_225

Name: TMP_225 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_226(uint256) = TMP_224 (c)+ TMP_225

Name: TMP_224 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_225 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 0
[i]Type for TMP_226

Name: TMP_226 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_227(uint256) = TMP_226 (c)* D_2
lnorm: 0 rnorm: u
[i]Type for TMP_227

Name: TMP_227 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = N_A_2 (c)/ A_PRECISION_1
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_228

Name: TMP_228 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = TMP_228 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_228 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_229

Name: TMP_229 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_230(uint256) = TMP_229 (c)* D_2
lnorm: 0 rnorm: u
[i]Type for TMP_230

Name: TMP_230 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = 3 (c)* dP_1
lnorm: 0 rnorm: 0
[i]Type for TMP_231

Name: TMP_231 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_232(uint256) = TMP_230 (c)+ TMP_231

Name: TMP_230 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_231 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 0 rnorm: 0
[i]Type for TMP_232

Name: TMP_232 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_227 (c)/ TMP_232
lnorm: 0 rnorm: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_233

Name: TMP_233 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
D_3(uint256) := TMP_233(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
prevD_1
prevD_1
prevD
prevD

Name: prevD Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_3
D_3
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_234(bool) = LIBRARY_CALL, dest:MathUtils, function:MathUtils.within1(uint256,uint256), arguments:['D_3', 'prevD_1'] 
[i]Type for TMP_234

Name: TMP_234 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
i_2
i_2
i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_3
i_3
i
i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_235(uint256) := i_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_235

Name: TMP_235 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
i_3(uint256) = i_2 (c)+ 1

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 0
[i]Type for i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX

Name: xp0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: xp1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
xp0_1
xp0

Name: xp0_1 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp1_1
xp1

Name: xp1_1 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_LOOP_LIMIT_1
MAX_LOOP_LIMIT

Name: MAX_LOOP_LIMIT Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_2
N_A

Name: N_A Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_PRECISION_1
A_PRECISION

Name: A_PRECISION Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp0_1(uint256) := ϕ(['xp0_1', 'xpIn_3'])
Phi
[i]Type for xp0

Name: xp0 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xp1_1(uint256) := ϕ(['xpOut_3', 'xp1_1'])
Phi
[i]Type for xp1

Name: xp1 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_LOOP_LIMIT_1(uint256) := ϕ(['MAX_LOOP_LIMIT_0'])
Phi
[i]Type for MAX_LOOP_LIMIT

Name: MAX_LOOP_LIMIT Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
N_A_2(uint256) := ϕ(['N_A_0', 'N_A_1'])
Phi
[i]Type for N_A

Name: N_A Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
A_PRECISION_1(uint256) := ϕ(['A_PRECISION_0'])
Phi
[i]Type for A_PRECISION

Name: A_PRECISION Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xp0_1
xp0_1
xp0

Name: xp0 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp1_1
xp1_1
xp1

Name: xp1 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_1
s_1
s
s

Name: s Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_215(uint256) = xp0_1 (c)+ xp1_1

Name: xp0 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: xp1 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_215

Name: TMP_215 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
s_1(uint256) := TMP_215(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for s

Name: s Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
s_1
s_1
s

Name: s Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_216(bool) = s_1 == 0
[i]Type for TMP_216

Name: TMP_216 Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
computed_1
computed_1
computed
computed

Name: computed Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
computed_1(uint256) := 0(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for computed

Name: computed Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
s_1
s_1
s

Name: s Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_1
D_1
D
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
D_1(uint256) := s_1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
i_1
i_1
i
i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
i_1(uint256) := 0(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
i_2
i_2
i
i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
MAX_LOOP_LIMIT_1
MAX_LOOP_LIMIT_1
MAX_LOOP_LIMIT

Name: MAX_LOOP_LIMIT Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_2
D_2
D
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
i_2
i
i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
D_2
D
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
i
i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
D_2(uint256) := ϕ(['D_3', 'D_1'])
Phi
[i]Type for D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_2(uint256) := ϕ(['i_1', 'i_3'])
Phi
[i]Type for i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = i_2 < MAX_LOOP_LIMIT_1
lnorm: u rnorm: u
[i]Type for TMP_217

Name: TMP_217 Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xp0_1
xp0_1
xp0

Name: xp0 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_2
D_2
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp1_1
xp1_1
xp1

Name: xp1 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dP_1
dP_1
dP
dP

Name: dP Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_218(uint256) = D_2 (c)* D_2
lnorm: u rnorm: u
[i]Type for TMP_218

Name: TMP_218 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(uint256) = TMP_218 (c)/ xp0_1
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_219

Name: TMP_219 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(uint256) = TMP_219 (c)* D_2
lnorm: u rnorm: u
[i]Type for TMP_220

Name: TMP_220 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_221(uint256) = TMP_220 (c)/ xp1_1
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_221

Name: TMP_221 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_222(uint256) = TMP_221 (c)/ 4
lnorm: u rnorm: 0
lnorm: u rnorm: 0
[i]Type for TMP_222

Name: TMP_222 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dP_1(uint256) := TMP_222(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dP

Name: dP Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
D_2
D_2
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
prevD_1
prevD_1
prevD
prevD

Name: prevD Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
prevD_1(uint256) := D_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for prevD

Name: prevD Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
D_3
D_3
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
computed_2
computed_2
computed
computed

Name: computed Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
computed_2(uint256) := D_3(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for computed

Name: computed Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
D_2
D_2
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_PRECISION_1
A_PRECISION_1
A_PRECISION

Name: A_PRECISION Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dP_1
dP_1
dP

Name: dP Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_2
N_A_2
N_A

Name: N_A Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_1
s_1
s

Name: s Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_3
D_3
D
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_223(uint256) = N_A_2 (c)* s_1
lnorm: u rnorm: u
[i]Type for TMP_223

Name: TMP_223 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_224(uint256) = TMP_223 (c)/ A_PRECISION_1
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_225(uint256) = 2 (c)* dP_1
lnorm: 0 rnorm: 0
[i]Type for TMP_225

Name: TMP_225 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_226(uint256) = TMP_224 (c)+ TMP_225

Name: TMP_224 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_225 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 0
[i]Type for TMP_226

Name: TMP_226 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_227(uint256) = TMP_226 (c)* D_2
lnorm: 0 rnorm: u
[i]Type for TMP_227

Name: TMP_227 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = N_A_2 (c)/ A_PRECISION_1
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_228

Name: TMP_228 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = TMP_228 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_228 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_229

Name: TMP_229 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_230(uint256) = TMP_229 (c)* D_2
lnorm: 0 rnorm: u
[i]Type for TMP_230

Name: TMP_230 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = 3 (c)* dP_1
lnorm: 0 rnorm: 0
[i]Type for TMP_231

Name: TMP_231 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_232(uint256) = TMP_230 (c)+ TMP_231

Name: TMP_230 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_231 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 0 rnorm: 0
[i]Type for TMP_232

Name: TMP_232 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_227 (c)/ TMP_232
lnorm: 0 rnorm: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_233

Name: TMP_233 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
D_3(uint256) := TMP_233(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
prevD_1
prevD_1
prevD

Name: prevD Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_3
D_3
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_234(bool) = LIBRARY_CALL, dest:MathUtils, function:MathUtils.within1(uint256,uint256), arguments:['D_3', 'prevD_1'] 
[i]Type for TMP_234

Name: TMP_234 Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
i_2
i_2
i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_3
i_3
i
i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_235(uint256) := i_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_235

Name: TMP_235 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
i_3(uint256) = i_2 (c)+ 1

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 0
[i]Type for i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX

Name: xp0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: xp1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
xp0_1
xp0

Name: xp0 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp1_1
xp1

Name: xp1 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_LOOP_LIMIT_1
MAX_LOOP_LIMIT

Name: MAX_LOOP_LIMIT Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_2
N_A

Name: N_A Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_PRECISION_1
A_PRECISION

Name: A_PRECISION Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp0_1(uint256) := ϕ(['xp0_1', 'xpIn_3'])
Phi
[i]Type for xp0

Name: xp0 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xp1_1(uint256) := ϕ(['xpOut_3', 'xp1_1'])
Phi
[i]Type for xp1

Name: xp1 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_LOOP_LIMIT_1(uint256) := ϕ(['MAX_LOOP_LIMIT_0'])
Phi
[i]Type for MAX_LOOP_LIMIT

Name: MAX_LOOP_LIMIT Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
N_A_2(uint256) := ϕ(['N_A_0', 'N_A_1'])
Phi
[i]Type for N_A

Name: N_A Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
A_PRECISION_1(uint256) := ϕ(['A_PRECISION_0'])
Phi
[i]Type for A_PRECISION

Name: A_PRECISION Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xp0_1
xp0_1
xp0

Name: xp0 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp1_1
xp1_1
xp1

Name: xp1 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_1
s_1
s

Name: s Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_215(uint256) = xp0_1 (c)+ xp1_1

Name: xp0 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: xp1 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_215

Name: TMP_215 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
s_1(uint256) := TMP_215(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for s

Name: s Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
s_1
s_1
s

Name: s Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_216(bool) = s_1 == 0
[i]Type for TMP_216

Name: TMP_216 Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
computed_1
computed_1
computed

Name: computed Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
computed_1(uint256) := 0(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for computed

Name: computed Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
s_1
s_1
s

Name: s Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_1
D_1
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
D_1(uint256) := s_1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
i_1
i_1
i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
i_1(uint256) := 0(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
i_2
i_2
i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
MAX_LOOP_LIMIT_1
MAX_LOOP_LIMIT_1
MAX_LOOP_LIMIT

Name: MAX_LOOP_LIMIT Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_2
D_2
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
i_2
i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
D_2
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
D_2(uint256) := ϕ(['D_3', 'D_1'])
Phi
[i]Type for D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_2(uint256) := ϕ(['i_1', 'i_3'])
Phi
[i]Type for i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = i_2 < MAX_LOOP_LIMIT_1
lnorm: u rnorm: u
[i]Type for TMP_217

Name: TMP_217 Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xp0_1
xp0_1
xp0

Name: xp0 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_2
D_2
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp1_1
xp1_1
xp1

Name: xp1 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dP_1
dP_1
dP

Name: dP Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_218(uint256) = D_2 (c)* D_2
lnorm: u rnorm: u
[i]Type for TMP_218

Name: TMP_218 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(uint256) = TMP_218 (c)/ xp0_1
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_219

Name: TMP_219 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(uint256) = TMP_219 (c)* D_2
lnorm: u rnorm: u
[i]Type for TMP_220

Name: TMP_220 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_221(uint256) = TMP_220 (c)/ xp1_1
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_221

Name: TMP_221 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_222(uint256) = TMP_221 (c)/ 4
lnorm: u rnorm: 0
lnorm: u rnorm: 0
[i]Type for TMP_222

Name: TMP_222 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dP_1(uint256) := TMP_222(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dP

Name: dP Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
D_2
D_2
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
prevD_1
prevD_1
prevD

Name: prevD Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
prevD_1(uint256) := D_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for prevD

Name: prevD Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
D_3
D_3
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
computed_2
computed_2
computed

Name: computed Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
computed_2(uint256) := D_3(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for computed

Name: computed Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
D_2
D_2
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_PRECISION_1
A_PRECISION_1
A_PRECISION

Name: A_PRECISION Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dP_1
dP_1
dP

Name: dP Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_2
N_A_2
N_A

Name: N_A Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_1
s_1
s

Name: s Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_3
D_3
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_223(uint256) = N_A_2 (c)* s_1
lnorm: u rnorm: u
[i]Type for TMP_223

Name: TMP_223 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_224(uint256) = TMP_223 (c)/ A_PRECISION_1
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_225(uint256) = 2 (c)* dP_1
lnorm: 0 rnorm: 0
[i]Type for TMP_225

Name: TMP_225 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_226(uint256) = TMP_224 (c)+ TMP_225

Name: TMP_224 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_225 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 0
[i]Type for TMP_226

Name: TMP_226 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_227(uint256) = TMP_226 (c)* D_2
lnorm: 0 rnorm: u
[i]Type for TMP_227

Name: TMP_227 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = N_A_2 (c)/ A_PRECISION_1
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_228

Name: TMP_228 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = TMP_228 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_228 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_229

Name: TMP_229 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_230(uint256) = TMP_229 (c)* D_2
lnorm: 0 rnorm: u
[i]Type for TMP_230

Name: TMP_230 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = 3 (c)* dP_1
lnorm: 0 rnorm: 0
[i]Type for TMP_231

Name: TMP_231 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_232(uint256) = TMP_230 (c)+ TMP_231

Name: TMP_230 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_231 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 0 rnorm: 0
[i]Type for TMP_232

Name: TMP_232 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_227 (c)/ TMP_232
lnorm: 0 rnorm: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_233

Name: TMP_233 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
D_3(uint256) := TMP_233(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
prevD_1
prevD_1
prevD

Name: prevD Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_3
D_3
D

Name: D Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_234(bool) = LIBRARY_CALL, dest:MathUtils, function:MathUtils.within1(uint256,uint256), arguments:['D_3', 'prevD_1'] 
[i]Type for TMP_234

Name: TMP_234 Function: _computeLiquidityFromAdjustedBalances
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
i_2
i_2
i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_3
i_3
i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
TMP_235(uint256) := i_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_235

Name: TMP_235 Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
i_3(uint256) = i_2 (c)+ 1

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 0
[i]Type for i

Name: i Function: _computeLiquidityFromAdjustedBalances
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_214

Name: TMP_214 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_1(uint256) := TMP_214(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_5
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_5
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1(uint256) := ϕ(['_reserve0_1', 'TMP_59'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', 'TMP_60'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_5(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_5(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_5
token0PrecisionMultiplier_5
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp0_1
xp0_1
xp0
xp0

Name: xp0 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_212(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_5
lnorm: u rnorm: u
[i]Type for TMP_212

Name: TMP_212 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xp0_1(uint256) := TMP_212(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xp0

Name: xp0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1PrecisionMultiplier_5
token1PrecisionMultiplier_5
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp1_1
xp1_1
xp1
xp1

Name: xp1 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_213(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_5
lnorm: u rnorm: u
[i]Type for TMP_213

Name: TMP_213 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xp1_1(uint256) := TMP_213(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xp1

Name: xp1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xp1_1
xp1_1
xp1

Name: xp1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp0_1
xp0_1
xp0

Name: xp0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity
liquidity

Name: liquidity Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_214(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xp0_1,xp1_1)
[i]Type for TMP_214

Name: TMP_214 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_1(uint256) := TMP_214(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_61

Name: TMP_61 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newLiq_1(uint256) := TMP_61(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for newLiq

Name: newLiq Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_totalSupply_1
_totalSupply_1
_totalSupply

Name: _totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_62(bool) = _totalSupply_1 == 0
[i]Type for TMP_62

Name: TMP_62 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MINIMUM_LIQUIDITY_6
MINIMUM_LIQUIDITY_6
MINIMUM_LIQUIDITY
MINIMUM_LIQUIDITY

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newLiq_1
newLiq_1
newLiq
newLiq

Name: newLiq Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_2
liquidity_2
liquidity
liquidity

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_63(uint256) = newLiq_1 (c)- MINIMUM_LIQUIDITY_6
SUB1
lnorm: u rnorm: u
SUB

Name: newLiq Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: MINIMUM_LIQUIDITY Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_63

Name: TMP_63 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_2(uint256) := TMP_63(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MINIMUM_LIQUIDITY_6
MINIMUM_LIQUIDITY_6
MINIMUM_LIQUIDITY

Name: MINIMUM_LIQUIDITY Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_64 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_64

Name: TMP_64 Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, TridentERC20._mint(address,uint256)(TMP_64,MINIMUM_LIQUIDITY_6)
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
recipient_1
recipient

Name: recipient_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_1
totalSupply
totalSupply

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_7
balanceOf
balanceOf

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1(address) := ϕ(['TMP_64', 'recipient_1'])
Phi
[i]Type for recipient

Name: recipient Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['MINIMUM_LIQUIDITY_6', 'liquidity_3'])
Phi
[i]Type for amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalSupply_1(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOf_7(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_1
totalSupply_1
totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_2
totalSupply_2
totalSupply
totalSupply

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
totalSupply_2(uint256) = totalSupply_1 (c)+ amount_1

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_8
balanceOf_8
balanceOf
balanceOf

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
balanceOf_8
balanceOf_8
balanceOf

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
balanceOf_8
balanceOf

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_16(uint256) -> balanceOf_7[recipient_1]
INDEX
[i]Type for REF_16

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
balanceOf_8(mapping(address => uint256)) := ϕ(['balanceOf_7'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_16(-> balanceOf_8) = REF_16 + amount_1

Name: REF_16 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for REF_16

Name: REF_16 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_28 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_28

Name: TMP_28 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
recipient_1
recipient

Name: recipient_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_1
totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_7
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1(address) := ϕ(['TMP_64', 'recipient_1'])
Phi
[i]Type for recipient

Name: recipient Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['MINIMUM_LIQUIDITY_6', 'liquidity_3'])
Phi
[i]Type for amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalSupply_1(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOf_7(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_1
totalSupply_1
totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_2
totalSupply_2
totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
totalSupply_2(uint256) = totalSupply_1 (c)+ amount_1

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_8
balanceOf_8
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
balanceOf_8
balanceOf_8
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
balanceOf_8
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_16(uint256) -> balanceOf_7[recipient_1]
INDEX
[i]Type for REF_16

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
balanceOf_8(mapping(address => uint256)) := ϕ(['balanceOf_7'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_16(-> balanceOf_8) = REF_16 + amount_1

Name: REF_16 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for REF_16

Name: REF_16 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_28 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_28

Name: TMP_28 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
oldLiq_1
oldLiq_1
oldLiq
oldLiq

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_66(uint256) = INTERNAL_CALL, HybridPool._computeLiquidity(uint256,uint256)(_reserve0_1,_reserve1_1)
[[-1], [-1], 'u', None, [], -1, -1, 'u']

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_5
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_5
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1(uint256) := ϕ(['_reserve0_1', 'TMP_59'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', 'TMP_60'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_5(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_5(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_5
token0PrecisionMultiplier_5
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp0_1
xp0_1
xp0
xp0

Name: xp0 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_212(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_5
lnorm: u rnorm: u
[i]Type for TMP_212

Name: TMP_212 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xp0_1(uint256) := TMP_212(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xp0

Name: xp0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1PrecisionMultiplier_5
token1PrecisionMultiplier_5
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp1_1
xp1_1
xp1
xp1

Name: xp1 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_213(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_5
lnorm: u rnorm: u
[i]Type for TMP_213

Name: TMP_213 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xp1_1(uint256) := TMP_213(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xp1

Name: xp1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xp1_1
xp1_1
xp1

Name: xp1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp0_1
xp0_1
xp0

Name: xp0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity
liquidity

Name: liquidity Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_214(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xp0_1,xp1_1)
[i]Type for TMP_214

Name: TMP_214 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_1(uint256) := TMP_214(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_5
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_5
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1(uint256) := ϕ(['_reserve0_1', 'TMP_59'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', 'TMP_60'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_5(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_5(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_5
token0PrecisionMultiplier_5
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp0_1
xp0_1
xp0
xp0

Name: xp0 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_212(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_5
lnorm: u rnorm: u
[i]Type for TMP_212

Name: TMP_212 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xp0_1(uint256) := TMP_212(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xp0

Name: xp0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1PrecisionMultiplier_5
token1PrecisionMultiplier_5
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp1_1
xp1_1
xp1
xp1

Name: xp1 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_213(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_5
lnorm: u rnorm: u
[i]Type for TMP_213

Name: TMP_213 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xp1_1(uint256) := TMP_213(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xp1

Name: xp1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xp1_1
xp1_1
xp1

Name: xp1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp0_1
xp0_1
xp0

Name: xp0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity
liquidity

Name: liquidity Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_214(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xp0_1,xp1_1)
[i]Type for TMP_214

Name: TMP_214 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_1(uint256) := TMP_214(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_66

Name: TMP_66 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
oldLiq_1(uint256) := TMP_66(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for oldLiq

Name: oldLiq Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_totalSupply_1
_totalSupply_1
_totalSupply

Name: _totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newLiq_1
newLiq_1
newLiq
newLiq

Name: newLiq Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
oldLiq_1
oldLiq_1
oldLiq
oldLiq

Name: oldLiq Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity
liquidity

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_67(uint256) = newLiq_1 (c)- oldLiq_1
SUB1
lnorm: u rnorm: u
SUB

Name: newLiq Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: oldLiq Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_67

Name: TMP_67 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_68(uint256) = TMP_67 (c)* _totalSupply_1
lnorm: u rnorm: u
[i]Type for TMP_68

Name: TMP_68 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_69(uint256) = TMP_68 (c)/ oldLiq_1
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_69

Name: TMP_69 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_1(uint256) := TMP_69(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
liquidity_3
liquidity
liquidity

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_3(uint256) := ϕ(['liquidity_1', 'liquidity_2'])
Phi
[i]Type for liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
liquidity_3
liquidity_3
liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_70(bool) = liquidity_3 != 0
[i]Type for TMP_70

Name: TMP_70 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,INSUFFICIENT_LIQUIDITY_MINTED)
[i]Type for TMP_71

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
liquidity_3
liquidity_3
liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient
recipient

Name: recipient Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, TridentERC20._mint(address,uint256)(recipient_1,liquidity_3)
[[], [], 'u', None, [], -1, 'u', 'u']

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
recipient_1
recipient
recipient

Name: recipient_1 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_1
totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_7
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1(address) := ϕ(['TMP_64', 'recipient_1'])
Phi
[i]Type for recipient

Name: recipient Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['MINIMUM_LIQUIDITY_6', 'liquidity_3'])
Phi
[i]Type for amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalSupply_1(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOf_7(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_1
totalSupply_1
totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_2
totalSupply_2
totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
totalSupply_2(uint256) = totalSupply_1 (c)+ amount_1

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_8
balanceOf_8
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
balanceOf_8
balanceOf_8
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
balanceOf_8
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_16(uint256) -> balanceOf_7[recipient_1]
INDEX
[i]Type for REF_16

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
balanceOf_8(mapping(address => uint256)) := ϕ(['balanceOf_7'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_16(-> balanceOf_8) = REF_16 + amount_1

Name: REF_16 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for REF_16

Name: REF_16 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_28 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_28

Name: TMP_28 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
recipient_1
recipient
recipient

Name: recipient_1 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_1
totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_7
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1(address) := ϕ(['TMP_64', 'recipient_1'])
Phi
[i]Type for recipient

Name: recipient Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['MINIMUM_LIQUIDITY_6', 'liquidity_3'])
Phi
[i]Type for amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalSupply_1(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOf_7(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_1
totalSupply_1
totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_2
totalSupply_2
totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
totalSupply_2(uint256) = totalSupply_1 (c)+ amount_1

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_8
balanceOf_8
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
balanceOf_8
balanceOf_8
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
balanceOf_8
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_16(uint256) -> balanceOf_7[recipient_1]
INDEX
[i]Type for REF_16

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
balanceOf_8(mapping(address => uint256)) := ϕ(['balanceOf_7'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_16(-> balanceOf_8) = REF_16 + amount_1

Name: REF_16 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for REF_16

Name: REF_16 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_28 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_28

Name: TMP_28 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, HybridPool._updateReserves()()
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1
_reserve1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0
_reserve0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_20(uint256,uint256) = INTERNAL_CALL, HybridPool._balance()()
[i]Type for TUPLE_20

Name: TUPLE_20 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256)= UNPACK TUPLE_20 index: 0 
([-1], [-1], '0', None, -1)
[i]Type for _reserve0

Name: _reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256)= UNPACK TUPLE_20 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for _reserve1

Name: _reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_174(uint128) := 340282366920938463463374607431768211455(uint128)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_174

Name: TMP_174 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 340282366920938463463374607431768211455
Fields: 
Finance Type: undef
XXXX
TMP_175(bool) = _reserve0_1 < TMP_174
lnorm: 0 rnorm: u
[i]Type for TMP_175

Name: TMP_175 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_177(uint128) := 340282366920938463463374607431768211455(uint128)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_177

Name: TMP_177 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 340282366920938463463374607431768211455
Fields: 
Finance Type: undef
XXXX
TMP_178(bool) = _reserve1_1 < TMP_177
lnorm: 0 rnorm: u
[i]Type for TMP_178

Name: TMP_178 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_179(bool) = TMP_175 && TMP_178
[i]Type for TMP_179

Name: TMP_179 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_180(None) = SOLIDITY_CALL require(bool,string)(TMP_179,OVERFLOW)
[i]Type for TMP_180

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_2
reserve0_2
reserve0
reserve0

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_181 = CONVERT _reserve0_1 to uint128
Converting _reserve0_1

Name: _reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_181

Name: TMP_181 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_2(uint128) := TMP_181(uint128)
asgn
Finance type key: (-1, -1)
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_2
reserve1_2
reserve1
reserve1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_182 = CONVERT _reserve1_1 to uint128
Converting _reserve1_1

Name: _reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_182

Name: TMP_182 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_2(uint128) := TMP_182(uint128)
asgn
Finance type key: (-1, -1)
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1
_reserve1

Name: _reserve1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0
_reserve0

Name: _reserve0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_20(uint256,uint256) = INTERNAL_CALL, HybridPool._balance()()
[i]Type for TUPLE_20

Name: TUPLE_20 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256)= UNPACK TUPLE_20 index: 0 
([-1], [-1], '0', None, -1)
[i]Type for _reserve0

Name: _reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256)= UNPACK TUPLE_20 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for _reserve1

Name: _reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_174(uint128) := 340282366920938463463374607431768211455(uint128)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_174

Name: TMP_174 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 340282366920938463463374607431768211455
Fields: 
Finance Type: undef
XXXX
TMP_175(bool) = _reserve0_1 < TMP_174
lnorm: 0 rnorm: u
[i]Type for TMP_175

Name: TMP_175 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_177(uint128) := 340282366920938463463374607431768211455(uint128)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_177

Name: TMP_177 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 340282366920938463463374607431768211455
Fields: 
Finance Type: undef
XXXX
TMP_178(bool) = _reserve1_1 < TMP_177
lnorm: 0 rnorm: u
[i]Type for TMP_178

Name: TMP_178 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_179(bool) = TMP_175 && TMP_178
[i]Type for TMP_179

Name: TMP_179 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_180(None) = SOLIDITY_CALL require(bool,string)(TMP_179,OVERFLOW)
[i]Type for TMP_180

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_2
reserve0_2
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_181 = CONVERT _reserve0_1 to uint128
Converting _reserve0_1

Name: _reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_181

Name: TMP_181 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_2(uint128) := TMP_181(uint128)
asgn
Finance type key: (-1, -1)
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_2
reserve1_2
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_182 = CONVERT _reserve1_1 to uint128
Converting _reserve1_1

Name: _reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_182

Name: TMP_182 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_2(uint128) := TMP_182(uint128)
asgn
Finance type key: (-1, -1)
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
amount1_1
amount1_1
amount1

Name: amount1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient
recipient

Name: recipient Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation


totalSupply_5(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
MINIMUM_LIQUIDITY_1(uint256) := ϕ(['MINIMUM_LIQUIDITY_6', 'MINIMUM_LIQUIDITY_0', 'MINIMUM_LIQUIDITY_7'])
MODIFIER_CALL, HybridPool.lock()()
TMP_56(address) = SOLIDITY_CALL abi.decode()(data_1,address)
recipient_1(address) := TMP_56(address)
TUPLE_6(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
_reserve0_1(uint256)= UNPACK TUPLE_6 index: 0 
_reserve1_1(uint256)= UNPACK TUPLE_6 index: 1 
TUPLE_7(uint256,uint256) = INTERNAL_CALL, HybridPool._balance()()
balance0_1(uint256)= UNPACK TUPLE_7 index: 0 
balance1_1(uint256)= UNPACK TUPLE_7 index: 1 
_totalSupply_1(uint256) := totalSupply_8(uint256)
TMP_57(uint256) = balance0_1 (c)- _reserve0_1
amount0_1(uint256) := TMP_57(uint256)
TMP_58(uint256) = balance1_1 (c)- _reserve1_1
amount1_1(uint256) := TMP_58(uint256)
TUPLE_8(uint256,uint256) = INTERNAL_CALL, HybridPool._nonOptimalMintFee(uint256,uint256,uint256,uint256)(amount0_1,amount1_1,_reserve0_1,_reserve1_1)
fee0_1(uint256)= UNPACK TUPLE_8 index: 0 
fee1_1(uint256)= UNPACK TUPLE_8 index: 1 
TMP_59(uint256) = balance0_1 (c)- fee0_1
TMP_60(uint256) = balance1_1 (c)- fee1_1
TMP_61(uint256) = INTERNAL_CALL, HybridPool._computeLiquidity(uint256,uint256)(TMP_59,TMP_60)
newLiq_1(uint256) := TMP_61(uint256)
TMP_62(bool) = _totalSupply_1 == 0
CONDITION TMP_62
TMP_63(uint256) = newLiq_1 (c)- MINIMUM_LIQUIDITY_6
liquidity_2(uint256) := TMP_63(uint256)
TMP_64 = CONVERT 0 to address
INTERNAL_CALL, TridentERC20._mint(address,uint256)(TMP_64,MINIMUM_LIQUIDITY_6)
TMP_66(uint256) = INTERNAL_CALL, HybridPool._computeLiquidity(uint256,uint256)(_reserve0_1,_reserve1_1)
oldLiq_1(uint256) := TMP_66(uint256)
TMP_67(uint256) = newLiq_1 (c)- oldLiq_1
TMP_68(uint256) = TMP_67 (c)* _totalSupply_1
TMP_69(uint256) = TMP_68 (c)/ oldLiq_1
liquidity_1(uint256) := TMP_69(uint256)
liquidity_3(uint256) := ϕ(['liquidity_1', 'liquidity_2'])
TMP_70(bool) = liquidity_3 != 0
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,INSUFFICIENT_LIQUIDITY_MINTED)
INTERNAL_CALL, TridentERC20._mint(address,uint256)(recipient_1,liquidity_3)
INTERNAL_CALL, HybridPool._updateReserves()()
Emit Mint(msg.sender,amount0_1,amount1_1,recipient_1)


Propogating parameters and globals to SSA variables...
End popogation
totalSupply_5
totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MINIMUM_LIQUIDITY_1
MINIMUM_LIQUIDITY

Name: MINIMUM_LIQUIDITY Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_5(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MINIMUM_LIQUIDITY_1(uint256) := ϕ(['MINIMUM_LIQUIDITY_6', 'MINIMUM_LIQUIDITY_0', 'MINIMUM_LIQUIDITY_7'])
Phi
[i]Type for MINIMUM_LIQUIDITY

Name: MINIMUM_LIQUIDITY Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, HybridPool.lock()()
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient
recipient

Name: recipient Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_56(address) = SOLIDITY_CALL abi.decode()(data_1,address)
[i]Type for TMP_56

Name: TMP_56 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address) := TMP_56(address)
asgn
Finance type key: (-1, -1)
[i]Type for recipient

Name: recipient Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0
_reserve0

Name: _reserve0 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1
_reserve1

Name: _reserve1 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_6(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
[i]Type for TUPLE_6

Name: TUPLE_6 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256)= UNPACK TUPLE_6 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for _reserve0

Name: _reserve0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256)= UNPACK TUPLE_6 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for _reserve1

Name: _reserve1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
balance1_1
balance1_1
balance1
balance1

Name: balance1 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0
balance0

Name: balance0 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_7(uint256,uint256) = INTERNAL_CALL, HybridPool._balance()()
[i]Type for TUPLE_7

Name: TUPLE_7 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance0_1(uint256)= UNPACK TUPLE_7 index: 0 
([-1], [-1], '0', None, -1)
[i]Type for balance0

Name: balance0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance1_1(uint256)= UNPACK TUPLE_7 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for balance1

Name: balance1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
totalSupply_8
totalSupply_8
totalSupply

Name: totalSupply Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_totalSupply_1
_totalSupply_1
_totalSupply
_totalSupply

Name: _totalSupply Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
_totalSupply_1(uint256) := totalSupply_8(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _totalSupply

Name: _totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0

Name: balance0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0
amount0

Name: amount0 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_57(uint256) = balance0_1 (c)- _reserve0_1
SUB1
lnorm: 0 rnorm: u
SUB

Name: balance0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_57

Name: TMP_57 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0_1(uint256) := TMP_57(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount0

Name: amount0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balance1_1
balance1_1
balance1

Name: balance1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1_1
amount1
amount1

Name: amount1 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_58(uint256) = balance1_1 (c)- _reserve1_1
SUB1
lnorm: 0 rnorm: 0
SUB

Name: balance1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_58

Name: TMP_58 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1_1(uint256) := TMP_58(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount1

Name: amount1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1_1
amount1

Name: amount1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
fee0_1
fee0_1
fee0
fee0

Name: fee0 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee1_1
fee1_1
fee1
fee1

Name: fee1 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_8(uint256,uint256) = INTERNAL_CALL, HybridPool._nonOptimalMintFee(uint256,uint256,uint256,uint256)(amount0_1,amount1_1,_reserve0_1,_reserve1_1)
[i]Type for TUPLE_8

Name: TUPLE_8 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee0_1(uint256)= UNPACK TUPLE_8 index: 0 
([-1], [-1], 0, None, -1)
[i]Type for fee0

Name: fee0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee1_1(uint256)= UNPACK TUPLE_8 index: 1 
([-1], [-1], 0, None, -1)
[i]Type for fee1

Name: fee1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balance1_1
balance1_1
balance1

Name: balance1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
fee0_1
fee0_1
fee0

Name: fee0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
fee1_1
fee1_1
fee1

Name: fee1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0

Name: balance0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
newLiq_1
newLiq_1
newLiq
newLiq

Name: newLiq Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_59(uint256) = balance0_1 (c)- fee0_1
SUB1
lnorm: 0 rnorm: 0
SUB

Name: balance0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: fee0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_59

Name: TMP_59 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_60(uint256) = balance1_1 (c)- fee1_1
SUB1
lnorm: 0 rnorm: 0
SUB

Name: balance1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: fee1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_60

Name: TMP_60 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_61(uint256) = INTERNAL_CALL, HybridPool._computeLiquidity(uint256,uint256)(TMP_59,TMP_60)
[[-1], [-1], 'u', None, [], -1, -1, 'u']

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, -1, 'u']

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_5
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_5
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1(uint256) := ϕ(['_reserve0_1', 'TMP_59'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', 'TMP_60'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_5(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_5(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_5
token0PrecisionMultiplier_5
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp0_1
xp0_1
xp0
xp0

Name: xp0 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_212(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_5
lnorm: u rnorm: u
[i]Type for TMP_212

Name: TMP_212 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xp0_1(uint256) := TMP_212(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xp0

Name: xp0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1PrecisionMultiplier_5
token1PrecisionMultiplier_5
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp1_1
xp1_1
xp1
xp1

Name: xp1 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_213(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_5
lnorm: u rnorm: u
[i]Type for TMP_213

Name: TMP_213 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xp1_1(uint256) := TMP_213(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xp1

Name: xp1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xp1_1
xp1_1
xp1

Name: xp1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp0_1
xp0_1
xp0

Name: xp0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity
liquidity

Name: liquidity Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_214(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xp0_1,xp1_1)
[i]Type for TMP_214

Name: TMP_214 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_1(uint256) := TMP_214(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_5
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_5
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1(uint256) := ϕ(['_reserve0_1', 'TMP_59'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', 'TMP_60'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_5(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_5(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_5
token0PrecisionMultiplier_5
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp0_1
xp0_1
xp0
xp0

Name: xp0 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_212(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_5
lnorm: u rnorm: u
[i]Type for TMP_212

Name: TMP_212 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xp0_1(uint256) := TMP_212(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xp0

Name: xp0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1PrecisionMultiplier_5
token1PrecisionMultiplier_5
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp1_1
xp1_1
xp1
xp1

Name: xp1 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_213(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_5
lnorm: u rnorm: u
[i]Type for TMP_213

Name: TMP_213 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xp1_1(uint256) := TMP_213(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xp1

Name: xp1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xp1_1
xp1_1
xp1

Name: xp1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp0_1
xp0_1
xp0

Name: xp0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity
liquidity

Name: liquidity Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_214(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xp0_1,xp1_1)
[i]Type for TMP_214

Name: TMP_214 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_1(uint256) := TMP_214(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_61

Name: TMP_61 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newLiq_1(uint256) := TMP_61(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for newLiq

Name: newLiq Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_totalSupply_1
_totalSupply_1
_totalSupply

Name: _totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_62(bool) = _totalSupply_1 == 0
[i]Type for TMP_62

Name: TMP_62 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MINIMUM_LIQUIDITY_6
MINIMUM_LIQUIDITY_6
MINIMUM_LIQUIDITY

Name: MINIMUM_LIQUIDITY Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newLiq_1
newLiq_1
newLiq
newLiq

Name: newLiq Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_2
liquidity_2
liquidity
liquidity

Name: liquidity Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_63(uint256) = newLiq_1 (c)- MINIMUM_LIQUIDITY_6
SUB1
lnorm: u rnorm: u
SUB

Name: newLiq Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: MINIMUM_LIQUIDITY Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_63

Name: TMP_63 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_2(uint256) := TMP_63(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MINIMUM_LIQUIDITY_6
MINIMUM_LIQUIDITY_6
MINIMUM_LIQUIDITY

Name: MINIMUM_LIQUIDITY Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_64 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_64

Name: TMP_64 Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, TridentERC20._mint(address,uint256)(TMP_64,MINIMUM_LIQUIDITY_6)
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
oldLiq_1
oldLiq_1
oldLiq
oldLiq

Name: oldLiq Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_66(uint256) = INTERNAL_CALL, HybridPool._computeLiquidity(uint256,uint256)(_reserve0_1,_reserve1_1)
[[-1], [-1], 'u', None, [], -1, -1, 'u']

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_5
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_5
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1(uint256) := ϕ(['_reserve0_1', 'TMP_59'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', 'TMP_60'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_5(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_5(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_5
token0PrecisionMultiplier_5
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp0_1
xp0_1
xp0
xp0

Name: xp0 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_212(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_5
lnorm: u rnorm: u
[i]Type for TMP_212

Name: TMP_212 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xp0_1(uint256) := TMP_212(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xp0

Name: xp0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1PrecisionMultiplier_5
token1PrecisionMultiplier_5
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp1_1
xp1_1
xp1
xp1

Name: xp1 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_213(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_5
lnorm: u rnorm: u
[i]Type for TMP_213

Name: TMP_213 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xp1_1(uint256) := TMP_213(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xp1

Name: xp1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xp1_1
xp1_1
xp1

Name: xp1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp0_1
xp0_1
xp0

Name: xp0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity
liquidity

Name: liquidity Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_214(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xp0_1,xp1_1)
[i]Type for TMP_214

Name: TMP_214 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_1(uint256) := TMP_214(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_5
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_5
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1(uint256) := ϕ(['_reserve0_1', 'TMP_59'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', 'TMP_60'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_5(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_5(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_5
token0PrecisionMultiplier_5
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp0_1
xp0_1
xp0
xp0

Name: xp0 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_212(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_5
lnorm: u rnorm: u
[i]Type for TMP_212

Name: TMP_212 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xp0_1(uint256) := TMP_212(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xp0

Name: xp0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1PrecisionMultiplier_5
token1PrecisionMultiplier_5
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _computeLiquidity
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp1_1
xp1_1
xp1
xp1

Name: xp1 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_213(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_5
lnorm: u rnorm: u
[i]Type for TMP_213

Name: TMP_213 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xp1_1(uint256) := TMP_213(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xp1

Name: xp1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xp1_1
xp1_1
xp1

Name: xp1 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xp0_1
xp0_1
xp0

Name: xp0 Function: _computeLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity
liquidity

Name: liquidity Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_214(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xp0_1,xp1_1)
[i]Type for TMP_214

Name: TMP_214 Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_1(uint256) := TMP_214(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: _computeLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_66

Name: TMP_66 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
oldLiq_1(uint256) := TMP_66(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for oldLiq

Name: oldLiq Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_totalSupply_1
_totalSupply_1
_totalSupply

Name: _totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newLiq_1
newLiq_1
newLiq
newLiq

Name: newLiq Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
oldLiq_1
oldLiq_1
oldLiq
oldLiq

Name: oldLiq Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity
liquidity

Name: liquidity Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_67(uint256) = newLiq_1 (c)- oldLiq_1
SUB1
lnorm: u rnorm: u
SUB

Name: newLiq Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: oldLiq Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_67

Name: TMP_67 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_68(uint256) = TMP_67 (c)* _totalSupply_1
lnorm: u rnorm: u
[i]Type for TMP_68

Name: TMP_68 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_69(uint256) = TMP_68 (c)/ oldLiq_1
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_69

Name: TMP_69 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_1(uint256) := TMP_69(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
liquidity_3
liquidity
liquidity

Name: liquidity Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_3(uint256) := ϕ(['liquidity_1', 'liquidity_2'])
Phi
[i]Type for liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
liquidity_3
liquidity_3
liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_70(bool) = liquidity_3 != 0
[i]Type for TMP_70

Name: TMP_70 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,INSUFFICIENT_LIQUIDITY_MINTED)
[i]Type for TMP_71

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
liquidity_3
liquidity_3
liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient
recipient

Name: recipient Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, TridentERC20._mint(address,uint256)(recipient_1,liquidity_3)
[[], [], 'u', None, [], -1, 'u', 'u']

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
recipient_1
recipient
recipient

Name: recipient_1 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_1
totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_7
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1(address) := ϕ(['TMP_64', 'recipient_1'])
Phi
[i]Type for recipient

Name: recipient Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['MINIMUM_LIQUIDITY_6', 'liquidity_3'])
Phi
[i]Type for amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalSupply_1(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOf_7(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_1
totalSupply_1
totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_2
totalSupply_2
totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
totalSupply_2(uint256) = totalSupply_1 (c)+ amount_1

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_8
balanceOf_8
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
balanceOf_8
balanceOf_8
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
balanceOf_8
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_16(uint256) -> balanceOf_7[recipient_1]
INDEX
[i]Type for REF_16

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
balanceOf_8(mapping(address => uint256)) := ϕ(['balanceOf_7'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_16(-> balanceOf_8) = REF_16 + amount_1

Name: REF_16 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for REF_16

Name: REF_16 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_28 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_28

Name: TMP_28 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
recipient_1
recipient
recipient

Name: recipient_1 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_1
totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_7
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1(address) := ϕ(['TMP_64', 'recipient_1'])
Phi
[i]Type for recipient

Name: recipient Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['MINIMUM_LIQUIDITY_6', 'liquidity_3'])
Phi
[i]Type for amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalSupply_1(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOf_7(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_1
totalSupply_1
totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_2
totalSupply_2
totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
totalSupply_2(uint256) = totalSupply_1 (c)+ amount_1

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for totalSupply

Name: totalSupply Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_8
balanceOf_8
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
balanceOf_8
balanceOf_8
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
balanceOf_8
balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_16(uint256) -> balanceOf_7[recipient_1]
INDEX
[i]Type for REF_16

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
balanceOf_8(mapping(address => uint256)) := ϕ(['balanceOf_7'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_16(-> balanceOf_8) = REF_16 + amount_1

Name: REF_16 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for REF_16

Name: REF_16 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_28 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_28

Name: TMP_28 Function: _mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, HybridPool._updateReserves()()
Propogating parameters and globals to SSA variables...
amount1_1
amount1_1
amount1

Name: amount1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient
recipient

Name: recipient Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation



burn
Finding type for data(bytes ... )
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


totalSupply_9(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
balanceOf_11(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
token0_2(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
token1_2(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
MODIFIER_CALL, HybridPool.lock()()
TUPLE_9(address,bool) = SOLIDITY_CALL abi.decode()(data_1(address,bool))
recipient_1(address)= UNPACK TUPLE_9 index: 0 
unwrapBento_1(bool)= UNPACK TUPLE_9 index: 1 
TUPLE_10(uint256,uint256) = INTERNAL_CALL, HybridPool._balance()()
token0_4(address) := ϕ(['token0_42'])
token1_4(address) := ϕ(['token1_45'])
balance0_1(uint256)= UNPACK TUPLE_10 index: 0 
balance1_1(uint256)= UNPACK TUPLE_10 index: 1 
_totalSupply_1(uint256) := totalSupply_11(uint256)
TMP_76 = CONVERT this to address
REF_42(uint256) -> balanceOf_13[TMP_76]
liquidity_1(uint256) := REF_42(uint256)
TMP_77(uint256) = liquidity_1 (c)* balance0_1
TMP_78(uint256) = TMP_77 (c)/ _totalSupply_1
amount0_1(uint256) := TMP_78(uint256)
TMP_79(uint256) = liquidity_1 (c)* balance1_1
TMP_80(uint256) = TMP_79 (c)/ _totalSupply_1
amount1_1(uint256) := TMP_80(uint256)
TMP_81 = CONVERT this to address
INTERNAL_CALL, TridentERC20._burn(address,uint256)(TMP_81,liquidity_1)
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(token0_5,amount0_1,recipient_1,unwrapBento_1)
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(token1_6,amount1_1,recipient_1,unwrapBento_1)
TMP_85(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token0_7,amount0_1)
balance0_2(uint256) = balance0_1 (c)- TMP_85
TMP_86(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token1_8,amount1_1)
balance1_2(uint256) = balance1_1 (c)- TMP_86
INTERNAL_CALL, HybridPool._updateReserves()()
TMP_89 = new IPool.TokenAmount[](2)
withdrawnAmounts_1(IPool.TokenAmount[]) := TMP_89(IPool.TokenAmount)
REF_43(IPool.TokenAmount) -> withdrawnAmounts_1[0]
TMP_90 = new TokenAmount(token0_10,amount0_1)
withdrawnAmounts_2(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_1'])
REF_43 (->withdrawnAmounts_2) := TMP_90(IPool.TokenAmount)
REF_44(IPool.TokenAmount) -> withdrawnAmounts_2[1]
TMP_91 = new TokenAmount(token1_10,amount1_1)
withdrawnAmounts_3(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_2'])
REF_44 (->withdrawnAmounts_3) := TMP_91(IPool.TokenAmount)
Emit Burn(msg.sender,amount0_1,amount1_1,recipient_1)


Propogating parameters and globals to SSA variables...
End popogation
totalSupply_9
totalSupply
totalSupply

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_11
balanceOf
balanceOf

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_2
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_2
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
totalSupply_9(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOf_11(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_2(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
Phi
[i]Type for token0

Name: token0 Function: burn
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_2(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
Phi
[i]Type for token1

Name: token1 Function: burn
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, HybridPool.lock()()
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient
recipient

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_9(address,bool) = SOLIDITY_CALL abi.decode()(data_1(address,bool))
[i]Type for TUPLE_9

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address)= UNPACK TUPLE_9 index: 0 
Finding type for recipient(address ... )
prev address? u
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
[i]Type for recipient

Name: recipient Function: burn
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool)= UNPACK TUPLE_9 index: 1 
Finding type for unwrapBento(bool ... )
[i]Type for unwrapBento

Name: unwrapBento Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
balance1_1
balance1_1
balance1
balance1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0
balance0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
token0_4
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_4
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
TUPLE_10(uint256,uint256) = INTERNAL_CALL, HybridPool._balance()()
[i]Type for TUPLE_10

Name: TUPLE_10 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_4(address) := ϕ(['token0_42'])
Phi
[i]Type for token0

Name: token0 Function: burn
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_4(address) := ϕ(['token1_45'])
Phi
[i]Type for token1

Name: token1 Function: burn
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
balance0_1(uint256)= UNPACK TUPLE_10 index: 0 
([-1], [-1], '0', None, -1)
[i]Type for balance0

Name: balance0 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance1_1(uint256)= UNPACK TUPLE_10 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for balance1

Name: balance1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
totalSupply_11
totalSupply_11
totalSupply
totalSupply

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_totalSupply_1
_totalSupply_1
_totalSupply
_totalSupply

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
_totalSupply_1(uint256) := totalSupply_11(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _totalSupply

Name: _totalSupply Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balanceOf_13
balanceOf_13
balanceOf
balanceOf

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity
liquidity

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_76 = CONVERT this to address
Converting this
6
[i]Type for TMP_76

Name: TMP_76 Function: burn
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
REF_42(uint256) -> balanceOf_13[TMP_76]
INDEX
[i]Type for REF_42

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
liquidity_1(uint256) := REF_42(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
liquidity_1
liquidity_1
liquidity

Name: liquidity Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_totalSupply_1
_totalSupply_1
_totalSupply

Name: _totalSupply Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0

Name: balance0 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0
amount0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_77(uint256) = liquidity_1 (c)* balance0_1
lnorm: u rnorm: 0
[i]Type for TMP_77

Name: TMP_77 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_78(uint256) = TMP_77 (c)/ _totalSupply_1
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for TMP_78

Name: TMP_78 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0_1(uint256) := TMP_78(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balance1_1
balance1_1
balance1

Name: balance1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity

Name: liquidity Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_totalSupply_1
_totalSupply_1
_totalSupply

Name: _totalSupply Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1_1
amount1
amount1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_79(uint256) = liquidity_1 (c)* balance1_1
lnorm: u rnorm: 0
[i]Type for TMP_79

Name: TMP_79 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_80(uint256) = TMP_79 (c)/ _totalSupply_1
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for TMP_80

Name: TMP_80 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1_1(uint256) := TMP_80(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
liquidity_1
liquidity_1
liquidity

Name: liquidity Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_81 = CONVERT this to address
Converting this
6
[i]Type for TMP_81

Name: TMP_81 Function: burn
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, TridentERC20._burn(address,uint256)(TMP_81,liquidity_1)
[[-1], [-1], 'u', 'HybridPool', [], -1, 6, 'u']

Name: sender Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: sender Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
sender_1
sender

Name: sender_1 Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_3
totalSupply
totalSupply

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_9
balanceOf
balanceOf

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sender_1(address) := ϕ(['TMP_99', 'TMP_81'])
Phi
[i]Type for sender

Name: sender Function: _burn
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['liquidity_1', 'liquidity_1'])
Phi
[i]Type for amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalSupply_3(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOf_9(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balanceOf_10
balanceOf_10
balanceOf
balanceOf

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sender_1
sender_1
sender

Name: sender Function: _burn
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_10
balanceOf_10
balanceOf

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
balanceOf_10
balanceOf

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_17(uint256) -> balanceOf_9[sender_1]
INDEX
[i]Type for REF_17

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
balanceOf_10(mapping(address => uint256)) := ϕ(['balanceOf_9'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_17(-> balanceOf_10) = REF_17 (c)- amount_1
SUB1
lnorm: u rnorm: u
SUB

Name: REF_17 Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_17

Name: REF_17 Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
totalSupply_3
totalSupply_3
totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_4
totalSupply_4
totalSupply
totalSupply

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
totalSupply_4(uint256) = totalSupply_3 - amount_1
SUB1
lnorm: u rnorm: u
SUB

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
sender_1
sender_1
sender

Name: sender Function: _burn
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_30 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: _burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: sender Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
sender_1
sender

Name: sender_1 Function: _burn
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_3
totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_9
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sender_1(address) := ϕ(['TMP_99', 'TMP_81'])
Phi
[i]Type for sender

Name: sender Function: _burn
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['liquidity_1', 'liquidity_1'])
Phi
[i]Type for amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalSupply_3(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOf_9(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balanceOf_10
balanceOf_10
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sender_1
sender_1
sender

Name: sender Function: _burn
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_10
balanceOf_10
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
balanceOf_10
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_17(uint256) -> balanceOf_9[sender_1]
INDEX
[i]Type for REF_17

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
balanceOf_10(mapping(address => uint256)) := ϕ(['balanceOf_9'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_17(-> balanceOf_10) = REF_17 (c)- amount_1
SUB1
lnorm: u rnorm: u
SUB

Name: REF_17 Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_17

Name: REF_17 Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
totalSupply_3
totalSupply_3
totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_4
totalSupply_4
totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
totalSupply_4(uint256) = totalSupply_3 - amount_1
SUB1
lnorm: u rnorm: u
SUB

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
sender_1
sender_1
sender

Name: sender Function: _burn
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_30 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: _burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_5
token0_5
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: burn
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(token0_5,amount0_1,recipient_1,unwrapBento_1)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -995, 'u']

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento
bento

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento
bento

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento
bento

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento
bento

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento
bento

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento
bento

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success

Name: success Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_6
token1_6
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1_1
amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: burn
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(token1_6,amount1_1,recipient_1,unwrapBento_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -995, 'u']

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0_7
token0_7
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0

Name: balance0 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_2
balance0_2
balance0
balance0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_85(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token0_7,amount0_1)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_85

Name: TMP_85 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance0_2(uint256) = balance0_1 (c)- TMP_85
SUB1
lnorm: 0 rnorm: u
SUB

Name: balance0 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_85 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for balance0

Name: balance0 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balance1_1
balance1_1
balance1

Name: balance1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1_1
amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1_8
token1_8
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance1_2
balance1_2
balance1
balance1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_86(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token1_8,amount1_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_86

Name: TMP_86 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance1_2(uint256) = balance1_1 (c)- TMP_86
SUB1
lnorm: 0 rnorm: u
SUB

Name: balance1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_86 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for balance1

Name: balance1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, HybridPool._updateReserves()()
Propogating parameters and globals to SSA variables...
withdrawnAmounts_1
withdrawnAmounts_1
withdrawnAmounts
withdrawnAmounts

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_89 = new IPool.TokenAmount[](2)
[i]Type for TMP_89

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
withdrawnAmounts_1(IPool.TokenAmount[]) := TMP_89(IPool.TokenAmount)
asgn
Finance type key: (-1, -1)
[i]Type for withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0_10
token0_10
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
withdrawnAmounts_2
withdrawnAmounts_2
withdrawnAmounts
withdrawnAmounts

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
withdrawnAmounts_2
withdrawnAmounts
withdrawnAmounts

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_43(IPool.TokenAmount) -> withdrawnAmounts_1[0]
INDEX
[i]Type for REF_43

Name: withdrawnAmounts Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_90 = new TokenAmount(token0_10,amount0_1)
[i]Type for TMP_90

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
withdrawnAmounts_2(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_1'])
Phi
[i]Type for withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_43 (->withdrawnAmounts_2) := TMP_90(IPool.TokenAmount)
asgn
Finance type key: (-1, -1)
[i]Type for REF_43

Name: REF_43 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
amount1_1
amount1_1
amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1_10
token1_10
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
withdrawnAmounts_3
withdrawnAmounts_3
withdrawnAmounts
withdrawnAmounts

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
withdrawnAmounts_3
withdrawnAmounts
withdrawnAmounts

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_44(IPool.TokenAmount) -> withdrawnAmounts_2[1]
INDEX
[i]Type for REF_44

Name: withdrawnAmounts Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_91 = new TokenAmount(token1_10,amount1_1)
[i]Type for TMP_91

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
withdrawnAmounts_3(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_2'])
Phi
[i]Type for withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_44 (->withdrawnAmounts_3) := TMP_91(IPool.TokenAmount)
asgn
Finance type key: (-1, -1)
[i]Type for REF_44

Name: REF_44 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
amount0_1
amount0_1
amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1_1
amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: burn
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation


totalSupply_9(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
balanceOf_11(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
token0_2(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
token1_2(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
MODIFIER_CALL, HybridPool.lock()()
TUPLE_9(address,bool) = SOLIDITY_CALL abi.decode()(data_1(address,bool))
recipient_1(address)= UNPACK TUPLE_9 index: 0 
unwrapBento_1(bool)= UNPACK TUPLE_9 index: 1 
TUPLE_10(uint256,uint256) = INTERNAL_CALL, HybridPool._balance()()
token0_4(address) := ϕ(['token0_42'])
token1_4(address) := ϕ(['token1_45'])
balance0_1(uint256)= UNPACK TUPLE_10 index: 0 
balance1_1(uint256)= UNPACK TUPLE_10 index: 1 
_totalSupply_1(uint256) := totalSupply_11(uint256)
TMP_76 = CONVERT this to address
REF_42(uint256) -> balanceOf_13[TMP_76]
liquidity_1(uint256) := REF_42(uint256)
TMP_77(uint256) = liquidity_1 (c)* balance0_1
TMP_78(uint256) = TMP_77 (c)/ _totalSupply_1
amount0_1(uint256) := TMP_78(uint256)
TMP_79(uint256) = liquidity_1 (c)* balance1_1
TMP_80(uint256) = TMP_79 (c)/ _totalSupply_1
amount1_1(uint256) := TMP_80(uint256)
TMP_81 = CONVERT this to address
INTERNAL_CALL, TridentERC20._burn(address,uint256)(TMP_81,liquidity_1)
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(token0_5,amount0_1,recipient_1,unwrapBento_1)
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(token1_6,amount1_1,recipient_1,unwrapBento_1)
TMP_85(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token0_7,amount0_1)
balance0_2(uint256) = balance0_1 (c)- TMP_85
TMP_86(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token1_8,amount1_1)
balance1_2(uint256) = balance1_1 (c)- TMP_86
INTERNAL_CALL, HybridPool._updateReserves()()
TMP_89 = new IPool.TokenAmount[](2)
withdrawnAmounts_1(IPool.TokenAmount[]) := TMP_89(IPool.TokenAmount)
REF_43(IPool.TokenAmount) -> withdrawnAmounts_1[0]
TMP_90 = new TokenAmount(token0_10,amount0_1)
withdrawnAmounts_2(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_1'])
REF_43 (->withdrawnAmounts_2) := TMP_90(IPool.TokenAmount)
REF_44(IPool.TokenAmount) -> withdrawnAmounts_2[1]
TMP_91 = new TokenAmount(token1_10,amount1_1)
withdrawnAmounts_3(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_2'])
REF_44 (->withdrawnAmounts_3) := TMP_91(IPool.TokenAmount)
Emit Burn(msg.sender,amount0_1,amount1_1,recipient_1)


Propogating parameters and globals to SSA variables...
End popogation
totalSupply_9
totalSupply

Name: totalSupply Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_11
balanceOf

Name: balanceOf Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_2
token0

Name: token0 Function: burn
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_2
token1

Name: token1 Function: burn
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
totalSupply_9(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOf_11(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_2(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
Phi
[i]Type for token0

Name: token0 Function: burn
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_2(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
Phi
[i]Type for token1

Name: token1 Function: burn
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, HybridPool.lock()()
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient
recipient

Name: recipient Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_9(address,bool) = SOLIDITY_CALL abi.decode()(data_1(address,bool))
[i]Type for TUPLE_9

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address)= UNPACK TUPLE_9 index: 0 
Finding type for recipient(address ... )
prev address? u
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
[i]Type for recipient

Name: recipient Function: burn
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool)= UNPACK TUPLE_9 index: 1 
Finding type for unwrapBento(bool ... )
[i]Type for unwrapBento

Name: unwrapBento Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
balance1_1
balance1_1
balance1
balance1

Name: balance1 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0
balance0

Name: balance0 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
token0_4
token0

Name: token0 Function: burn
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_4
token1

Name: token1 Function: burn
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
TUPLE_10(uint256,uint256) = INTERNAL_CALL, HybridPool._balance()()
[i]Type for TUPLE_10

Name: TUPLE_10 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_4(address) := ϕ(['token0_42'])
Phi
[i]Type for token0

Name: token0 Function: burn
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_4(address) := ϕ(['token1_45'])
Phi
[i]Type for token1

Name: token1 Function: burn
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
balance0_1(uint256)= UNPACK TUPLE_10 index: 0 
([-1], [-1], '0', None, -1)
[i]Type for balance0

Name: balance0 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance1_1(uint256)= UNPACK TUPLE_10 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for balance1

Name: balance1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
totalSupply_11
totalSupply_11
totalSupply

Name: totalSupply Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_totalSupply_1
_totalSupply_1
_totalSupply
_totalSupply

Name: _totalSupply Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
_totalSupply_1(uint256) := totalSupply_11(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _totalSupply

Name: _totalSupply Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balanceOf_13
balanceOf_13
balanceOf

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity
liquidity

Name: liquidity Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_76 = CONVERT this to address
Converting this
6
[i]Type for TMP_76

Name: TMP_76 Function: burn
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
REF_42(uint256) -> balanceOf_13[TMP_76]
INDEX
[i]Type for REF_42

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
liquidity_1(uint256) := REF_42(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
liquidity_1
liquidity_1
liquidity

Name: liquidity Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_totalSupply_1
_totalSupply_1
_totalSupply

Name: _totalSupply Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0

Name: balance0 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0
amount0

Name: amount0 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_77(uint256) = liquidity_1 (c)* balance0_1
lnorm: u rnorm: 0
[i]Type for TMP_77

Name: TMP_77 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_78(uint256) = TMP_77 (c)/ _totalSupply_1
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for TMP_78

Name: TMP_78 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0_1(uint256) := TMP_78(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balance1_1
balance1_1
balance1

Name: balance1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity

Name: liquidity Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_totalSupply_1
_totalSupply_1
_totalSupply

Name: _totalSupply Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1_1
amount1
amount1

Name: amount1 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_79(uint256) = liquidity_1 (c)* balance1_1
lnorm: u rnorm: 0
[i]Type for TMP_79

Name: TMP_79 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_80(uint256) = TMP_79 (c)/ _totalSupply_1
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for TMP_80

Name: TMP_80 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1_1(uint256) := TMP_80(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
liquidity_1
liquidity_1
liquidity

Name: liquidity Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_81 = CONVERT this to address
Converting this
6
[i]Type for TMP_81

Name: TMP_81 Function: burn
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, TridentERC20._burn(address,uint256)(TMP_81,liquidity_1)
[[], [], 'u', 'HybridPool', [], -1, 6, 'u']

Name: sender Function: None
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: sender Function: None
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
sender_1
sender

Name: sender_1 Function: _burn
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_3
totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_9
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sender_1(address) := ϕ(['TMP_99', 'TMP_81'])
Phi
[i]Type for sender

Name: sender Function: _burn
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['liquidity_1', 'liquidity_1'])
Phi
[i]Type for amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalSupply_3(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOf_9(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balanceOf_10
balanceOf_10
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sender_1
sender_1
sender

Name: sender Function: _burn
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_10
balanceOf_10
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
balanceOf_10
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_17(uint256) -> balanceOf_9[sender_1]
INDEX
[i]Type for REF_17

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
balanceOf_10(mapping(address => uint256)) := ϕ(['balanceOf_9'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_17(-> balanceOf_10) = REF_17 (c)- amount_1
SUB1
lnorm: u rnorm: u
SUB

Name: REF_17 Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_17

Name: REF_17 Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
totalSupply_3
totalSupply_3
totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_4
totalSupply_4
totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
totalSupply_4(uint256) = totalSupply_3 - amount_1
SUB1
lnorm: u rnorm: u
SUB

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
sender_1
sender_1
sender

Name: sender Function: _burn
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_30 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: _burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: sender Function: None
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
sender_1
sender

Name: sender_1 Function: _burn
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_3
totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_9
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sender_1(address) := ϕ(['TMP_99', 'TMP_81'])
Phi
[i]Type for sender

Name: sender Function: _burn
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['liquidity_1', 'liquidity_1'])
Phi
[i]Type for amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalSupply_3(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOf_9(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balanceOf_10
balanceOf_10
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sender_1
sender_1
sender

Name: sender Function: _burn
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_10
balanceOf_10
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
balanceOf_10
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_17(uint256) -> balanceOf_9[sender_1]
INDEX
[i]Type for REF_17

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
balanceOf_10(mapping(address => uint256)) := ϕ(['balanceOf_9'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_17(-> balanceOf_10) = REF_17 (c)- amount_1
SUB1
lnorm: u rnorm: u
SUB

Name: REF_17 Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_17

Name: REF_17 Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
totalSupply_3
totalSupply_3
totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_4
totalSupply_4
totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
totalSupply_4(uint256) = totalSupply_3 - amount_1
SUB1
lnorm: u rnorm: u
SUB

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
sender_1
sender_1
sender

Name: sender Function: _burn
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_30 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: _burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_5
token0_5
token0

Name: token0 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: burn
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(token0_5,amount0_1,recipient_1,unwrapBento_1)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -995, 'u']

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_6
token1_6
token1

Name: token1 Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1_1
amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: burn
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(token1_6,amount1_1,recipient_1,unwrapBento_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -995, 'u']

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0_7
token0_7
token0

Name: token0 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0

Name: balance0 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_2
balance0_2
balance0
balance0

Name: balance0 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_85(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token0_7,amount0_1)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_85

Name: TMP_85 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance0_2(uint256) = balance0_1 (c)- TMP_85
SUB1
lnorm: 0 rnorm: u
SUB

Name: balance0 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_85 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for balance0

Name: balance0 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balance1_1
balance1_1
balance1

Name: balance1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1_1
amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1_8
token1_8
token1

Name: token1 Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance1_2
balance1_2
balance1
balance1

Name: balance1 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_86(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token1_8,amount1_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_86

Name: TMP_86 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance1_2(uint256) = balance1_1 (c)- TMP_86
SUB1
lnorm: 0 rnorm: u
SUB

Name: balance1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_86 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for balance1

Name: balance1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, HybridPool._updateReserves()()
Propogating parameters and globals to SSA variables...
withdrawnAmounts_1
withdrawnAmounts_1
withdrawnAmounts
withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_89 = new IPool.TokenAmount[](2)
[i]Type for TMP_89

Name: TMP_89 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
withdrawnAmounts_1(IPool.TokenAmount[]) := TMP_89(IPool.TokenAmount)
asgn
Finance type key: (-1, -1)
[i]Type for withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0_10
token0_10
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
withdrawnAmounts_2
withdrawnAmounts_2
withdrawnAmounts
withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
withdrawnAmounts_2
withdrawnAmounts
withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_43(IPool.TokenAmount) -> withdrawnAmounts_1[0]
INDEX
[i]Type for REF_43

Name: withdrawnAmounts Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_90 = new TokenAmount(token0_10,amount0_1)
[i]Type for TMP_90

Name: TMP_90 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
withdrawnAmounts_2(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_1'])
Phi
[i]Type for withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_43 (->withdrawnAmounts_2) := TMP_90(IPool.TokenAmount)
asgn
Finance type key: (-1, -1)
[i]Type for REF_43

Name: REF_43 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
amount1_1
amount1_1
amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1_10
token1_10
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
withdrawnAmounts_3
withdrawnAmounts_3
withdrawnAmounts
withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
withdrawnAmounts_3
withdrawnAmounts
withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_44(IPool.TokenAmount) -> withdrawnAmounts_2[1]
INDEX
[i]Type for REF_44

Name: withdrawnAmounts Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_91 = new TokenAmount(token1_10,amount1_1)
[i]Type for TMP_91

Name: TMP_91 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
withdrawnAmounts_3(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_2'])
Phi
[i]Type for withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_44 (->withdrawnAmounts_3) := TMP_91(IPool.TokenAmount)
asgn
Finance type key: (-1, -1)
[i]Type for REF_44

Name: REF_44 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
amount0_1
amount0_1
amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1_1
amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: burn
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation



burnSingle
Finding type for data(bytes ... )
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


totalSupply_12(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
balanceOf_14(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
token0_11(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
token1_11(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
MODIFIER_CALL, HybridPool.lock()()
TUPLE_11(address,address,bool) = SOLIDITY_CALL abi.decode()(data_1(address,address,bool))
tokenOut_1(address)= UNPACK TUPLE_11 index: 0 
recipient_1(address)= UNPACK TUPLE_11 index: 1 
unwrapBento_1(bool)= UNPACK TUPLE_11 index: 2 
TUPLE_12(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
token0_13(address) := ϕ(['token0_39'])
token1_13(address) := ϕ(['token1_40'])
_reserve0_1(uint256)= UNPACK TUPLE_12 index: 0 
_reserve1_1(uint256)= UNPACK TUPLE_12 index: 1 
TUPLE_13(uint256,uint256) = INTERNAL_CALL, HybridPool._balance()()
token0_14(address) := ϕ(['token0_42'])
token1_14(address) := ϕ(['token1_45'])
balance0_1(uint256)= UNPACK TUPLE_13 index: 0 
balance1_1(uint256)= UNPACK TUPLE_13 index: 1 
_totalSupply_1(uint256) := totalSupply_15(uint256)
TMP_94 = CONVERT this to address
REF_46(uint256) -> balanceOf_17[TMP_94]
liquidity_1(uint256) := REF_46(uint256)
TMP_95(uint256) = liquidity_1 (c)* balance0_1
TMP_96(uint256) = TMP_95 (c)/ _totalSupply_1
amount0_1(uint256) := TMP_96(uint256)
TMP_97(uint256) = liquidity_1 (c)* balance1_1
TMP_98(uint256) = TMP_97 (c)/ _totalSupply_1
amount1_1(uint256) := TMP_98(uint256)
TMP_99 = CONVERT this to address
INTERNAL_CALL, TridentERC20._burn(address,uint256)(TMP_99,liquidity_1)
TMP_101(bool) = tokenOut_1 == token1_15
CONDITION TMP_101
TMP_109(bool) = tokenOut_1 == token0_15
TMP_110(None) = SOLIDITY_CALL require(bool,string)(TMP_109,INVALID_OUTPUT_TOKEN)
TMP_102(uint256) = INTERNAL_CALL, HybridPool._handleFee(address,uint256)(token0_15,amount0_1)
fee_1(uint256) := TMP_102(uint256)
TMP_103(uint256) = amount0_1 (c)- fee_1
TMP_104(uint256) = _reserve0_1 (c)- amount0_1
TMP_105(uint256) = _reserve1_1 (c)- amount1_1
TMP_106(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_103,TMP_104,TMP_105,True)
amount1_3(uint256) = amount1_1 (c)+ TMP_106
TMP_111(uint256) = INTERNAL_CALL, HybridPool._handleFee(address,uint256)(token1_15,amount1_1)
fee_scope_0_1(uint256) := TMP_111(uint256)
TMP_112(uint256) = amount1_1 (c)- fee_scope_0_1
TMP_113(uint256) = _reserve0_1 (c)- amount0_1
TMP_114(uint256) = _reserve1_1 (c)- amount1_1
TMP_115(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_112,TMP_113,TMP_114,False)
amount0_2(uint256) = amount0_1 (c)+ TMP_115
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(token1_21,amount1_3,recipient_1,unwrapBento_1)
TMP_108(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token0_21,amount0_1)
balance0_2(uint256) = balance0_1 (c)- TMP_108
amountOut_2(uint256) := amount1_3(uint256)
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(token0_17,amount0_2,recipient_1,unwrapBento_1)
amount0_3(uint256) := 0(uint256)
TMP_117(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token1_18,amount1_1)
balance1_2(uint256) = balance1_1 (c)- TMP_117
amount0_4(uint256) := ϕ(['amount0_3', 'amount0_2'])
amount1_4(uint256) := ϕ(['amount1_3', 'amount1_2'])
amountOut_1(uint256) := amount0_2(uint256)
INTERNAL_CALL, HybridPool._updateReserves()()
amount1_2(uint256) := 0(uint256)
Emit Burn(msg.sender,amount0_4,amount1_4,recipient_1)


Propogating parameters and globals to SSA variables...
End popogation
totalSupply_12
totalSupply
totalSupply

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_14
balanceOf
balanceOf

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_11
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_11
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
totalSupply_12(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOf_14(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_11(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
Phi
[i]Type for token0

Name: token0 Function: burnSingle
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_11(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
Phi
[i]Type for token1

Name: token1 Function: burnSingle
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, HybridPool.lock()()
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient
recipient

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_1
tokenOut_1
tokenOut
tokenOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_11(address,address,bool) = SOLIDITY_CALL abi.decode()(data_1(address,address,bool))
[i]Type for TUPLE_11

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tokenOut_1(address)= UNPACK TUPLE_11 index: 0 
Finding type for tokenOut(address ... )
prev address? u
Head Addr: -994
    Norm: 0
    Set: {-994}
    Fin: NULL
[i]Type for tokenOut

Name: tokenOut Function: burnSingle
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address)= UNPACK TUPLE_11 index: 1 
Finding type for recipient(address ... )
prev address? u
Head Addr: -993
    Norm: 0
    Set: {-993}
    Fin: NULL
[i]Type for recipient

Name: recipient Function: burnSingle
Num: 
Den: 
Address: -993
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool)= UNPACK TUPLE_11 index: 2 
Finding type for unwrapBento(bool ... )
[i]Type for unwrapBento

Name: unwrapBento Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1
_reserve1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0
_reserve0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
token0_13
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_13
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
TUPLE_12(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
[i]Type for TUPLE_12

Name: TUPLE_12 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_13(address) := ϕ(['token0_39'])
Phi
[i]Type for token0

Name: token0 Function: burnSingle
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_13(address) := ϕ(['token1_40'])
Phi
[i]Type for token1

Name: token1 Function: burnSingle
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256)= UNPACK TUPLE_12 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for _reserve0

Name: _reserve0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256)= UNPACK TUPLE_12 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for _reserve1

Name: _reserve1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
balance0_1
balance0_1
balance0
balance0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1
balance1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
token0_14
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_14
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
TUPLE_13(uint256,uint256) = INTERNAL_CALL, HybridPool._balance()()
[i]Type for TUPLE_13

Name: TUPLE_13 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_14(address) := ϕ(['token0_42'])
Phi
[i]Type for token0

Name: token0 Function: burnSingle
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_14(address) := ϕ(['token1_45'])
Phi
[i]Type for token1

Name: token1 Function: burnSingle
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
balance0_1(uint256)= UNPACK TUPLE_13 index: 0 
([-1], [-1], '0', None, -1)
[i]Type for balance0

Name: balance0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance1_1(uint256)= UNPACK TUPLE_13 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for balance1

Name: balance1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
totalSupply_15
totalSupply_15
totalSupply
totalSupply

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_totalSupply_1
_totalSupply_1
_totalSupply
_totalSupply

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
_totalSupply_1(uint256) := totalSupply_15(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _totalSupply

Name: _totalSupply Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balanceOf_17
balanceOf_17
balanceOf
balanceOf

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity
liquidity

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_94 = CONVERT this to address
Converting this
6
[i]Type for TMP_94

Name: TMP_94 Function: burnSingle
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
REF_46(uint256) -> balanceOf_17[TMP_94]
INDEX
[i]Type for REF_46

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
liquidity_1(uint256) := REF_46(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_totalSupply_1
_totalSupply_1
_totalSupply

Name: _totalSupply Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity

Name: liquidity Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0

Name: balance0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0
amount0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_95(uint256) = liquidity_1 (c)* balance0_1
lnorm: u rnorm: 0
[i]Type for TMP_95

Name: TMP_95 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_96(uint256) = TMP_95 (c)/ _totalSupply_1
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for TMP_96

Name: TMP_96 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0_1(uint256) := TMP_96(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_totalSupply_1
_totalSupply_1
_totalSupply

Name: _totalSupply Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity

Name: liquidity Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1

Name: balance1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1_1
amount1
amount1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_97(uint256) = liquidity_1 (c)* balance1_1
lnorm: u rnorm: 0
[i]Type for TMP_97

Name: TMP_97 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_98(uint256) = TMP_97 (c)/ _totalSupply_1
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for TMP_98

Name: TMP_98 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1_1(uint256) := TMP_98(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
liquidity_1
liquidity_1
liquidity

Name: liquidity Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_99 = CONVERT this to address
Converting this
6
[i]Type for TMP_99

Name: TMP_99 Function: burnSingle
Num: -1
Den: -1
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, TridentERC20._burn(address,uint256)(TMP_99,liquidity_1)
Propogating parameters and globals to SSA variables...
token1_15
token1_15
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
tokenOut_1
tokenOut_1
tokenOut

Name: tokenOut Function: burnSingle
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_101(bool) = tokenOut_1 == token1_15
[i]Type for TMP_101

Name: TMP_101 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
tokenOut_1
tokenOut_1
tokenOut

Name: tokenOut Function: burnSingle
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_15
token0_15
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_109(bool) = tokenOut_1 == token0_15
[i]Type for TMP_109

Name: TMP_109 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_110(None) = SOLIDITY_CALL require(bool,string)(TMP_109,INVALID_OUTPUT_TOKEN)
[i]Type for TMP_110

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount0_1
amount0_1
amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token0_15
token0_15
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_102(uint256) = INTERNAL_CALL, HybridPool._handleFee(address,uint256)(token0_15,amount0_1)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: tokenIn Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenIn Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenIn_1
tokenIn

Name: tokenIn_1 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn

Name: amountIn_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE
MAX_FEE

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee
swapFee

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo
barFeeTo

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
barFee_3
barFee
barFee

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1(address) := ϕ(['token1_15', 'tokenIn_1', 'token0_15'])
Phi
[i]Type for tokenIn

Name: tokenIn Function: _handleFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := ϕ(['amount1_1', 'amountIn_2', 'amount0_1', 'amountIn_1'])
Phi
[i]Type for amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_7(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_7(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_16(address) := ϕ(['barFeeTo_15', 'barFeeTo_17', 'barFeeTo_1', 'barFeeTo_0'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_3(uint256) := ϕ(['barFee_2', 'barFee_0', 'barFee_1'])
Phi
[i]Type for barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_274(uint256) = amountIn_1 (c)* swapFee_7
lnorm: u rnorm: u
[i]Type for TMP_274

Name: TMP_274 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_275(uint256) = TMP_274 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_275

Name: TMP_275 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_275(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
barFee_3
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_barFee_1
_barFee_1
_barFee
_barFee

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_276(uint256) = fee_1 (c)* barFee_3
lnorm: u rnorm: u
[i]Type for TMP_276

Name: TMP_276 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_277(uint256) = TMP_276 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_277

Name: TMP_277 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_barFee_1(uint256) := TMP_277(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_barFee_1
_barFee_1
_barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: _handleFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenIn_1,_barFee_1,barFeeTo_16,False)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 4, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: tokenIn Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenIn_1
tokenIn

Name: tokenIn_1 Function: _handleFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn

Name: amountIn_1 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1(address) := ϕ(['token1_15', 'tokenIn_1', 'token0_15'])
Phi
[i]Type for tokenIn

Name: tokenIn Function: _handleFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := ϕ(['amount1_1', 'amountIn_2', 'amount0_1', 'amountIn_1'])
Phi
[i]Type for amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_7(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_7(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_16(address) := ϕ(['barFeeTo_15', 'barFeeTo_17', 'barFeeTo_1', 'barFeeTo_0'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_3(uint256) := ϕ(['barFee_2', 'barFee_0', 'barFee_1'])
Phi
[i]Type for barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_274(uint256) = amountIn_1 (c)* swapFee_7
lnorm: u rnorm: u
[i]Type for TMP_274

Name: TMP_274 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_275(uint256) = TMP_274 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_275

Name: TMP_275 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_275(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
barFee_3
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_barFee_1
_barFee_1
_barFee
_barFee

Name: _barFee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_276(uint256) = fee_1 (c)* barFee_3
lnorm: u rnorm: u
[i]Type for TMP_276

Name: TMP_276 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_277(uint256) = TMP_276 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_277

Name: TMP_277 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_barFee_1(uint256) := TMP_277(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_barFee_1
_barFee_1
_barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: _handleFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenIn_1,_barFee_1,barFeeTo_16,False)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 4, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_102

Name: TMP_102 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_102(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1_1
amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_3
amount1_3
amount1
amount1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_103(uint256) = amount0_1 (c)- fee_1
SUB1
lnorm: 0 rnorm: u
SUB

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: fee Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_103

Name: TMP_103 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_104(uint256) = _reserve0_1 (c)- amount0_1
SUB1
lnorm: u rnorm: 0
SUB

Name: _reserve0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_104

Name: TMP_104 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_105(uint256) = _reserve1_1 (c)- amount1_1
SUB1
lnorm: 0 rnorm: 0
SUB

Name: _reserve1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_105

Name: TMP_105 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_106(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_103,TMP_104,TMP_105,True)
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier
token0PrecisionMultiplier

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier
token1PrecisionMultiplier

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: x Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: D Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: x Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: D Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
x_1
x

Name: x_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_1
D
D

Name: D_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_LOOP_LIMIT_2
MAX_LOOP_LIMIT
MAX_LOOP_LIMIT

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_3
N_A
N_A

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_PRECISION_2
A_PRECISION
A_PRECISION

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1(uint256) := ϕ(['x_1'])
Phi
[i]Type for x

Name: x Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
D_1(uint256) := ϕ(['d_1'])
Phi
[i]Type for D

Name: D Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_LOOP_LIMIT_2(uint256) := ϕ(['MAX_LOOP_LIMIT_0'])
Phi
[i]Type for MAX_LOOP_LIMIT

Name: MAX_LOOP_LIMIT Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
N_A_3(uint256) := ϕ(['N_A_0', 'N_A_1'])
Phi
[i]Type for N_A

Name: N_A Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
A_PRECISION_2(uint256) := ϕ(['A_PRECISION_0'])
Phi
[i]Type for A_PRECISION

Name: A_PRECISION Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x

Name: x Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_1
c_1
c
c

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_236(uint256) = D_1 (c)* D_1
lnorm: u rnorm: u
[i]Type for TMP_236

Name: TMP_236 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_237(uint256) = x_1 (c)* 2
lnorm: u rnorm: 0
[i]Type for TMP_237

Name: TMP_237 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_238(uint256) = TMP_236 (c)/ TMP_237
lnorm: u rnorm: 0
lnorm: u rnorm: 0
[i]Type for TMP_238

Name: TMP_238 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
c_1(uint256) := TMP_238(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_1
c_1
c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_3
N_A_3
N_A

Name: N_A Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_PRECISION_2
A_PRECISION_2
A_PRECISION

Name: A_PRECISION Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_2
c_2
c
c

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_239(uint256) = c_1 (c)* D_1
lnorm: 0 rnorm: u
[i]Type for TMP_239

Name: TMP_239 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_240(uint256) = N_A_3 (c)* 2
lnorm: u rnorm: 0
[i]Type for TMP_240

Name: TMP_240 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_241(uint256) = TMP_240 (c)/ A_PRECISION_2
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for TMP_241

Name: TMP_241 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_242(uint256) = TMP_239 (c)/ TMP_241
lnorm: 0 rnorm: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_242

Name: TMP_242 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
c_2(uint256) := TMP_242(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_PRECISION_2
A_PRECISION_2
A_PRECISION

Name: A_PRECISION Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_3
N_A_3
N_A

Name: N_A Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x

Name: x Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
b_1
b_1
b
b

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_243(uint256) = D_1 (c)* A_PRECISION_2
lnorm: u rnorm: u
[i]Type for TMP_243

Name: TMP_243 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244(uint256) = TMP_243 (c)/ N_A_3
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_244

Name: TMP_244 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_245(uint256) = x_1 (c)+ TMP_244

Name: x Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_244 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_245

Name: TMP_245 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
b_1(uint256) := TMP_245(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for b

Name: b Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
y_1(uint256) := D_1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
i_1
i_1
i
i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
i_1(uint256) := 0(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
MAX_LOOP_LIMIT_2
MAX_LOOP_LIMIT_2
MAX_LOOP_LIMIT

Name: MAX_LOOP_LIMIT Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
i_2
i
i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_2
y_2
y
y

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
i_2
i
i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
y_2
y
y

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
i
i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_2(uint256) := ϕ(['y_1', 'y_3'])
Phi
[i]Type for y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_2(uint256) := ϕ(['i_3', 'i_1'])
Phi
[i]Type for i

Name: i Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_246(bool) = i_2 < MAX_LOOP_LIMIT_2
lnorm: u rnorm: u
[i]Type for TMP_246

Name: TMP_246 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
y_2
y_2
y
y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
yPrev_1
yPrev_1
yPrev
yPrev

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
yPrev_1(uint256) := y_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for yPrev

Name: yPrev Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
c_2
c_2
c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
y_2
y_2
y
y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
b_1
b_1
b

Name: b Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_3
y_3
y
y

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_247(uint256) = y_2 (c)* y_2
lnorm: u rnorm: u
[i]Type for TMP_247

Name: TMP_247 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_248(uint256) = TMP_247 (c)+ c_2

Name: TMP_247 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 0
[i]Type for TMP_248

Name: TMP_248 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_249(uint256) = y_2 (c)* 2
lnorm: u rnorm: 0
[i]Type for TMP_249

Name: TMP_249 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_250(uint256) = TMP_249 (c)+ b_1

Name: TMP_249 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: b Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 0 rnorm: u
[i]Type for TMP_250

Name: TMP_250 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_251(uint256) = TMP_250 (c)- D_1
SUB1
lnorm: 0 rnorm: u
SUB

Name: TMP_250 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_251

Name: TMP_251 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_252(uint256) = TMP_248 (c)/ TMP_251
lnorm: 0 rnorm: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_252

Name: TMP_252 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_3(uint256) := TMP_252(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
yPrev_1
yPrev_1
yPrev
yPrev

Name: yPrev Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_3
y_3
y

Name: y Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_253(bool) = LIBRARY_CALL, dest:MathUtils, function:MathUtils.within1(uint256,uint256), arguments:['y_3', 'yPrev_1'] 
[i]Type for TMP_253

Name: TMP_253 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
i_2
i_2
i
i

Name: i Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_3
i_3
i
i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_254(uint256) := i_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_254

Name: TMP_254 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_3(uint256) = i_2 (c)+ 1

Name: i Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 0
[i]Type for i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: x Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: D Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
x_1
x

Name: x_1 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_LOOP_LIMIT_2
MAX_LOOP_LIMIT

Name: MAX_LOOP_LIMIT Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_3
N_A

Name: N_A Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_PRECISION_2
A_PRECISION

Name: A_PRECISION Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1(uint256) := ϕ(['x_1'])
Phi
[i]Type for x

Name: x Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
D_1(uint256) := ϕ(['d_1'])
Phi
[i]Type for D

Name: D Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_LOOP_LIMIT_2(uint256) := ϕ(['MAX_LOOP_LIMIT_0'])
Phi
[i]Type for MAX_LOOP_LIMIT

Name: MAX_LOOP_LIMIT Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
N_A_3(uint256) := ϕ(['N_A_0', 'N_A_1'])
Phi
[i]Type for N_A

Name: N_A Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
A_PRECISION_2(uint256) := ϕ(['A_PRECISION_0'])
Phi
[i]Type for A_PRECISION

Name: A_PRECISION Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x

Name: x Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_1
c_1
c
c

Name: c Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_236(uint256) = D_1 (c)* D_1
lnorm: u rnorm: u
[i]Type for TMP_236

Name: TMP_236 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_237(uint256) = x_1 (c)* 2
lnorm: u rnorm: 0
[i]Type for TMP_237

Name: TMP_237 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_238(uint256) = TMP_236 (c)/ TMP_237
lnorm: u rnorm: 0
lnorm: u rnorm: 0
[i]Type for TMP_238

Name: TMP_238 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
c_1(uint256) := TMP_238(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_1
c_1
c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_3
N_A_3
N_A

Name: N_A Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_PRECISION_2
A_PRECISION_2
A_PRECISION

Name: A_PRECISION Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_2
c_2
c
c

Name: c Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_239(uint256) = c_1 (c)* D_1
lnorm: 0 rnorm: u
[i]Type for TMP_239

Name: TMP_239 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_240(uint256) = N_A_3 (c)* 2
lnorm: u rnorm: 0
[i]Type for TMP_240

Name: TMP_240 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_241(uint256) = TMP_240 (c)/ A_PRECISION_2
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for TMP_241

Name: TMP_241 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_242(uint256) = TMP_239 (c)/ TMP_241
lnorm: 0 rnorm: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_242

Name: TMP_242 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
c_2(uint256) := TMP_242(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_PRECISION_2
A_PRECISION_2
A_PRECISION

Name: A_PRECISION Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_3
N_A_3
N_A

Name: N_A Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x

Name: x Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
b_1
b_1
b
b

Name: b Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_243(uint256) = D_1 (c)* A_PRECISION_2
lnorm: u rnorm: u
[i]Type for TMP_243

Name: TMP_243 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244(uint256) = TMP_243 (c)/ N_A_3
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_244

Name: TMP_244 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_245(uint256) = x_1 (c)+ TMP_244

Name: x Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_244 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_245

Name: TMP_245 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
b_1(uint256) := TMP_245(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for b

Name: b Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
y_1(uint256) := D_1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
i_1
i_1
i
i

Name: i Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
i_1(uint256) := 0(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
MAX_LOOP_LIMIT_2
MAX_LOOP_LIMIT_2
MAX_LOOP_LIMIT

Name: MAX_LOOP_LIMIT Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
i_2
i
i

Name: i Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_2
y_2
y
y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
i_2
i
i

Name: i Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
y_2
y
y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
i
i

Name: i Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_2(uint256) := ϕ(['y_1', 'y_3'])
Phi
[i]Type for y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_2(uint256) := ϕ(['i_3', 'i_1'])
Phi
[i]Type for i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_246(bool) = i_2 < MAX_LOOP_LIMIT_2
lnorm: u rnorm: u
[i]Type for TMP_246

Name: TMP_246 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
y_2
y_2
y
y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
yPrev_1
yPrev_1
yPrev
yPrev

Name: yPrev Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
yPrev_1(uint256) := y_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for yPrev

Name: yPrev Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
c_2
c_2
c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
y_2
y_2
y
y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
b_1
b_1
b

Name: b Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_3
y_3
y
y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_247(uint256) = y_2 (c)* y_2
lnorm: u rnorm: u
[i]Type for TMP_247

Name: TMP_247 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_248(uint256) = TMP_247 (c)+ c_2

Name: TMP_247 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 0
[i]Type for TMP_248

Name: TMP_248 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_249(uint256) = y_2 (c)* 2
lnorm: u rnorm: 0
[i]Type for TMP_249

Name: TMP_249 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_250(uint256) = TMP_249 (c)+ b_1

Name: TMP_249 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: b Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 0 rnorm: u
[i]Type for TMP_250

Name: TMP_250 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_251(uint256) = TMP_250 (c)- D_1
SUB1
lnorm: 0 rnorm: u
SUB

Name: TMP_250 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_251

Name: TMP_251 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_252(uint256) = TMP_248 (c)/ TMP_251
lnorm: 0 rnorm: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_252

Name: TMP_252 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_3(uint256) := TMP_252(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
yPrev_1
yPrev_1
yPrev
yPrev

Name: yPrev Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_3
y_3
y

Name: y Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_253(bool) = LIBRARY_CALL, dest:MathUtils, function:MathUtils.within1(uint256,uint256), arguments:['y_3', 'yPrev_1'] 
[i]Type for TMP_253

Name: TMP_253 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
i_2
i_2
i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_3
i_3
i
i

Name: i Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_254(uint256) := i_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_254

Name: TMP_254 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_3(uint256) = i_2 (c)+ 1

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 0
[i]Type for i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: x Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: D Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
x_1
x

Name: x Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_LOOP_LIMIT_2
MAX_LOOP_LIMIT

Name: MAX_LOOP_LIMIT Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_3
N_A

Name: N_A Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_PRECISION_2
A_PRECISION

Name: A_PRECISION Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1(uint256) := ϕ(['x_1'])
Phi
[i]Type for x

Name: x Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
D_1(uint256) := ϕ(['d_1'])
Phi
[i]Type for D

Name: D Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_LOOP_LIMIT_2(uint256) := ϕ(['MAX_LOOP_LIMIT_0'])
Phi
[i]Type for MAX_LOOP_LIMIT

Name: MAX_LOOP_LIMIT Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
N_A_3(uint256) := ϕ(['N_A_0', 'N_A_1'])
Phi
[i]Type for N_A

Name: N_A Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
A_PRECISION_2(uint256) := ϕ(['A_PRECISION_0'])
Phi
[i]Type for A_PRECISION

Name: A_PRECISION Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x

Name: x Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_1
c_1
c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_236(uint256) = D_1 (c)* D_1
lnorm: u rnorm: u
[i]Type for TMP_236

Name: TMP_236 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_237(uint256) = x_1 (c)* 2
lnorm: u rnorm: 0
[i]Type for TMP_237

Name: TMP_237 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_238(uint256) = TMP_236 (c)/ TMP_237
lnorm: u rnorm: 0
lnorm: u rnorm: 0
[i]Type for TMP_238

Name: TMP_238 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
c_1(uint256) := TMP_238(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_1
c_1
c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_3
N_A_3
N_A

Name: N_A Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_PRECISION_2
A_PRECISION_2
A_PRECISION

Name: A_PRECISION Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_2
c_2
c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_239(uint256) = c_1 (c)* D_1
lnorm: 0 rnorm: u
[i]Type for TMP_239

Name: TMP_239 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_240(uint256) = N_A_3 (c)* 2
lnorm: u rnorm: 0
[i]Type for TMP_240

Name: TMP_240 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_241(uint256) = TMP_240 (c)/ A_PRECISION_2
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for TMP_241

Name: TMP_241 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_242(uint256) = TMP_239 (c)/ TMP_241
lnorm: 0 rnorm: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_242

Name: TMP_242 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
c_2(uint256) := TMP_242(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_PRECISION_2
A_PRECISION_2
A_PRECISION

Name: A_PRECISION Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_3
N_A_3
N_A

Name: N_A Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x

Name: x Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
b_1
b_1
b

Name: b Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_243(uint256) = D_1 (c)* A_PRECISION_2
lnorm: u rnorm: u
[i]Type for TMP_243

Name: TMP_243 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244(uint256) = TMP_243 (c)/ N_A_3
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_244

Name: TMP_244 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_245(uint256) = x_1 (c)+ TMP_244

Name: x Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_244 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_245

Name: TMP_245 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
b_1(uint256) := TMP_245(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for b

Name: b Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
y_1(uint256) := D_1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
i_1
i_1
i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
i_1(uint256) := 0(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
MAX_LOOP_LIMIT_2
MAX_LOOP_LIMIT_2
MAX_LOOP_LIMIT

Name: MAX_LOOP_LIMIT Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
i_2
i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_2
y_2
y
y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
i_2
i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
y_2
y
y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_2(uint256) := ϕ(['y_1', 'y_3'])
Phi
[i]Type for y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_2(uint256) := ϕ(['i_3', 'i_1'])
Phi
[i]Type for i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_246(bool) = i_2 < MAX_LOOP_LIMIT_2
lnorm: u rnorm: u
[i]Type for TMP_246

Name: TMP_246 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
y_2
y_2
y
y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
yPrev_1
yPrev_1
yPrev
yPrev

Name: yPrev Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
yPrev_1(uint256) := y_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for yPrev

Name: yPrev Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
c_2
c_2
c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
y_2
y_2
y
y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
b_1
b_1
b

Name: b Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_3
y_3
y

Name: y Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_247(uint256) = y_2 (c)* y_2
lnorm: u rnorm: u
[i]Type for TMP_247

Name: TMP_247 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_248(uint256) = TMP_247 (c)+ c_2

Name: TMP_247 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 0
[i]Type for TMP_248

Name: TMP_248 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_249(uint256) = y_2 (c)* 2
lnorm: u rnorm: 0
[i]Type for TMP_249

Name: TMP_249 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_250(uint256) = TMP_249 (c)+ b_1

Name: TMP_249 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: b Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 0 rnorm: u
[i]Type for TMP_250

Name: TMP_250 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_251(uint256) = TMP_250 (c)- D_1
SUB1
lnorm: 0 rnorm: u
SUB

Name: TMP_250 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_251

Name: TMP_251 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_252(uint256) = TMP_248 (c)/ TMP_251
lnorm: 0 rnorm: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_252

Name: TMP_252 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_3(uint256) := TMP_252(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
yPrev_1
yPrev_1
yPrev
yPrev

Name: yPrev Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_3
y_3
y

Name: y Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_253(bool) = LIBRARY_CALL, dest:MathUtils, function:MathUtils.within1(uint256,uint256), arguments:['y_3', 'yPrev_1'] 
[i]Type for TMP_253

Name: TMP_253 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
i_2
i_2
i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_3
i_3
i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_254(uint256) := i_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_254

Name: TMP_254 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_3(uint256) = i_2 (c)+ 1

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 0
[i]Type for i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: x Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: D Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
x_1
x

Name: x Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_LOOP_LIMIT_2
MAX_LOOP_LIMIT

Name: MAX_LOOP_LIMIT Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_3
N_A

Name: N_A Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_PRECISION_2
A_PRECISION

Name: A_PRECISION Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1(uint256) := ϕ(['x_1'])
Phi
[i]Type for x

Name: x Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
D_1(uint256) := ϕ(['d_1'])
Phi
[i]Type for D

Name: D Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_LOOP_LIMIT_2(uint256) := ϕ(['MAX_LOOP_LIMIT_0'])
Phi
[i]Type for MAX_LOOP_LIMIT

Name: MAX_LOOP_LIMIT Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
N_A_3(uint256) := ϕ(['N_A_0', 'N_A_1'])
Phi
[i]Type for N_A

Name: N_A Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
A_PRECISION_2(uint256) := ϕ(['A_PRECISION_0'])
Phi
[i]Type for A_PRECISION

Name: A_PRECISION Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x

Name: x Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_1
c_1
c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_236(uint256) = D_1 (c)* D_1
lnorm: u rnorm: u
[i]Type for TMP_236

Name: TMP_236 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_237(uint256) = x_1 (c)* 2
lnorm: u rnorm: 0
[i]Type for TMP_237

Name: TMP_237 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_238(uint256) = TMP_236 (c)/ TMP_237
lnorm: u rnorm: 0
lnorm: u rnorm: 0
[i]Type for TMP_238

Name: TMP_238 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
c_1(uint256) := TMP_238(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_1
c_1
c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_3
N_A_3
N_A

Name: N_A Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_PRECISION_2
A_PRECISION_2
A_PRECISION

Name: A_PRECISION Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_2
c_2
c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_239(uint256) = c_1 (c)* D_1
lnorm: 0 rnorm: u
[i]Type for TMP_239

Name: TMP_239 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_240(uint256) = N_A_3 (c)* 2
lnorm: u rnorm: 0
[i]Type for TMP_240

Name: TMP_240 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_241(uint256) = TMP_240 (c)/ A_PRECISION_2
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for TMP_241

Name: TMP_241 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_242(uint256) = TMP_239 (c)/ TMP_241
lnorm: 0 rnorm: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_242

Name: TMP_242 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
c_2(uint256) := TMP_242(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
A_PRECISION_2
A_PRECISION_2
A_PRECISION

Name: A_PRECISION Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
N_A_3
N_A_3
N_A

Name: N_A Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x

Name: x Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
b_1
b_1
b

Name: b Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_243(uint256) = D_1 (c)* A_PRECISION_2
lnorm: u rnorm: u
[i]Type for TMP_243

Name: TMP_243 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244(uint256) = TMP_243 (c)/ N_A_3
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_244

Name: TMP_244 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_245(uint256) = x_1 (c)+ TMP_244

Name: x Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_244 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_245

Name: TMP_245 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
b_1(uint256) := TMP_245(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for b

Name: b Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
y_1(uint256) := D_1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
i_1
i_1
i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
i_1(uint256) := 0(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
MAX_LOOP_LIMIT_2
MAX_LOOP_LIMIT_2
MAX_LOOP_LIMIT

Name: MAX_LOOP_LIMIT Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
i_2
i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_2
y_2
y
y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
i_2
i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
y_2
y
y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2
i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_2(uint256) := ϕ(['y_1', 'y_3'])
Phi
[i]Type for y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_2(uint256) := ϕ(['i_3', 'i_1'])
Phi
[i]Type for i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_246(bool) = i_2 < MAX_LOOP_LIMIT_2
lnorm: u rnorm: u
[i]Type for TMP_246

Name: TMP_246 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
y_2
y_2
y
y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
yPrev_1
yPrev_1
yPrev
yPrev

Name: yPrev Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
yPrev_1(uint256) := y_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for yPrev

Name: yPrev Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
c_2
c_2
c

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
y_2
y_2
y
y

Name: y Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
b_1
b_1
b

Name: b Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
D_1
D_1
D
D

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_3
y_3
y

Name: y Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_247(uint256) = y_2 (c)* y_2
lnorm: u rnorm: u
[i]Type for TMP_247

Name: TMP_247 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_248(uint256) = TMP_247 (c)+ c_2

Name: TMP_247 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: c Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 0
[i]Type for TMP_248

Name: TMP_248 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_249(uint256) = y_2 (c)* 2
lnorm: u rnorm: 0
[i]Type for TMP_249

Name: TMP_249 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_250(uint256) = TMP_249 (c)+ b_1

Name: TMP_249 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: b Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 0 rnorm: u
[i]Type for TMP_250

Name: TMP_250 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_251(uint256) = TMP_250 (c)- D_1
SUB1
lnorm: 0 rnorm: u
SUB

Name: TMP_250 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: D_1 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_251

Name: TMP_251 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_252(uint256) = TMP_248 (c)/ TMP_251
lnorm: 0 rnorm: 0
lnorm: 0 rnorm: 0
[i]Type for TMP_252

Name: TMP_252 Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_3(uint256) := TMP_252(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
yPrev_1
yPrev_1
yPrev
yPrev

Name: yPrev Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_3
y_3
y

Name: y Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_253(bool) = LIBRARY_CALL, dest:MathUtils, function:MathUtils.within1(uint256,uint256), arguments:['y_3', 'yPrev_1'] 
[i]Type for TMP_253

Name: TMP_253 Function: _getY
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
i_2
i_2
i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_3
i_3
i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_254(uint256) := i_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_254

Name: TMP_254 Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_3(uint256) = i_2 (c)+ 1

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 0
[i]Type for i

Name: i Function: _getY
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier
token1PrecisionMultiplier

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier
token0PrecisionMultiplier

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_106

Name: TMP_106 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1_3(uint256) = amount1_1 (c)+ TMP_106

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_106 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 0 rnorm: u
[i]Type for amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount1_1
amount1_1
amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1_15
token1_15
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
fee_scope_0_1
fee_scope_0_1
fee_scope_0
fee_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_111(uint256) = INTERNAL_CALL, HybridPool._handleFee(address,uint256)(token1_15,amount1_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: tokenIn Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenIn Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenIn_1
tokenIn

Name: tokenIn_1 Function: _handleFee
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn

Name: amountIn_1 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1(address) := ϕ(['token1_15', 'tokenIn_1', 'token0_15'])
Phi
[i]Type for tokenIn

Name: tokenIn Function: _handleFee
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := ϕ(['amount1_1', 'amountIn_2', 'amount0_1', 'amountIn_1'])
Phi
[i]Type for amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_7(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_7(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_16(address) := ϕ(['barFeeTo_15', 'barFeeTo_17', 'barFeeTo_1', 'barFeeTo_0'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_3(uint256) := ϕ(['barFee_2', 'barFee_0', 'barFee_1'])
Phi
[i]Type for barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_274(uint256) = amountIn_1 (c)* swapFee_7
lnorm: u rnorm: u
[i]Type for TMP_274

Name: TMP_274 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_275(uint256) = TMP_274 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_275

Name: TMP_275 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_275(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
barFee_3
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_barFee_1
_barFee_1
_barFee
_barFee

Name: _barFee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_276(uint256) = fee_1 (c)* barFee_3
lnorm: u rnorm: u
[i]Type for TMP_276

Name: TMP_276 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_277(uint256) = TMP_276 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_277

Name: TMP_277 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_barFee_1(uint256) := TMP_277(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_barFee_1
_barFee_1
_barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: _handleFee
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenIn_1,_barFee_1,barFeeTo_16,False)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 4, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: tokenIn Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenIn_1
tokenIn

Name: tokenIn_1 Function: _handleFee
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn

Name: amountIn_1 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1(address) := ϕ(['token1_15', 'tokenIn_1', 'token0_15'])
Phi
[i]Type for tokenIn

Name: tokenIn Function: _handleFee
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := ϕ(['amount1_1', 'amountIn_2', 'amount0_1', 'amountIn_1'])
Phi
[i]Type for amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_7(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_7(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_16(address) := ϕ(['barFeeTo_15', 'barFeeTo_17', 'barFeeTo_1', 'barFeeTo_0'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_3(uint256) := ϕ(['barFee_2', 'barFee_0', 'barFee_1'])
Phi
[i]Type for barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_274(uint256) = amountIn_1 (c)* swapFee_7
lnorm: u rnorm: u
[i]Type for TMP_274

Name: TMP_274 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_275(uint256) = TMP_274 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_275

Name: TMP_275 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_275(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
barFee_3
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_barFee_1
_barFee_1
_barFee
_barFee

Name: _barFee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_276(uint256) = fee_1 (c)* barFee_3
lnorm: u rnorm: u
[i]Type for TMP_276

Name: TMP_276 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_277(uint256) = TMP_276 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_277

Name: TMP_277 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_barFee_1(uint256) := TMP_277(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_barFee_1
_barFee_1
_barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: _handleFee
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenIn_1,_barFee_1,barFeeTo_16,False)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 4, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_111

Name: TMP_111 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_scope_0_1(uint256) := TMP_111(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee_scope_0

Name: fee_scope_0 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1_1
amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
fee_scope_0_1
fee_scope_0_1
fee_scope_0
fee_scope_0

Name: fee_scope_0 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_2
amount0_2
amount0
amount0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_112(uint256) = amount1_1 (c)- fee_scope_0_1
SUB1
lnorm: 0 rnorm: u
SUB

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: fee_scope_0 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_112

Name: TMP_112 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_113(uint256) = _reserve0_1 (c)- amount0_1
SUB1
lnorm: u rnorm: 0
SUB

Name: _reserve0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_113

Name: TMP_113 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_114(uint256) = _reserve1_1 (c)- amount1_1
SUB1
lnorm: 0 rnorm: 0
SUB

Name: _reserve1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_114

Name: TMP_114 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_115(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_112,TMP_113,TMP_114,False)
[i]Type for TMP_115

Name: TMP_115 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0_2(uint256) = amount0_1 (c)+ TMP_115

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_115 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 0 rnorm: u
[i]Type for amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
recipient_1
recipient_1
recipient

Name: recipient Function: burnSingle
Num: 
Den: 
Address: -993
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_3
amount1_3
amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1_21
token1_21
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(token1_21,amount1_3,recipient_1,unwrapBento_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -993, 'u']

Name: to Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0_21
token0_21
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0

Name: balance0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_2
balance0_2
balance0
balance0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_108(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token0_21,amount0_1)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_108

Name: TMP_108 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance0_2(uint256) = balance0_1 (c)- TMP_108
SUB1
lnorm: 0 rnorm: u
SUB

Name: balance0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_108 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for balance0

Name: balance0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount1_3
amount1_3
amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_2
amountOut_2
amountOut
amountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountOut_2(uint256) := amount1_3(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountOut

Name: amountOut Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
recipient_1
recipient_1
recipient

Name: recipient Function: burnSingle
Num: 
Den: 
Address: -993
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_2
amount0_2
amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token0_17
token0_17
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(token0_17,amount0_2,recipient_1,unwrapBento_1)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -993, 'u']

Name: to Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount0_3
amount0_3
amount0
amount0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amount0_3(uint256) := 0(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount1_1
amount1_1
amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1_18
token1_18
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1

Name: balance1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_2
balance1_2
balance1
balance1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_117(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token1_18,amount1_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_117

Name: TMP_117 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance1_2(uint256) = balance1_1 (c)- TMP_117
SUB1
lnorm: 0 rnorm: u
SUB

Name: balance1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_117 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for balance1

Name: balance1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amount0_4
amount0
amount0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_4
amount1
amount1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_4(uint256) := ϕ(['amount0_3', 'amount0_2'])
Phi
[i]Type for amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
amount1_4(uint256) := ϕ(['amount1_3', 'amount1_2'])
Phi
[i]Type for amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount0_2
amount0_2
amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
amountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountOut_1(uint256) := amount0_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountOut

Name: amountOut Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, HybridPool._updateReserves()()
Propogating parameters and globals to SSA variables...
amount1_2
amount1_2
amount1
amount1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amount1_2(uint256) := 0(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
recipient_1
recipient_1
recipient

Name: recipient Function: burnSingle
Num: 
Den: 
Address: -993
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_4
amount1_4
amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_4
amount0_4
amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation


totalSupply_12(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
balanceOf_14(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
token0_11(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
token1_11(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
MODIFIER_CALL, HybridPool.lock()()
TUPLE_11(address,address,bool) = SOLIDITY_CALL abi.decode()(data_1(address,address,bool))
tokenOut_1(address)= UNPACK TUPLE_11 index: 0 
recipient_1(address)= UNPACK TUPLE_11 index: 1 
unwrapBento_1(bool)= UNPACK TUPLE_11 index: 2 
TUPLE_12(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
token0_13(address) := ϕ(['token0_39'])
token1_13(address) := ϕ(['token1_40'])
_reserve0_1(uint256)= UNPACK TUPLE_12 index: 0 
_reserve1_1(uint256)= UNPACK TUPLE_12 index: 1 
TUPLE_13(uint256,uint256) = INTERNAL_CALL, HybridPool._balance()()
token0_14(address) := ϕ(['token0_42'])
token1_14(address) := ϕ(['token1_45'])
balance0_1(uint256)= UNPACK TUPLE_13 index: 0 
balance1_1(uint256)= UNPACK TUPLE_13 index: 1 
_totalSupply_1(uint256) := totalSupply_15(uint256)
TMP_94 = CONVERT this to address
REF_46(uint256) -> balanceOf_17[TMP_94]
liquidity_1(uint256) := REF_46(uint256)
TMP_95(uint256) = liquidity_1 (c)* balance0_1
TMP_96(uint256) = TMP_95 (c)/ _totalSupply_1
amount0_1(uint256) := TMP_96(uint256)
TMP_97(uint256) = liquidity_1 (c)* balance1_1
TMP_98(uint256) = TMP_97 (c)/ _totalSupply_1
amount1_1(uint256) := TMP_98(uint256)
TMP_99 = CONVERT this to address
INTERNAL_CALL, TridentERC20._burn(address,uint256)(TMP_99,liquidity_1)
TMP_101(bool) = tokenOut_1 == token1_15
CONDITION TMP_101
TMP_109(bool) = tokenOut_1 == token0_15
TMP_110(None) = SOLIDITY_CALL require(bool,string)(TMP_109,INVALID_OUTPUT_TOKEN)
TMP_102(uint256) = INTERNAL_CALL, HybridPool._handleFee(address,uint256)(token0_15,amount0_1)
fee_1(uint256) := TMP_102(uint256)
TMP_103(uint256) = amount0_1 (c)- fee_1
TMP_104(uint256) = _reserve0_1 (c)- amount0_1
TMP_105(uint256) = _reserve1_1 (c)- amount1_1
TMP_106(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_103,TMP_104,TMP_105,True)
amount1_3(uint256) = amount1_1 (c)+ TMP_106
TMP_111(uint256) = INTERNAL_CALL, HybridPool._handleFee(address,uint256)(token1_15,amount1_1)
fee_scope_0_1(uint256) := TMP_111(uint256)
TMP_112(uint256) = amount1_1 (c)- fee_scope_0_1
TMP_113(uint256) = _reserve0_1 (c)- amount0_1
TMP_114(uint256) = _reserve1_1 (c)- amount1_1
TMP_115(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_112,TMP_113,TMP_114,False)
amount0_2(uint256) = amount0_1 (c)+ TMP_115
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(token1_21,amount1_3,recipient_1,unwrapBento_1)
TMP_108(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token0_21,amount0_1)
balance0_2(uint256) = balance0_1 (c)- TMP_108
amountOut_2(uint256) := amount1_3(uint256)
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(token0_17,amount0_2,recipient_1,unwrapBento_1)
amount0_3(uint256) := 0(uint256)
TMP_117(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token1_18,amount1_1)
balance1_2(uint256) = balance1_1 (c)- TMP_117
amount0_4(uint256) := ϕ(['amount0_3', 'amount0_2'])
amount1_4(uint256) := ϕ(['amount1_3', 'amount1_2'])
amountOut_1(uint256) := amount0_2(uint256)
INTERNAL_CALL, HybridPool._updateReserves()()
amount1_2(uint256) := 0(uint256)
Emit Burn(msg.sender,amount0_4,amount1_4,recipient_1)


Propogating parameters and globals to SSA variables...
End popogation
totalSupply_12
totalSupply

Name: totalSupply Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_14
balanceOf

Name: balanceOf Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_11
token0

Name: token0 Function: burnSingle
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_11
token1

Name: token1 Function: burnSingle
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
totalSupply_12(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOf_14(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_11(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
Phi
[i]Type for token0

Name: token0 Function: burnSingle
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_11(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
Phi
[i]Type for token1

Name: token1 Function: burnSingle
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, HybridPool.lock()()
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient
recipient

Name: recipient Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_1
tokenOut_1
tokenOut
tokenOut

Name: tokenOut Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_11(address,address,bool) = SOLIDITY_CALL abi.decode()(data_1(address,address,bool))
[i]Type for TUPLE_11

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tokenOut_1(address)= UNPACK TUPLE_11 index: 0 
Finding type for tokenOut(address ... )
prev address? u
Head Addr: -994
    Norm: 0
    Set: {-994}
    Fin: NULL
[i]Type for tokenOut

Name: tokenOut Function: burnSingle
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address)= UNPACK TUPLE_11 index: 1 
Finding type for recipient(address ... )
prev address? u
Head Addr: -993
    Norm: 0
    Set: {-993}
    Fin: NULL
[i]Type for recipient

Name: recipient Function: burnSingle
Num: 
Den: 
Address: -993
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool)= UNPACK TUPLE_11 index: 2 
Finding type for unwrapBento(bool ... )
[i]Type for unwrapBento

Name: unwrapBento Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1
_reserve1

Name: _reserve1 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0
_reserve0

Name: _reserve0 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
token0_13
token0

Name: token0 Function: burnSingle
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_13
token1

Name: token1 Function: burnSingle
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
TUPLE_12(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
[i]Type for TUPLE_12

Name: TUPLE_12 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_13(address) := ϕ(['token0_39'])
Phi
[i]Type for token0

Name: token0 Function: burnSingle
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_13(address) := ϕ(['token1_40'])
Phi
[i]Type for token1

Name: token1 Function: burnSingle
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256)= UNPACK TUPLE_12 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for _reserve0

Name: _reserve0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256)= UNPACK TUPLE_12 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for _reserve1

Name: _reserve1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
balance0_1
balance0_1
balance0
balance0

Name: balance0 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1
balance1

Name: balance1 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
token0_14
token0

Name: token0 Function: burnSingle
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_14
token1

Name: token1 Function: burnSingle
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
TUPLE_13(uint256,uint256) = INTERNAL_CALL, HybridPool._balance()()
[i]Type for TUPLE_13

Name: TUPLE_13 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_14(address) := ϕ(['token0_42'])
Phi
[i]Type for token0

Name: token0 Function: burnSingle
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_14(address) := ϕ(['token1_45'])
Phi
[i]Type for token1

Name: token1 Function: burnSingle
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
balance0_1(uint256)= UNPACK TUPLE_13 index: 0 
([-1], [-1], '0', None, -1)
[i]Type for balance0

Name: balance0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance1_1(uint256)= UNPACK TUPLE_13 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for balance1

Name: balance1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
totalSupply_15
totalSupply_15
totalSupply

Name: totalSupply Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_totalSupply_1
_totalSupply_1
_totalSupply
_totalSupply

Name: _totalSupply Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
_totalSupply_1(uint256) := totalSupply_15(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _totalSupply

Name: _totalSupply Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balanceOf_17
balanceOf_17
balanceOf

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity
liquidity

Name: liquidity Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_94 = CONVERT this to address
Converting this
6
[i]Type for TMP_94

Name: TMP_94 Function: burnSingle
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
REF_46(uint256) -> balanceOf_17[TMP_94]
INDEX
[i]Type for REF_46

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
liquidity_1(uint256) := REF_46(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_totalSupply_1
_totalSupply_1
_totalSupply

Name: _totalSupply Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity

Name: liquidity Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0

Name: balance0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0
amount0

Name: amount0 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_95(uint256) = liquidity_1 (c)* balance0_1
lnorm: u rnorm: 0
[i]Type for TMP_95

Name: TMP_95 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_96(uint256) = TMP_95 (c)/ _totalSupply_1
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for TMP_96

Name: TMP_96 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0_1(uint256) := TMP_96(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_totalSupply_1
_totalSupply_1
_totalSupply

Name: _totalSupply Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1
liquidity_1
liquidity

Name: liquidity Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1

Name: balance1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1_1
amount1
amount1

Name: amount1 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_97(uint256) = liquidity_1 (c)* balance1_1
lnorm: u rnorm: 0
[i]Type for TMP_97

Name: TMP_97 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_98(uint256) = TMP_97 (c)/ _totalSupply_1
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for TMP_98

Name: TMP_98 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1_1(uint256) := TMP_98(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
liquidity_1
liquidity_1
liquidity

Name: liquidity Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_99 = CONVERT this to address
Converting this
6
[i]Type for TMP_99

Name: TMP_99 Function: burnSingle
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, TridentERC20._burn(address,uint256)(TMP_99,liquidity_1)
[[], [], 'u', 'HybridPool', [], -1, 6, 'u']

Name: sender Function: None
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: sender Function: None
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
sender_1
sender

Name: sender_1 Function: _burn
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_3
totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_9
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sender_1(address) := ϕ(['TMP_99', 'TMP_81'])
Phi
[i]Type for sender

Name: sender Function: _burn
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['liquidity_1', 'liquidity_1'])
Phi
[i]Type for amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalSupply_3(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOf_9(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balanceOf_10
balanceOf_10
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sender_1
sender_1
sender

Name: sender Function: _burn
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_10
balanceOf_10
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
balanceOf_10
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_17(uint256) -> balanceOf_9[sender_1]
INDEX
[i]Type for REF_17

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
balanceOf_10(mapping(address => uint256)) := ϕ(['balanceOf_9'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_17(-> balanceOf_10) = REF_17 (c)- amount_1
SUB1
lnorm: u rnorm: u
SUB

Name: REF_17 Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_17

Name: REF_17 Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
totalSupply_3
totalSupply_3
totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_4
totalSupply_4
totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
totalSupply_4(uint256) = totalSupply_3 - amount_1
SUB1
lnorm: u rnorm: u
SUB

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
sender_1
sender_1
sender

Name: sender Function: _burn
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_30 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: _burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: sender Function: None
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
sender_1
sender

Name: sender_1 Function: _burn
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_3
totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_9
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sender_1(address) := ϕ(['TMP_99', 'TMP_81'])
Phi
[i]Type for sender

Name: sender Function: _burn
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['liquidity_1', 'liquidity_1'])
Phi
[i]Type for amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalSupply_3(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2', 'totalSupply_11', 'totalSupply_15', 'totalSupply_8'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOf_9(mapping(address => uint256)) := ϕ(['balanceOf_3', 'balanceOf_8', 'balanceOf_10', 'balanceOf_6', 'balanceOf_0', 'balanceOf_17', 'balanceOf_13'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balanceOf_10
balanceOf_10
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sender_1
sender_1
sender

Name: sender Function: _burn
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOf_10
balanceOf_10
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
balanceOf_10
balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_17(uint256) -> balanceOf_9[sender_1]
INDEX
[i]Type for REF_17

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
balanceOf_10(mapping(address => uint256)) := ϕ(['balanceOf_9'])
Phi
[i]Type for balanceOf

Name: balanceOf Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_17(-> balanceOf_10) = REF_17 (c)- amount_1
SUB1
lnorm: u rnorm: u
SUB

Name: REF_17 Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_17

Name: REF_17 Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
totalSupply_3
totalSupply_3
totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_4
totalSupply_4
totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
totalSupply_4(uint256) = totalSupply_3 - amount_1
SUB1
lnorm: u rnorm: u
SUB

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalSupply

Name: totalSupply Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
sender_1
sender_1
sender

Name: sender Function: _burn
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_30 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: _burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1_15
token1_15
token1

Name: token1 Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
tokenOut_1
tokenOut_1
tokenOut

Name: tokenOut Function: burnSingle
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_101(bool) = tokenOut_1 == token1_15
[i]Type for TMP_101

Name: TMP_101 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
tokenOut_1
tokenOut_1
tokenOut

Name: tokenOut Function: burnSingle
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_15
token0_15
token0

Name: token0 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_109(bool) = tokenOut_1 == token0_15
[i]Type for TMP_109

Name: TMP_109 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_110(None) = SOLIDITY_CALL require(bool,string)(TMP_109,INVALID_OUTPUT_TOKEN)
[i]Type for TMP_110

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount0_1
amount0_1
amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token0_15
token0_15
token0

Name: token0 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_102(uint256) = INTERNAL_CALL, HybridPool._handleFee(address,uint256)(token0_15,amount0_1)
[i]Type for TMP_102

Name: TMP_102 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_102(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1_1
amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_3
amount1_3
amount1
amount1

Name: amount1 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_103(uint256) = amount0_1 (c)- fee_1
SUB1
lnorm: 0 rnorm: u
SUB

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: fee Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_103

Name: TMP_103 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_104(uint256) = _reserve0_1 (c)- amount0_1
SUB1
lnorm: u rnorm: 0
SUB

Name: _reserve0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_104

Name: TMP_104 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_105(uint256) = _reserve1_1 (c)- amount1_1
SUB1
lnorm: 0 rnorm: 0
SUB

Name: _reserve1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_105

Name: TMP_105 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_106(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_103,TMP_104,TMP_105,True)
[i]Type for TMP_106

Name: TMP_106 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1_3(uint256) = amount1_1 (c)+ TMP_106

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_106 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 0 rnorm: u
[i]Type for amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount1_1
amount1_1
amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1_15
token1_15
token1

Name: token1 Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
fee_scope_0_1
fee_scope_0_1
fee_scope_0
fee_scope_0

Name: fee_scope_0 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_111(uint256) = INTERNAL_CALL, HybridPool._handleFee(address,uint256)(token1_15,amount1_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: tokenIn Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenIn Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenIn_1
tokenIn

Name: tokenIn_1 Function: _handleFee
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn

Name: amountIn_1 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1(address) := ϕ(['token1_15', 'tokenIn_1', 'token0_15'])
Phi
[i]Type for tokenIn

Name: tokenIn Function: _handleFee
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := ϕ(['amount1_1', 'amountIn_2', 'amount0_1', 'amountIn_1'])
Phi
[i]Type for amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_7(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_7(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_16(address) := ϕ(['barFeeTo_15', 'barFeeTo_17', 'barFeeTo_1', 'barFeeTo_0'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_3(uint256) := ϕ(['barFee_2', 'barFee_0', 'barFee_1'])
Phi
[i]Type for barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_274(uint256) = amountIn_1 (c)* swapFee_7
lnorm: u rnorm: u
[i]Type for TMP_274

Name: TMP_274 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_275(uint256) = TMP_274 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_275

Name: TMP_275 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_275(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
barFee_3
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_barFee_1
_barFee_1
_barFee
_barFee

Name: _barFee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_276(uint256) = fee_1 (c)* barFee_3
lnorm: u rnorm: u
[i]Type for TMP_276

Name: TMP_276 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_277(uint256) = TMP_276 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_277

Name: TMP_277 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_barFee_1(uint256) := TMP_277(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_barFee_1
_barFee_1
_barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: _handleFee
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenIn_1,_barFee_1,barFeeTo_16,False)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 4, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: tokenIn Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenIn_1
tokenIn

Name: tokenIn_1 Function: _handleFee
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn

Name: amountIn_1 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1(address) := ϕ(['token1_15', 'tokenIn_1', 'token0_15'])
Phi
[i]Type for tokenIn

Name: tokenIn Function: _handleFee
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := ϕ(['amount1_1', 'amountIn_2', 'amount0_1', 'amountIn_1'])
Phi
[i]Type for amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_7(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_7(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_16(address) := ϕ(['barFeeTo_15', 'barFeeTo_17', 'barFeeTo_1', 'barFeeTo_0'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_3(uint256) := ϕ(['barFee_2', 'barFee_0', 'barFee_1'])
Phi
[i]Type for barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_274(uint256) = amountIn_1 (c)* swapFee_7
lnorm: u rnorm: u
[i]Type for TMP_274

Name: TMP_274 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_275(uint256) = TMP_274 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_275

Name: TMP_275 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_275(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
barFee_3
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_barFee_1
_barFee_1
_barFee
_barFee

Name: _barFee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_276(uint256) = fee_1 (c)* barFee_3
lnorm: u rnorm: u
[i]Type for TMP_276

Name: TMP_276 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_277(uint256) = TMP_276 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_277

Name: TMP_277 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_barFee_1(uint256) := TMP_277(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_barFee_1
_barFee_1
_barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: _handleFee
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenIn_1,_barFee_1,barFeeTo_16,False)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 4, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_111

Name: TMP_111 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_scope_0_1(uint256) := TMP_111(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee_scope_0

Name: fee_scope_0 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1_1
amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
fee_scope_0_1
fee_scope_0_1
fee_scope_0
fee_scope_0

Name: fee_scope_0 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_2
amount0_2
amount0
amount0

Name: amount0 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_112(uint256) = amount1_1 (c)- fee_scope_0_1
SUB1
lnorm: 0 rnorm: u
SUB

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: fee_scope_0 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_112

Name: TMP_112 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_113(uint256) = _reserve0_1 (c)- amount0_1
SUB1
lnorm: u rnorm: 0
SUB

Name: _reserve0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_113

Name: TMP_113 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_114(uint256) = _reserve1_1 (c)- amount1_1
SUB1
lnorm: 0 rnorm: 0
SUB

Name: _reserve1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_114

Name: TMP_114 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_115(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_112,TMP_113,TMP_114,False)
[i]Type for TMP_115

Name: TMP_115 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0_2(uint256) = amount0_1 (c)+ TMP_115

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_115 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 0 rnorm: u
[i]Type for amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
recipient_1
recipient_1
recipient

Name: recipient Function: burnSingle
Num: 
Den: 
Address: -993
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_3
amount1_3
amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1_21
token1_21
token1

Name: token1 Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(token1_21,amount1_3,recipient_1,unwrapBento_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -993, 'u']

Name: to Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0_21
token0_21
token0

Name: token0 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0

Name: balance0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_2
balance0_2
balance0
balance0

Name: balance0 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_108(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token0_21,amount0_1)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_108

Name: TMP_108 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance0_2(uint256) = balance0_1 (c)- TMP_108
SUB1
lnorm: 0 rnorm: u
SUB

Name: balance0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_108 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for balance0

Name: balance0 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount1_3
amount1_3
amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_2
amountOut_2
amountOut
amountOut

Name: amountOut Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountOut_2(uint256) := amount1_3(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountOut

Name: amountOut Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
recipient_1
recipient_1
recipient

Name: recipient Function: burnSingle
Num: 
Den: 
Address: -993
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_2
amount0_2
amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token0_17
token0_17
token0

Name: token0 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(token0_17,amount0_2,recipient_1,unwrapBento_1)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -993, 'u']

Name: to Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount0_3
amount0_3
amount0
amount0

Name: amount0 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
amount0_3(uint256) := 0(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount1_1
amount1_1
amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1_18
token1_18
token1

Name: token1 Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1

Name: balance1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_2
balance1_2
balance1
balance1

Name: balance1 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_117(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token1_18,amount1_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_117

Name: TMP_117 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance1_2(uint256) = balance1_1 (c)- TMP_117
SUB1
lnorm: 0 rnorm: u
SUB

Name: balance1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_117 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for balance1

Name: balance1 Function: burnSingle
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amount0_4
amount0
amount0

Name: amount0 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
amount1_4
amount1
amount1

Name: amount1 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_4(uint256) := ϕ(['amount0_3', 'amount0_2'])
Phi
[i]Type for amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
amount1_4(uint256) := ϕ(['amount1_3', 'amount1_2'])
Phi
[i]Type for amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amount0_2
amount0_2
amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
amountOut

Name: amountOut Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountOut_1(uint256) := amount0_2(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountOut

Name: amountOut Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, HybridPool._updateReserves()()
Propogating parameters and globals to SSA variables...
amount1_2
amount1_2
amount1
amount1

Name: amount1 Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
amount1_2(uint256) := 0(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
recipient_1
recipient_1
recipient

Name: recipient Function: burnSingle
Num: 
Den: 
Address: -993
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_4
amount1_4
amount1

Name: amount1 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_4
amount0_4
amount0

Name: amount0 Function: burnSingle
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation



swap
Finding type for data(bytes ... )
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


token0_23(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
token1_23(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
MODIFIER_CALL, HybridPool.lock()()
TUPLE_14(address,address,bool) = SOLIDITY_CALL abi.decode()(data_1(address,address,bool))
tokenIn_1(address)= UNPACK TUPLE_14 index: 0 
recipient_1(address)= UNPACK TUPLE_14 index: 1 
unwrapBento_1(bool)= UNPACK TUPLE_14 index: 2 
TUPLE_15(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
token0_25(address) := ϕ(['token0_39'])
token1_25(address) := ϕ(['token1_40'])
_reserve0_1(uint256)= UNPACK TUPLE_15 index: 0 
_reserve1_1(uint256)= UNPACK TUPLE_15 index: 1 
TUPLE_16(uint256,uint256) = INTERNAL_CALL, HybridPool._balance()()
token0_26(address) := ϕ(['token0_42'])
token1_26(address) := ϕ(['token1_45'])
balance0_1(uint256)= UNPACK TUPLE_16 index: 0 
balance1_1(uint256)= UNPACK TUPLE_16 index: 1 
TMP_121(bool) = tokenIn_1 == token0_26
CONDITION TMP_121
TMP_126(bool) = tokenIn_1 == token1_26
TMP_127(None) = SOLIDITY_CALL require(bool,string)(TMP_126,INVALID_INPUT_TOKEN)
tokenOut_1(address) := token1_26(address)
tokenOut_2(address) := token0_26(address)
TMP_122(uint256) = balance0_1 (c)- _reserve0_1
amountIn_1(uint256) := TMP_122(uint256)
TMP_128(uint256) = balance1_1 (c)- _reserve1_1
amountIn_2(uint256) := TMP_128(uint256)
TMP_123(uint256) = INTERNAL_CALL, HybridPool._handleFee(address,uint256)(tokenIn_1,amountIn_1)
fee_1(uint256) := TMP_123(uint256)
TMP_129(uint256) = INTERNAL_CALL, HybridPool._handleFee(address,uint256)(tokenIn_1,amountIn_2)
fee_scope_0_1(uint256) := TMP_129(uint256)
TMP_124(uint256) = amountIn_1 (c)- fee_1
TMP_125(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_124,_reserve0_1,_reserve1_1,True)
amountOut_1(uint256) := TMP_125(uint256)
TMP_130(uint256) = amountIn_2 (c)- fee_scope_0_1
TMP_131(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_130,_reserve0_1,_reserve1_1,False)
amountOut_2(uint256) := TMP_131(uint256)
amountOut_3(uint256) := ϕ(['amountOut_1', 'amountOut_2'])
amountIn_3(uint256) := ϕ(['amountIn_1', 'amountIn_2'])
tokenOut_3(address) := ϕ(['tokenOut_1', 'tokenOut_2'])
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenOut_3,amountOut_3,recipient_1,unwrapBento_1)
INTERNAL_CALL, HybridPool._updateReserves()()
Emit Swap(recipient_1,tokenIn_1,tokenOut_3,amountIn_3,amountOut_3)


Propogating parameters and globals to SSA variables...
End popogation
token0_23
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_23
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
token0_23(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
Phi
[i]Type for token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_23(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
Phi
[i]Type for token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, HybridPool.lock()()
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn
tokenIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient
recipient

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_14(address,address,bool) = SOLIDITY_CALL abi.decode()(data_1(address,address,bool))
[i]Type for TUPLE_14

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tokenIn_1(address)= UNPACK TUPLE_14 index: 0 
Finding type for tokenIn(address ... )
prev address? u
Head Addr: -992
    Norm: 0
    Set: {-992}
    Fin: NULL
[i]Type for tokenIn

Name: tokenIn Function: swap
Num: 
Den: 
Address: -992
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address)= UNPACK TUPLE_14 index: 1 
Finding type for recipient(address ... )
prev address? u
Head Addr: -991
    Norm: 0
    Set: {-991}
    Fin: NULL
[i]Type for recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -991
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool)= UNPACK TUPLE_14 index: 2 
Finding type for unwrapBento(bool ... )
[i]Type for unwrapBento

Name: unwrapBento Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0
_reserve0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1
_reserve1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
token0_25
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_25
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
TUPLE_15(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
[i]Type for TUPLE_15

Name: TUPLE_15 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_25(address) := ϕ(['token0_39'])
Phi
[i]Type for token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_25(address) := ϕ(['token1_40'])
Phi
[i]Type for token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256)= UNPACK TUPLE_15 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for _reserve0

Name: _reserve0 Function: swap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256)= UNPACK TUPLE_15 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for _reserve1

Name: _reserve1 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
balance0_1
balance0_1
balance0
balance0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1
balance1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
token0_26
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_26
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
TUPLE_16(uint256,uint256) = INTERNAL_CALL, HybridPool._balance()()
[i]Type for TUPLE_16

Name: TUPLE_16 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_26(address) := ϕ(['token0_42'])
Phi
[i]Type for token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_26(address) := ϕ(['token1_45'])
Phi
[i]Type for token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
balance0_1(uint256)= UNPACK TUPLE_16 index: 0 
([-1], [-1], '0', None, -1)
[i]Type for balance0

Name: balance0 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance1_1(uint256)= UNPACK TUPLE_16 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for balance1

Name: balance1 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: swap
Num: 
Den: 
Address: -992
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_26
token0_26
token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_121(bool) = tokenIn_1 == token0_26
[i]Type for TMP_121

Name: TMP_121 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1_26
token1_26
token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: swap
Num: 
Den: 
Address: -992
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_126(bool) = tokenIn_1 == token1_26
[i]Type for TMP_126

Name: TMP_126 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_127(None) = SOLIDITY_CALL require(bool,string)(TMP_126,INVALID_INPUT_TOKEN)
[i]Type for TMP_127

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1_26
token1_26
token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
tokenOut_1
tokenOut_1
tokenOut
tokenOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
tokenOut_1(address) := token1_26(address)
asgn
Finance type key: (-1, -1)
[i]Type for tokenOut

Name: tokenOut Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0_26
token0_26
token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
tokenOut_2
tokenOut_2
tokenOut
tokenOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
tokenOut_2(address) := token0_26(address)
asgn
Finance type key: (-1, -1)
[i]Type for tokenOut

Name: tokenOut Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balance0_1
balance0_1
balance0

Name: balance0 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: swap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn
amountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_122(uint256) = balance0_1 (c)- _reserve0_1
SUB1
lnorm: 0 rnorm: u
SUB

Name: balance0 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: swap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_122

Name: TMP_122 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := TMP_122(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountIn

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balance1_1
balance1_1
balance1

Name: balance1 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_128(uint256) = balance1_1 (c)- _reserve1_1
SUB1
lnorm: 0 rnorm: 0
SUB

Name: balance1 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_128

Name: TMP_128 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_2(uint256) := TMP_128(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountIn

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: swap
Num: 
Den: 
Address: -992
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_123(uint256) = INTERNAL_CALL, HybridPool._handleFee(address,uint256)(tokenIn_1,amountIn_1)
[[], [], 'u', None, [], -1, -992, 'u']

Name: tokenIn Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenIn Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenIn_1
tokenIn

Name: tokenIn_1 Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn

Name: amountIn_1 Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1(address) := ϕ(['token1_15', 'tokenIn_1', 'token0_15'])
Phi
[i]Type for tokenIn

Name: tokenIn Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := ϕ(['amount1_1', 'amountIn_2', 'amount0_1', 'amountIn_1'])
Phi
[i]Type for amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_7(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_7(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_16(address) := ϕ(['barFeeTo_15', 'barFeeTo_17', 'barFeeTo_1', 'barFeeTo_0'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_3(uint256) := ϕ(['barFee_2', 'barFee_0', 'barFee_1'])
Phi
[i]Type for barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_274(uint256) = amountIn_1 (c)* swapFee_7
lnorm: u rnorm: u
[i]Type for TMP_274

Name: TMP_274 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_275(uint256) = TMP_274 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_275

Name: TMP_275 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_275(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
barFee_3
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_barFee_1
_barFee_1
_barFee
_barFee

Name: _barFee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_276(uint256) = fee_1 (c)* barFee_3
lnorm: u rnorm: u
[i]Type for TMP_276

Name: TMP_276 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_277(uint256) = TMP_276 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_277

Name: TMP_277 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_barFee_1(uint256) := TMP_277(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_barFee_1
_barFee_1
_barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenIn_1,_barFee_1,barFeeTo_16,False)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 4, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: tokenIn Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenIn_1
tokenIn

Name: tokenIn_1 Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn

Name: amountIn_1 Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1(address) := ϕ(['token1_15', 'tokenIn_1', 'token0_15'])
Phi
[i]Type for tokenIn

Name: tokenIn Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := ϕ(['amount1_1', 'amountIn_2', 'amount0_1', 'amountIn_1'])
Phi
[i]Type for amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_7(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_7(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_16(address) := ϕ(['barFeeTo_15', 'barFeeTo_17', 'barFeeTo_1', 'barFeeTo_0'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_3(uint256) := ϕ(['barFee_2', 'barFee_0', 'barFee_1'])
Phi
[i]Type for barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_274(uint256) = amountIn_1 (c)* swapFee_7
lnorm: u rnorm: u
[i]Type for TMP_274

Name: TMP_274 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_275(uint256) = TMP_274 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_275

Name: TMP_275 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_275(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
barFee_3
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_barFee_1
_barFee_1
_barFee
_barFee

Name: _barFee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_276(uint256) = fee_1 (c)* barFee_3
lnorm: u rnorm: u
[i]Type for TMP_276

Name: TMP_276 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_277(uint256) = TMP_276 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_277

Name: TMP_277 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_barFee_1(uint256) := TMP_277(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_barFee_1
_barFee_1
_barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenIn_1,_barFee_1,barFeeTo_16,False)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 4, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_123

Name: TMP_123 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_123(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_2
amountIn_2
amountIn

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: swap
Num: 
Den: 
Address: -992
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_scope_0_1
fee_scope_0_1
fee_scope_0
fee_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_129(uint256) = INTERNAL_CALL, HybridPool._handleFee(address,uint256)(tokenIn_1,amountIn_2)
[[], [], 'u', None, [], -1, -992, 'u']

Name: tokenIn Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenIn Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenIn_1
tokenIn

Name: tokenIn_1 Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn

Name: amountIn_1 Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1(address) := ϕ(['token1_15', 'tokenIn_1', 'token0_15'])
Phi
[i]Type for tokenIn

Name: tokenIn Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := ϕ(['amount1_1', 'amountIn_2', 'amount0_1', 'amountIn_1'])
Phi
[i]Type for amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_7(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_7(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_16(address) := ϕ(['barFeeTo_15', 'barFeeTo_17', 'barFeeTo_1', 'barFeeTo_0'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_3(uint256) := ϕ(['barFee_2', 'barFee_0', 'barFee_1'])
Phi
[i]Type for barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_274(uint256) = amountIn_1 (c)* swapFee_7
lnorm: u rnorm: u
[i]Type for TMP_274

Name: TMP_274 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_275(uint256) = TMP_274 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_275

Name: TMP_275 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_275(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
barFee_3
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_barFee_1
_barFee_1
_barFee
_barFee

Name: _barFee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_276(uint256) = fee_1 (c)* barFee_3
lnorm: u rnorm: u
[i]Type for TMP_276

Name: TMP_276 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_277(uint256) = TMP_276 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_277

Name: TMP_277 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_barFee_1(uint256) := TMP_277(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_barFee_1
_barFee_1
_barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenIn_1,_barFee_1,barFeeTo_16,False)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 4, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: tokenIn Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenIn_1
tokenIn

Name: tokenIn_1 Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn

Name: amountIn_1 Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1(address) := ϕ(['token1_15', 'tokenIn_1', 'token0_15'])
Phi
[i]Type for tokenIn

Name: tokenIn Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := ϕ(['amount1_1', 'amountIn_2', 'amount0_1', 'amountIn_1'])
Phi
[i]Type for amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_7(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_7(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_16(address) := ϕ(['barFeeTo_15', 'barFeeTo_17', 'barFeeTo_1', 'barFeeTo_0'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_3(uint256) := ϕ(['barFee_2', 'barFee_0', 'barFee_1'])
Phi
[i]Type for barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_274(uint256) = amountIn_1 (c)* swapFee_7
lnorm: u rnorm: u
[i]Type for TMP_274

Name: TMP_274 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_275(uint256) = TMP_274 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_275

Name: TMP_275 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_275(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
barFee_3
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_barFee_1
_barFee_1
_barFee
_barFee

Name: _barFee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_276(uint256) = fee_1 (c)* barFee_3
lnorm: u rnorm: u
[i]Type for TMP_276

Name: TMP_276 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_277(uint256) = TMP_276 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_277

Name: TMP_277 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_barFee_1(uint256) := TMP_277(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_barFee_1
_barFee_1
_barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenIn_1,_barFee_1,barFeeTo_16,False)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 4, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_129

Name: TMP_129 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_scope_0_1(uint256) := TMP_129(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee_scope_0

Name: fee_scope_0 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: swap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
amountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_124(uint256) = amountIn_1 (c)- fee_1
SUB1
lnorm: 0 rnorm: u
SUB

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: fee Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_124

Name: TMP_124 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_125(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_124,_reserve0_1,_reserve1_1,True)
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, -1, 'u']

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_125

Name: TMP_125 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := TMP_125(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountOut

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
fee_scope_0_1
fee_scope_0_1
fee_scope_0
fee_scope_0

Name: fee_scope_0 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: swap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_2
amountOut_2
amountOut
amountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_130(uint256) = amountIn_2 (c)- fee_scope_0_1
SUB1
lnorm: 0 rnorm: u
SUB

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: fee_scope_0 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_130

Name: TMP_130 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_131(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_130,_reserve0_1,_reserve1_1,False)
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, -1, 'u']

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_131

Name: TMP_131 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_2(uint256) := TMP_131(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountOut

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountOut_3
amountOut
amountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn
amountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_3
tokenOut
tokenOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_3(uint256) := ϕ(['amountOut_1', 'amountOut_2'])
Phi
[i]Type for amountOut

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_3(uint256) := ϕ(['amountIn_1', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tokenOut_3(address) := ϕ(['tokenOut_1', 'tokenOut_2'])
Phi
[i]Type for tokenOut

Name: tokenOut Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
tokenOut_3
tokenOut_3
tokenOut

Name: tokenOut Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amountOut_3
amountOut_3
amountOut
amountOut

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -991
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenOut_3,amountOut_3,recipient_1,unwrapBento_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -991, 'u']

Name: to Function: None
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, HybridPool._updateReserves()()
Propogating parameters and globals to SSA variables...
tokenOut_3
tokenOut_3
tokenOut

Name: tokenOut Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -991
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_3
amountOut_3
amountOut
amountOut

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: swap
Num: 
Den: 
Address: -992
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation


token0_23(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
token1_23(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
MODIFIER_CALL, HybridPool.lock()()
TUPLE_14(address,address,bool) = SOLIDITY_CALL abi.decode()(data_1(address,address,bool))
tokenIn_1(address)= UNPACK TUPLE_14 index: 0 
recipient_1(address)= UNPACK TUPLE_14 index: 1 
unwrapBento_1(bool)= UNPACK TUPLE_14 index: 2 
TUPLE_15(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
token0_25(address) := ϕ(['token0_39'])
token1_25(address) := ϕ(['token1_40'])
_reserve0_1(uint256)= UNPACK TUPLE_15 index: 0 
_reserve1_1(uint256)= UNPACK TUPLE_15 index: 1 
TUPLE_16(uint256,uint256) = INTERNAL_CALL, HybridPool._balance()()
token0_26(address) := ϕ(['token0_42'])
token1_26(address) := ϕ(['token1_45'])
balance0_1(uint256)= UNPACK TUPLE_16 index: 0 
balance1_1(uint256)= UNPACK TUPLE_16 index: 1 
TMP_121(bool) = tokenIn_1 == token0_26
CONDITION TMP_121
TMP_126(bool) = tokenIn_1 == token1_26
TMP_127(None) = SOLIDITY_CALL require(bool,string)(TMP_126,INVALID_INPUT_TOKEN)
tokenOut_1(address) := token1_26(address)
tokenOut_2(address) := token0_26(address)
TMP_122(uint256) = balance0_1 (c)- _reserve0_1
amountIn_1(uint256) := TMP_122(uint256)
TMP_128(uint256) = balance1_1 (c)- _reserve1_1
amountIn_2(uint256) := TMP_128(uint256)
TMP_123(uint256) = INTERNAL_CALL, HybridPool._handleFee(address,uint256)(tokenIn_1,amountIn_1)
fee_1(uint256) := TMP_123(uint256)
TMP_129(uint256) = INTERNAL_CALL, HybridPool._handleFee(address,uint256)(tokenIn_1,amountIn_2)
fee_scope_0_1(uint256) := TMP_129(uint256)
TMP_124(uint256) = amountIn_1 (c)- fee_1
TMP_125(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_124,_reserve0_1,_reserve1_1,True)
amountOut_1(uint256) := TMP_125(uint256)
TMP_130(uint256) = amountIn_2 (c)- fee_scope_0_1
TMP_131(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_130,_reserve0_1,_reserve1_1,False)
amountOut_2(uint256) := TMP_131(uint256)
amountOut_3(uint256) := ϕ(['amountOut_1', 'amountOut_2'])
amountIn_3(uint256) := ϕ(['amountIn_1', 'amountIn_2'])
tokenOut_3(address) := ϕ(['tokenOut_1', 'tokenOut_2'])
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenOut_3,amountOut_3,recipient_1,unwrapBento_1)
INTERNAL_CALL, HybridPool._updateReserves()()
Emit Swap(recipient_1,tokenIn_1,tokenOut_3,amountIn_3,amountOut_3)


Propogating parameters and globals to SSA variables...
End popogation
token0_23
token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_23
token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
token0_23(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
Phi
[i]Type for token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_23(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
Phi
[i]Type for token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, HybridPool.lock()()
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn
tokenIn

Name: tokenIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient
recipient

Name: recipient Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_14(address,address,bool) = SOLIDITY_CALL abi.decode()(data_1(address,address,bool))
[i]Type for TUPLE_14

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tokenIn_1(address)= UNPACK TUPLE_14 index: 0 
Finding type for tokenIn(address ... )
prev address? u
Head Addr: -992
    Norm: 0
    Set: {-992}
    Fin: NULL
[i]Type for tokenIn

Name: tokenIn Function: swap
Num: 
Den: 
Address: -992
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address)= UNPACK TUPLE_14 index: 1 
Finding type for recipient(address ... )
prev address? u
Head Addr: -991
    Norm: 0
    Set: {-991}
    Fin: NULL
[i]Type for recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -991
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool)= UNPACK TUPLE_14 index: 2 
Finding type for unwrapBento(bool ... )
[i]Type for unwrapBento

Name: unwrapBento Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0
_reserve0

Name: _reserve0 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1
_reserve1

Name: _reserve1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
token0_25
token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_25
token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
TUPLE_15(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
[i]Type for TUPLE_15

Name: TUPLE_15 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_25(address) := ϕ(['token0_39'])
Phi
[i]Type for token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_25(address) := ϕ(['token1_40'])
Phi
[i]Type for token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256)= UNPACK TUPLE_15 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for _reserve0

Name: _reserve0 Function: swap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256)= UNPACK TUPLE_15 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for _reserve1

Name: _reserve1 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
balance0_1
balance0_1
balance0
balance0

Name: balance0 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1
balance1

Name: balance1 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
token0_26
token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_26
token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
TUPLE_16(uint256,uint256) = INTERNAL_CALL, HybridPool._balance()()
[i]Type for TUPLE_16

Name: TUPLE_16 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_26(address) := ϕ(['token0_42'])
Phi
[i]Type for token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_26(address) := ϕ(['token1_45'])
Phi
[i]Type for token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
balance0_1(uint256)= UNPACK TUPLE_16 index: 0 
([-1], [-1], '0', None, -1)
[i]Type for balance0

Name: balance0 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance1_1(uint256)= UNPACK TUPLE_16 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for balance1

Name: balance1 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: swap
Num: 
Den: 
Address: -992
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_26
token0_26
token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_121(bool) = tokenIn_1 == token0_26
[i]Type for TMP_121

Name: TMP_121 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1_26
token1_26
token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: swap
Num: 
Den: 
Address: -992
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_126(bool) = tokenIn_1 == token1_26
[i]Type for TMP_126

Name: TMP_126 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_127(None) = SOLIDITY_CALL require(bool,string)(TMP_126,INVALID_INPUT_TOKEN)
[i]Type for TMP_127

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1_26
token1_26
token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
tokenOut_1
tokenOut_1
tokenOut
tokenOut

Name: tokenOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
tokenOut_1(address) := token1_26(address)
asgn
Finance type key: (-1, -1)
[i]Type for tokenOut

Name: tokenOut Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0_26
token0_26
token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
tokenOut_2
tokenOut_2
tokenOut
tokenOut

Name: tokenOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
tokenOut_2(address) := token0_26(address)
asgn
Finance type key: (-1, -1)
[i]Type for tokenOut

Name: tokenOut Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balance0_1
balance0_1
balance0

Name: balance0 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: swap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn
amountIn

Name: amountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_122(uint256) = balance0_1 (c)- _reserve0_1
SUB1
lnorm: 0 rnorm: u
SUB

Name: balance0 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: swap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_122

Name: TMP_122 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := TMP_122(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountIn

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
balance1_1
balance1_1
balance1

Name: balance1 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_128(uint256) = balance1_1 (c)- _reserve1_1
SUB1
lnorm: 0 rnorm: 0
SUB

Name: balance1 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_128

Name: TMP_128 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_2(uint256) := TMP_128(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountIn

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: swap
Num: 
Den: 
Address: -992
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_123(uint256) = INTERNAL_CALL, HybridPool._handleFee(address,uint256)(tokenIn_1,amountIn_1)
[[], [], 'u', None, [], -1, -992, 'u']

Name: tokenIn Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenIn Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenIn_1
tokenIn

Name: tokenIn_1 Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn

Name: amountIn_1 Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1(address) := ϕ(['token1_15', 'tokenIn_1', 'token0_15'])
Phi
[i]Type for tokenIn

Name: tokenIn Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := ϕ(['amount1_1', 'amountIn_2', 'amount0_1', 'amountIn_1'])
Phi
[i]Type for amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_7(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_7(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_16(address) := ϕ(['barFeeTo_15', 'barFeeTo_17', 'barFeeTo_1', 'barFeeTo_0'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_3(uint256) := ϕ(['barFee_2', 'barFee_0', 'barFee_1'])
Phi
[i]Type for barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_274(uint256) = amountIn_1 (c)* swapFee_7
lnorm: u rnorm: u
[i]Type for TMP_274

Name: TMP_274 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_275(uint256) = TMP_274 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_275

Name: TMP_275 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_275(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
barFee_3
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_barFee_1
_barFee_1
_barFee
_barFee

Name: _barFee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_276(uint256) = fee_1 (c)* barFee_3
lnorm: u rnorm: u
[i]Type for TMP_276

Name: TMP_276 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_277(uint256) = TMP_276 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_277

Name: TMP_277 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_barFee_1(uint256) := TMP_277(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_barFee_1
_barFee_1
_barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenIn_1,_barFee_1,barFeeTo_16,False)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 4, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: tokenIn Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenIn_1
tokenIn

Name: tokenIn_1 Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn

Name: amountIn_1 Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1(address) := ϕ(['token1_15', 'tokenIn_1', 'token0_15'])
Phi
[i]Type for tokenIn

Name: tokenIn Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := ϕ(['amount1_1', 'amountIn_2', 'amount0_1', 'amountIn_1'])
Phi
[i]Type for amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_7(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_7(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_16(address) := ϕ(['barFeeTo_15', 'barFeeTo_17', 'barFeeTo_1', 'barFeeTo_0'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_3(uint256) := ϕ(['barFee_2', 'barFee_0', 'barFee_1'])
Phi
[i]Type for barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_274(uint256) = amountIn_1 (c)* swapFee_7
lnorm: u rnorm: u
[i]Type for TMP_274

Name: TMP_274 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_275(uint256) = TMP_274 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_275

Name: TMP_275 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_275(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
barFee_3
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_barFee_1
_barFee_1
_barFee
_barFee

Name: _barFee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_276(uint256) = fee_1 (c)* barFee_3
lnorm: u rnorm: u
[i]Type for TMP_276

Name: TMP_276 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_277(uint256) = TMP_276 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_277

Name: TMP_277 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_barFee_1(uint256) := TMP_277(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_barFee_1
_barFee_1
_barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenIn_1,_barFee_1,barFeeTo_16,False)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 4, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_123

Name: TMP_123 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_123(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_2
amountIn_2
amountIn

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: swap
Num: 
Den: 
Address: -992
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_scope_0_1
fee_scope_0_1
fee_scope_0
fee_scope_0

Name: fee_scope_0 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_129(uint256) = INTERNAL_CALL, HybridPool._handleFee(address,uint256)(tokenIn_1,amountIn_2)
[[], [], 'u', None, [], -1, -992, 'u']

Name: tokenIn Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenIn Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenIn_1
tokenIn

Name: tokenIn_1 Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn

Name: amountIn_1 Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1(address) := ϕ(['token1_15', 'tokenIn_1', 'token0_15'])
Phi
[i]Type for tokenIn

Name: tokenIn Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := ϕ(['amount1_1', 'amountIn_2', 'amount0_1', 'amountIn_1'])
Phi
[i]Type for amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_7(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_7(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_16(address) := ϕ(['barFeeTo_15', 'barFeeTo_17', 'barFeeTo_1', 'barFeeTo_0'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_3(uint256) := ϕ(['barFee_2', 'barFee_0', 'barFee_1'])
Phi
[i]Type for barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_274(uint256) = amountIn_1 (c)* swapFee_7
lnorm: u rnorm: u
[i]Type for TMP_274

Name: TMP_274 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_275(uint256) = TMP_274 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_275

Name: TMP_275 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_275(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
barFee_3
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_barFee_1
_barFee_1
_barFee
_barFee

Name: _barFee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_276(uint256) = fee_1 (c)* barFee_3
lnorm: u rnorm: u
[i]Type for TMP_276

Name: TMP_276 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_277(uint256) = TMP_276 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_277

Name: TMP_277 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_barFee_1(uint256) := TMP_277(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_barFee_1
_barFee_1
_barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenIn_1,_barFee_1,barFeeTo_16,False)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 4, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: tokenIn Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenIn_1
tokenIn

Name: tokenIn_1 Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn

Name: amountIn_1 Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1(address) := ϕ(['token1_15', 'tokenIn_1', 'token0_15'])
Phi
[i]Type for tokenIn

Name: tokenIn Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256) := ϕ(['amount1_1', 'amountIn_2', 'amount0_1', 'amountIn_1'])
Phi
[i]Type for amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_7(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_7(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_16(address) := ϕ(['barFeeTo_15', 'barFeeTo_17', 'barFeeTo_1', 'barFeeTo_0'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_3(uint256) := ϕ(['barFee_2', 'barFee_0', 'barFee_1'])
Phi
[i]Type for barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_7
swapFee_7
swapFee

Name: swapFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _handleFee
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_274(uint256) = amountIn_1 (c)* swapFee_7
lnorm: u rnorm: u
[i]Type for TMP_274

Name: TMP_274 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_275(uint256) = TMP_274 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_275

Name: TMP_275 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_275(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
barFee_3
barFee_3
barFee

Name: barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_7
MAX_FEE_7
MAX_FEE

Name: MAX_FEE Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee

Name: fee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_barFee_1
_barFee_1
_barFee
_barFee

Name: _barFee Function: _handleFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_276(uint256) = fee_1 (c)* barFee_3
lnorm: u rnorm: u
[i]Type for TMP_276

Name: TMP_276 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_277(uint256) = TMP_276 (c)/ MAX_FEE_7
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_277

Name: TMP_277 Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_barFee_1(uint256) := TMP_277(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for _barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_barFee_1
_barFee_1
_barFee

Name: _barFee Function: _handleFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: _handleFee
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
barFeeTo_16
barFeeTo_16
barFeeTo

Name: barFeeTo Function: _handleFee
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenIn_1,_barFee_1,barFeeTo_16,False)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 4, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token1', [], -1, -992, 'u']

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -992
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_129

Name: TMP_129 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_scope_0_1(uint256) := TMP_129(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee_scope_0

Name: fee_scope_0 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: swap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
amountOut

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_124(uint256) = amountIn_1 (c)- fee_1
SUB1
lnorm: 0 rnorm: u
SUB

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: fee Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_124

Name: TMP_124 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_125(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_124,_reserve0_1,_reserve1_1,True)
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, -1, 'u']

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_125

Name: TMP_125 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := TMP_125(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountOut

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
fee_scope_0_1
fee_scope_0_1
fee_scope_0
fee_scope_0

Name: fee_scope_0 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: swap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_2
amountOut_2
amountOut
amountOut

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_130(uint256) = amountIn_2 (c)- fee_scope_0_1
SUB1
lnorm: 0 rnorm: u
SUB

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: fee_scope_0 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_130

Name: TMP_130 Function: swap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_131(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_130,_reserve0_1,_reserve1_1,False)
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, -1, 'u']

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: amountIn Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_131

Name: TMP_131 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_2(uint256) := TMP_131(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountOut

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountOut_3
amountOut
amountOut

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn
amountIn

Name: amountIn Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_3
tokenOut
tokenOut

Name: tokenOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amountOut_3(uint256) := ϕ(['amountOut_1', 'amountOut_2'])
Phi
[i]Type for amountOut

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_3(uint256) := ϕ(['amountIn_1', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tokenOut_3(address) := ϕ(['tokenOut_1', 'tokenOut_2'])
Phi
[i]Type for tokenOut

Name: tokenOut Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
tokenOut_3
tokenOut_3
tokenOut

Name: tokenOut Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amountOut_3
amountOut_3
amountOut
amountOut

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -991
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenOut_3,amountOut_3,recipient_1,unwrapBento_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -991, 'u']

Name: to Function: None
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -991
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, HybridPool._updateReserves()()
Propogating parameters and globals to SSA variables...
tokenOut_3
tokenOut_3
tokenOut

Name: tokenOut Function: swap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -991
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_3
amountOut_3
amountOut
amountOut

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn

Name: amountIn Function: swap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: swap
Num: 
Den: 
Address: -992
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation



flashSwap
Finding type for data(bytes ... )
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


MAX_FEE_2(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
swapFee_2(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
barFeeTo_2(address) := ϕ(['barFeeTo_15', 'barFeeTo_17', 'barFeeTo_1', 'barFeeTo_0'])
token0_27(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
token1_27(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
MODIFIER_CALL, HybridPool.lock()()
TUPLE_17(address,address,bool,uint256,bytes) = SOLIDITY_CALL abi.decode()(data_1(address,address,bool,uint256,bytes))
tokenIn_1(address)= UNPACK TUPLE_17 index: 0 
recipient_1(address)= UNPACK TUPLE_17 index: 1 
unwrapBento_1(bool)= UNPACK TUPLE_17 index: 2 
amountIn_1(uint256)= UNPACK TUPLE_17 index: 3 
context_1(bytes)= UNPACK TUPLE_17 index: 4 
TUPLE_18(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
token0_29(address) := ϕ(['token0_39'])
token1_29(address) := ϕ(['token1_40'])
_reserve0_1(uint256)= UNPACK TUPLE_18 index: 0 
_reserve1_1(uint256)= UNPACK TUPLE_18 index: 1 
TMP_136(bool) = tokenIn_1 == token0_29
CONDITION TMP_136
tokenOut_2(address) := token1_29(address)
TMP_137(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token0_29,amountIn_1)
amountIn_3(uint256) := TMP_137(uint256)
TMP_148(bool) = tokenIn_1 == token1_29
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,INVALID_INPUT_TOKEN)
TMP_138(uint256) = amountIn_3 (c)* swapFee_6
TMP_139(uint256) = TMP_138 (c)/ MAX_FEE_6
fee_2(uint256) := TMP_139(uint256)
tokenOut_1(address) := token0_29(address)
TMP_140(uint256) = amountIn_3 (c)- fee_2
TMP_141(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_140,_reserve0_1,_reserve1_1,True)
amountOut_2(uint256) := TMP_141(uint256)
TMP_150(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token1_29,amountIn_1)
amountIn_2(uint256) := TMP_150(uint256)
TMP_151(uint256) = amountIn_2 (c)* swapFee_5
TMP_152(uint256) = TMP_151 (c)/ MAX_FEE_5
fee_1(uint256) := TMP_152(uint256)
TMP_153(uint256) = amountIn_2 (c)- fee_1
TMP_154(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_153,_reserve0_1,_reserve1_1,False)
amountOut_1(uint256) := TMP_154(uint256)
INTERNAL_CALL, HybridPool._processSwap(address,address,uint256,bytes,bool)(token1_36,recipient_1,amountOut_2,context_1,unwrapBento_1)
TMP_143(uint256) = INTERNAL_CALL, HybridPool.__balance(address)(token0_35)
TMP_144(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token0_36,TMP_143)
balance0_1(uint256) := TMP_144(uint256)
INTERNAL_CALL, HybridPool._processSwap(address,address,uint256,bytes,bool)(token0_31,recipient_1,amountOut_1,context_1,unwrapBento_1)
TMP_156(uint256) = INTERNAL_CALL, HybridPool.__balance(address)(token1_32)
TMP_157(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token1_33,TMP_156)
balance1_1(uint256) := TMP_157(uint256)
TMP_145(uint256) = balance0_1 (c)- _reserve0_1
TMP_146(bool) = TMP_145 >= amountIn_3
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,INSUFFICIENT_AMOUNT_IN)
TMP_158(uint256) = balance1_1 (c)- _reserve1_1
TMP_159(bool) = TMP_158 >= amountIn_2
TMP_160(None) = SOLIDITY_CALL require(bool,string)(TMP_159,INSUFFICIENT_AMOUNT_IN)
amountOut_3(uint256) := ϕ(['amountOut_1', 'amountOut_2'])
amountIn_4(uint256) := ϕ(['amountIn_2', 'amountIn_3'])
tokenOut_3(address) := ϕ(['tokenOut_1', 'tokenOut_2'])
fee_3(uint256) := ϕ(['fee_1', 'fee_2'])
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenIn_1,fee_3,barFeeTo_14,False)
INTERNAL_CALL, HybridPool._updateReserves()()
Emit Swap(recipient_1,tokenIn_1,tokenOut_3,amountIn_4,amountOut_3)


Propogating parameters and globals to SSA variables...
End popogation
MAX_FEE_2
MAX_FEE
MAX_FEE

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_2
swapFee
swapFee

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_2
barFeeTo
barFeeTo

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token0_27
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_27
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
MAX_FEE_2(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_2(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_2(address) := ϕ(['barFeeTo_15', 'barFeeTo_17', 'barFeeTo_1', 'barFeeTo_0'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: flashSwap
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
token0_27(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
Phi
[i]Type for token0

Name: token0 Function: flashSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_27(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
Phi
[i]Type for token1

Name: token1 Function: flashSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, HybridPool.lock()()
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn
tokenIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
context_1
context_1
context
context

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient
recipient

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn
amountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_17(address,address,bool,uint256,bytes) = SOLIDITY_CALL abi.decode()(data_1(address,address,bool,uint256,bytes))
[i]Type for TUPLE_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tokenIn_1(address)= UNPACK TUPLE_17 index: 0 
Finding type for tokenIn(address ... )
prev address? u
Head Addr: -990
    Norm: 0
    Set: {-990}
    Fin: NULL
[i]Type for tokenIn

Name: tokenIn Function: flashSwap
Num: 
Den: 
Address: -990
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address)= UNPACK TUPLE_17 index: 1 
Finding type for recipient(address ... )
prev address? u
Head Addr: -989
    Norm: 0
    Set: {-989}
    Fin: NULL
[i]Type for recipient

Name: recipient Function: flashSwap
Num: 
Den: 
Address: -989
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool)= UNPACK TUPLE_17 index: 2 
Finding type for unwrapBento(bool ... )
[i]Type for unwrapBento

Name: unwrapBento Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256)= UNPACK TUPLE_17 index: 3 
Finding type for amountIn(uint256 ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988, '_toAmount:TMP_191': 6, 'global:this': 6}
(-1, -1, 'u', None, -1, -1)
[i]Type for amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
context_1(bytes)= UNPACK TUPLE_17 index: 4 
Finding type for context(bytes ... )
[i]Type for context

Name: context Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0
_reserve0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1
_reserve1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
token0_29
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_29
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
TUPLE_18(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
[i]Type for TUPLE_18

Name: TUPLE_18 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_29(address) := ϕ(['token0_39'])
Phi
[i]Type for token0

Name: token0 Function: flashSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_29(address) := ϕ(['token1_40'])
Phi
[i]Type for token1

Name: token1 Function: flashSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256)= UNPACK TUPLE_18 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for _reserve0

Name: _reserve0 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256)= UNPACK TUPLE_18 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for _reserve1

Name: _reserve1 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: flashSwap
Num: 
Den: 
Address: -990
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_29
token0_29
token0

Name: token0 Function: flashSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_136(bool) = tokenIn_1 == token0_29
[i]Type for TMP_136

Name: TMP_136 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1_29
token1_29
token1

Name: token1 Function: flashSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
tokenOut_2
tokenOut_2
tokenOut
tokenOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
tokenOut_2(address) := token1_29(address)
asgn
Finance type key: (-1, -1)
[i]Type for tokenOut

Name: tokenOut Function: flashSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0_29
token0_29
token0

Name: token0 Function: flashSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_137(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token0_29,amountIn_1)
[i]Type for TMP_137

Name: TMP_137 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
amountIn_3(uint256) := TMP_137(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: flashSwap
Num: 
Den: 
Address: -990
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_29
token1_29
token1

Name: token1 Function: flashSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_148(bool) = tokenIn_1 == token1_29
[i]Type for TMP_148

Name: TMP_148 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,INVALID_INPUT_TOKEN)
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_3
amountIn_3
amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
swapFee_6
swapFee_6
swapFee
swapFee

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_6
MAX_FEE_6
MAX_FEE
MAX_FEE

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_2
fee_2
fee
fee

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_138(uint256) = amountIn_3 (c)* swapFee_6
lnorm: u rnorm: u
[i]Type for TMP_138

Name: TMP_138 Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_139(uint256) = TMP_138 (c)/ MAX_FEE_6
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_139

Name: TMP_139 Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_2(uint256) := TMP_139(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0_29
token0_29
token0

Name: token0 Function: flashSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
tokenOut_1
tokenOut_1
tokenOut
tokenOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
tokenOut_1(address) := token0_29(address)
asgn
Finance type key: (-1, -1)
[i]Type for tokenOut

Name: tokenOut Function: flashSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_3
amountIn_3
amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
fee_2
fee_2
fee

Name: fee Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_2
amountOut_2
amountOut
amountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_140(uint256) = amountIn_3 (c)- fee_2
SUB1
lnorm: u rnorm: u
SUB

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef

Name: fee Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_141(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_140,_reserve0_1,_reserve1_1,True)
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, -1, 'u']

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_141

Name: TMP_141 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_2(uint256) := TMP_141(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountOut

Name: amountOut Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1_29
token1_29
token1

Name: token1 Function: flashSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_150(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token1_29,amountIn_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1
[i]Type for TMP_150

Name: TMP_150 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
amountIn_2(uint256) := TMP_150(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_5
MAX_FEE_5
MAX_FEE
MAX_FEE

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
swapFee_5
swapFee_5
swapFee
swapFee

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_151(uint256) = amountIn_2 (c)* swapFee_5
lnorm: 0 rnorm: u
[i]Type for TMP_151

Name: TMP_151 Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_152(uint256) = TMP_151 (c)/ MAX_FEE_5
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for TMP_152

Name: TMP_152 Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_152(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
fee_1
fee_1
fee

Name: fee Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
amountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_153(uint256) = amountIn_2 (c)- fee_1
SUB1
lnorm: 0 rnorm: 0
SUB

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef

Name: fee Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_153

Name: TMP_153 Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_154(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_153,_reserve0_1,_reserve1_1,False)
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, -1, 'u']

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_154

Name: TMP_154 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := TMP_154(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountOut

Name: amountOut Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountOut_2
amountOut_2
amountOut
amountOut

Name: amountOut Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
context_1
context_1
context
context

Name: context Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_36
token1_36
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: flashSwap
Num: 
Den: 
Address: -989
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._processSwap(address,address,uint256,bytes,bool)(token1_36,recipient_1,amountOut_2,context_1,unwrapBento_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: tokenOut Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -989, 'u']

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: data Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenOut Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: data Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenOut_1
tokenOut

Name: tokenOut_1 Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut
amountOut

Name: amountOut_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
data_1
data
data

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_1(address) := ϕ(['token1_36', 'token0_31'])
Phi
[i]Type for tokenOut

Name: tokenOut Function: _processSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1'])
Phi
[i]Type for to

Name: to Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := ϕ(['amountOut_2', 'amountOut_1'])
Phi
[i]Type for amountOut

Name: amountOut Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
data_1(bytes) := ϕ(['context_1'])
Phi
[i]Type for data

Name: data Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _processSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _processSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_1
tokenOut_1
tokenOut

Name: tokenOut Function: _processSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
amountOut

Name: amountOut_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenOut_1,amountOut_1,to_1,unwrapBento_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', 'to', [], -1, -989, 'u']

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_54 -> LENGTH data_1
[i]Type for REF_54

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_168(bool) = REF_54 != 0
[i]Type for TMP_168

Name: TMP_168 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_169 = CONVERT msg.sender to ITridentCallee
Converting msg.sender
new address made for msg.sender
prev address? u
global assignment: 7
7
7
[i]Type for TMP_169

Name: TMP_169 Function: _processSwap
Num: -1
Den: -1
Address: 7
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:TMP_169(ITridentCallee), function:tridentSwapCallback, arguments:['data_1']  
High Call: tridentSwapCallback

Name: tokenOut Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: data Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenOut_1
tokenOut

Name: tokenOut_1 Function: _processSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut
amountOut

Name: amountOut_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _processSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_1(address) := ϕ(['token1_36', 'token0_31'])
Phi
[i]Type for tokenOut

Name: tokenOut Function: _processSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1'])
Phi
[i]Type for to

Name: to Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := ϕ(['amountOut_2', 'amountOut_1'])
Phi
[i]Type for amountOut

Name: amountOut Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
data_1(bytes) := ϕ(['context_1'])
Phi
[i]Type for data

Name: data Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _processSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _processSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_1
tokenOut_1
tokenOut

Name: tokenOut Function: _processSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
amountOut

Name: amountOut_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenOut_1,amountOut_1,to_1,unwrapBento_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', 'to', [], -1, -989, 'u']

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_54 -> LENGTH data_1
[i]Type for REF_54

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_168(bool) = REF_54 != 0
[i]Type for TMP_168

Name: TMP_168 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_169 = CONVERT msg.sender to ITridentCallee
Converting msg.sender
7
[i]Type for TMP_169

Name: TMP_169 Function: _processSwap
Num: 
Den: 
Address: 7
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:TMP_169(ITridentCallee), function:tridentSwapCallback, arguments:['data_1']  
High Call: tridentSwapCallback
Propogating parameters and globals to SSA variables...
token0_35
token0_35
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token0_36
token0_36
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0
balance0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_143(uint256) = INTERNAL_CALL, HybridPool.__balance(address)(token0_35)
[i]Type for TMP_143

Name: TMP_143 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_144(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token0_36,TMP_143)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input
input

Name: input_1 Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input
input

Name: input_1 Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1
[i]Type for TMP_144

Name: TMP_144 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
balance0_1(uint256) := TMP_144(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for balance0

Name: balance0 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_31
token0_31
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
context_1
context_1
context
context

Name: context Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
amountOut

Name: amountOut Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: flashSwap
Num: 
Den: 
Address: -989
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._processSwap(address,address,uint256,bytes,bool)(token0_31,recipient_1,amountOut_1,context_1,unwrapBento_1)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: tokenOut Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -989, 'u']

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: data Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenOut Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: data Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenOut_1
tokenOut

Name: tokenOut_1 Function: _processSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut
amountOut

Name: amountOut_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _processSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_1(address) := ϕ(['token1_36', 'token0_31'])
Phi
[i]Type for tokenOut

Name: tokenOut Function: _processSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1'])
Phi
[i]Type for to

Name: to Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := ϕ(['amountOut_2', 'amountOut_1'])
Phi
[i]Type for amountOut

Name: amountOut Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
data_1(bytes) := ϕ(['context_1'])
Phi
[i]Type for data

Name: data Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _processSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _processSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_1
tokenOut_1
tokenOut

Name: tokenOut Function: _processSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
amountOut

Name: amountOut_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenOut_1,amountOut_1,to_1,unwrapBento_1)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', 'to', [], -1, -989, 'u']

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_54 -> LENGTH data_1
[i]Type for REF_54

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_168(bool) = REF_54 != 0
[i]Type for TMP_168

Name: TMP_168 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_169 = CONVERT msg.sender to ITridentCallee
Converting msg.sender
7
[i]Type for TMP_169

Name: TMP_169 Function: _processSwap
Num: 
Den: 
Address: 7
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:TMP_169(ITridentCallee), function:tridentSwapCallback, arguments:['data_1']  
High Call: tridentSwapCallback

Name: tokenOut Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: data Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenOut_1
tokenOut

Name: tokenOut_1 Function: _processSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut
amountOut

Name: amountOut_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _processSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_1(address) := ϕ(['token1_36', 'token0_31'])
Phi
[i]Type for tokenOut

Name: tokenOut Function: _processSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1'])
Phi
[i]Type for to

Name: to Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := ϕ(['amountOut_2', 'amountOut_1'])
Phi
[i]Type for amountOut

Name: amountOut Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
data_1(bytes) := ϕ(['context_1'])
Phi
[i]Type for data

Name: data Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _processSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _processSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_1
tokenOut_1
tokenOut

Name: tokenOut Function: _processSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
amountOut

Name: amountOut_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenOut_1,amountOut_1,to_1,unwrapBento_1)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', 'to', [], -1, -989, 'u']

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_54 -> LENGTH data_1
[i]Type for REF_54

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_168(bool) = REF_54 != 0
[i]Type for TMP_168

Name: TMP_168 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_169 = CONVERT msg.sender to ITridentCallee
Converting msg.sender
7
[i]Type for TMP_169

Name: TMP_169 Function: _processSwap
Num: 
Den: 
Address: 7
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:TMP_169(ITridentCallee), function:tridentSwapCallback, arguments:['data_1']  
High Call: tridentSwapCallback
Propogating parameters and globals to SSA variables...
token1_32
token1_32
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
token1_33
token1_33
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1
balance1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_156(uint256) = INTERNAL_CALL, HybridPool.__balance(address)(token1_32)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_2
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token0_40', 'token1_32', 'token0_35', 'token1_43'])
Phi
[i]Type for token

Name: token Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token_1
token_1
token

Name: token Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_2
bento_2
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
___balance_1
___balance_1
___balance
___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_3
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_59 (->None) := 4152920812(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_59

Name: REF_59 Function: __balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4152920812
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_188 = CONVERT this to address
Converting this
6
[i]Type for TMP_188

Name: TMP_188 Function: __balance
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_189(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_59,token_1,TMP_188)
[i]Type for TMP_189

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_21(bool,bytes) = LOW_LEVEL_CALL, dest:bento_2, function:staticcall, arguments:['TMP_189']  
[i]Type for TUPLE_21

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_3(address) := ϕ(['bento_2', 'bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
___balance_1(bytes)= UNPACK TUPLE_21 index: 1 
Finding type for ___balance(bytes ... )
[i]Type for ___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
___balance_1
___balance_1
___balance
___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance_1
balance_1
balance
balance

Name: balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_190(uint256) = SOLIDITY_CALL abi.decode()(___balance_1,uint256)
[i]Type for TMP_190

Name: TMP_190 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_190(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_2
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token0_40', 'token1_32', 'token0_35', 'token1_43'])
Phi
[i]Type for token

Name: token Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token_1
token_1
token

Name: token Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_2
bento_2
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
___balance_1
___balance_1
___balance
___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_3
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_59 (->None) := 4152920812(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_59

Name: REF_59 Function: __balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4152920812
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_188 = CONVERT this to address
Converting this
6
[i]Type for TMP_188

Name: TMP_188 Function: __balance
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_189(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_59,token_1,TMP_188)
[i]Type for TMP_189

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_21(bool,bytes) = LOW_LEVEL_CALL, dest:bento_2, function:staticcall, arguments:['TMP_189']  
[i]Type for TUPLE_21

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_3(address) := ϕ(['bento_2', 'bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
___balance_1(bytes)= UNPACK TUPLE_21 index: 1 
Finding type for ___balance(bytes ... )
[i]Type for ___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
___balance_1
___balance_1
___balance
___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance_1
balance_1
balance
balance

Name: balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_190(uint256) = SOLIDITY_CALL abi.decode()(___balance_1,uint256)
[i]Type for TMP_190

Name: TMP_190 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_190(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_156

Name: TMP_156 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_157(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token1_33,TMP_156)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input
input

Name: input_1 Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input
input

Name: input_1 Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1
[i]Type for TMP_157

Name: TMP_157 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
balance1_1(uint256) := TMP_157(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for balance1

Name: balance1 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_3
amountIn_3
amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0

Name: balance0 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_145(uint256) = balance0_1 (c)- _reserve0_1
SUB1
lnorm: 0 rnorm: u
SUB

Name: balance0 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef

Name: _reserve0 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_145

Name: TMP_145 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_146(bool) = TMP_145 >= amountIn_3
lnorm: 0 rnorm: u
[i]Type for TMP_146

Name: TMP_146 Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,INSUFFICIENT_AMOUNT_IN)
[i]Type for TMP_147

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_2
amountIn_2
amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1

Name: balance1 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_158(uint256) = balance1_1 (c)- _reserve1_1
SUB1
lnorm: 0 rnorm: 0
SUB

Name: balance1 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef

Name: _reserve1 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_158

Name: TMP_158 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_159(bool) = TMP_158 >= amountIn_2
lnorm: 0 rnorm: 0
[i]Type for TMP_159

Name: TMP_159 Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_160(None) = SOLIDITY_CALL require(bool,string)(TMP_159,INSUFFICIENT_AMOUNT_IN)
[i]Type for TMP_160

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountOut_3
amountOut
amountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4
amountIn
amountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_3
tokenOut
tokenOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_3
fee
fee

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_3(uint256) := ϕ(['amountOut_1', 'amountOut_2'])
Phi
[i]Type for amountOut

Name: amountOut Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_4(uint256) := ϕ(['amountIn_2', 'amountIn_3'])
Phi
[i]Type for amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
tokenOut_3(address) := ϕ(['tokenOut_1', 'tokenOut_2'])
Phi
[i]Type for tokenOut

Name: tokenOut Function: flashSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
fee_3(uint256) := ϕ(['fee_1', 'fee_2'])
Phi
[i]Type for fee

Name: fee Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: flashSwap
Num: 
Den: 
Address: -990
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_14
barFeeTo_14
barFeeTo
barFeeTo

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
fee_3
fee_3
fee

Name: fee Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenIn_1,fee_3,barFeeTo_14,False)
[[], [], 'u', None, [], -1, -990, 'u']

Name: token Function: None
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 4, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token0', [], -1, -990, 'u']

Name: token Function: None
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token0', [], -1, -990, 'u']

Name: token Function: None
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, HybridPool._updateReserves()()
Propogating parameters and globals to SSA variables...
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: flashSwap
Num: 
Den: 
Address: -990
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: flashSwap
Num: 
Den: 
Address: -989
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_3
tokenOut_3
tokenOut

Name: tokenOut Function: flashSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amountOut_3
amountOut_3
amountOut
amountOut

Name: amountOut Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation


MAX_FEE_2(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
swapFee_2(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
barFeeTo_2(address) := ϕ(['barFeeTo_15', 'barFeeTo_17', 'barFeeTo_1', 'barFeeTo_0'])
token0_27(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
token1_27(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
MODIFIER_CALL, HybridPool.lock()()
TUPLE_17(address,address,bool,uint256,bytes) = SOLIDITY_CALL abi.decode()(data_1(address,address,bool,uint256,bytes))
tokenIn_1(address)= UNPACK TUPLE_17 index: 0 
recipient_1(address)= UNPACK TUPLE_17 index: 1 
unwrapBento_1(bool)= UNPACK TUPLE_17 index: 2 
amountIn_1(uint256)= UNPACK TUPLE_17 index: 3 
context_1(bytes)= UNPACK TUPLE_17 index: 4 
TUPLE_18(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
token0_29(address) := ϕ(['token0_39'])
token1_29(address) := ϕ(['token1_40'])
_reserve0_1(uint256)= UNPACK TUPLE_18 index: 0 
_reserve1_1(uint256)= UNPACK TUPLE_18 index: 1 
TMP_136(bool) = tokenIn_1 == token0_29
CONDITION TMP_136
tokenOut_2(address) := token1_29(address)
TMP_137(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token0_29,amountIn_1)
amountIn_3(uint256) := TMP_137(uint256)
TMP_148(bool) = tokenIn_1 == token1_29
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,INVALID_INPUT_TOKEN)
TMP_138(uint256) = amountIn_3 (c)* swapFee_6
TMP_139(uint256) = TMP_138 (c)/ MAX_FEE_6
fee_2(uint256) := TMP_139(uint256)
tokenOut_1(address) := token0_29(address)
TMP_140(uint256) = amountIn_3 (c)- fee_2
TMP_141(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_140,_reserve0_1,_reserve1_1,True)
amountOut_2(uint256) := TMP_141(uint256)
TMP_150(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token1_29,amountIn_1)
amountIn_2(uint256) := TMP_150(uint256)
TMP_151(uint256) = amountIn_2 (c)* swapFee_5
TMP_152(uint256) = TMP_151 (c)/ MAX_FEE_5
fee_1(uint256) := TMP_152(uint256)
TMP_153(uint256) = amountIn_2 (c)- fee_1
TMP_154(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_153,_reserve0_1,_reserve1_1,False)
amountOut_1(uint256) := TMP_154(uint256)
INTERNAL_CALL, HybridPool._processSwap(address,address,uint256,bytes,bool)(token1_36,recipient_1,amountOut_2,context_1,unwrapBento_1)
TMP_143(uint256) = INTERNAL_CALL, HybridPool.__balance(address)(token0_35)
TMP_144(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token0_36,TMP_143)
balance0_1(uint256) := TMP_144(uint256)
INTERNAL_CALL, HybridPool._processSwap(address,address,uint256,bytes,bool)(token0_31,recipient_1,amountOut_1,context_1,unwrapBento_1)
TMP_156(uint256) = INTERNAL_CALL, HybridPool.__balance(address)(token1_32)
TMP_157(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token1_33,TMP_156)
balance1_1(uint256) := TMP_157(uint256)
TMP_145(uint256) = balance0_1 (c)- _reserve0_1
TMP_146(bool) = TMP_145 >= amountIn_3
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,INSUFFICIENT_AMOUNT_IN)
TMP_158(uint256) = balance1_1 (c)- _reserve1_1
TMP_159(bool) = TMP_158 >= amountIn_2
TMP_160(None) = SOLIDITY_CALL require(bool,string)(TMP_159,INSUFFICIENT_AMOUNT_IN)
amountOut_3(uint256) := ϕ(['amountOut_1', 'amountOut_2'])
amountIn_4(uint256) := ϕ(['amountIn_2', 'amountIn_3'])
tokenOut_3(address) := ϕ(['tokenOut_1', 'tokenOut_2'])
fee_3(uint256) := ϕ(['fee_1', 'fee_2'])
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenIn_1,fee_3,barFeeTo_14,False)
INTERNAL_CALL, HybridPool._updateReserves()()
Emit Swap(recipient_1,tokenIn_1,tokenOut_3,amountIn_4,amountOut_3)


Propogating parameters and globals to SSA variables...
End popogation
MAX_FEE_2
MAX_FEE

Name: MAX_FEE Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_2
swapFee

Name: swapFee Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_2
barFeeTo

Name: barFeeTo Function: flashSwap
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token0_27
token0

Name: token0 Function: flashSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_27
token1

Name: token1 Function: flashSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
MAX_FEE_2(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_2(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_2(address) := ϕ(['barFeeTo_15', 'barFeeTo_17', 'barFeeTo_1', 'barFeeTo_0'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: flashSwap
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
token0_27(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
Phi
[i]Type for token0

Name: token0 Function: flashSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_27(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
Phi
[i]Type for token1

Name: token1 Function: flashSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, HybridPool.lock()()
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn
tokenIn

Name: tokenIn Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
context_1
context_1
context
context

Name: context Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient
recipient

Name: recipient Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn
amountIn

Name: amountIn Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_17(address,address,bool,uint256,bytes) = SOLIDITY_CALL abi.decode()(data_1(address,address,bool,uint256,bytes))
[i]Type for TUPLE_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tokenIn_1(address)= UNPACK TUPLE_17 index: 0 
Finding type for tokenIn(address ... )
prev address? u
Head Addr: -990
    Norm: 0
    Set: {-990}
    Fin: NULL
[i]Type for tokenIn

Name: tokenIn Function: flashSwap
Num: 
Den: 
Address: -990
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address)= UNPACK TUPLE_17 index: 1 
Finding type for recipient(address ... )
prev address? u
Head Addr: -989
    Norm: 0
    Set: {-989}
    Fin: NULL
[i]Type for recipient

Name: recipient Function: flashSwap
Num: 
Den: 
Address: -989
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool)= UNPACK TUPLE_17 index: 2 
Finding type for unwrapBento(bool ... )
[i]Type for unwrapBento

Name: unwrapBento Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256)= UNPACK TUPLE_17 index: 3 
Finding type for amountIn(uint256 ... )
{'global:bento': 1, 'global:token0': 2, 'global:token1': 3, 'global:barFeeTo': 4, 'global:masterDeployer': 5, 'constructor:_masterDeployer': -999, 'constructor:_token0': -998, 'constructor:_token1': -997, 'mint:recipient': -996, 'burn:recipient': -995, 'burnSingle:tokenOut': -994, 'burnSingle:recipient': -993, 'swap:tokenIn': -992, 'swap:recipient': -991, 'flashSwap:tokenIn': -990, 'flashSwap:recipient': -989, 'getAmountOut:tokenIn': -988, '_toAmount:TMP_191': 6, 'global:this': 6, '_processSwap:TMP_169': 7, 'global:msg.sender': 7}
(-1, -1, 'u', None, -1, -1)
[i]Type for amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
context_1(bytes)= UNPACK TUPLE_17 index: 4 
Finding type for context(bytes ... )
[i]Type for context

Name: context Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0
_reserve0

Name: _reserve0 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1
_reserve1

Name: _reserve1 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
token0_29
token0

Name: token0 Function: flashSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_29
token1

Name: token1 Function: flashSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
TUPLE_18(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
[i]Type for TUPLE_18

Name: TUPLE_18 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_29(address) := ϕ(['token0_39'])
Phi
[i]Type for token0

Name: token0 Function: flashSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_29(address) := ϕ(['token1_40'])
Phi
[i]Type for token1

Name: token1 Function: flashSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256)= UNPACK TUPLE_18 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for _reserve0

Name: _reserve0 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256)= UNPACK TUPLE_18 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for _reserve1

Name: _reserve1 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: flashSwap
Num: 
Den: 
Address: -990
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_29
token0_29
token0

Name: token0 Function: flashSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_136(bool) = tokenIn_1 == token0_29
[i]Type for TMP_136

Name: TMP_136 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1_29
token1_29
token1

Name: token1 Function: flashSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
tokenOut_2
tokenOut_2
tokenOut
tokenOut

Name: tokenOut Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
tokenOut_2(address) := token1_29(address)
asgn
Finance type key: (-1, -1)
[i]Type for tokenOut

Name: tokenOut Function: flashSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0_29
token0_29
token0

Name: token0 Function: flashSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_137(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token0_29,amountIn_1)
[i]Type for TMP_137

Name: TMP_137 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
amountIn_3(uint256) := TMP_137(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: flashSwap
Num: 
Den: 
Address: -990
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_29
token1_29
token1

Name: token1 Function: flashSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_148(bool) = tokenIn_1 == token1_29
[i]Type for TMP_148

Name: TMP_148 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,INVALID_INPUT_TOKEN)
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_3
amountIn_3
amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
swapFee_6
swapFee_6
swapFee

Name: swapFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_FEE_6
MAX_FEE_6
MAX_FEE

Name: MAX_FEE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_2
fee_2
fee
fee

Name: fee Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_138(uint256) = amountIn_3 (c)* swapFee_6
lnorm: u rnorm: u
[i]Type for TMP_138

Name: TMP_138 Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_139(uint256) = TMP_138 (c)/ MAX_FEE_6
lnorm: u rnorm: u
lnorm: u rnorm: u
[i]Type for TMP_139

Name: TMP_139 Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_2(uint256) := TMP_139(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0_29
token0_29
token0

Name: token0 Function: flashSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
tokenOut_1
tokenOut_1
tokenOut
tokenOut

Name: tokenOut Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
tokenOut_1(address) := token0_29(address)
asgn
Finance type key: (-1, -1)
[i]Type for tokenOut

Name: tokenOut Function: flashSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_3
amountIn_3
amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
fee_2
fee_2
fee

Name: fee Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_2
amountOut_2
amountOut
amountOut

Name: amountOut Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_140(uint256) = amountIn_3 (c)- fee_2
SUB1
lnorm: u rnorm: u
SUB

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef

Name: fee Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_141(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_140,_reserve0_1,_reserve1_1,True)
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, -1, 'u']

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_141

Name: TMP_141 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_2(uint256) := TMP_141(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountOut

Name: amountOut Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token1_29
token1_29
token1

Name: token1 Function: flashSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_150(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token1_29,amountIn_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1
[i]Type for TMP_150

Name: TMP_150 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
amountIn_2(uint256) := TMP_150(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_5
MAX_FEE_5
MAX_FEE

Name: MAX_FEE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
swapFee_5
swapFee_5
swapFee

Name: swapFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee_1
fee
fee

Name: fee Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_151(uint256) = amountIn_2 (c)* swapFee_5
lnorm: 0 rnorm: u
[i]Type for TMP_151

Name: TMP_151 Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_152(uint256) = TMP_151 (c)/ MAX_FEE_5
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for TMP_152

Name: TMP_152 Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fee_1(uint256) := TMP_152(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for fee

Name: fee Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
fee_1
fee_1
fee

Name: fee Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
amountOut

Name: amountOut Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_153(uint256) = amountIn_2 (c)- fee_1
SUB1
lnorm: 0 rnorm: 0
SUB

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef

Name: fee Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_153

Name: TMP_153 Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_154(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(TMP_153,_reserve0_1,_reserve1_1,False)
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, -1, 'u']

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_154

Name: TMP_154 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := TMP_154(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountOut

Name: amountOut Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountOut_2
amountOut_2
amountOut
amountOut

Name: amountOut Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
context_1
context_1
context
context

Name: context Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_36
token1_36
token1

Name: token1 Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: flashSwap
Num: 
Den: 
Address: -989
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._processSwap(address,address,uint256,bytes,bool)(token1_36,recipient_1,amountOut_2,context_1,unwrapBento_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: tokenOut Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -989, 'u']

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: data Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenOut Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: data Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenOut_1
tokenOut

Name: tokenOut_1 Function: _processSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut
amountOut

Name: amountOut_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_1(address) := ϕ(['token1_36', 'token0_31'])
Phi
[i]Type for tokenOut

Name: tokenOut Function: _processSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1'])
Phi
[i]Type for to

Name: to Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := ϕ(['amountOut_2', 'amountOut_1'])
Phi
[i]Type for amountOut

Name: amountOut Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
data_1(bytes) := ϕ(['context_1'])
Phi
[i]Type for data

Name: data Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_1
tokenOut_1
tokenOut

Name: tokenOut Function: _processSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
amountOut

Name: amountOut_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenOut_1,amountOut_1,to_1,unwrapBento_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', 'to', [], -1, -989, 'u']

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_54 -> LENGTH data_1
[i]Type for REF_54

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_168(bool) = REF_54 != 0
[i]Type for TMP_168

Name: TMP_168 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_169 = CONVERT msg.sender to ITridentCallee
Converting msg.sender
7
[i]Type for TMP_169

Name: TMP_169 Function: _processSwap
Num: 
Den: 
Address: 7
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:TMP_169(ITridentCallee), function:tridentSwapCallback, arguments:['data_1']  
High Call: tridentSwapCallback

Name: tokenOut Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: data Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenOut_1
tokenOut

Name: tokenOut_1 Function: _processSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut
amountOut

Name: amountOut_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_1(address) := ϕ(['token1_36', 'token0_31'])
Phi
[i]Type for tokenOut

Name: tokenOut Function: _processSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1'])
Phi
[i]Type for to

Name: to Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := ϕ(['amountOut_2', 'amountOut_1'])
Phi
[i]Type for amountOut

Name: amountOut Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
data_1(bytes) := ϕ(['context_1'])
Phi
[i]Type for data

Name: data Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_1
tokenOut_1
tokenOut

Name: tokenOut Function: _processSwap
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
amountOut

Name: amountOut_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenOut_1,amountOut_1,to_1,unwrapBento_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', 'to', [], -1, -989, 'u']

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_54 -> LENGTH data_1
[i]Type for REF_54

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_168(bool) = REF_54 != 0
[i]Type for TMP_168

Name: TMP_168 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_169 = CONVERT msg.sender to ITridentCallee
Converting msg.sender
7
[i]Type for TMP_169

Name: TMP_169 Function: _processSwap
Num: 
Den: 
Address: 7
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:TMP_169(ITridentCallee), function:tridentSwapCallback, arguments:['data_1']  
High Call: tridentSwapCallback
Propogating parameters and globals to SSA variables...
token0_35
token0_35
token0

Name: token0 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token0_36
token0_36
token0

Name: token0 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0
balance0

Name: balance0 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_143(uint256) = INTERNAL_CALL, HybridPool.__balance(address)(token0_35)
[i]Type for TMP_143

Name: TMP_143 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_144(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token0_36,TMP_143)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input
input

Name: input_1 Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input
input

Name: input_1 Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1
[i]Type for TMP_144

Name: TMP_144 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
balance0_1(uint256) := TMP_144(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for balance0

Name: balance0 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_31
token0_31
token0

Name: token0 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
context_1
context_1
context
context

Name: context Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
amountOut

Name: amountOut Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: flashSwap
Num: 
Den: 
Address: -989
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._processSwap(address,address,uint256,bytes,bool)(token0_31,recipient_1,amountOut_1,context_1,unwrapBento_1)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: tokenOut Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -989, 'u']

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: data Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenOut Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: data Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenOut_1
tokenOut

Name: tokenOut_1 Function: _processSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut
amountOut

Name: amountOut_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_1(address) := ϕ(['token1_36', 'token0_31'])
Phi
[i]Type for tokenOut

Name: tokenOut Function: _processSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1'])
Phi
[i]Type for to

Name: to Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := ϕ(['amountOut_2', 'amountOut_1'])
Phi
[i]Type for amountOut

Name: amountOut Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
data_1(bytes) := ϕ(['context_1'])
Phi
[i]Type for data

Name: data Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_1
tokenOut_1
tokenOut

Name: tokenOut Function: _processSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
amountOut

Name: amountOut_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenOut_1,amountOut_1,to_1,unwrapBento_1)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', 'to', [], -1, -989, 'u']

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_54 -> LENGTH data_1
[i]Type for REF_54

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_168(bool) = REF_54 != 0
[i]Type for TMP_168

Name: TMP_168 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_169 = CONVERT msg.sender to ITridentCallee
Converting msg.sender
7
[i]Type for TMP_169

Name: TMP_169 Function: _processSwap
Num: 
Den: 
Address: 7
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:TMP_169(ITridentCallee), function:tridentSwapCallback, arguments:['data_1']  
High Call: tridentSwapCallback

Name: tokenOut Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: data Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
tokenOut_1
tokenOut

Name: tokenOut_1 Function: _processSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut
amountOut

Name: amountOut_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_1(address) := ϕ(['token1_36', 'token0_31'])
Phi
[i]Type for tokenOut

Name: tokenOut Function: _processSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1'])
Phi
[i]Type for to

Name: to Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := ϕ(['amountOut_2', 'amountOut_1'])
Phi
[i]Type for amountOut

Name: amountOut Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
data_1(bytes) := ϕ(['context_1'])
Phi
[i]Type for data

Name: data Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_1
tokenOut_1
tokenOut

Name: tokenOut Function: _processSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _processSwap
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
amountOut

Name: amountOut_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenOut_1,amountOut_1,to_1,unwrapBento_1)
[[-1], [-1], 'u', 'token0', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', 'to', [], -1, -989, 'u']

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount
amount

Name: amount_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -989
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_54 -> LENGTH data_1
[i]Type for REF_54

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_168(bool) = REF_54 != 0
[i]Type for TMP_168

Name: TMP_168 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: _processSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_169 = CONVERT msg.sender to ITridentCallee
Converting msg.sender
7
[i]Type for TMP_169

Name: TMP_169 Function: _processSwap
Num: 
Den: 
Address: 7
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:TMP_169(ITridentCallee), function:tridentSwapCallback, arguments:['data_1']  
High Call: tridentSwapCallback
Propogating parameters and globals to SSA variables...
token1_32
token1_32
token1

Name: token1 Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
token1_33
token1_33
token1

Name: token1 Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1
balance1

Name: balance1 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_156(uint256) = INTERNAL_CALL, HybridPool.__balance(address)(token1_32)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_2
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token0_40', 'token1_32', 'token0_35', 'token1_43'])
Phi
[i]Type for token

Name: token Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token_1
token_1
token

Name: token Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_2
bento_2
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
___balance_1
___balance_1
___balance
___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_3
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_59 (->None) := 4152920812(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_59

Name: REF_59 Function: __balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4152920812
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_188 = CONVERT this to address
Converting this
6
[i]Type for TMP_188

Name: TMP_188 Function: __balance
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_189(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_59,token_1,TMP_188)
[i]Type for TMP_189

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_21(bool,bytes) = LOW_LEVEL_CALL, dest:bento_2, function:staticcall, arguments:['TMP_189']  
[i]Type for TUPLE_21

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_3(address) := ϕ(['bento_2', 'bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
___balance_1(bytes)= UNPACK TUPLE_21 index: 1 
Finding type for ___balance(bytes ... )
[i]Type for ___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
___balance_1
___balance_1
___balance
___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance_1
balance_1
balance
balance

Name: balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_190(uint256) = SOLIDITY_CALL abi.decode()(___balance_1,uint256)
[i]Type for TMP_190

Name: TMP_190 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_190(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_2
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token0_40', 'token1_32', 'token0_35', 'token1_43'])
Phi
[i]Type for token

Name: token Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token_1
token_1
token

Name: token Function: __balance
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
bento_2
bento_2
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
___balance_1
___balance_1
___balance
___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_3
bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_59 (->None) := 4152920812(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_59

Name: REF_59 Function: __balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4152920812
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_188 = CONVERT this to address
Converting this
6
[i]Type for TMP_188

Name: TMP_188 Function: __balance
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_189(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_59,token_1,TMP_188)
[i]Type for TMP_189

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_21(bool,bytes) = LOW_LEVEL_CALL, dest:bento_2, function:staticcall, arguments:['TMP_189']  
[i]Type for TUPLE_21

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_3(address) := ϕ(['bento_2', 'bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: __balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
___balance_1(bytes)= UNPACK TUPLE_21 index: 1 
Finding type for ___balance(bytes ... )
[i]Type for ___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
___balance_1
___balance_1
___balance
___balance

Name: ___balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance_1
balance_1
balance
balance

Name: balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_190(uint256) = SOLIDITY_CALL abi.decode()(___balance_1,uint256)
[i]Type for TMP_190

Name: TMP_190 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_190(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: __balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_156

Name: TMP_156 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_157(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(token1_33,TMP_156)
[[-1], [-1], 'u', 'token1', [], -1, 3, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input
input

Name: input_1 Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1

Name: token Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input
input

Name: input_1 Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1
[i]Type for TMP_157

Name: TMP_157 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
balance1_1(uint256) := TMP_157(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for balance1

Name: balance1 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_3
amountIn_3
amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0

Name: balance0 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_145(uint256) = balance0_1 (c)- _reserve0_1
SUB1
lnorm: 0 rnorm: u
SUB

Name: balance0 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef

Name: _reserve0 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_145

Name: TMP_145 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_146(bool) = TMP_145 >= amountIn_3
lnorm: 0 rnorm: u
[i]Type for TMP_146

Name: TMP_146 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,INSUFFICIENT_AMOUNT_IN)
[i]Type for TMP_147

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_2
amountIn_2
amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1

Name: balance1 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_158(uint256) = balance1_1 (c)- _reserve1_1
SUB1
lnorm: 0 rnorm: 0
SUB

Name: balance1 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef

Name: _reserve1 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_158

Name: TMP_158 Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_159(bool) = TMP_158 >= amountIn_2
lnorm: 0 rnorm: 0
[i]Type for TMP_159

Name: TMP_159 Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_160(None) = SOLIDITY_CALL require(bool,string)(TMP_159,INSUFFICIENT_AMOUNT_IN)
[i]Type for TMP_160

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountOut_3
amountOut
amountOut

Name: amountOut Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4
amountIn
amountIn

Name: amountIn Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
tokenOut_3
tokenOut
tokenOut

Name: tokenOut Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
fee_3
fee
fee

Name: fee Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_3(uint256) := ϕ(['amountOut_1', 'amountOut_2'])
Phi
[i]Type for amountOut

Name: amountOut Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_4(uint256) := ϕ(['amountIn_2', 'amountIn_3'])
Phi
[i]Type for amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
tokenOut_3(address) := ϕ(['tokenOut_1', 'tokenOut_2'])
Phi
[i]Type for tokenOut

Name: tokenOut Function: flashSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
fee_3(uint256) := ϕ(['fee_1', 'fee_2'])
Phi
[i]Type for fee

Name: fee Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: flashSwap
Num: 
Den: 
Address: -990
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_14
barFeeTo_14
barFeeTo

Name: barFeeTo Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
fee_3
fee_3
fee

Name: fee Function: flashSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, HybridPool._transfer(address,uint256,address,bool)(tokenIn_1,fee_3,barFeeTo_14,False)
[[], [], 'u', None, [], -1, -990, 'u']

Name: token Function: None
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 4, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token0', [], -1, -990, 'u']

Name: token Function: None
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _transfer
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount_1
amount

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['tokenIn_1', 'tokenOut_3', 'tokenOut_1', 'tokenIn_1', 'token1_21', 'token1_6', 'token0_5', 'token0_17'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount1_3', 'amountOut_1', 'amount1_1', 'fee_3', 'amountOut_3', 'amount0_1', '_barFee_1', 'amount0_2'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'barFeeTo_16', 'barFeeTo_14', 'to_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_6(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_1
success_1
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_7
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
bento_8
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_74 (->None) := 4052550604(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_74

Name: REF_74 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4052550604
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_208 = CONVERT this to address
Converting this
6
[i]Type for TMP_208

Name: TMP_208 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(uint256) = INTERNAL_CALL, HybridPool._toShare(address,uint256)(token_1,amount_1)
[[], [], 'u', 'token0', [], -1, -990, 'u']

Name: token Function: None
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_18', 'token0_7', 'token_1', 'token1_8', 'token0_21'])
Phi
[i]Type for token

Name: token Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['amount1_1', 'amount1_1', 'amount_1', 'amount0_1', 'amount0_1'])
Phi
[i]Type for input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_0', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
input_1
input_1
input

Name: input Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toShare
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_5
bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_65 (->None) := 3662756298(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_65

Name: REF_65 Function: _toShare
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3662756298
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_194(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_65,token_1,input_1,False)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_22(bool,bytes) = LOW_LEVEL_CALL, dest:bento_4, function:staticcall, arguments:['TMP_194']  
[i]Type for TUPLE_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_4', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _toShare
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
_output_1(bytes)= UNPACK TUPLE_22 index: 1 
Finding type for _output(bytes ... )
[i]Type for _output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_output_1
_output_1
_output
_output

Name: _output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_195(uint256) = SOLIDITY_CALL abi.decode()(_output_1,uint256)
[i]Type for TMP_195

Name: TMP_195 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_195(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toShare
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_209

Name: TMP_209 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(address) := ϕ(['bento_5'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_74,token_1,TMP_208,to_1,TMP_209)
[i]Type for TMP_210

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_24(bool,bytes) = LOW_LEVEL_CALL, dest:bento_7, function:call, arguments:['TMP_210']  
[i]Type for TUPLE_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_8(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_7', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_24 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
bento_6
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: 
Den: 
Address: -990
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
bento_9
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
REF_70 (->None) := 2547674416(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_70

Name: REF_70 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2547674416
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_205 = CONVERT this to address
Converting this
6
[i]Type for TMP_205

Name: TMP_205 Function: _transfer
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_206(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_70,token_1,TMP_205,to_1,amount_1,0)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_23(bool,bytes) = LOW_LEVEL_CALL, dest:bento_6, function:call, arguments:['TMP_206']  
[i]Type for TUPLE_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_9(address) := ϕ(['bento_9', 'bento_3', 'bento_8', 'bento_5', 'bento_1'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: bento
Value: u
Fields: 
Finance Type: undef
XXXX
success_2(bool)= UNPACK TUPLE_23 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_scope_0_0
success_scope_0_0
success_scope_0
success_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_211(None) = SOLIDITY_CALL require(bool,string)(success_scope_0_0,TRANSFER_FAILED)
[i]Type for TMP_211

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
success_2
success_2
success
success

Name: success Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_207(None) = SOLIDITY_CALL require(bool,string)(success_2,WITHDRAW_FAILED)
[i]Type for TMP_207

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, HybridPool._updateReserves()()
Propogating parameters and globals to SSA variables...
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: flashSwap
Num: 
Den: 
Address: -990
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: flashSwap
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: flashSwap
Num: 
Den: 
Address: -989
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenOut_3
tokenOut_3
tokenOut

Name: tokenOut Function: flashSwap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amountOut_3
amountOut_3
amountOut
amountOut

Name: amountOut Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation



updateBarFee


masterDeployer_2(address) := ϕ(['masterDeployer_1', 'masterDeployer_3', 'masterDeployer_0'])
REF_52 (->None) := 3242907650(uint256)
TMP_165(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_52)
TUPLE_19(bool,bytes) = LOW_LEVEL_CALL, dest:masterDeployer_2, function:staticcall, arguments:['TMP_165']  
masterDeployer_3(address) := ϕ(['masterDeployer_1', 'masterDeployer_3', 'masterDeployer_2'])
_barFee_1(bytes)= UNPACK TUPLE_19 index: 1 
TMP_166(uint256) = SOLIDITY_CALL abi.decode()(_barFee_1,uint256)
barFee_2(uint256) := TMP_166(uint256)


Propogating parameters and globals to SSA variables...
End popogation
masterDeployer_2
masterDeployer
masterDeployer

Name: None Function: None
Num: -1
Den: -1
Address: 5
Norm: u
LF: masterDeployer
Value: u
Fields: 
Finance Type: undef
masterDeployer_2(address) := ϕ(['masterDeployer_1', 'masterDeployer_3', 'masterDeployer_0'])
Phi
[i]Type for masterDeployer

Name: masterDeployer Function: updateBarFee
Num: -1
Den: -1
Address: 5
Norm: u
LF: masterDeployer
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
masterDeployer_2
masterDeployer_2
masterDeployer

Name: masterDeployer Function: updateBarFee
Num: -1
Den: -1
Address: 5
Norm: u
LF: masterDeployer
Value: u
Fields: 
Finance Type: undef
_barFee_1
_barFee_1
_barFee
_barFee

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
masterDeployer_3
masterDeployer
masterDeployer

Name: None Function: None
Num: -1
Den: -1
Address: 5
Norm: u
LF: masterDeployer
Value: u
Fields: 
Finance Type: undef
REF_52 (->None) := 3242907650(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_52

Name: REF_52 Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3242907650
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_165(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_52)
[i]Type for TMP_165

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_19(bool,bytes) = LOW_LEVEL_CALL, dest:masterDeployer_2, function:staticcall, arguments:['TMP_165']  
[i]Type for TUPLE_19

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masterDeployer_3(address) := ϕ(['masterDeployer_1', 'masterDeployer_3', 'masterDeployer_2'])
Phi
[i]Type for masterDeployer

Name: masterDeployer Function: updateBarFee
Num: -1
Den: -1
Address: 5
Norm: u
LF: masterDeployer
Value: u
Fields: 
Finance Type: undef
XXXX
_barFee_1(bytes)= UNPACK TUPLE_19 index: 1 
Finding type for _barFee(bytes ... )
[i]Type for _barFee

Name: _barFee Function: updateBarFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_barFee_1
_barFee_1
_barFee
_barFee

Name: _barFee Function: updateBarFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFee_2
barFee_2
barFee
barFee

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_166(uint256) = SOLIDITY_CALL abi.decode()(_barFee_1,uint256)
[i]Type for TMP_166

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_2(uint256) := TMP_166(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for barFee

Name: barFee Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


masterDeployer_2(address) := ϕ(['masterDeployer_1', 'masterDeployer_3', 'masterDeployer_0'])
REF_52 (->None) := 3242907650(uint256)
TMP_165(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_52)
TUPLE_19(bool,bytes) = LOW_LEVEL_CALL, dest:masterDeployer_2, function:staticcall, arguments:['TMP_165']  
masterDeployer_3(address) := ϕ(['masterDeployer_1', 'masterDeployer_3', 'masterDeployer_2'])
_barFee_1(bytes)= UNPACK TUPLE_19 index: 1 
TMP_166(uint256) = SOLIDITY_CALL abi.decode()(_barFee_1,uint256)
barFee_2(uint256) := TMP_166(uint256)


Propogating parameters and globals to SSA variables...
End popogation
masterDeployer_2
masterDeployer

Name: masterDeployer Function: updateBarFee
Num: -1
Den: -1
Address: 5
Norm: u
LF: masterDeployer
Value: u
Fields: 
Finance Type: undef
masterDeployer_2(address) := ϕ(['masterDeployer_1', 'masterDeployer_3', 'masterDeployer_0'])
Phi
[i]Type for masterDeployer

Name: masterDeployer Function: updateBarFee
Num: -1
Den: -1
Address: 5
Norm: u
LF: masterDeployer
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
masterDeployer_2
masterDeployer_2
masterDeployer

Name: masterDeployer Function: updateBarFee
Num: -1
Den: -1
Address: 5
Norm: u
LF: masterDeployer
Value: u
Fields: 
Finance Type: undef
_barFee_1
_barFee_1
_barFee
_barFee

Name: _barFee Function: updateBarFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
masterDeployer_3
masterDeployer

Name: masterDeployer Function: updateBarFee
Num: -1
Den: -1
Address: 5
Norm: u
LF: masterDeployer
Value: u
Fields: 
Finance Type: undef
REF_52 (->None) := 3242907650(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_52

Name: REF_52 Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3242907650
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_165(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_52)
[i]Type for TMP_165

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_19(bool,bytes) = LOW_LEVEL_CALL, dest:masterDeployer_2, function:staticcall, arguments:['TMP_165']  
[i]Type for TUPLE_19

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masterDeployer_3(address) := ϕ(['masterDeployer_1', 'masterDeployer_3', 'masterDeployer_2'])
Phi
[i]Type for masterDeployer

Name: masterDeployer Function: updateBarFee
Num: -1
Den: -1
Address: 5
Norm: u
LF: masterDeployer
Value: u
Fields: 
Finance Type: undef
XXXX
_barFee_1(bytes)= UNPACK TUPLE_19 index: 1 
Finding type for _barFee(bytes ... )
[i]Type for _barFee

Name: _barFee Function: updateBarFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_barFee_1
_barFee_1
_barFee
_barFee

Name: _barFee Function: updateBarFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFee_2
barFee_2
barFee

Name: barFee Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_166(uint256) = SOLIDITY_CALL abi.decode()(_barFee_1,uint256)
[i]Type for TMP_166

Name: TMP_166 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_2(uint256) := TMP_166(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for barFee

Name: barFee Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX



_processSwap



_getReserves



_updateReserves



_balance



__balance



_toAmount



_toShare



_getAmountOut



_transfer



_computeLiquidity



_computeLiquidityFromAdjustedBalances



_getY



_getYD



_handleFee



_nonOptimalMintFee



getAssets


token0_43(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
token1_46(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
TMP_296 = new address[](2)
assets_1(address[]) := TMP_296(address)
REF_78(address) -> assets_1[0]
assets_2(address[]) := ϕ(['assets_1'])
REF_78 (->assets_2) := token0_43(address)
REF_79(address) -> assets_2[1]
assets_3(address[]) := ϕ(['assets_2'])
REF_79 (->assets_3) := token1_46(address)


Propogating parameters and globals to SSA variables...
End popogation
token0_43
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_46
token1
token1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
token0_43(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
Phi
[i]Type for token0

Name: token0 Function: getAssets
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_46(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
Phi
[i]Type for token1

Name: token1 Function: getAssets
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
assets_1
assets_1
assets
assets

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_296 = new address[](2)
[i]Type for TMP_296

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assets_1(address[]) := TMP_296(address)
asgn
Finance type key: (-1, -1)
[i]Type for assets

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0_43
token0_43
token0

Name: token0 Function: getAssets
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
assets_2
assets_2
assets
assets

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
assets_2
assets
assets

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_78(address) -> assets_1[0]
INDEX
[i]Type for REF_78

Name: REF_78 Function: getAssets
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
assets_2(address[]) := ϕ(['assets_1'])
Phi
[i]Type for assets

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_78 (->assets_2) := token0_43(address)
asgn
Finance type key: (-1, -1)
[i]Type for REF_78

Name: REF_78 Function: getAssets
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
token1_46
token1_46
token1

Name: token1 Function: getAssets
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
assets_3
assets_3
assets
assets

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
assets_3
assets
assets

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_79(address) -> assets_2[1]
INDEX
[i]Type for REF_79

Name: REF_79 Function: getAssets
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
assets_3(address[]) := ϕ(['assets_2'])
Phi
[i]Type for assets

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_79 (->assets_3) := token1_46(address)
asgn
Finance type key: (-1, -1)
[i]Type for REF_79

Name: REF_79 Function: getAssets
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX


token0_43(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
token1_46(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
TMP_296 = new address[](2)
assets_1(address[]) := TMP_296(address)
REF_78(address) -> assets_1[0]
assets_2(address[]) := ϕ(['assets_1'])
REF_78 (->assets_2) := token0_43(address)
REF_79(address) -> assets_2[1]
assets_3(address[]) := ϕ(['assets_2'])
REF_79 (->assets_3) := token1_46(address)


Propogating parameters and globals to SSA variables...
End popogation
token0_43
token0

Name: token0 Function: getAssets
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_46
token1

Name: token1 Function: getAssets
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
token0_43(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
Phi
[i]Type for token0

Name: token0 Function: getAssets
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_46(address) := ϕ(['token1_40', 'token1_0', 'token1_26', 'token1_45', 'token1_19', 'token1_22', 'token1_1', 'token1_37', 'token1_34', 'token1_10'])
Phi
[i]Type for token1

Name: token1 Function: getAssets
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
assets_1
assets_1
assets
assets

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_296 = new address[](2)
[i]Type for TMP_296

Name: TMP_296 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assets_1(address[]) := TMP_296(address)
asgn
Finance type key: (-1, -1)
[i]Type for assets

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0_43
token0_43
token0

Name: token0 Function: getAssets
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
assets_2
assets_2
assets
assets

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
assets_2
assets
assets

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_78(address) -> assets_1[0]
INDEX
[i]Type for REF_78

Name: REF_78 Function: getAssets
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
assets_2(address[]) := ϕ(['assets_1'])
Phi
[i]Type for assets

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_78 (->assets_2) := token0_43(address)
asgn
Finance type key: (-1, -1)
[i]Type for REF_78

Name: REF_78 Function: getAssets
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
token1_46
token1_46
token1

Name: token1 Function: getAssets
Num: -1
Den: -1
Address: 3
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
assets_3
assets_3
assets
assets

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
assets_3
assets
assets

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_79(address) -> assets_2[1]
INDEX
[i]Type for REF_79

Name: REF_79 Function: getAssets
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
assets_3(address[]) := ϕ(['assets_2'])
Phi
[i]Type for assets

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_79 (->assets_3) := token1_46(address)
asgn
Finance type key: (-1, -1)
[i]Type for REF_79

Name: REF_79 Function: getAssets
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX



getAmountOut
Finding type for data(bytes ... )
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


MAX_FEE_9(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
swapFee_9(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
token0_44(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
TUPLE_25(address,uint256) = SOLIDITY_CALL abi.decode()(data_1(address,uint256))
tokenIn_1(address)= UNPACK TUPLE_25 index: 0 
amountIn_1(uint256)= UNPACK TUPLE_25 index: 1 
TUPLE_26(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
_reserve0_1(uint256)= UNPACK TUPLE_26 index: 0 
_reserve1_1(uint256)= UNPACK TUPLE_26 index: 1 
TMP_297(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(tokenIn_1,amountIn_1)
amountIn_2(uint256) := TMP_297(uint256)
TMP_298(uint256) = amountIn_2 (c)* swapFee_11
TMP_299(uint256) = TMP_298 (c)/ MAX_FEE_11
amountIn_3(uint256) = amountIn_2 (c)- TMP_299
TMP_300(bool) = tokenIn_1 == token0_46
CONDITION TMP_300
TMP_302(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(amountIn_3,_reserve0_1,_reserve1_1,False)
finalAmountOut_2(uint256) := TMP_302(uint256)
TMP_301(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(amountIn_3,_reserve0_1,_reserve1_1,True)
finalAmountOut_1(uint256) := TMP_301(uint256)


Propogating parameters and globals to SSA variables...
End popogation
MAX_FEE_9
MAX_FEE
MAX_FEE

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_9
swapFee
swapFee

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_44
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
MAX_FEE_9(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_9(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_44(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
Phi
[i]Type for token0

Name: token0 Function: getAmountOut
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn
tokenIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn
amountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_25(address,uint256) = SOLIDITY_CALL abi.decode()(data_1(address,uint256))
[i]Type for TUPLE_25

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tokenIn_1(address)= UNPACK TUPLE_25 index: 0 
Finding type for tokenIn(address ... )
prev address? u
Head Addr: -988
    Norm: 0
    Set: {-988}
    Fin: NULL
[i]Type for tokenIn

Name: tokenIn Function: getAmountOut
Num: 
Den: 
Address: -988
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256)= UNPACK TUPLE_25 index: 1 
Finding type for amountIn(uint256 ... )
[i]Type for amountIn

Name: amountIn Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1
_reserve1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0
_reserve0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_26(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
[i]Type for TUPLE_26

Name: TUPLE_26 Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256)= UNPACK TUPLE_26 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for _reserve0

Name: _reserve0 Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256)= UNPACK TUPLE_26 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for _reserve1

Name: _reserve1 Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: getAmountOut
Num: 
Den: 
Address: -988
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_297(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(tokenIn_1,amountIn_1)
[[], [], 'u', None, [], -1, -988, 'u']

Name: token Function: None
Num: 
Den: 
Address: -988
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -988
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: 
Den: 
Address: -988
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: 
Den: 
Address: -988
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: 
Den: 
Address: -988
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1

Name: token Function: None
Num: 
Den: 
Address: -988
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: 
Den: 
Address: -988
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input

Name: input_1 Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: 
Den: 
Address: -988
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: 
Den: 
Address: -988
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1
[i]Type for TMP_297

Name: TMP_297 Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
amountIn_2(uint256) := TMP_297(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountIn

Name: amountIn Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_11
MAX_FEE_11
MAX_FEE
MAX_FEE

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn

Name: amountIn Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
swapFee_11
swapFee_11
swapFee
swapFee

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_298(uint256) = amountIn_2 (c)* swapFee_11
lnorm: 0 rnorm: u
[i]Type for TMP_298

Name: TMP_298 Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_299(uint256) = TMP_298 (c)/ MAX_FEE_11
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for TMP_299

Name: TMP_299 Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_3(uint256) = amountIn_2 (c)- TMP_299
SUB1
lnorm: 0 rnorm: 0
SUB

Name: amountIn Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef

Name: TMP_299 Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for amountIn

Name: amountIn Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: getAmountOut
Num: 
Den: 
Address: -988
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_46
token0_46
token0
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_300(bool) = tokenIn_1 == token0_46
[i]Type for TMP_300

Name: TMP_300 Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn

Name: amountIn Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
finalAmountOut_2
finalAmountOut_2
finalAmountOut
finalAmountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_302(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(amountIn_3,_reserve0_1,_reserve1_1,False)
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, -1, 'u']

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_302

Name: TMP_302 Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
finalAmountOut_2(uint256) := TMP_302(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for finalAmountOut

Name: finalAmountOut Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn

Name: amountIn Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
finalAmountOut_1
finalAmountOut_1
finalAmountOut
finalAmountOut

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_301(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(amountIn_3,_reserve0_1,_reserve1_1,True)
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, -1, 'u']

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_301

Name: TMP_301 Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
finalAmountOut_1(uint256) := TMP_301(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for finalAmountOut

Name: finalAmountOut Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation


MAX_FEE_9(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
swapFee_9(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
token0_44(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
TUPLE_25(address,uint256) = SOLIDITY_CALL abi.decode()(data_1(address,uint256))
tokenIn_1(address)= UNPACK TUPLE_25 index: 0 
amountIn_1(uint256)= UNPACK TUPLE_25 index: 1 
TUPLE_26(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
_reserve0_1(uint256)= UNPACK TUPLE_26 index: 0 
_reserve1_1(uint256)= UNPACK TUPLE_26 index: 1 
TMP_297(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(tokenIn_1,amountIn_1)
amountIn_2(uint256) := TMP_297(uint256)
TMP_298(uint256) = amountIn_2 (c)* swapFee_11
TMP_299(uint256) = TMP_298 (c)/ MAX_FEE_11
amountIn_3(uint256) = amountIn_2 (c)- TMP_299
TMP_300(bool) = tokenIn_1 == token0_46
CONDITION TMP_300
TMP_302(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(amountIn_3,_reserve0_1,_reserve1_1,False)
finalAmountOut_2(uint256) := TMP_302(uint256)
TMP_301(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(amountIn_3,_reserve0_1,_reserve1_1,True)
finalAmountOut_1(uint256) := TMP_301(uint256)


Propogating parameters and globals to SSA variables...
End popogation
MAX_FEE_9
MAX_FEE

Name: MAX_FEE Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_9
swapFee

Name: swapFee Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_44
token0

Name: token0 Function: getAmountOut
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
MAX_FEE_9(uint256) := ϕ(['MAX_FEE_11', 'MAX_FEE_5', 'MAX_FEE_0', 'MAX_FEE_6'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_9(uint256) := ϕ(['swapFee_1', 'swapFee_11', 'swapFee_6', 'swapFee_0', 'swapFee_5'])
Phi
[i]Type for swapFee

Name: swapFee Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_44(address) := ϕ(['token0_10', 'token0_37', 'token0_26', 'token0_18', 'token0_42', 'token0_39', 'token0_0', 'token0_32', 'token0_22', 'token0_46', 'token0_1'])
Phi
[i]Type for token0

Name: token0 Function: getAmountOut
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
data_1
data_1
data
data

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIn_1
tokenIn_1
tokenIn
tokenIn

Name: tokenIn Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn
amountIn

Name: amountIn Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_25(address,uint256) = SOLIDITY_CALL abi.decode()(data_1(address,uint256))
[i]Type for TUPLE_25

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tokenIn_1(address)= UNPACK TUPLE_25 index: 0 
Finding type for tokenIn(address ... )
prev address? u
Head Addr: -988
    Norm: 0
    Set: {-988}
    Fin: NULL
[i]Type for tokenIn

Name: tokenIn Function: getAmountOut
Num: 
Den: 
Address: -988
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_1(uint256)= UNPACK TUPLE_25 index: 1 
Finding type for amountIn(uint256 ... )
[i]Type for amountIn

Name: amountIn Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1
_reserve1

Name: _reserve1 Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0
_reserve0

Name: _reserve0 Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_26(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
[i]Type for TUPLE_26

Name: TUPLE_26 Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256)= UNPACK TUPLE_26 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for _reserve0

Name: _reserve0 Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256)= UNPACK TUPLE_26 index: 1 
([-1], [-1], '0', None, -1)
[i]Type for _reserve1

Name: _reserve1 Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: getAmountOut
Num: 
Den: 
Address: -988
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn
amountIn

Name: amountIn Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_297(uint256) = INTERNAL_CALL, HybridPool._toAmount(address,uint256)(tokenIn_1,amountIn_1)
[[], [], 'u', None, [], -1, -988, 'u']

Name: token Function: None
Num: 
Den: 
Address: -988
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: 
Den: 
Address: -988
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: 
Den: 
Address: -988
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input
input

Name: input_1 Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: 
Den: 
Address: -988
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: 
Den: 
Address: -988
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1

Name: token Function: None
Num: 
Den: 
Address: -988
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: input Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token

Name: token_1 Function: _toAmount
Num: 
Den: 
Address: -988
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
input_1
input
input

Name: input_1 Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1(address) := ϕ(['token1_44', 'token1_33', 'token1_39', 'token0_29', 'tokenIn_1', 'token0_36', 'token0_38', 'token1_29', 'token0_41'])
Phi
[i]Type for token

Name: token Function: _toAmount
Num: 
Den: 
Address: -988
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
input_1(uint256) := ϕ(['_reserve0_1', 'TMP_186', '_reserve1_1', 'TMP_143', 'amountIn_1', 'TMP_184', 'amountIn_1', 'TMP_156'])
Phi
[i]Type for input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
input_1
input_1
input

Name: input Function: _toAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _toAmount
Num: 
Den: 
Address: -988
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
output_1
output_1
output
output

Name: output Function: _toAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
TMP_191 = CONVERT this to address
Converting this
6
[i]Type for TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_192 = CONVERT TMP_191 to IBentoBoxMinimal
Converting TMP_191

Name: TMP_191 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: HybridPool
Value: u
Fields: 
Finance Type: undef
BentoBoxMinimal
[i]Type for TMP_192

Name: TMP_192 Function: _toAmount
Num: 
Den: 
Address: 6
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:TMP_192(IBentoBoxMinimal), function:toAmount, arguments:['token_1', 'input_1', 'False']  
High Call: toAmount
Running querryfc
Written func info: BentoBoxMinimal, toAmount
Retvar: ('c', ['-1'], ['-1'], '0', "'u'", None)
([-1], [-1], '0', -1, -1)
[i]Type for TMP_193

Name: TMP_193 Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
output_1(uint256) := TMP_193(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
output_1
output_1
output

Name: output Function: _toAmount
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
End popogation
RETURN output_1
[i]Type for TMP_297

Name: TMP_297 Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
amountIn_2(uint256) := TMP_297(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for amountIn

Name: amountIn Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
MAX_FEE_11
MAX_FEE_11
MAX_FEE

Name: MAX_FEE Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn

Name: amountIn Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
swapFee_11
swapFee_11
swapFee

Name: swapFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_298(uint256) = amountIn_2 (c)* swapFee_11
lnorm: 0 rnorm: u
[i]Type for TMP_298

Name: TMP_298 Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_299(uint256) = TMP_298 (c)/ MAX_FEE_11
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for TMP_299

Name: TMP_299 Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountIn_3(uint256) = amountIn_2 (c)- TMP_299
SUB1
lnorm: 0 rnorm: 0
SUB

Name: amountIn Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef

Name: TMP_299 Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for amountIn

Name: amountIn Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
tokenIn_1
tokenIn_1
tokenIn

Name: tokenIn Function: getAmountOut
Num: 
Den: 
Address: -988
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_46
token0_46
token0

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_300(bool) = tokenIn_1 == token0_46
[i]Type for TMP_300

Name: TMP_300 Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn

Name: amountIn Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
finalAmountOut_2
finalAmountOut_2
finalAmountOut
finalAmountOut

Name: finalAmountOut Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_302(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(amountIn_3,_reserve0_1,_reserve1_1,False)
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, -1, 'u']

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_302

Name: TMP_302 Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
finalAmountOut_2(uint256) := TMP_302(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for finalAmountOut

Name: finalAmountOut Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn

Name: amountIn Function: getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
finalAmountOut_1
finalAmountOut_1
finalAmountOut
finalAmountOut

Name: finalAmountOut Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_301(uint256) = INTERNAL_CALL, HybridPool._getAmountOut(uint256,uint256,uint256,bool)(amountIn_3,_reserve0_1,_reserve1_1,True)
[[-1], [-1], '0', None, [], -1, 'u', 'u']

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, -1, 'u']

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], '0', None, [], -1, -1, 'u']

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: amountIn Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve0 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _reserve1 Function: None
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token0In Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
amountIn_1
amountIn

Name: amountIn_1 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0

Name: _reserve0_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1

Name: _reserve1_1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1(uint256) := ϕ(['TMP_140', 'amountIn_3', 'TMP_112', 'TMP_153', 'TMP_124', 'TMP_103', 'TMP_130'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256) := ϕ(['TMP_104', 'TMP_113', '_reserve0_1', '_reserve0_1', '_reserve0_1'])
Phi
[i]Type for _reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256) := ϕ(['_reserve1_1', '_reserve1_1', 'TMP_114', '_reserve1_1', 'TMP_105'])
Phi
[i]Type for _reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0PrecisionMultiplier_2(uint256) := ϕ(['token0PrecisionMultiplier_4', 'token0PrecisionMultiplier_1', 'token0PrecisionMultiplier_0'])
Phi
[i]Type for token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1PrecisionMultiplier_2(uint256) := ϕ(['token1PrecisionMultiplier_4', 'token1PrecisionMultiplier_0', 'token1PrecisionMultiplier_1'])
Phi
[i]Type for token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_1
xpIn_1
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_196(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_196

Name: TMP_196 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_1(uint256) := TMP_196(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_2
xpIn_2
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_198(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_198

Name: TMP_198 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_2(uint256) := TMP_198(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_2
xpOut_2
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_199(uint256) = _reserve0_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_199

Name: TMP_199 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_2(uint256) := TMP_199(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: _getAmountOut
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_1
xpOut_1
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_197(uint256) = _reserve1_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for TMP_197

Name: TMP_197 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_1(uint256) := TMP_197(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_2
token1PrecisionMultiplier_2
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_3
amountIn_3
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_3(uint256) = amountIn_1 (c)* token1PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_2
token0PrecisionMultiplier_2
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_1
amountIn_1
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_2
amountIn_2
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountIn_2(uint256) = amountIn_1 (c)* token0PrecisionMultiplier_2
lnorm: u rnorm: u
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amountIn_4
amountIn
amountIn

Name: amountIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn
xpIn

Name: xpIn Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpOut_3
xpOut
xpOut

Name: xpOut Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountIn_4(uint256) := ϕ(['amountIn_3', 'amountIn_2'])
Phi
[i]Type for amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpIn_3(uint256) := ϕ(['xpIn_1', 'xpIn_2'])
Phi
[i]Type for xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
xpOut_3(uint256) := ϕ(['xpOut_1', 'xpOut_2'])
Phi
[i]Type for xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_200(uint256) = INTERNAL_CALL, HybridPool._computeLiquidityFromAdjustedBalances(uint256,uint256)(xpIn_3,xpOut_3)
[i]Type for TMP_200

Name: TMP_200 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
d_1(uint256) := TMP_200(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
amountIn_4
amountIn_4
amountIn

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
xpIn_3
xpIn_3
xpIn

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_1
x_1
x
x

Name: x Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_201(uint256) = xpIn_3 (c)+ amountIn_4

Name: xpIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountIn Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_201

Name: TMP_201 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
x_1(uint256) := TMP_201(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
x_1
x_1
x

Name: x Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d_1
d_1
d
d

Name: d Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_202(uint256) = INTERNAL_CALL, HybridPool._getY(uint256,uint256)(x_1,d_1)
[i]Type for TMP_202

Name: TMP_202 Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
y_1(uint256) := TMP_202(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
xpOut_3
xpOut_3
xpOut

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
y_1
y_1
y
y

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_203(uint256) = xpOut_3 (c)- y_1
SUB1
lnorm: u rnorm: u
SUB

Name: xpOut Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: y Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)- 1
SUB1
lnorm: u rnorm: 0
SUB

Name: TMP_203 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
dy_1(uint256) := TMP_204(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0In_1
token0In_1
token0In

Name: token0In_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
token1PrecisionMultiplier_4
token1PrecisionMultiplier_4
token1PrecisionMultiplier

Name: token1PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_3
dy_3
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_3(uint256) = dy_1 (c)/ token1PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
token0PrecisionMultiplier_4
token0PrecisionMultiplier_4
token0PrecisionMultiplier

Name: token0PrecisionMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
dy_1
dy_1
dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
dy_2
dy_2
dy
dy

Name: dy Function: _getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
dy_2(uint256) = dy_1 (c)/ token0PrecisionMultiplier_4
lnorm: 0 rnorm: u
lnorm: 0 rnorm: u
[i]Type for dy

Name: dy Function: _getAmountOut
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i]Type for TMP_301

Name: TMP_301 Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
finalAmountOut_1(uint256) := TMP_301(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for finalAmountOut

Name: finalAmountOut Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation



getReserves


TUPLE_27(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
_reserve0_1(uint256)= UNPACK TUPLE_27 index: 0 
_reserve1_1(uint256)= UNPACK TUPLE_27 index: 1 
RETURN _reserve0_1,_reserve1_1


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1
_reserve1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0
_reserve0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_27(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
[i]Type for TUPLE_27

Name: TUPLE_27 Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256)= UNPACK TUPLE_27 index: 0 
Finding type for _reserve0(uint256 ... )
[i]Type for _reserve0

Name: _reserve0 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256)= UNPACK TUPLE_27 index: 1 
Finding type for _reserve1(uint256 ... )
[i]Type for _reserve1

Name: _reserve1 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1

Name: _reserve1 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0

Name: _reserve0 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
RETURN _reserve0_1,_reserve1_1


TUPLE_27(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
_reserve0_1(uint256)= UNPACK TUPLE_27 index: 0 
_reserve1_1(uint256)= UNPACK TUPLE_27 index: 1 
RETURN _reserve0_1,_reserve1_1


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1
_reserve1

Name: _reserve1 Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0
_reserve0

Name: _reserve0 Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TUPLE_27(uint256,uint256) = INTERNAL_CALL, HybridPool._getReserves()()
[i]Type for TUPLE_27

Name: TUPLE_27 Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve0_1(uint256)= UNPACK TUPLE_27 index: 0 
Finding type for _reserve0(uint256 ... )
[i]Type for _reserve0

Name: _reserve0 Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_reserve1_1(uint256)= UNPACK TUPLE_27 index: 1 
Finding type for _reserve1(uint256 ... )
[i]Type for _reserve1

Name: _reserve1 Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
_reserve1_1
_reserve1_1
_reserve1
_reserve1

Name: _reserve1 Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0_1
_reserve0
_reserve0

Name: _reserve0 Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
RETURN _reserve0_1,_reserve1_1



slitherConstructorConstantVariables
Address: 1, Label: global:bento
Address: 2, Label: global:token0
Address: 3, Label: global:token1
Address: 4, Label: global:barFeeTo
Address: 5, Label: global:masterDeployer
Address: -999, Label: constructor:_masterDeployer
Address: -998, Label: constructor:_token0
Address: -997, Label: constructor:_token1
Address: -996, Label: mint:recipient
Address: -995, Label: burn:recipient
Address: -994, Label: burnSingle:tokenOut
Address: -993, Label: burnSingle:recipient
Address: -992, Label: swap:tokenIn
Address: -991, Label: swap:recipient
Address: -990, Label: flashSwap:tokenIn
Address: -989, Label: flashSwap:recipient
Address: -988, Label: getAmountOut:tokenIn
Address: 6, Label: _toAmount:TMP_191
Address: 6, Label: global:this
Address: 7, Label: _processSwap:TMP_169
Address: 7, Label: global:msg.sender
Head Addr: 1
    Norm: 0
    Set: {1}
    Fin: NULL
Head Addr: 2
    Norm: 0
    Set: {2}
    Fin: NULL
Head Addr: 3
    Norm: 0
    Set: {3}
    Fin: NULL
Head Addr: 4
    Norm: 0
    Set: {4}
    Fin: NULL
Head Addr: 5
    Norm: 0
    Set: {5}
    Fin: NULL
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
Head Addr: -998
    Norm: 0
    Set: {-998}
    Fin: NULL
Head Addr: -997
    Norm: 0
    Set: {-997}
    Fin: NULL
Head Addr: -996
    Norm: *
    Set: {-996}
    Fin: NULL
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
Head Addr: -994
    Norm: 0
    Set: {-994}
    Fin: NULL
Head Addr: -993
    Norm: 0
    Set: {-993}
    Fin: NULL
Head Addr: -992
    Norm: 0
    Set: {-992}
    Fin: NULL
Head Addr: -991
    Norm: 0
    Set: {-991}
    Fin: NULL
Head Addr: -990
    Norm: 0
    Set: {-990}
    Fin: NULL
Head Addr: -989
    Norm: 0
    Set: {-989}
    Fin: NULL
Head Addr: -988
    Norm: 0
    Set: {-988}
    Fin: NULL
Head Addr: 6
    Norm: *
    Set: {6}
    Fin: NULL
Head Addr: 7
    Norm: *
    Set: {7}
    Fin: NULL
Address: 1, Label: global:bento
Address: 2, Label: global:token0
Address: 3, Label: global:token1
Address: 4, Label: global:barFeeTo
Address: 5, Label: global:masterDeployer
Address: -999, Label: constructor:_masterDeployer
Address: -998, Label: constructor:_token0
Address: -997, Label: constructor:_token1
Address: -996, Label: mint:recipient
Address: -995, Label: burn:recipient
Address: -994, Label: burnSingle:tokenOut
Address: -993, Label: burnSingle:recipient
Address: -992, Label: swap:tokenIn
Address: -991, Label: swap:recipient
Address: -990, Label: flashSwap:tokenIn
Address: -989, Label: flashSwap:recipient
Address: -988, Label: getAmountOut:tokenIn
Address: 6, Label: _toAmount:TMP_191
Address: 6, Label: global:this
Address: 7, Label: _processSwap:TMP_169
Address: 7, Label: global:msg.sender
Head Addr: 1
    Norm: 0
    Set: {1}
    Fin: NULL
Head Addr: 2
    Norm: 0
    Set: {2}
    Fin: NULL
Head Addr: 3
    Norm: 0
    Set: {3}
    Fin: NULL
Head Addr: 4
    Norm: 0
    Set: {4}
    Fin: NULL
Head Addr: 5
    Norm: 0
    Set: {5}
    Fin: NULL
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
Head Addr: -998
    Norm: 0
    Set: {-998}
    Fin: NULL
Head Addr: -997
    Norm: 0
    Set: {-997}
    Fin: NULL
Head Addr: -996
    Norm: *
    Set: {-996}
    Fin: NULL
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
Head Addr: -994
    Norm: 0
    Set: {-994}
    Fin: NULL
Head Addr: -993
    Norm: 0
    Set: {-993}
    Fin: NULL
Head Addr: -992
    Norm: 0
    Set: {-992}
    Fin: NULL
Head Addr: -991
    Norm: 0
    Set: {-991}
    Fin: NULL
Head Addr: -990
    Norm: 0
    Set: {-990}
    Fin: NULL
Head Addr: -989
    Norm: 0
    Set: {-989}
    Fin: NULL
Head Addr: -988
    Norm: 0
    Set: {-988}
    Fin: NULL
Head Addr: 6
    Norm: *
    Set: {6}
    Fin: NULL
Head Addr: 7
    Norm: *
    Set: {7}
    Fin: NULL
Function count: 162
Executing Group 6
[*] Tested 0 warnings for Sushi Tridnet
Group 6 complete
Testing complete
