Switched global version to 0.8.4



initialize
function: initialize, function count: 1
MODIFIER_CALL, Initializable.initializer()()
function: initializer, function count: 2
_initialized_4(uint8) := ϕ(['_initialized_5', '_initialized_0', '_initialized_7', '_initialized_2'])
[i]Type for _initialized

Name: _initialized Function: initializer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_initializing_3(bool) := ϕ(['_initializing_0', '_initializing_8', '_initializing_5', '_initializing_4'])
[i]Type for _initializing

Name: _initializing Function: initializer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_315 = ! _initializing_3 
[i]Type for TMP_315

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
isTopLevelCall_1(bool) := TMP_315(bool)
[i]Type for isTopLevelCall

Name: isTopLevelCall Function: initializer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_316(bool) = _initialized_4 < 1
[i]Type for TMP_316

Name: TMP_316 Function: initializer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_317(bool) = isTopLevelCall_1 && TMP_316
[i]Type for TMP_317

Name: TMP_317 Function: initializer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_318 = CONVERT this to address
[i]Type for TMP_318

Name: TMP_318 Function: initializer
Num: -1
Den: -1
Address: 2
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_319(bool) = LIBRARY_CALL, dest:AddressUpgradeable, function:AddressUpgradeable.isContract(address), arguments:['TMP_318'] 
[i]Type for TMP_319

Name: TMP_319 Function: initializer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_320 = ! TMP_319 
[i]Type for TMP_320

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_321(bool) = _initialized_4 == 1
[i]Type for TMP_321

Name: TMP_321 Function: initializer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_322(bool) = TMP_320 && TMP_321
[i]Type for TMP_322

Name: TMP_322 Function: initializer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_323(bool) = TMP_317 || TMP_322
[i]Type for TMP_323

Name: TMP_323 Function: initializer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_324(None) = SOLIDITY_CALL require(bool,string)(TMP_323,Initializable: contract is already initialized)
[i]Type for TMP_324

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_initialized_5(uint8) := 1(uint256)
[i]Type for _initialized

Name: _initialized Function: initializer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
_initializing_4(bool) := True(bool)
[i]Type for _initializing

Name: _initializing Function: initializer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
_initializing_5(bool) := False(bool)
[i]Type for _initializing

Name: _initializing Function: initializer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
_initialized_4(uint8) := ϕ(['_initialized_5', '_initialized_0', '_initialized_7', '_initialized_2'])
[i]Type for _initialized

Name: _initialized Function: initializer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
_initializing_3(bool) := ϕ(['_initializing_0', '_initializing_8', '_initializing_5', '_initializing_4'])
[i]Type for _initializing

Name: _initializing Function: initializer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
TMP_315 = ! _initializing_3 
[i]Type for TMP_315

Name: TMP_315 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
isTopLevelCall_1(bool) := TMP_315(bool)
[i]Type for isTopLevelCall

Name: isTopLevelCall Function: initializer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_316(bool) = _initialized_4 < 1
[i]Type for TMP_316

Name: TMP_316 Function: initializer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_317(bool) = isTopLevelCall_1 && TMP_316
[i]Type for TMP_317

Name: TMP_317 Function: initializer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_318 = CONVERT this to address
[i]Type for TMP_318

Name: TMP_318 Function: initializer
Num: 
Den: 
Address: 2
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_319(bool) = LIBRARY_CALL, dest:AddressUpgradeable, function:AddressUpgradeable.isContract(address), arguments:['TMP_318'] 
[i]Type for TMP_319

Name: TMP_319 Function: initializer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_320 = ! TMP_319 
[i]Type for TMP_320

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_321(bool) = _initialized_4 == 1
[i]Type for TMP_321

Name: TMP_321 Function: initializer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_322(bool) = TMP_320 && TMP_321
[i]Type for TMP_322

Name: TMP_322 Function: initializer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_323(bool) = TMP_317 || TMP_322
[i]Type for TMP_323

Name: TMP_323 Function: initializer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_324(None) = SOLIDITY_CALL require(bool,string)(TMP_323,Initializable: contract is already initialized)
[i]Type for TMP_324

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_initialized_5(uint8) := 1(uint256)
[i]Type for _initialized

Name: _initialized Function: initializer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
_initializing_4(bool) := True(bool)
[i]Type for _initializing

Name: _initializing Function: initializer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
_initializing_5(bool) := False(bool)
[i]Type for _initializing

Name: _initializing Function: initializer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
INTERNAL_CALL, OwnableUpgradeable.__Ownable_init()()
function: __Ownable_init, function count: 3
MODIFIER_CALL, Initializable.onlyInitializing()()
function: onlyInitializing, function count: 4
_initializing_9(bool) := ϕ(['_initializing_0', '_initializing_8', '_initializing_5', '_initializing_4'])
[i]Type for _initializing

Name: _initializing Function: onlyInitializing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
TMP_331(None) = SOLIDITY_CALL require(bool,string)(_initializing_9,Initializable: contract is not initializing)
[i]Type for TMP_331

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_initializing_9(bool) := ϕ(['_initializing_0', '_initializing_8', '_initializing_5', '_initializing_4'])
[i]Type for _initializing

Name: _initializing Function: onlyInitializing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
TMP_331(None) = SOLIDITY_CALL require(bool,string)(_initializing_9,Initializable: contract is not initializing)
[i]Type for TMP_331

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, OwnableUpgradeable.__Ownable_init_unchained()()
function: __Ownable_init_unchained, function count: 5
MODIFIER_CALL, Initializable.onlyInitializing()()
TMP_2(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
function: _msgSender, function count: 6
RETURN msg.sender
RETURN msg.sender
[i]Type for TMP_2

Name: TMP_2 Function: __Ownable_init_unchained
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, OwnableUpgradeable._transferOwnership(address)(TMP_2)
function: _transferOwnership, function count: 7
newOwner_1(address) := ϕ(['TMP_9', 'TMP_2', 'newOwner_1'])
[i]Type for newOwner

Name: newOwner Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
_owner_2(address) := ϕ(['_owner_3', '_owner_0'])
[i]Type for _owner

Name: _owner Function: _transferOwnership
Num: -1
Den: -1
Address: 1
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
oldOwner_1(address) := _owner_2(address)
[i]Type for oldOwner

Name: oldOwner Function: _transferOwnership
Num: -1
Den: -1
Address: 1
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
_owner_3(address) := newOwner_1(address)
[i]Type for _owner

Name: _owner Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
newOwner_1(address) := ϕ(['TMP_9', 'TMP_2', 'newOwner_1'])
[i]Type for newOwner

Name: newOwner Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
_owner_2(address) := ϕ(['_owner_3', '_owner_0'])
[i]Type for _owner

Name: _owner Function: _transferOwnership
Num: -1
Den: -1
Address: 1
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
oldOwner_1(address) := _owner_2(address)
[i]Type for oldOwner

Name: oldOwner Function: _transferOwnership
Num: -1
Den: -1
Address: 1
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
_owner_3(address) := newOwner_1(address)
[i]Type for _owner

Name: _owner Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, Initializable.onlyInitializing()()
TMP_2(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_2

Name: TMP_2 Function: __Ownable_init_unchained
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, OwnableUpgradeable._transferOwnership(address)(TMP_2)
MODIFIER_CALL, Initializable.onlyInitializing()()
INTERNAL_CALL, OwnableUpgradeable.__Ownable_init_unchained()()
validatorMinStakedRequired_1(uint128) := minStakedRequired_1(uint128)
[i]Type for validatorMinStakedRequired

Name: validatorMinStakedRequired Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_31(uint256) = 180 (c)* 6646
[i]Type for TMP_31

Name: TMP_31 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1196280
Fields: 
Finance Type: undef
validatorCoolDown_1(uint128) := TMP_31(uint256)
[i]Type for validatorCoolDown

Name: validatorCoolDown Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1196280
Fields: 
Finance Type: undef
TMP_32(uint256) = 28 (c)* 6646
[i]Type for TMP_32

Name: TMP_32 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 186088
Fields: 
Finance Type: undef
delegatorCoolDown_1(uint128) := TMP_32(uint256)
[i]Type for delegatorCoolDown

Name: delegatorCoolDown Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 186088
Fields: 
Finance Type: undef
maxCapMultiplier_1(uint128) := 10(uint256)
[i]Type for maxCapMultiplier

Name: maxCapMultiplier Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
TMP_33(uint256) = 10 (c)** 18
[i]Type for TMP_33

Name: TMP_33 Function: initialize
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_34(uint256) = 1 (c)* TMP_33
[i]Type for TMP_34

Name: TMP_34 Function: initialize
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
allocatedTokensPerEpoch_1(uint128) := TMP_34(uint256)
[i]Type for allocatedTokensPerEpoch

Name: allocatedTokensPerEpoch Function: initialize
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_35(uint256) = 10 (c)** 18
[i]Type for TMP_35

Name: TMP_35 Function: initialize
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
globalExchangeRate_1(uint128) := TMP_35(uint256)
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: initialize
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
MODIFIER_CALL, Initializable.initializer()()
INTERNAL_CALL, OwnableUpgradeable.__Ownable_init()()
validatorMinStakedRequired_1(uint128) := minStakedRequired_1(uint128)
[i]Type for validatorMinStakedRequired

Name: validatorMinStakedRequired Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_31(uint256) = 180 (c)* 6646
[i]Type for TMP_31

Name: TMP_31 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1196280
Fields: 
Finance Type: undef
validatorCoolDown_1(uint128) := TMP_31(uint256)
[i]Type for validatorCoolDown

Name: validatorCoolDown Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1196280
Fields: 
Finance Type: undef
TMP_32(uint256) = 28 (c)* 6646
[i]Type for TMP_32

Name: TMP_32 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 186088
Fields: 
Finance Type: undef
delegatorCoolDown_1(uint128) := TMP_32(uint256)
[i]Type for delegatorCoolDown

Name: delegatorCoolDown Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 186088
Fields: 
Finance Type: undef
maxCapMultiplier_1(uint128) := 10(uint256)
[i]Type for maxCapMultiplier

Name: maxCapMultiplier Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
TMP_33(uint256) = 10 (c)** 18
[i]Type for TMP_33

Name: TMP_33 Function: initialize
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_34(uint256) = 1 (c)* TMP_33
[i]Type for TMP_34

Name: TMP_34 Function: initialize
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
allocatedTokensPerEpoch_1(uint128) := TMP_34(uint256)
[i]Type for allocatedTokensPerEpoch

Name: allocatedTokensPerEpoch Function: initialize
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_35(uint256) = 10 (c)** 18
[i]Type for TMP_35

Name: TMP_35 Function: initialize
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
globalExchangeRate_1(uint128) := TMP_35(uint256)
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: initialize
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef



depositRewardTokens
function: depositRewardTokens, function count: 8
allocatedTokensPerEpoch_2(uint128) := ϕ(['allocatedTokensPerEpoch_3', 'allocatedTokensPerEpoch_0', 'allocatedTokensPerEpoch_1', 'allocatedTokensPerEpoch_5', 'allocatedTokensPerEpoch_9'])
[i]Type for allocatedTokensPerEpoch

Name: allocatedTokensPerEpoch Function: depositRewardTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
rewardsLocked_1(uint128) := ϕ(['rewardsLocked_10', 'rewardsLocked_2', 'rewardsLocked_5', 'rewardsLocked_0', 'rewardsLocked_3', 'rewardsLocked_8', 'rewardsLocked_6'])
[i]Type for rewardsLocked

Name: rewardsLocked Function: depositRewardTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
endEpoch_1(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: depositRewardTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, OwnableUpgradeable.onlyOwner()()
function: onlyOwner, function count: 9
INTERNAL_CALL, OwnableUpgradeable._checkOwner()()
function: _checkOwner, function count: 10
TMP_5(address) = INTERNAL_CALL, OwnableUpgradeable.owner()()
function: owner, function count: 11
_owner_1(address) := ϕ(['_owner_3', '_owner_0'])
[i]Type for _owner

Name: _owner Function: owner
Num: -1
Den: -1
Address: 1
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
RETURN _owner_1
_owner_1(address) := ϕ(['_owner_3', '_owner_0'])
[i]Type for _owner

Name: _owner Function: owner
Num: -1
Den: -1
Address: 1
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
RETURN _owner_1
[i]Type for TMP_5

Name: TMP_5 Function: _checkOwner
Num: -1
Den: -1
Address: 1
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
TMP_6(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_6

Name: TMP_6 Function: _checkOwner
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_7(bool) = TMP_5 == TMP_6
[i]Type for TMP_7

Name: TMP_7 Function: _checkOwner
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_8(None) = SOLIDITY_CALL require(bool,string)(TMP_7,Ownable: caller is not the owner)
[i]Type for TMP_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_5(address) = INTERNAL_CALL, OwnableUpgradeable.owner()()
[i]Type for TMP_5

Name: TMP_5 Function: _checkOwner
Num: -1
Den: -1
Address: 1
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
TMP_6(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_6

Name: TMP_6 Function: _checkOwner
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_7(bool) = TMP_5 == TMP_6
[i]Type for TMP_7

Name: TMP_7 Function: _checkOwner
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_8(None) = SOLIDITY_CALL require(bool,string)(TMP_7,Ownable: caller is not the owner)
[i]Type for TMP_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, OwnableUpgradeable._checkOwner()()
TMP_41(bool) = amount_1 >= allocatedTokensPerEpoch_3
[i]Type for TMP_41

Name: TMP_41 Function: depositRewardTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_42(None) = SOLIDITY_CALL require(bool,string)(TMP_41,Does not cover least 1 epoch)
[i]Type for TMP_42

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_43(uint128) = amount_1 (c)% allocatedTokensPerEpoch_3
[i]Type for TMP_43

Name: TMP_43 Function: depositRewardTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_44(bool) = TMP_43 == 0
[i]Type for TMP_44

Name: TMP_44 Function: depositRewardTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_45(None) = SOLIDITY_CALL require(bool,string)(TMP_44,Not multiple)
[i]Type for TMP_45

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_46(bool) = endEpoch_2 != 0
[i]Type for TMP_46

Name: TMP_46 Function: depositRewardTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rewardsLocked_3(uint128) = rewardsLocked_2 + amount_1
[i]Type for rewardsLocked

Name: rewardsLocked Function: depositRewardTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint128) = amount_1 / allocatedTokensPerEpoch_3
[i]Type for TMP_47

Name: TMP_47 Function: depositRewardTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
endEpoch_3(uint128) = endEpoch_2 + TMP_47
[i]Type for endEpoch

Name: endEpoch Function: depositRewardTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._transferToContract(address,uint128)(msg.sender,amount_1)
function: _transferToContract, function count: 12
from_1(address) := ϕ(['msg.sender'])
[i]Type for from

Name: from Function: _transferToContract
Num: -1
Den: -1
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
amount_1(uint128) := ϕ(['amount_1', 'amount_1'])
[i]Type for amount

Name: amount Function: _transferToContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
CQT_1(IERC20Upgradeable) := ϕ(['CQT_0'])
[i]Type for CQT

Name: CQT Function: _transferToContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_38 = CONVERT this to address
[i]Type for TMP_38

Name: TMP_38 Function: _transferToContract
Num: -1
Den: -1
Address: 2
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable,address,address,uint256), arguments:['CQT_1', 'from_1', 'TMP_38', 'amount_1'] 
from_1(address) := ϕ(['msg.sender'])
[i]Type for from

Name: from Function: _transferToContract
Num: -1
Den: -1
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
amount_1(uint128) := ϕ(['amount_1', 'amount_1'])
[i]Type for amount

Name: amount Function: _transferToContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
CQT_1(IERC20Upgradeable) := ϕ(['CQT_0'])
[i]Type for CQT

Name: CQT Function: _transferToContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_38 = CONVERT this to address
[i]Type for TMP_38

Name: TMP_38 Function: _transferToContract
Num: 
Den: 
Address: 2
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable,address,address,uint256), arguments:['CQT_1', 'from_1', 'TMP_38', 'amount_1'] 
allocatedTokensPerEpoch_2(uint128) := ϕ(['allocatedTokensPerEpoch_3', 'allocatedTokensPerEpoch_0', 'allocatedTokensPerEpoch_1', 'allocatedTokensPerEpoch_5', 'allocatedTokensPerEpoch_9'])
[i]Type for allocatedTokensPerEpoch

Name: allocatedTokensPerEpoch Function: depositRewardTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
rewardsLocked_1(uint128) := ϕ(['rewardsLocked_10', 'rewardsLocked_2', 'rewardsLocked_5', 'rewardsLocked_0', 'rewardsLocked_3', 'rewardsLocked_8', 'rewardsLocked_6'])
[i]Type for rewardsLocked

Name: rewardsLocked Function: depositRewardTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
endEpoch_1(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: depositRewardTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
MODIFIER_CALL, OwnableUpgradeable.onlyOwner()()
TMP_41(bool) = amount_1 >= allocatedTokensPerEpoch_3
[i]Type for TMP_41

Name: TMP_41 Function: depositRewardTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_42(None) = SOLIDITY_CALL require(bool,string)(TMP_41,Does not cover least 1 epoch)
[i]Type for TMP_42

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_43(uint128) = amount_1 (c)% allocatedTokensPerEpoch_3
[i]Type for TMP_43

Name: TMP_43 Function: depositRewardTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_44(bool) = TMP_43 == 0
[i]Type for TMP_44

Name: TMP_44 Function: depositRewardTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_45(None) = SOLIDITY_CALL require(bool,string)(TMP_44,Not multiple)
[i]Type for TMP_45

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_46(bool) = endEpoch_2 != 0
[i]Type for TMP_46

Name: TMP_46 Function: depositRewardTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rewardsLocked_3(uint128) = rewardsLocked_2 + amount_1
[i]Type for rewardsLocked

Name: rewardsLocked Function: depositRewardTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint128) = amount_1 / allocatedTokensPerEpoch_3
[i]Type for TMP_47

Name: TMP_47 Function: depositRewardTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
endEpoch_3(uint128) = endEpoch_2 + TMP_47
[i]Type for endEpoch

Name: endEpoch Function: depositRewardTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._transferToContract(address,uint128)(msg.sender,amount_1)



takeOutRewardTokens
function: takeOutRewardTokens, function count: 13
allocatedTokensPerEpoch_4(uint128) := ϕ(['allocatedTokensPerEpoch_3', 'allocatedTokensPerEpoch_0', 'allocatedTokensPerEpoch_1', 'allocatedTokensPerEpoch_5', 'allocatedTokensPerEpoch_9'])
[i]Type for allocatedTokensPerEpoch

Name: allocatedTokensPerEpoch Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
rewardsLocked_4(uint128) := ϕ(['rewardsLocked_10', 'rewardsLocked_2', 'rewardsLocked_5', 'rewardsLocked_0', 'rewardsLocked_3', 'rewardsLocked_8', 'rewardsLocked_6'])
[i]Type for rewardsLocked

Name: rewardsLocked Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
endEpoch_4(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
MODIFIER_CALL, OwnableUpgradeable.onlyOwner()()
TMP_51(bool) = amount_1 > 0
[i]Type for TMP_51

Name: TMP_51 Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_52(None) = SOLIDITY_CALL require(bool,string)(TMP_51,Amount is 0)
[i]Type for TMP_52

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_53(uint128) = amount_1 (c)% allocatedTokensPerEpoch_5
[i]Type for TMP_53

Name: TMP_53 Function: takeOutRewardTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_54(bool) = TMP_53 == 0
[i]Type for TMP_54

Name: TMP_54 Function: takeOutRewardTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_55(None) = SOLIDITY_CALL require(bool,string)(TMP_54,Not multiple)
[i]Type for TMP_55

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_56(bool) = endEpoch_5 != 0
[i]Type for TMP_56

Name: TMP_56 Function: takeOutRewardTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_57 = CONVERT block.number to uint128
[i]Type for TMP_57

Name: TMP_57 Function: takeOutRewardTokens
Num: -1
Den: -1
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
currentEpoch_1(uint128) := TMP_57(uint128)
[i]Type for currentEpoch

Name: currentEpoch Function: takeOutRewardTokens
Num: -1
Den: -1
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_63(bool) = rewardsLocked_5 >= amount_1
[i]Type for TMP_63

Name: TMP_63 Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_64(None) = SOLIDITY_CALL require(bool,string)(TMP_63,Amount is greater than available)
[i]Type for TMP_64

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_58(uint128) = amount_1 (c)/ allocatedTokensPerEpoch_5
[i]Type for TMP_58

Name: TMP_58 Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
epochs_1(uint128) := TMP_58(uint128)
[i]Type for epochs

Name: epochs Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
rewardsLocked_6(uint128) = rewardsLocked_5 - amount_1
[i]Type for rewardsLocked

Name: rewardsLocked Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_59(uint128) = endEpoch_5 (c)- epochs_1
[i]Type for TMP_59

Name: TMP_59 Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_60(bool) = TMP_59 > currentEpoch_1
[i]Type for TMP_60

Name: TMP_60 Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,Cannot takeout rewards from past)
[i]Type for TMP_61

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._transferFromContract(address,uint128)(msg.sender,amount_1)
function: _transferFromContract, function count: 14
to_1(address) := ϕ(['msg.sender', 'beneficiary_1'])
[i]Type for to

Name: to Function: _transferFromContract
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'toTransfer_3', 'amount_5'])
[i]Type for amount

Name: amount Function: _transferFromContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
CQT_2(IERC20Upgradeable) := ϕ(['CQT_0'])
[i]Type for CQT

Name: CQT Function: _transferFromContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable,address,uint256), arguments:['CQT_2', 'to_1', 'amount_1'] 
to_1(address) := ϕ(['msg.sender', 'beneficiary_1'])
[i]Type for to

Name: to Function: _transferFromContract
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'toTransfer_3', 'amount_5'])
[i]Type for amount

Name: amount Function: _transferFromContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
CQT_2(IERC20Upgradeable) := ϕ(['CQT_0'])
[i]Type for CQT

Name: CQT Function: _transferFromContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable,address,uint256), arguments:['CQT_2', 'to_1', 'amount_1'] 
TMP_62(uint128) = endEpoch_5 - epochs_1
[i]Type for TMP_62

Name: TMP_62 Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
endEpoch_6(uint128) := TMP_62(uint128)
[i]Type for endEpoch

Name: endEpoch Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
allocatedTokensPerEpoch_4(uint128) := ϕ(['allocatedTokensPerEpoch_3', 'allocatedTokensPerEpoch_0', 'allocatedTokensPerEpoch_1', 'allocatedTokensPerEpoch_5', 'allocatedTokensPerEpoch_9'])
[i]Type for allocatedTokensPerEpoch

Name: allocatedTokensPerEpoch Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
rewardsLocked_4(uint128) := ϕ(['rewardsLocked_10', 'rewardsLocked_2', 'rewardsLocked_5', 'rewardsLocked_0', 'rewardsLocked_3', 'rewardsLocked_8', 'rewardsLocked_6'])
[i]Type for rewardsLocked

Name: rewardsLocked Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
endEpoch_4(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
MODIFIER_CALL, OwnableUpgradeable.onlyOwner()()
TMP_51(bool) = amount_1 > 0
[i]Type for TMP_51

Name: TMP_51 Function: takeOutRewardTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_52(None) = SOLIDITY_CALL require(bool,string)(TMP_51,Amount is 0)
[i]Type for TMP_52

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_53(uint128) = amount_1 (c)% allocatedTokensPerEpoch_5
[i]Type for TMP_53

Name: TMP_53 Function: takeOutRewardTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_54(bool) = TMP_53 == 0
[i]Type for TMP_54

Name: TMP_54 Function: takeOutRewardTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_55(None) = SOLIDITY_CALL require(bool,string)(TMP_54,Not multiple)
[i]Type for TMP_55

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_56(bool) = endEpoch_5 != 0
[i]Type for TMP_56

Name: TMP_56 Function: takeOutRewardTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_57 = CONVERT block.number to uint128
[i]Type for TMP_57

Name: TMP_57 Function: takeOutRewardTokens
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
currentEpoch_1(uint128) := TMP_57(uint128)
[i]Type for currentEpoch

Name: currentEpoch Function: takeOutRewardTokens
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_63(bool) = rewardsLocked_5 >= amount_1
[i]Type for TMP_63

Name: TMP_63 Function: takeOutRewardTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_64(None) = SOLIDITY_CALL require(bool,string)(TMP_63,Amount is greater than available)
[i]Type for TMP_64

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_58(uint128) = amount_1 (c)/ allocatedTokensPerEpoch_5
[i]Type for TMP_58

Name: TMP_58 Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
epochs_1(uint128) := TMP_58(uint128)
[i]Type for epochs

Name: epochs Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
rewardsLocked_6(uint128) = rewardsLocked_5 - amount_1
[i]Type for rewardsLocked

Name: rewardsLocked Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_59(uint128) = endEpoch_5 (c)- epochs_1
[i]Type for TMP_59

Name: TMP_59 Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_60(bool) = TMP_59 > currentEpoch_1
[i]Type for TMP_60

Name: TMP_60 Function: takeOutRewardTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,Cannot takeout rewards from past)
[i]Type for TMP_61

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._transferFromContract(address,uint128)(msg.sender,amount_1)
TMP_62(uint128) = endEpoch_5 - epochs_1
[i]Type for TMP_62

Name: TMP_62 Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
endEpoch_6(uint128) := TMP_62(uint128)
[i]Type for endEpoch

Name: endEpoch Function: takeOutRewardTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef



stake
function: stake, function count: 15
TMP_104(int256) = 1 (c)+ 1
[i]Type for TMP_104

Name: TMP_104 Function: stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
a_1(int256) := TMP_104(int256)
[i]Type for a

Name: a Function: stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._stake(uint128,uint128,bool)(validatorId_1,amount_1,True)
function: _stake, function count: 16
validatorId_1(uint128) := ϕ(['validatorId_1', 'newValidatorId_1', 'validatorId_1'])
[i]Type for validatorId

Name: validatorId Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_1'])
[i]Type for amount

Name: amount Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
divider_6(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxCapMultiplier_2(uint128) := ϕ(['maxCapMultiplier_0', 'maxCapMultiplier_7', 'maxCapMultiplier_1', 'maxCapMultiplier_6', 'maxCapMultiplier_4'])
[i]Type for maxCapMultiplier

Name: maxCapMultiplier Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
validatorMinStakedRequired_2(uint128) := ϕ(['validatorMinStakedRequired_6', 'validatorMinStakedRequired_1', 'validatorMinStakedRequired_4', 'validatorMinStakedRequired_0', 'validatorMinStakedRequired_7'])
[i]Type for validatorMinStakedRequired

Name: validatorMinStakedRequired Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
allocatedTokensPerEpoch_7(uint128) := ϕ(['allocatedTokensPerEpoch_3', 'allocatedTokensPerEpoch_0', 'allocatedTokensPerEpoch_1', 'allocatedTokensPerEpoch_5', 'allocatedTokensPerEpoch_9'])
[i]Type for allocatedTokensPerEpoch

Name: allocatedTokensPerEpoch Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
rewardsLocked_7(uint128) := ϕ(['rewardsLocked_10', 'rewardsLocked_2', 'rewardsLocked_5', 'rewardsLocked_0', 'rewardsLocked_3', 'rewardsLocked_8', 'rewardsLocked_6'])
[i]Type for rewardsLocked

Name: rewardsLocked Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
endEpoch_8(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
totalGlobalShares_2(uint128) := ϕ(['totalGlobalShares_25', 'totalGlobalShares_9', 'totalGlobalShares_11', 'totalGlobalShares_7', 'totalGlobalShares_18', 'totalGlobalShares_0'])
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_6(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
validatorsN_1(uint128) := ϕ(['validatorsN_5', 'validatorsN_8', 'validatorsN_0'])
[i]Type for validatorsN

Name: validatorsN Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_1(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
TMP_106(bool) = amount_1 >= divider_6
[i]Type for TMP_106

Name: TMP_106 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_107(None) = SOLIDITY_CALL require(bool,string)(TMP_106,Amount must be at least 1 token)
[i]Type for TMP_107

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_108(bool) = validatorId_1 < validatorsN_1
[i]Type for TMP_108

Name: TMP_108 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_109(None) = SOLIDITY_CALL require(bool,string)(TMP_108,Invalid validator)
[i]Type for TMP_109

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(DelegatedStaking.Validator) -> validators_1[validatorId_1]
[i]Type for REF_12

Name: validators Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_1 (-> ['validators'])(DelegatedStaking.Validator) := REF_12(DelegatedStaking.Validator)
[i]Type for v

Name: v Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_13(uint128) -> v_1 (-> ['validators']).disabledEpoch
[i]Type for REF_13

Name: REF_13 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_110(bool) = REF_13 == 0
[i]Type for TMP_110

Name: TMP_110 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_111(None) = SOLIDITY_CALL require(bool,string)(TMP_110,Validator is disabled)
[i]Type for TMP_111

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_112(bool) = endEpoch_8 == 0
[i]Type for TMP_112

Name: TMP_112 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_116(bool) = endEpoch_9 > block.number
[i]Type for TMP_116

Name: TMP_116 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_117(None) = SOLIDITY_CALL require(bool,string)(TMP_116,Program ended)
[i]Type for TMP_117

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_113 = CONVERT block.number to uint128
[i]Type for TMP_113

Name: TMP_113 Function: _stake
Num: -1
Den: -1
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_114(uint128) = rewardsLocked_7 / allocatedTokensPerEpoch_7
[i]Type for TMP_114

Name: TMP_114 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_115(uint128) = TMP_113 + TMP_114
[i]Type for TMP_115

Name: TMP_115 Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
endEpoch_9(uint128) := TMP_115(uint128)
[i]Type for endEpoch

Name: endEpoch Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateGlobalExchangeRate()()
function: _updateGlobalExchangeRate, function count: 17
divider_1(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
allocatedTokensPerEpoch_6(uint128) := ϕ(['allocatedTokensPerEpoch_3', 'allocatedTokensPerEpoch_0', 'allocatedTokensPerEpoch_1', 'allocatedTokensPerEpoch_5', 'allocatedTokensPerEpoch_9'])
[i]Type for allocatedTokensPerEpoch

Name: allocatedTokensPerEpoch Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
endEpoch_7(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
totalGlobalShares_1(uint128) := ϕ(['totalGlobalShares_25', 'totalGlobalShares_9', 'totalGlobalShares_11', 'totalGlobalShares_7', 'totalGlobalShares_18', 'totalGlobalShares_0'])
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lastUpdateEpoch_1(uint128) := ϕ(['lastUpdateEpoch_0', 'lastUpdateEpoch_2'])
[i]Type for lastUpdateEpoch

Name: lastUpdateEpoch Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_2(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_68 = CONVERT block.number to uint128
[i]Type for TMP_68

Name: TMP_68 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
currentBlock_1(uint128) := TMP_68(uint128)
[i]Type for currentBlock

Name: currentBlock Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_79(bool) = currentBlock_1 < endEpoch_7
[i]Type for TMP_79

Name: TMP_79 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentEpoch_2(uint128) := currentBlock_1(uint128)
[i]Type for currentEpoch

Name: currentEpoch Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
currentEpoch_1(uint128) := endEpoch_7(uint128)
[i]Type for currentEpoch

Name: currentEpoch Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
currentEpoch_3(uint128) := ϕ(['currentEpoch_1', 'currentEpoch_2'])
[i]Type for currentEpoch

Name: currentEpoch Function: _updateGlobalExchangeRate
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_69(bool) = currentEpoch_3 != lastUpdateEpoch_1
[i]Type for TMP_69

Name: TMP_69 Function: _updateGlobalExchangeRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_70(bool) = totalGlobalShares_1 > 0
[i]Type for TMP_70

Name: TMP_70 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_71 = CONVERT allocatedTokensPerEpoch_6 to uint256
[i]Type for TMP_71

Name: TMP_71 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_72(uint256) = TMP_71 * divider_1
[i]Type for TMP_72

Name: TMP_72 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_73(uint128) = currentEpoch_3 - lastUpdateEpoch_1
[i]Type for TMP_73

Name: TMP_73 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_74 = CONVERT TMP_73 to uint256
[i]Type for TMP_74

Name: TMP_74 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_75(uint256) = TMP_72 * TMP_74
[i]Type for TMP_75

Name: TMP_75 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 36
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_76 = CONVERT totalGlobalShares_1 to uint256
[i]Type for TMP_76

Name: TMP_76 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_77(uint256) = TMP_75 / TMP_76
[i]Type for TMP_77

Name: TMP_77 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_78 = CONVERT TMP_77 to uint128
[i]Type for TMP_78

Name: TMP_78 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
globalExchangeRate_3(uint128) = globalExchangeRate_2 + TMP_78
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 2000000000000000000
Fields: 
Finance Type: undef
lastUpdateEpoch_2(uint128) := currentEpoch_3(uint128)
[i]Type for lastUpdateEpoch

Name: lastUpdateEpoch Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_1(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
allocatedTokensPerEpoch_6(uint128) := ϕ(['allocatedTokensPerEpoch_3', 'allocatedTokensPerEpoch_0', 'allocatedTokensPerEpoch_1', 'allocatedTokensPerEpoch_5', 'allocatedTokensPerEpoch_9'])
[i]Type for allocatedTokensPerEpoch

Name: allocatedTokensPerEpoch Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
endEpoch_7(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
totalGlobalShares_1(uint128) := ϕ(['totalGlobalShares_25', 'totalGlobalShares_9', 'totalGlobalShares_11', 'totalGlobalShares_7', 'totalGlobalShares_18', 'totalGlobalShares_0'])
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lastUpdateEpoch_1(uint128) := ϕ(['lastUpdateEpoch_0', 'lastUpdateEpoch_2'])
[i]Type for lastUpdateEpoch

Name: lastUpdateEpoch Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_2(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 2000000000000000000
Fields: 
Finance Type: undef
TMP_68 = CONVERT block.number to uint128
[i]Type for TMP_68

Name: TMP_68 Function: _updateGlobalExchangeRate
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
currentBlock_1(uint128) := TMP_68(uint128)
[i]Type for currentBlock

Name: currentBlock Function: _updateGlobalExchangeRate
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_79(bool) = currentBlock_1 < endEpoch_7
[i]Type for TMP_79

Name: TMP_79 Function: _updateGlobalExchangeRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentEpoch_2(uint128) := currentBlock_1(uint128)
[i]Type for currentEpoch

Name: currentEpoch Function: _updateGlobalExchangeRate
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
currentEpoch_1(uint128) := endEpoch_7(uint128)
[i]Type for currentEpoch

Name: currentEpoch Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
currentEpoch_3(uint128) := ϕ(['currentEpoch_1', 'currentEpoch_2'])
[i]Type for currentEpoch

Name: currentEpoch Function: _updateGlobalExchangeRate
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_69(bool) = currentEpoch_3 != lastUpdateEpoch_1
[i]Type for TMP_69

Name: TMP_69 Function: _updateGlobalExchangeRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_70(bool) = totalGlobalShares_1 > 0
[i]Type for TMP_70

Name: TMP_70 Function: _updateGlobalExchangeRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_71 = CONVERT allocatedTokensPerEpoch_6 to uint256
[i]Type for TMP_71

Name: TMP_71 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_72(uint256) = TMP_71 * divider_1
[i]Type for TMP_72

Name: TMP_72 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_73(uint128) = currentEpoch_3 - lastUpdateEpoch_1
[i]Type for TMP_73

Name: TMP_73 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_74 = CONVERT TMP_73 to uint256
[i]Type for TMP_74

Name: TMP_74 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_75(uint256) = TMP_72 * TMP_74
[i]Type for TMP_75

Name: TMP_75 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 36
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_76 = CONVERT totalGlobalShares_1 to uint256
[i]Type for TMP_76

Name: TMP_76 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_77(uint256) = TMP_75 / TMP_76
[i]Type for TMP_77

Name: TMP_77 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_78 = CONVERT TMP_77 to uint128
[i]Type for TMP_78

Name: TMP_78 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
globalExchangeRate_3(uint128) = globalExchangeRate_2 + TMP_78
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
lastUpdateEpoch_2(uint128) := currentEpoch_3(uint128)
[i]Type for lastUpdateEpoch

Name: lastUpdateEpoch Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: 3
Norm: 18
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
divider_1(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
allocatedTokensPerEpoch_6(uint128) := ϕ(['allocatedTokensPerEpoch_3', 'allocatedTokensPerEpoch_0', 'allocatedTokensPerEpoch_1', 'allocatedTokensPerEpoch_5', 'allocatedTokensPerEpoch_9'])
[i]Type for allocatedTokensPerEpoch

Name: allocatedTokensPerEpoch Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
endEpoch_7(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
totalGlobalShares_1(uint128) := ϕ(['totalGlobalShares_25', 'totalGlobalShares_9', 'totalGlobalShares_11', 'totalGlobalShares_7', 'totalGlobalShares_18', 'totalGlobalShares_0'])
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lastUpdateEpoch_1(uint128) := ϕ(['lastUpdateEpoch_0', 'lastUpdateEpoch_2'])
[i]Type for lastUpdateEpoch

Name: lastUpdateEpoch Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_2(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 2000000000000000000
Fields: 
Finance Type: undef
TMP_68 = CONVERT block.number to uint128
[i]Type for TMP_68

Name: TMP_68 Function: _updateGlobalExchangeRate
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
currentBlock_1(uint128) := TMP_68(uint128)
[i]Type for currentBlock

Name: currentBlock Function: _updateGlobalExchangeRate
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_79(bool) = currentBlock_1 < endEpoch_7
[i]Type for TMP_79

Name: TMP_79 Function: _updateGlobalExchangeRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentEpoch_2(uint128) := currentBlock_1(uint128)
[i]Type for currentEpoch

Name: currentEpoch Function: _updateGlobalExchangeRate
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
currentEpoch_1(uint128) := endEpoch_7(uint128)
[i]Type for currentEpoch

Name: currentEpoch Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
currentEpoch_3(uint128) := ϕ(['currentEpoch_1', 'currentEpoch_2'])
[i]Type for currentEpoch

Name: currentEpoch Function: _updateGlobalExchangeRate
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_69(bool) = currentEpoch_3 != lastUpdateEpoch_1
[i]Type for TMP_69

Name: TMP_69 Function: _updateGlobalExchangeRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_70(bool) = totalGlobalShares_1 > 0
[i]Type for TMP_70

Name: TMP_70 Function: _updateGlobalExchangeRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_71 = CONVERT allocatedTokensPerEpoch_6 to uint256
[i]Type for TMP_71

Name: TMP_71 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_72(uint256) = TMP_71 * divider_1
[i]Type for TMP_72

Name: TMP_72 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_73(uint128) = currentEpoch_3 - lastUpdateEpoch_1
[i]Type for TMP_73

Name: TMP_73 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_74 = CONVERT TMP_73 to uint256
[i]Type for TMP_74

Name: TMP_74 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_75(uint256) = TMP_72 * TMP_74
[i]Type for TMP_75

Name: TMP_75 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 36
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_76 = CONVERT totalGlobalShares_1 to uint256
[i]Type for TMP_76

Name: TMP_76 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_77(uint256) = TMP_75 / TMP_76
[i]Type for TMP_77

Name: TMP_77 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_78 = CONVERT TMP_77 to uint128
[i]Type for TMP_78

Name: TMP_78 Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
globalExchangeRate_3(uint128) = globalExchangeRate_2 + TMP_78
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
lastUpdateEpoch_2(uint128) := currentEpoch_3(uint128)
[i]Type for lastUpdateEpoch

Name: lastUpdateEpoch Function: _updateGlobalExchangeRate
Num: -1
Den: -1
Address: 3
Norm: 18
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_7(uint128) := ϕ(['globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
rewardsLocked_8(uint128) := 0(uint256)
[i]Type for rewardsLocked

Name: rewardsLocked Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateValidator(DelegatedStaking.Validator)(v_1 (-> ['validators']))
function: _updateValidator, function count: 18
v_1 (-> [])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_1 (-> ['validators'])", "v_1 (-> ['validators'])", 'REF_94', "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: disabledEpoch
Finance Type: undef
divider_2(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_4(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_2(uint128) -> v_1 (-> []).disabledEpoch
[i]Type for REF_2

Name: REF_2 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = REF_2 == 0
[i]Type for TMP_80

Name: TMP_80 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_3

Name: REF_3 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = REF_3 == 0
[i]Type for TMP_81

Name: TMP_81 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_2 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, disabledEpoch, totalShares
Finance Type: undef
REF_4 (->v_2 (-> [])) := globalExchangeRate_4(uint128)
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_5 (-> [])(DelegatedStaking.Validator) := ϕ(['v_2 (-> [])', 'v_4 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, disabledEpoch, totalShares
Finance Type: undef
REF_5(uint128) -> v_1 (-> []).lastUpdateGlobalRate
[i]Type for REF_5

Name: REF_5 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(uint128) = globalExchangeRate_4 - REF_5
[i]Type for TMP_82

Name: TMP_82 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rateDifference_1(uint128) := TMP_82(uint128)
[i]Type for rateDifference

Name: rateDifference Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_6(uint128) -> v_1 (-> []).globalShares
[i]Type for REF_6

Name: REF_6 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_6,rateDifference_1)
function: _sharesToTokens, function count: 19
sharesN_1(uint128) := ϕ(['REF_63', 'REF_6', 'REF_145', 'REF_133', 'REF_138'])
[i]Type for sharesN

Name: sharesN Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['TMP_286', 'rateDifference_1', 'TMP_298', 'REF_64', 'REF_146'])
[i]Type for rate

Name: rate Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
divider_4(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_94 = CONVERT sharesN_1 to uint256
[i]Type for TMP_94

Name: TMP_94 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_95 = CONVERT rate_1 to uint256
[i]Type for TMP_95

Name: TMP_95 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_96(uint256) = TMP_94 (c)* TMP_95
[i]Type for TMP_96

Name: TMP_96 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_97(uint256) = TMP_96 (c)/ divider_4
[i]Type for TMP_97

Name: TMP_97 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_98 = CONVERT TMP_97 to uint128
[i]Type for TMP_98

Name: TMP_98 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
RETURN TMP_98
sharesN_1(uint128) := ϕ(['REF_63', 'REF_6', 'REF_145', 'REF_133', 'REF_138'])
[i]Type for sharesN

Name: sharesN Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['TMP_286', 'rateDifference_1', 'TMP_298', 'REF_64', 'REF_146'])
[i]Type for rate

Name: rate Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
divider_4(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_94 = CONVERT sharesN_1 to uint256
[i]Type for TMP_94

Name: TMP_94 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_95 = CONVERT rate_1 to uint256
[i]Type for TMP_95

Name: TMP_95 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_96(uint256) = TMP_94 (c)* TMP_95
[i]Type for TMP_96

Name: TMP_96 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_97(uint256) = TMP_96 (c)/ divider_4
[i]Type for TMP_97

Name: TMP_97 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_98 = CONVERT TMP_97 to uint128
[i]Type for TMP_98

Name: TMP_98 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
RETURN TMP_98
[i]Type for TMP_83

Name: TMP_83 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
tokensGivenToValidator_1(uint128) := TMP_83(uint128)
[i]Type for tokensGivenToValidator

Name: tokensGivenToValidator Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_11(uint128) -> v_5 (-> []).lastUpdateGlobalRate
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_6 (-> [])(DelegatedStaking.Validator) := ϕ(['v_5 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, exchangeRate, disabledEpoch, totalShares
Finance Type: undef
REF_11 (->v_6 (-> [])) := globalExchangeRate_5(uint128)
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_84 = CONVERT tokensGivenToValidator_1 to uint256
[i]Type for TMP_84

Name: TMP_84 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_7(uint128) -> v_1 (-> []).commissionRate
[i]Type for REF_7

Name: REF_7 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT REF_7 to uint256
[i]Type for TMP_85

Name: TMP_85 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86(uint256) = TMP_84 * TMP_85
[i]Type for TMP_86

Name: TMP_86 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_87(uint256) = TMP_86 / divider_3
[i]Type for TMP_87

Name: TMP_87 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_88 = CONVERT TMP_87 to uint128
[i]Type for TMP_88

Name: TMP_88 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_88(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_8(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_89(uint128) = tokensGivenToValidator_1 (c)- commissionPaid_1
[i]Type for TMP_89

Name: TMP_89 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_90 = CONVERT TMP_89 to uint256
[i]Type for TMP_90

Name: TMP_90 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_91(uint256) = TMP_90 (c)* divider_3
[i]Type for TMP_91

Name: TMP_91 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_9(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_9

Name: REF_9 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(uint256) = TMP_91 (c)/ REF_9
[i]Type for TMP_92

Name: TMP_92 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_93 = CONVERT TMP_92 to uint128
[i]Type for TMP_93

Name: TMP_93 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, disabledEpoch, totalShares, lastUpdateGlobalRate, globalShares, commissionRate
Finance Type: undef
REF_8(-> v_3 (-> [])) = REF_8 (c)+ TMP_93
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_10(uint128) -> v_3 (-> []).commissionAvailableToRedeem
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(['v_3 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, disabledEpoch, totalShares, lastUpdateGlobalRate, globalShares, commissionRate
Finance Type: undef
REF_10(-> v_4 (-> [])) = REF_10 + commissionPaid_1
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_1 (-> [])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_1 (-> ['validators'])", "v_1 (-> ['validators'])", 'REF_94', "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch
Finance Type: undef
divider_2(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_4(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_2(uint128) -> v_1 (-> []).disabledEpoch
[i]Type for REF_2

Name: REF_2 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = REF_2 == 0
[i]Type for TMP_80

Name: TMP_80 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_3

Name: REF_3 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = REF_3 == 0
[i]Type for TMP_81

Name: TMP_81 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_2 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch
Finance Type: undef
REF_4 (->v_2 (-> [])) := globalExchangeRate_4(uint128)
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_5 (-> [])(DelegatedStaking.Validator) := ϕ(['v_2 (-> [])', 'v_4 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, disabledEpoch, totalShares, lastUpdateGlobalRate, globalShares, commissionRate
Finance Type: undef
REF_5(uint128) -> v_1 (-> []).lastUpdateGlobalRate
[i]Type for REF_5

Name: REF_5 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(uint128) = globalExchangeRate_4 - REF_5
[i]Type for TMP_82

Name: TMP_82 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rateDifference_1(uint128) := TMP_82(uint128)
[i]Type for rateDifference

Name: rateDifference Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_6(uint128) -> v_1 (-> []).globalShares
[i]Type for REF_6

Name: REF_6 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_6,rateDifference_1)
[i]Type for TMP_83

Name: TMP_83 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
tokensGivenToValidator_1(uint128) := TMP_83(uint128)
[i]Type for tokensGivenToValidator

Name: tokensGivenToValidator Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_11(uint128) -> v_5 (-> []).lastUpdateGlobalRate
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_6 (-> [])(DelegatedStaking.Validator) := ϕ(['v_5 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, disabledEpoch, totalShares, lastUpdateGlobalRate, globalShares, commissionRate
Finance Type: undef
REF_11 (->v_6 (-> [])) := globalExchangeRate_5(uint128)
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_84 = CONVERT tokensGivenToValidator_1 to uint256
[i]Type for TMP_84

Name: TMP_84 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_7(uint128) -> v_1 (-> []).commissionRate
[i]Type for REF_7

Name: REF_7 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT REF_7 to uint256
[i]Type for TMP_85

Name: TMP_85 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86(uint256) = TMP_84 * TMP_85
[i]Type for TMP_86

Name: TMP_86 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_87(uint256) = TMP_86 / divider_3
[i]Type for TMP_87

Name: TMP_87 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_88 = CONVERT TMP_87 to uint128
[i]Type for TMP_88

Name: TMP_88 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_88(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_8(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_89(uint128) = tokensGivenToValidator_1 (c)- commissionPaid_1
[i]Type for TMP_89

Name: TMP_89 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_90 = CONVERT TMP_89 to uint256
[i]Type for TMP_90

Name: TMP_90 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_91(uint256) = TMP_90 (c)* divider_3
[i]Type for TMP_91

Name: TMP_91 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_9(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_9

Name: REF_9 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(uint256) = TMP_91 (c)/ REF_9
[i]Type for TMP_92

Name: TMP_92 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_93 = CONVERT TMP_92 to uint128
[i]Type for TMP_93

Name: TMP_93 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch
Finance Type: undef
REF_8(-> v_3 (-> [])) = REF_8 (c)+ TMP_93
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_10(uint128) -> v_3 (-> []).commissionAvailableToRedeem
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(['v_3 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch
Finance Type: undef
REF_10(-> v_4 (-> [])) = REF_10 + commissionPaid_1
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
REF_14(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_14

Name: REF_14 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_120(bool) = msg.sender == REF_14
[i]Type for TMP_120

Name: TMP_120 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_18(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_18

Name: REF_18 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_19(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_19

Name: REF_19 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_20(DelegatedStaking.Staking) -> REF_18[REF_19]
[i]Type for REF_20

Name: REF_18 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_21(uint128) -> REF_20.staked
[i]Type for REF_21

Name: REF_21 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validatorStaked_1(uint128) := REF_21(uint128)
[i]Type for validatorStaked

Name: validatorStaked Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_124(uint128) = validatorStaked_1 (c)* maxCapMultiplier_4
[i]Type for TMP_124

Name: TMP_124 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
validatorMaxCap_1(uint128) := TMP_124(uint128)
[i]Type for validatorMaxCap

Name: validatorMaxCap Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
REF_15(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_15

Name: REF_15 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_16(DelegatedStaking.Staking) -> REF_15[msg.sender]
[i]Type for REF_16

Name: REF_15 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_17(uint128) -> REF_16.staked
[i]Type for REF_17

Name: REF_17 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_121(uint128) = amount_1 (c)+ REF_17
[i]Type for TMP_121

Name: TMP_121 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_122(bool) = TMP_121 >= validatorMinStakedRequired_4
[i]Type for TMP_122

Name: TMP_122 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_123(None) = SOLIDITY_CALL require(bool,string)(TMP_122,Amount < min staked required)
[i]Type for TMP_123

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_22(uint128) -> v_1 (-> ['validators']).delegated
[i]Type for REF_22

Name: REF_22 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_125(uint128) = REF_22 (c)- validatorStaked_1
[i]Type for TMP_125

Name: TMP_125 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_126(uint128) = TMP_125 (c)+ amount_1
[i]Type for TMP_126

Name: TMP_126 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newDelegated_1(uint128) := TMP_126(uint128)
[i]Type for newDelegated

Name: newDelegated Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._transferToContract(address,uint128)(msg.sender,amount_1)
TMP_127(bool) = newDelegated_1 <= validatorMaxCap_1
[i]Type for TMP_127

Name: TMP_127 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_128(None) = SOLIDITY_CALL require(bool,string)(TMP_127,Validator max capacity exceeded)
[i]Type for TMP_128

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_23(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_23

Name: REF_23 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_24(DelegatedStaking.Staking) -> REF_23[msg.sender]
[i]Type for REF_24

Name: REF_23 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_1 (-> ['v'])(DelegatedStaking.Staking) := REF_24(DelegatedStaking.Staking)
[i]Type for s

Name: s Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_130(uint128) = INTERNAL_CALL, DelegatedStaking._tokensToShares(uint128,uint128)(amount_1,globalExchangeRate_9)
function: _tokensToShares, function count: 20
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_5', 'amount_3', 'TMP_181'])
[i]Type for amount

Name: amount Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['REF_35', 'REF_70', 'globalExchangeRate_9', 'REF_75', 'globalExchangeRate_20', 'globalExchangeRate_12'])
[i]Type for rate

Name: rate Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
divider_5(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99 = CONVERT amount_1 to uint256
[i]Type for TMP_99

Name: TMP_99 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_100(uint256) = TMP_99 (c)* divider_5
[i]Type for TMP_100

Name: TMP_100 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_101 = CONVERT rate_1 to uint256
[i]Type for TMP_101

Name: TMP_101 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_102(uint256) = TMP_100 (c)/ TMP_101
[i]Type for TMP_102

Name: TMP_102 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_103 = CONVERT TMP_102 to uint128
[i]Type for TMP_103

Name: TMP_103 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
RETURN TMP_103
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_5', 'amount_3', 'TMP_181'])
[i]Type for amount

Name: amount Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['REF_35', 'REF_70', 'globalExchangeRate_9', 'REF_75', 'globalExchangeRate_20', 'globalExchangeRate_12'])
[i]Type for rate

Name: rate Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
divider_5(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99 = CONVERT amount_1 to uint256
[i]Type for TMP_99

Name: TMP_99 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_100(uint256) = TMP_99 (c)* divider_5
[i]Type for TMP_100

Name: TMP_100 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_101 = CONVERT rate_1 to uint256
[i]Type for TMP_101

Name: TMP_101 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_102(uint256) = TMP_100 (c)/ TMP_101
[i]Type for TMP_102

Name: TMP_102 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_103 = CONVERT TMP_102 to uint128
[i]Type for TMP_103

Name: TMP_103 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
RETURN TMP_103
[i]Type for TMP_130

Name: TMP_130 Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
globalSharesToAdd_1(uint128) := TMP_130(uint128)
[i]Type for globalSharesToAdd

Name: globalSharesToAdd Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
totalGlobalShares_7(uint128) = totalGlobalShares_6 + globalSharesToAdd_1
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_25(uint128) -> v_1 (-> ['validators']).globalShares
[i]Type for REF_25

Name: REF_25 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_2 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: globalShares, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_25(-> v_2 (-> ['validators'])) = REF_25 + globalSharesToAdd_1
[i]Type for REF_25

Name: REF_25 Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
validators_2(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_2 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
newDelegatorSharesN_1(uint128) := 0(uint256)
[i]Type for newDelegatorSharesN

Name: newDelegatorSharesN Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_26(uint128) -> v_2 (-> ['validators']).totalShares
[i]Type for REF_26

Name: REF_26 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_3 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_2 (-> ['validators'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, globalShares, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_26(-> v_3 (-> ['validators'])) = REF_26 + newDelegatorSharesN_1
[i]Type for REF_26

Name: REF_26 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
validators_3(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_3 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
REF_27(uint128) -> s_1 (-> ['v']).shares
[i]Type for REF_27

Name: REF_27 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_2 (-> ['v'])(DelegatedStaking.Staking) := ϕ(["s_1 (-> ['v'])"])
[i]Type for s

Name: s Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares
Finance Type: undef
REF_27(-> s_2 (-> ['v'])) = REF_27 + newDelegatorSharesN_1
[i]Type for REF_27

Name: REF_27 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
v_5 (-> ['v'])(DelegatedStaking.Validator) := ϕ(["s_2 (-> ['v'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares
Finance Type: undef
REF_28(uint128) -> v_3 (-> ['validators']).delegated
[i]Type for REF_28

Name: REF_28 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_4 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_3 (-> ['validators'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, globalShares, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_28(-> v_4 (-> ['validators'])) = REF_28 + amount_1
[i]Type for REF_28

Name: REF_28 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_4(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_4 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
REF_29(uint128) -> s_2 (-> ['v']).staked
[i]Type for REF_29

Name: REF_29 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_3 (-> ['v'])(DelegatedStaking.Staking) := ϕ(["s_2 (-> ['v'])"])
[i]Type for s

Name: s Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: staked, shares
Finance Type: undef
REF_29(-> s_3 (-> ['v'])) = REF_29 + amount_1
[i]Type for REF_29

Name: REF_29 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_6 (-> ['v'])(DelegatedStaking.Validator) := ϕ(["s_3 (-> ['v'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: staked, shares
Finance Type: undef
validatorId_1(uint128) := ϕ(['validatorId_1', 'newValidatorId_1', 'validatorId_1'])
[i]Type for validatorId

Name: validatorId Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_1'])
[i]Type for amount

Name: amount Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
divider_6(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxCapMultiplier_2(uint128) := ϕ(['maxCapMultiplier_0', 'maxCapMultiplier_7', 'maxCapMultiplier_1', 'maxCapMultiplier_6', 'maxCapMultiplier_4'])
[i]Type for maxCapMultiplier

Name: maxCapMultiplier Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
validatorMinStakedRequired_2(uint128) := ϕ(['validatorMinStakedRequired_6', 'validatorMinStakedRequired_1', 'validatorMinStakedRequired_4', 'validatorMinStakedRequired_0', 'validatorMinStakedRequired_7'])
[i]Type for validatorMinStakedRequired

Name: validatorMinStakedRequired Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
allocatedTokensPerEpoch_7(uint128) := ϕ(['allocatedTokensPerEpoch_3', 'allocatedTokensPerEpoch_0', 'allocatedTokensPerEpoch_1', 'allocatedTokensPerEpoch_5', 'allocatedTokensPerEpoch_9'])
[i]Type for allocatedTokensPerEpoch

Name: allocatedTokensPerEpoch Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
rewardsLocked_7(uint128) := ϕ(['rewardsLocked_10', 'rewardsLocked_2', 'rewardsLocked_5', 'rewardsLocked_0', 'rewardsLocked_3', 'rewardsLocked_8', 'rewardsLocked_6'])
[i]Type for rewardsLocked

Name: rewardsLocked Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
endEpoch_8(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
totalGlobalShares_2(uint128) := ϕ(['totalGlobalShares_25', 'totalGlobalShares_9', 'totalGlobalShares_11', 'totalGlobalShares_7', 'totalGlobalShares_18', 'totalGlobalShares_0'])
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
globalExchangeRate_6(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
validatorsN_1(uint128) := ϕ(['validatorsN_5', 'validatorsN_8', 'validatorsN_0'])
[i]Type for validatorsN

Name: validatorsN Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_1(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
TMP_106(bool) = amount_1 >= divider_6
[i]Type for TMP_106

Name: TMP_106 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_107(None) = SOLIDITY_CALL require(bool,string)(TMP_106,Amount must be at least 1 token)
[i]Type for TMP_107

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_108(bool) = validatorId_1 < validatorsN_1
[i]Type for TMP_108

Name: TMP_108 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_109(None) = SOLIDITY_CALL require(bool,string)(TMP_108,Invalid validator)
[i]Type for TMP_109

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(DelegatedStaking.Validator) -> validators_1[validatorId_1]
[i]Type for REF_12

Name: validators Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_1 (-> ['validators'])(DelegatedStaking.Validator) := REF_12(DelegatedStaking.Validator)
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_13(uint128) -> v_1 (-> ['validators']).disabledEpoch
[i]Type for REF_13

Name: REF_13 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_110(bool) = REF_13 == 0
[i]Type for TMP_110

Name: TMP_110 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_111(None) = SOLIDITY_CALL require(bool,string)(TMP_110,Validator is disabled)
[i]Type for TMP_111

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_112(bool) = endEpoch_8 == 0
[i]Type for TMP_112

Name: TMP_112 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_116(bool) = endEpoch_9 > block.number
[i]Type for TMP_116

Name: TMP_116 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_117(None) = SOLIDITY_CALL require(bool,string)(TMP_116,Program ended)
[i]Type for TMP_117

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_113 = CONVERT block.number to uint128
[i]Type for TMP_113

Name: TMP_113 Function: _stake
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_114(uint128) = rewardsLocked_7 / allocatedTokensPerEpoch_7
[i]Type for TMP_114

Name: TMP_114 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_115(uint128) = TMP_113 + TMP_114
[i]Type for TMP_115

Name: TMP_115 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
endEpoch_9(uint128) := TMP_115(uint128)
[i]Type for endEpoch

Name: endEpoch Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateGlobalExchangeRate()()
globalExchangeRate_7(uint128) := ϕ(['globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rewardsLocked_8(uint128) := 0(uint256)
[i]Type for rewardsLocked

Name: rewardsLocked Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateValidator(DelegatedStaking.Validator)(v_1 (-> ['validators']))
function: _updateValidator, function count: 21
v_1 (-> [])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_1 (-> ['validators'])", "v_1 (-> ['validators'])", 'REF_94', "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
divider_2(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_4(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_2(uint128) -> v_1 (-> []).disabledEpoch
[i]Type for REF_2

Name: REF_2 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = REF_2 == 0
[i]Type for TMP_80

Name: TMP_80 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_3

Name: REF_3 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = REF_3 == 0
[i]Type for TMP_81

Name: TMP_81 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_2 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_4 (->v_2 (-> [])) := globalExchangeRate_4(uint128)
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_5 (-> [])(DelegatedStaking.Validator) := ϕ(['v_2 (-> [])', 'v_4 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: _address, stakings, staked, delegated, commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch
Finance Type: undef
REF_5(uint128) -> v_1 (-> []).lastUpdateGlobalRate
[i]Type for REF_5

Name: REF_5 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(uint128) = globalExchangeRate_4 - REF_5
[i]Type for TMP_82

Name: TMP_82 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rateDifference_1(uint128) := TMP_82(uint128)
[i]Type for rateDifference

Name: rateDifference Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_6(uint128) -> v_1 (-> []).globalShares
[i]Type for REF_6

Name: REF_6 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_6,rateDifference_1)
[i]Type for TMP_83

Name: TMP_83 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
tokensGivenToValidator_1(uint128) := TMP_83(uint128)
[i]Type for tokensGivenToValidator

Name: tokensGivenToValidator Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_11(uint128) -> v_5 (-> []).lastUpdateGlobalRate
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_6 (-> [])(DelegatedStaking.Validator) := ϕ(['v_5 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: _address, stakings, staked, delegated, commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch
Finance Type: undef
REF_11 (->v_6 (-> [])) := globalExchangeRate_5(uint128)
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_84 = CONVERT tokensGivenToValidator_1 to uint256
[i]Type for TMP_84

Name: TMP_84 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_7(uint128) -> v_1 (-> []).commissionRate
[i]Type for REF_7

Name: REF_7 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT REF_7 to uint256
[i]Type for TMP_85

Name: TMP_85 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86(uint256) = TMP_84 * TMP_85
[i]Type for TMP_86

Name: TMP_86 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_87(uint256) = TMP_86 / divider_3
[i]Type for TMP_87

Name: TMP_87 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_88 = CONVERT TMP_87 to uint128
[i]Type for TMP_88

Name: TMP_88 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_88(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_8(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_89(uint128) = tokensGivenToValidator_1 (c)- commissionPaid_1
[i]Type for TMP_89

Name: TMP_89 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_90 = CONVERT TMP_89 to uint256
[i]Type for TMP_90

Name: TMP_90 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_91(uint256) = TMP_90 (c)* divider_3
[i]Type for TMP_91

Name: TMP_91 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_9(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_9

Name: REF_9 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(uint256) = TMP_91 (c)/ REF_9
[i]Type for TMP_92

Name: TMP_92 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_93 = CONVERT TMP_92 to uint128
[i]Type for TMP_93

Name: TMP_93 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_8(-> v_3 (-> [])) = REF_8 (c)+ TMP_93
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_10(uint128) -> v_3 (-> []).commissionAvailableToRedeem
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(['v_3 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_10(-> v_4 (-> [])) = REF_10 + commissionPaid_1
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_1 (-> [])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_1 (-> ['validators'])", "v_1 (-> ['validators'])", 'REF_94', "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
divider_2(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_4(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_2(uint128) -> v_1 (-> []).disabledEpoch
[i]Type for REF_2

Name: REF_2 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = REF_2 == 0
[i]Type for TMP_80

Name: TMP_80 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_3

Name: REF_3 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = REF_3 == 0
[i]Type for TMP_81

Name: TMP_81 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_2 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_4 (->v_2 (-> [])) := globalExchangeRate_4(uint128)
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_5 (-> [])(DelegatedStaking.Validator) := ϕ(['v_2 (-> [])', 'v_4 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_5(uint128) -> v_1 (-> []).lastUpdateGlobalRate
[i]Type for REF_5

Name: REF_5 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(uint128) = globalExchangeRate_4 - REF_5
[i]Type for TMP_82

Name: TMP_82 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rateDifference_1(uint128) := TMP_82(uint128)
[i]Type for rateDifference

Name: rateDifference Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_6(uint128) -> v_1 (-> []).globalShares
[i]Type for REF_6

Name: REF_6 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_6,rateDifference_1)
[i]Type for TMP_83

Name: TMP_83 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
tokensGivenToValidator_1(uint128) := TMP_83(uint128)
[i]Type for tokensGivenToValidator

Name: tokensGivenToValidator Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_11(uint128) -> v_5 (-> []).lastUpdateGlobalRate
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_6 (-> [])(DelegatedStaking.Validator) := ϕ(['v_5 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_11 (->v_6 (-> [])) := globalExchangeRate_5(uint128)
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_84 = CONVERT tokensGivenToValidator_1 to uint256
[i]Type for TMP_84

Name: TMP_84 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_7(uint128) -> v_1 (-> []).commissionRate
[i]Type for REF_7

Name: REF_7 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT REF_7 to uint256
[i]Type for TMP_85

Name: TMP_85 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86(uint256) = TMP_84 * TMP_85
[i]Type for TMP_86

Name: TMP_86 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_87(uint256) = TMP_86 / divider_3
[i]Type for TMP_87

Name: TMP_87 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_88 = CONVERT TMP_87 to uint128
[i]Type for TMP_88

Name: TMP_88 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_88(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_8(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_89(uint128) = tokensGivenToValidator_1 (c)- commissionPaid_1
[i]Type for TMP_89

Name: TMP_89 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_90 = CONVERT TMP_89 to uint256
[i]Type for TMP_90

Name: TMP_90 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_91(uint256) = TMP_90 (c)* divider_3
[i]Type for TMP_91

Name: TMP_91 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_9(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_9

Name: REF_9 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(uint256) = TMP_91 (c)/ REF_9
[i]Type for TMP_92

Name: TMP_92 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_93 = CONVERT TMP_92 to uint128
[i]Type for TMP_93

Name: TMP_93 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_8(-> v_3 (-> [])) = REF_8 (c)+ TMP_93
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_10(uint128) -> v_3 (-> []).commissionAvailableToRedeem
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(['v_3 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_10(-> v_4 (-> [])) = REF_10 + commissionPaid_1
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
REF_14(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_14

Name: REF_14 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_120(bool) = msg.sender == REF_14
[i]Type for TMP_120

Name: TMP_120 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_18(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_18

Name: REF_18 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_19(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_19

Name: REF_19 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_20(DelegatedStaking.Staking) -> REF_18[REF_19]
[i]Type for REF_20

Name: REF_18 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_21(uint128) -> REF_20.staked
[i]Type for REF_21

Name: REF_21 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validatorStaked_1(uint128) := REF_21(uint128)
[i]Type for validatorStaked

Name: validatorStaked Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_124(uint128) = validatorStaked_1 (c)* maxCapMultiplier_4
[i]Type for TMP_124

Name: TMP_124 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
validatorMaxCap_1(uint128) := TMP_124(uint128)
[i]Type for validatorMaxCap

Name: validatorMaxCap Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
REF_15(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_15

Name: REF_15 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_16(DelegatedStaking.Staking) -> REF_15[msg.sender]
[i]Type for REF_16

Name: REF_15 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_17(uint128) -> REF_16.staked
[i]Type for REF_17

Name: REF_17 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_121(uint128) = amount_1 (c)+ REF_17
[i]Type for TMP_121

Name: TMP_121 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_122(bool) = TMP_121 >= validatorMinStakedRequired_4
[i]Type for TMP_122

Name: TMP_122 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_123(None) = SOLIDITY_CALL require(bool,string)(TMP_122,Amount < min staked required)
[i]Type for TMP_123

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_22(uint128) -> v_1 (-> ['validators']).delegated
[i]Type for REF_22

Name: REF_22 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_125(uint128) = REF_22 (c)- validatorStaked_1
[i]Type for TMP_125

Name: TMP_125 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_126(uint128) = TMP_125 (c)+ amount_1
[i]Type for TMP_126

Name: TMP_126 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newDelegated_1(uint128) := TMP_126(uint128)
[i]Type for newDelegated

Name: newDelegated Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._transferToContract(address,uint128)(msg.sender,amount_1)
TMP_127(bool) = newDelegated_1 <= validatorMaxCap_1
[i]Type for TMP_127

Name: TMP_127 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_128(None) = SOLIDITY_CALL require(bool,string)(TMP_127,Validator max capacity exceeded)
[i]Type for TMP_128

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_23(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_23

Name: REF_23 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_24(DelegatedStaking.Staking) -> REF_23[msg.sender]
[i]Type for REF_24

Name: REF_23 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_1 (-> ['v'])(DelegatedStaking.Staking) := REF_24(DelegatedStaking.Staking)
[i]Type for s

Name: s Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_130(uint128) = INTERNAL_CALL, DelegatedStaking._tokensToShares(uint128,uint128)(amount_1,globalExchangeRate_9)
[i]Type for TMP_130

Name: TMP_130 Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
globalSharesToAdd_1(uint128) := TMP_130(uint128)
[i]Type for globalSharesToAdd

Name: globalSharesToAdd Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
totalGlobalShares_7(uint128) = totalGlobalShares_6 + globalSharesToAdd_1
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_25(uint128) -> v_1 (-> ['validators']).globalShares
[i]Type for REF_25

Name: REF_25 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_2 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: globalShares, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_25(-> v_2 (-> ['validators'])) = REF_25 + globalSharesToAdd_1
[i]Type for REF_25

Name: REF_25 Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
validators_2(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_2 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
newDelegatorSharesN_1(uint128) := 0(uint256)
[i]Type for newDelegatorSharesN

Name: newDelegatorSharesN Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_26(uint128) -> v_2 (-> ['validators']).totalShares
[i]Type for REF_26

Name: REF_26 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_2 (-> ['validators'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, globalShares, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_26(-> v_3 (-> ['validators'])) = REF_26 + newDelegatorSharesN_1
[i]Type for REF_26

Name: REF_26 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
validators_3(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_3 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
REF_27(uint128) -> s_1 (-> ['v']).shares
[i]Type for REF_27

Name: REF_27 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
s_2 (-> ['v'])(DelegatedStaking.Staking) := ϕ(["s_1 (-> ['v'])"])
[i]Type for s

Name: s Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares
Finance Type: undef
REF_27(-> s_2 (-> ['v'])) = REF_27 + newDelegatorSharesN_1
[i]Type for REF_27

Name: REF_27 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
v_5 (-> ['v'])(DelegatedStaking.Validator) := ϕ(["s_2 (-> ['v'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares
Finance Type: undef
REF_28(uint128) -> v_3 (-> ['validators']).delegated
[i]Type for REF_28

Name: REF_28 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_4 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_3 (-> ['validators'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, globalShares, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_28(-> v_4 (-> ['validators'])) = REF_28 + amount_1
[i]Type for REF_28

Name: REF_28 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_4(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_4 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
REF_29(uint128) -> s_2 (-> ['v']).staked
[i]Type for REF_29

Name: REF_29 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_3 (-> ['v'])(DelegatedStaking.Staking) := ϕ(["s_2 (-> ['v'])"])
[i]Type for s

Name: s Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: staked, shares
Finance Type: undef
REF_29(-> s_3 (-> ['v'])) = REF_29 + amount_1
[i]Type for REF_29

Name: REF_29 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_6 (-> ['v'])(DelegatedStaking.Validator) := ϕ(["s_3 (-> ['v'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: staked, shares
Finance Type: undef
TMP_104(int256) = 1 (c)+ 1
[i]Type for TMP_104

Name: TMP_104 Function: stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
a_1(int256) := TMP_104(int256)
[i]Type for a

Name: a Function: stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._stake(uint128,uint128,bool)(validatorId_1,amount_1,True)



_stake
function: _stake, function count: 22
validatorId_1(uint128) := ϕ(['validatorId_1', 'newValidatorId_1', 'validatorId_1'])
[i]Type for validatorId

Name: validatorId Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_1'])
[i]Type for amount

Name: amount Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
divider_6(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxCapMultiplier_2(uint128) := ϕ(['maxCapMultiplier_0', 'maxCapMultiplier_7', 'maxCapMultiplier_1', 'maxCapMultiplier_6', 'maxCapMultiplier_4'])
[i]Type for maxCapMultiplier

Name: maxCapMultiplier Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
validatorMinStakedRequired_2(uint128) := ϕ(['validatorMinStakedRequired_6', 'validatorMinStakedRequired_1', 'validatorMinStakedRequired_4', 'validatorMinStakedRequired_0', 'validatorMinStakedRequired_7'])
[i]Type for validatorMinStakedRequired

Name: validatorMinStakedRequired Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
allocatedTokensPerEpoch_7(uint128) := ϕ(['allocatedTokensPerEpoch_3', 'allocatedTokensPerEpoch_0', 'allocatedTokensPerEpoch_1', 'allocatedTokensPerEpoch_5', 'allocatedTokensPerEpoch_9'])
[i]Type for allocatedTokensPerEpoch

Name: allocatedTokensPerEpoch Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
rewardsLocked_7(uint128) := ϕ(['rewardsLocked_10', 'rewardsLocked_2', 'rewardsLocked_5', 'rewardsLocked_0', 'rewardsLocked_3', 'rewardsLocked_8', 'rewardsLocked_6'])
[i]Type for rewardsLocked

Name: rewardsLocked Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
endEpoch_8(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
totalGlobalShares_2(uint128) := ϕ(['totalGlobalShares_25', 'totalGlobalShares_9', 'totalGlobalShares_11', 'totalGlobalShares_7', 'totalGlobalShares_18', 'totalGlobalShares_0'])
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
globalExchangeRate_6(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
validatorsN_1(uint128) := ϕ(['validatorsN_5', 'validatorsN_8', 'validatorsN_0'])
[i]Type for validatorsN

Name: validatorsN Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_1(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
TMP_106(bool) = amount_1 >= divider_6
[i]Type for TMP_106

Name: TMP_106 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_107(None) = SOLIDITY_CALL require(bool,string)(TMP_106,Amount must be at least 1 token)
[i]Type for TMP_107

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_108(bool) = validatorId_1 < validatorsN_1
[i]Type for TMP_108

Name: TMP_108 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_109(None) = SOLIDITY_CALL require(bool,string)(TMP_108,Invalid validator)
[i]Type for TMP_109

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(DelegatedStaking.Validator) -> validators_1[validatorId_1]
[i]Type for REF_12

Name: validators Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_1 (-> ['validators'])(DelegatedStaking.Validator) := REF_12(DelegatedStaking.Validator)
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_13(uint128) -> v_1 (-> ['validators']).disabledEpoch
[i]Type for REF_13

Name: REF_13 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_110(bool) = REF_13 == 0
[i]Type for TMP_110

Name: TMP_110 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_111(None) = SOLIDITY_CALL require(bool,string)(TMP_110,Validator is disabled)
[i]Type for TMP_111

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_112(bool) = endEpoch_8 == 0
[i]Type for TMP_112

Name: TMP_112 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_116(bool) = endEpoch_9 > block.number
[i]Type for TMP_116

Name: TMP_116 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_117(None) = SOLIDITY_CALL require(bool,string)(TMP_116,Program ended)
[i]Type for TMP_117

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_113 = CONVERT block.number to uint128
[i]Type for TMP_113

Name: TMP_113 Function: _stake
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_114(uint128) = rewardsLocked_7 / allocatedTokensPerEpoch_7
[i]Type for TMP_114

Name: TMP_114 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_115(uint128) = TMP_113 + TMP_114
[i]Type for TMP_115

Name: TMP_115 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
endEpoch_9(uint128) := TMP_115(uint128)
[i]Type for endEpoch

Name: endEpoch Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateGlobalExchangeRate()()
globalExchangeRate_7(uint128) := ϕ(['globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rewardsLocked_8(uint128) := 0(uint256)
[i]Type for rewardsLocked

Name: rewardsLocked Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateValidator(DelegatedStaking.Validator)(v_1 (-> ['validators']))
function: _updateValidator, function count: 23
v_1 (-> [])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_1 (-> ['validators'])", "v_1 (-> ['validators'])", 'REF_94', "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
divider_2(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_4(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_2(uint128) -> v_1 (-> []).disabledEpoch
[i]Type for REF_2

Name: REF_2 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = REF_2 == 0
[i]Type for TMP_80

Name: TMP_80 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_3

Name: REF_3 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = REF_3 == 0
[i]Type for TMP_81

Name: TMP_81 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_2 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_4 (->v_2 (-> [])) := globalExchangeRate_4(uint128)
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_5 (-> [])(DelegatedStaking.Validator) := ϕ(['v_2 (-> [])', 'v_4 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_5(uint128) -> v_1 (-> []).lastUpdateGlobalRate
[i]Type for REF_5

Name: REF_5 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(uint128) = globalExchangeRate_4 - REF_5
[i]Type for TMP_82

Name: TMP_82 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rateDifference_1(uint128) := TMP_82(uint128)
[i]Type for rateDifference

Name: rateDifference Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_6(uint128) -> v_1 (-> []).globalShares
[i]Type for REF_6

Name: REF_6 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_6,rateDifference_1)
[i]Type for TMP_83

Name: TMP_83 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
tokensGivenToValidator_1(uint128) := TMP_83(uint128)
[i]Type for tokensGivenToValidator

Name: tokensGivenToValidator Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_11(uint128) -> v_5 (-> []).lastUpdateGlobalRate
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_6 (-> [])(DelegatedStaking.Validator) := ϕ(['v_5 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_11 (->v_6 (-> [])) := globalExchangeRate_5(uint128)
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_84 = CONVERT tokensGivenToValidator_1 to uint256
[i]Type for TMP_84

Name: TMP_84 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_7(uint128) -> v_1 (-> []).commissionRate
[i]Type for REF_7

Name: REF_7 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT REF_7 to uint256
[i]Type for TMP_85

Name: TMP_85 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86(uint256) = TMP_84 * TMP_85
[i]Type for TMP_86

Name: TMP_86 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_87(uint256) = TMP_86 / divider_3
[i]Type for TMP_87

Name: TMP_87 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_88 = CONVERT TMP_87 to uint128
[i]Type for TMP_88

Name: TMP_88 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_88(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_8(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_89(uint128) = tokensGivenToValidator_1 (c)- commissionPaid_1
[i]Type for TMP_89

Name: TMP_89 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_90 = CONVERT TMP_89 to uint256
[i]Type for TMP_90

Name: TMP_90 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_91(uint256) = TMP_90 (c)* divider_3
[i]Type for TMP_91

Name: TMP_91 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_9(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_9

Name: REF_9 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(uint256) = TMP_91 (c)/ REF_9
[i]Type for TMP_92

Name: TMP_92 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_93 = CONVERT TMP_92 to uint128
[i]Type for TMP_93

Name: TMP_93 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_8(-> v_3 (-> [])) = REF_8 (c)+ TMP_93
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_10(uint128) -> v_3 (-> []).commissionAvailableToRedeem
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(['v_3 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_10(-> v_4 (-> [])) = REF_10 + commissionPaid_1
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_1 (-> [])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_1 (-> ['validators'])", "v_1 (-> ['validators'])", 'REF_94', "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
divider_2(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_4(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_2(uint128) -> v_1 (-> []).disabledEpoch
[i]Type for REF_2

Name: REF_2 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = REF_2 == 0
[i]Type for TMP_80

Name: TMP_80 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_3

Name: REF_3 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = REF_3 == 0
[i]Type for TMP_81

Name: TMP_81 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_2 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_4 (->v_2 (-> [])) := globalExchangeRate_4(uint128)
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_5 (-> [])(DelegatedStaking.Validator) := ϕ(['v_2 (-> [])', 'v_4 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_5(uint128) -> v_1 (-> []).lastUpdateGlobalRate
[i]Type for REF_5

Name: REF_5 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(uint128) = globalExchangeRate_4 - REF_5
[i]Type for TMP_82

Name: TMP_82 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rateDifference_1(uint128) := TMP_82(uint128)
[i]Type for rateDifference

Name: rateDifference Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_6(uint128) -> v_1 (-> []).globalShares
[i]Type for REF_6

Name: REF_6 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_6,rateDifference_1)
[i]Type for TMP_83

Name: TMP_83 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
tokensGivenToValidator_1(uint128) := TMP_83(uint128)
[i]Type for tokensGivenToValidator

Name: tokensGivenToValidator Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_11(uint128) -> v_5 (-> []).lastUpdateGlobalRate
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_6 (-> [])(DelegatedStaking.Validator) := ϕ(['v_5 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_11 (->v_6 (-> [])) := globalExchangeRate_5(uint128)
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_84 = CONVERT tokensGivenToValidator_1 to uint256
[i]Type for TMP_84

Name: TMP_84 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_7(uint128) -> v_1 (-> []).commissionRate
[i]Type for REF_7

Name: REF_7 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT REF_7 to uint256
[i]Type for TMP_85

Name: TMP_85 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86(uint256) = TMP_84 * TMP_85
[i]Type for TMP_86

Name: TMP_86 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_87(uint256) = TMP_86 / divider_3
[i]Type for TMP_87

Name: TMP_87 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_88 = CONVERT TMP_87 to uint128
[i]Type for TMP_88

Name: TMP_88 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_88(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_8(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_89(uint128) = tokensGivenToValidator_1 (c)- commissionPaid_1
[i]Type for TMP_89

Name: TMP_89 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_90 = CONVERT TMP_89 to uint256
[i]Type for TMP_90

Name: TMP_90 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_91(uint256) = TMP_90 (c)* divider_3
[i]Type for TMP_91

Name: TMP_91 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_9(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_9

Name: REF_9 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(uint256) = TMP_91 (c)/ REF_9
[i]Type for TMP_92

Name: TMP_92 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_93 = CONVERT TMP_92 to uint128
[i]Type for TMP_93

Name: TMP_93 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_8(-> v_3 (-> [])) = REF_8 (c)+ TMP_93
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_10(uint128) -> v_3 (-> []).commissionAvailableToRedeem
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(['v_3 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_10(-> v_4 (-> [])) = REF_10 + commissionPaid_1
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
REF_14(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_14

Name: REF_14 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_120(bool) = msg.sender == REF_14
[i]Type for TMP_120

Name: TMP_120 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_18(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_18

Name: REF_18 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_19(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_19

Name: REF_19 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_20(DelegatedStaking.Staking) -> REF_18[REF_19]
[i]Type for REF_20

Name: REF_18 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_21(uint128) -> REF_20.staked
[i]Type for REF_21

Name: REF_21 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validatorStaked_1(uint128) := REF_21(uint128)
[i]Type for validatorStaked

Name: validatorStaked Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_124(uint128) = validatorStaked_1 (c)* maxCapMultiplier_4
[i]Type for TMP_124

Name: TMP_124 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
validatorMaxCap_1(uint128) := TMP_124(uint128)
[i]Type for validatorMaxCap

Name: validatorMaxCap Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
REF_15(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_15

Name: REF_15 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_16(DelegatedStaking.Staking) -> REF_15[msg.sender]
[i]Type for REF_16

Name: REF_15 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_17(uint128) -> REF_16.staked
[i]Type for REF_17

Name: REF_17 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_121(uint128) = amount_1 (c)+ REF_17
[i]Type for TMP_121

Name: TMP_121 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_122(bool) = TMP_121 >= validatorMinStakedRequired_4
[i]Type for TMP_122

Name: TMP_122 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_123(None) = SOLIDITY_CALL require(bool,string)(TMP_122,Amount < min staked required)
[i]Type for TMP_123

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_22(uint128) -> v_1 (-> ['validators']).delegated
[i]Type for REF_22

Name: REF_22 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_125(uint128) = REF_22 (c)- validatorStaked_1
[i]Type for TMP_125

Name: TMP_125 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_126(uint128) = TMP_125 (c)+ amount_1
[i]Type for TMP_126

Name: TMP_126 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
newDelegated_1(uint128) := TMP_126(uint128)
[i]Type for newDelegated

Name: newDelegated Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
INTERNAL_CALL, DelegatedStaking._transferToContract(address,uint128)(msg.sender,amount_1)
function: _transferToContract, function count: 24
from_1(address) := ϕ(['msg.sender'])
[i]Type for from

Name: from Function: _transferToContract
Num: -1
Den: -1
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
amount_1(uint128) := ϕ(['amount_1', 'amount_1'])
[i]Type for amount

Name: amount Function: _transferToContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
CQT_1(IERC20Upgradeable) := ϕ(['CQT_0'])
[i]Type for CQT

Name: CQT Function: _transferToContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_38 = CONVERT this to address
[i]Type for TMP_38

Name: TMP_38 Function: _transferToContract
Num: 
Den: 
Address: 2
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable,address,address,uint256), arguments:['CQT_1', 'from_1', 'TMP_38', 'amount_1'] 
from_1(address) := ϕ(['msg.sender'])
[i]Type for from

Name: from Function: _transferToContract
Num: -1
Den: -1
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
amount_1(uint128) := ϕ(['amount_1', 'amount_1'])
[i]Type for amount

Name: amount Function: _transferToContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
CQT_1(IERC20Upgradeable) := ϕ(['CQT_0'])
[i]Type for CQT

Name: CQT Function: _transferToContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_38 = CONVERT this to address
[i]Type for TMP_38

Name: TMP_38 Function: _transferToContract
Num: 
Den: 
Address: 2
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable,address,address,uint256), arguments:['CQT_1', 'from_1', 'TMP_38', 'amount_1'] 
TMP_127(bool) = newDelegated_1 <= validatorMaxCap_1
[i]Type for TMP_127

Name: TMP_127 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_128(None) = SOLIDITY_CALL require(bool,string)(TMP_127,Validator max capacity exceeded)
[i]Type for TMP_128

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_23(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_23

Name: REF_23 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_24(DelegatedStaking.Staking) -> REF_23[msg.sender]
[i]Type for REF_24

Name: REF_23 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_1 (-> ['v'])(DelegatedStaking.Staking) := REF_24(DelegatedStaking.Staking)
[i]Type for s

Name: s Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_130(uint128) = INTERNAL_CALL, DelegatedStaking._tokensToShares(uint128,uint128)(amount_1,globalExchangeRate_9)
function: _tokensToShares, function count: 25
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_5', 'amount_3', 'TMP_181'])
[i]Type for amount

Name: amount Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
rate_1(uint128) := ϕ(['REF_35', 'REF_70', 'globalExchangeRate_9', 'REF_75', 'globalExchangeRate_20', 'globalExchangeRate_12'])
[i]Type for rate

Name: rate Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
divider_5(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99 = CONVERT amount_1 to uint256
[i]Type for TMP_99

Name: TMP_99 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_100(uint256) = TMP_99 (c)* divider_5
[i]Type for TMP_100

Name: TMP_100 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_101 = CONVERT rate_1 to uint256
[i]Type for TMP_101

Name: TMP_101 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_102(uint256) = TMP_100 (c)/ TMP_101
[i]Type for TMP_102

Name: TMP_102 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: raw balance
TMP_103 = CONVERT TMP_102 to uint128
[i]Type for TMP_103

Name: TMP_103 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: raw balance
RETURN TMP_103
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_5', 'amount_3', 'TMP_181'])
[i]Type for amount

Name: amount Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
rate_1(uint128) := ϕ(['REF_35', 'REF_70', 'globalExchangeRate_9', 'REF_75', 'globalExchangeRate_20', 'globalExchangeRate_12'])
[i]Type for rate

Name: rate Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
divider_5(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99 = CONVERT amount_1 to uint256
[i]Type for TMP_99

Name: TMP_99 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_100(uint256) = TMP_99 (c)* divider_5
[i]Type for TMP_100

Name: TMP_100 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_101 = CONVERT rate_1 to uint256
[i]Type for TMP_101

Name: TMP_101 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_102(uint256) = TMP_100 (c)/ TMP_101
[i]Type for TMP_102

Name: TMP_102 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: raw balance
TMP_103 = CONVERT TMP_102 to uint128
[i]Type for TMP_103

Name: TMP_103 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: raw balance
RETURN TMP_103
[i]Type for TMP_130

Name: TMP_130 Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: raw balance
globalSharesToAdd_1(uint128) := TMP_130(uint128)
[i]Type for globalSharesToAdd

Name: globalSharesToAdd Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: raw balance
totalGlobalShares_7(uint128) = totalGlobalShares_6 + globalSharesToAdd_1
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: raw balance
REF_25(uint128) -> v_1 (-> ['validators']).globalShares
[i]Type for REF_25

Name: REF_25 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_2 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: globalShares, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_25(-> v_2 (-> ['validators'])) = REF_25 + globalSharesToAdd_1
[i]Type for REF_25

Name: REF_25 Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: raw balance
validators_2(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_2 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
newDelegatorSharesN_1(uint128) := 0(uint256)
[i]Type for newDelegatorSharesN

Name: newDelegatorSharesN Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_26(uint128) -> v_2 (-> ['validators']).totalShares
[i]Type for REF_26

Name: REF_26 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_2 (-> ['validators'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, globalShares, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_26(-> v_3 (-> ['validators'])) = REF_26 + newDelegatorSharesN_1
[i]Type for REF_26

Name: REF_26 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
validators_3(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_3 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
REF_27(uint128) -> s_1 (-> ['v']).shares
[i]Type for REF_27

Name: REF_27 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
s_2 (-> ['v'])(DelegatedStaking.Staking) := ϕ(["s_1 (-> ['v'])"])
[i]Type for s

Name: s Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares
Finance Type: undef
REF_27(-> s_2 (-> ['v'])) = REF_27 + newDelegatorSharesN_1
[i]Type for REF_27

Name: REF_27 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
v_5 (-> ['v'])(DelegatedStaking.Validator) := ϕ(["s_2 (-> ['v'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares
Finance Type: undef
REF_28(uint128) -> v_3 (-> ['validators']).delegated
[i]Type for REF_28

Name: REF_28 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_4 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_3 (-> ['validators'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, globalShares, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_28(-> v_4 (-> ['validators'])) = REF_28 + amount_1
[i]Type for REF_28

Name: REF_28 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
validators_4(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_4 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
REF_29(uint128) -> s_2 (-> ['v']).staked
[i]Type for REF_29

Name: REF_29 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_3 (-> ['v'])(DelegatedStaking.Staking) := ϕ(["s_2 (-> ['v'])"])
[i]Type for s

Name: s Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: staked, shares
Finance Type: undef
REF_29(-> s_3 (-> ['v'])) = REF_29 + amount_1
[i]Type for REF_29

Name: REF_29 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
v_6 (-> ['v'])(DelegatedStaking.Validator) := ϕ(["s_3 (-> ['v'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: staked, shares
Finance Type: undef
validatorId_1(uint128) := ϕ(['validatorId_1', 'newValidatorId_1', 'validatorId_1'])
[i]Type for validatorId

Name: validatorId Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_1'])
[i]Type for amount

Name: amount Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
divider_6(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxCapMultiplier_2(uint128) := ϕ(['maxCapMultiplier_0', 'maxCapMultiplier_7', 'maxCapMultiplier_1', 'maxCapMultiplier_6', 'maxCapMultiplier_4'])
[i]Type for maxCapMultiplier

Name: maxCapMultiplier Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
validatorMinStakedRequired_2(uint128) := ϕ(['validatorMinStakedRequired_6', 'validatorMinStakedRequired_1', 'validatorMinStakedRequired_4', 'validatorMinStakedRequired_0', 'validatorMinStakedRequired_7'])
[i]Type for validatorMinStakedRequired

Name: validatorMinStakedRequired Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
allocatedTokensPerEpoch_7(uint128) := ϕ(['allocatedTokensPerEpoch_3', 'allocatedTokensPerEpoch_0', 'allocatedTokensPerEpoch_1', 'allocatedTokensPerEpoch_5', 'allocatedTokensPerEpoch_9'])
[i]Type for allocatedTokensPerEpoch

Name: allocatedTokensPerEpoch Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
rewardsLocked_7(uint128) := ϕ(['rewardsLocked_10', 'rewardsLocked_2', 'rewardsLocked_5', 'rewardsLocked_0', 'rewardsLocked_3', 'rewardsLocked_8', 'rewardsLocked_6'])
[i]Type for rewardsLocked

Name: rewardsLocked Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
endEpoch_8(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
totalGlobalShares_2(uint128) := ϕ(['totalGlobalShares_25', 'totalGlobalShares_9', 'totalGlobalShares_11', 'totalGlobalShares_7', 'totalGlobalShares_18', 'totalGlobalShares_0'])
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: raw balance
globalExchangeRate_6(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
validatorsN_1(uint128) := ϕ(['validatorsN_5', 'validatorsN_8', 'validatorsN_0'])
[i]Type for validatorsN

Name: validatorsN Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_1(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
TMP_106(bool) = amount_1 >= divider_6
[i]Type for TMP_106

Name: TMP_106 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_107(None) = SOLIDITY_CALL require(bool,string)(TMP_106,Amount must be at least 1 token)
[i]Type for TMP_107

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_108(bool) = validatorId_1 < validatorsN_1
[i]Type for TMP_108

Name: TMP_108 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_109(None) = SOLIDITY_CALL require(bool,string)(TMP_108,Invalid validator)
[i]Type for TMP_109

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(DelegatedStaking.Validator) -> validators_1[validatorId_1]
[i]Type for REF_12

Name: validators Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_1 (-> ['validators'])(DelegatedStaking.Validator) := REF_12(DelegatedStaking.Validator)
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_13(uint128) -> v_1 (-> ['validators']).disabledEpoch
[i]Type for REF_13

Name: REF_13 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_110(bool) = REF_13 == 0
[i]Type for TMP_110

Name: TMP_110 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_111(None) = SOLIDITY_CALL require(bool,string)(TMP_110,Validator is disabled)
[i]Type for TMP_111

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_112(bool) = endEpoch_8 == 0
[i]Type for TMP_112

Name: TMP_112 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_116(bool) = endEpoch_9 > block.number
[i]Type for TMP_116

Name: TMP_116 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_117(None) = SOLIDITY_CALL require(bool,string)(TMP_116,Program ended)
[i]Type for TMP_117

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_113 = CONVERT block.number to uint128
[i]Type for TMP_113

Name: TMP_113 Function: _stake
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_114(uint128) = rewardsLocked_7 / allocatedTokensPerEpoch_7
[i]Type for TMP_114

Name: TMP_114 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_115(uint128) = TMP_113 + TMP_114
[i]Type for TMP_115

Name: TMP_115 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
endEpoch_9(uint128) := TMP_115(uint128)
[i]Type for endEpoch

Name: endEpoch Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateGlobalExchangeRate()()
globalExchangeRate_7(uint128) := ϕ(['globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rewardsLocked_8(uint128) := 0(uint256)
[i]Type for rewardsLocked

Name: rewardsLocked Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateValidator(DelegatedStaking.Validator)(v_1 (-> ['validators']))
function: _updateValidator, function count: 26
v_1 (-> [])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_1 (-> ['validators'])", "v_1 (-> ['validators'])", 'REF_94', "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
divider_2(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_4(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_2(uint128) -> v_1 (-> []).disabledEpoch
[i]Type for REF_2

Name: REF_2 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = REF_2 == 0
[i]Type for TMP_80

Name: TMP_80 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_3

Name: REF_3 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = REF_3 == 0
[i]Type for TMP_81

Name: TMP_81 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_2 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_4 (->v_2 (-> [])) := globalExchangeRate_4(uint128)
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_5 (-> [])(DelegatedStaking.Validator) := ϕ(['v_2 (-> [])', 'v_4 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_5(uint128) -> v_1 (-> []).lastUpdateGlobalRate
[i]Type for REF_5

Name: REF_5 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(uint128) = globalExchangeRate_4 - REF_5
[i]Type for TMP_82

Name: TMP_82 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rateDifference_1(uint128) := TMP_82(uint128)
[i]Type for rateDifference

Name: rateDifference Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_6(uint128) -> v_1 (-> []).globalShares
[i]Type for REF_6

Name: REF_6 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_6,rateDifference_1)
[i]Type for TMP_83

Name: TMP_83 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
tokensGivenToValidator_1(uint128) := TMP_83(uint128)
[i]Type for tokensGivenToValidator

Name: tokensGivenToValidator Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_11(uint128) -> v_5 (-> []).lastUpdateGlobalRate
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_6 (-> [])(DelegatedStaking.Validator) := ϕ(['v_5 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_11 (->v_6 (-> [])) := globalExchangeRate_5(uint128)
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_84 = CONVERT tokensGivenToValidator_1 to uint256
[i]Type for TMP_84

Name: TMP_84 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_7(uint128) -> v_1 (-> []).commissionRate
[i]Type for REF_7

Name: REF_7 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT REF_7 to uint256
[i]Type for TMP_85

Name: TMP_85 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86(uint256) = TMP_84 * TMP_85
[i]Type for TMP_86

Name: TMP_86 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_87(uint256) = TMP_86 / divider_3
[i]Type for TMP_87

Name: TMP_87 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_88 = CONVERT TMP_87 to uint128
[i]Type for TMP_88

Name: TMP_88 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_88(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_8(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_89(uint128) = tokensGivenToValidator_1 (c)- commissionPaid_1
[i]Type for TMP_89

Name: TMP_89 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_90 = CONVERT TMP_89 to uint256
[i]Type for TMP_90

Name: TMP_90 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_91(uint256) = TMP_90 (c)* divider_3
[i]Type for TMP_91

Name: TMP_91 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_9(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_9

Name: REF_9 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(uint256) = TMP_91 (c)/ REF_9
[i]Type for TMP_92

Name: TMP_92 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_93 = CONVERT TMP_92 to uint128
[i]Type for TMP_93

Name: TMP_93 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_8(-> v_3 (-> [])) = REF_8 (c)+ TMP_93
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_10(uint128) -> v_3 (-> []).commissionAvailableToRedeem
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(['v_3 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_10(-> v_4 (-> [])) = REF_10 + commissionPaid_1
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_1 (-> [])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_1 (-> ['validators'])", "v_1 (-> ['validators'])", 'REF_94', "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
divider_2(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_4(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_2(uint128) -> v_1 (-> []).disabledEpoch
[i]Type for REF_2

Name: REF_2 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = REF_2 == 0
[i]Type for TMP_80

Name: TMP_80 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_3

Name: REF_3 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = REF_3 == 0
[i]Type for TMP_81

Name: TMP_81 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_2 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_4 (->v_2 (-> [])) := globalExchangeRate_4(uint128)
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_5 (-> [])(DelegatedStaking.Validator) := ϕ(['v_2 (-> [])', 'v_4 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_5(uint128) -> v_1 (-> []).lastUpdateGlobalRate
[i]Type for REF_5

Name: REF_5 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(uint128) = globalExchangeRate_4 - REF_5
[i]Type for TMP_82

Name: TMP_82 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rateDifference_1(uint128) := TMP_82(uint128)
[i]Type for rateDifference

Name: rateDifference Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_6(uint128) -> v_1 (-> []).globalShares
[i]Type for REF_6

Name: REF_6 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_6,rateDifference_1)
[i]Type for TMP_83

Name: TMP_83 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
tokensGivenToValidator_1(uint128) := TMP_83(uint128)
[i]Type for tokensGivenToValidator

Name: tokensGivenToValidator Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_11(uint128) -> v_5 (-> []).lastUpdateGlobalRate
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_6 (-> [])(DelegatedStaking.Validator) := ϕ(['v_5 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_11 (->v_6 (-> [])) := globalExchangeRate_5(uint128)
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_84 = CONVERT tokensGivenToValidator_1 to uint256
[i]Type for TMP_84

Name: TMP_84 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_7(uint128) -> v_1 (-> []).commissionRate
[i]Type for REF_7

Name: REF_7 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT REF_7 to uint256
[i]Type for TMP_85

Name: TMP_85 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86(uint256) = TMP_84 * TMP_85
[i]Type for TMP_86

Name: TMP_86 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_87(uint256) = TMP_86 / divider_3
[i]Type for TMP_87

Name: TMP_87 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_88 = CONVERT TMP_87 to uint128
[i]Type for TMP_88

Name: TMP_88 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_88(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_8(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_89(uint128) = tokensGivenToValidator_1 (c)- commissionPaid_1
[i]Type for TMP_89

Name: TMP_89 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_90 = CONVERT TMP_89 to uint256
[i]Type for TMP_90

Name: TMP_90 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_91(uint256) = TMP_90 (c)* divider_3
[i]Type for TMP_91

Name: TMP_91 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_9(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_9

Name: REF_9 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(uint256) = TMP_91 (c)/ REF_9
[i]Type for TMP_92

Name: TMP_92 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_93 = CONVERT TMP_92 to uint128
[i]Type for TMP_93

Name: TMP_93 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_8(-> v_3 (-> [])) = REF_8 (c)+ TMP_93
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_10(uint128) -> v_3 (-> []).commissionAvailableToRedeem
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(['v_3 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_10(-> v_4 (-> [])) = REF_10 + commissionPaid_1
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
REF_14(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_14

Name: REF_14 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_120(bool) = msg.sender == REF_14
[i]Type for TMP_120

Name: TMP_120 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_18(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_18

Name: REF_18 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_19(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_19

Name: REF_19 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_20(DelegatedStaking.Staking) -> REF_18[REF_19]
[i]Type for REF_20

Name: REF_18 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_21(uint128) -> REF_20.staked
[i]Type for REF_21

Name: REF_21 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validatorStaked_1(uint128) := REF_21(uint128)
[i]Type for validatorStaked

Name: validatorStaked Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_124(uint128) = validatorStaked_1 (c)* maxCapMultiplier_4
[i]Type for TMP_124

Name: TMP_124 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
validatorMaxCap_1(uint128) := TMP_124(uint128)
[i]Type for validatorMaxCap

Name: validatorMaxCap Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
REF_15(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_15

Name: REF_15 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_16(DelegatedStaking.Staking) -> REF_15[msg.sender]
[i]Type for REF_16

Name: REF_15 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_17(uint128) -> REF_16.staked
[i]Type for REF_17

Name: REF_17 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_121(uint128) = amount_1 (c)+ REF_17
[i]Type for TMP_121

Name: TMP_121 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_122(bool) = TMP_121 >= validatorMinStakedRequired_4
[i]Type for TMP_122

Name: TMP_122 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_123(None) = SOLIDITY_CALL require(bool,string)(TMP_122,Amount < min staked required)
[i]Type for TMP_123

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_22(uint128) -> v_1 (-> ['validators']).delegated
[i]Type for REF_22

Name: REF_22 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_125(uint128) = REF_22 (c)- validatorStaked_1
[i]Type for TMP_125

Name: TMP_125 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_126(uint128) = TMP_125 (c)+ amount_1
[i]Type for TMP_126

Name: TMP_126 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
newDelegated_1(uint128) := TMP_126(uint128)
[i]Type for newDelegated

Name: newDelegated Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
INTERNAL_CALL, DelegatedStaking._transferToContract(address,uint128)(msg.sender,amount_1)
function: _transferToContract, function count: 27
from_1(address) := ϕ(['msg.sender'])
[i]Type for from

Name: from Function: _transferToContract
Num: -1
Den: -1
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
amount_1(uint128) := ϕ(['amount_1', 'amount_1'])
[i]Type for amount

Name: amount Function: _transferToContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
CQT_1(IERC20Upgradeable) := ϕ(['CQT_0'])
[i]Type for CQT

Name: CQT Function: _transferToContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_38 = CONVERT this to address
[i]Type for TMP_38

Name: TMP_38 Function: _transferToContract
Num: 
Den: 
Address: 2
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable,address,address,uint256), arguments:['CQT_1', 'from_1', 'TMP_38', 'amount_1'] 
from_1(address) := ϕ(['msg.sender'])
[i]Type for from

Name: from Function: _transferToContract
Num: -1
Den: -1
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
amount_1(uint128) := ϕ(['amount_1', 'amount_1'])
[i]Type for amount

Name: amount Function: _transferToContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
CQT_1(IERC20Upgradeable) := ϕ(['CQT_0'])
[i]Type for CQT

Name: CQT Function: _transferToContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_38 = CONVERT this to address
[i]Type for TMP_38

Name: TMP_38 Function: _transferToContract
Num: 
Den: 
Address: 2
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable,address,address,uint256), arguments:['CQT_1', 'from_1', 'TMP_38', 'amount_1'] 
TMP_127(bool) = newDelegated_1 <= validatorMaxCap_1
[i]Type for TMP_127

Name: TMP_127 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_128(None) = SOLIDITY_CALL require(bool,string)(TMP_127,Validator max capacity exceeded)
[i]Type for TMP_128

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_23(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_23

Name: REF_23 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_24(DelegatedStaking.Staking) -> REF_23[msg.sender]
[i]Type for REF_24

Name: REF_23 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_1 (-> ['v'])(DelegatedStaking.Staking) := REF_24(DelegatedStaking.Staking)
[i]Type for s

Name: s Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_130(uint128) = INTERNAL_CALL, DelegatedStaking._tokensToShares(uint128,uint128)(amount_1,globalExchangeRate_9)
function: _tokensToShares, function count: 28
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_5', 'amount_3', 'TMP_181'])
[i]Type for amount

Name: amount Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
rate_1(uint128) := ϕ(['REF_35', 'REF_70', 'globalExchangeRate_9', 'REF_75', 'globalExchangeRate_20', 'globalExchangeRate_12'])
[i]Type for rate

Name: rate Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
divider_5(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99 = CONVERT amount_1 to uint256
[i]Type for TMP_99

Name: TMP_99 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_100(uint256) = TMP_99 (c)* divider_5
[i]Type for TMP_100

Name: TMP_100 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_101 = CONVERT rate_1 to uint256
[i]Type for TMP_101

Name: TMP_101 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_102(uint256) = TMP_100 (c)/ TMP_101
[i]Type for TMP_102

Name: TMP_102 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: raw balance
TMP_103 = CONVERT TMP_102 to uint128
[i]Type for TMP_103

Name: TMP_103 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: raw balance
RETURN TMP_103
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_5', 'amount_3', 'TMP_181'])
[i]Type for amount

Name: amount Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
rate_1(uint128) := ϕ(['REF_35', 'REF_70', 'globalExchangeRate_9', 'REF_75', 'globalExchangeRate_20', 'globalExchangeRate_12'])
[i]Type for rate

Name: rate Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
divider_5(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99 = CONVERT amount_1 to uint256
[i]Type for TMP_99

Name: TMP_99 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_100(uint256) = TMP_99 (c)* divider_5
[i]Type for TMP_100

Name: TMP_100 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_101 = CONVERT rate_1 to uint256
[i]Type for TMP_101

Name: TMP_101 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_102(uint256) = TMP_100 (c)/ TMP_101
[i]Type for TMP_102

Name: TMP_102 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: raw balance
TMP_103 = CONVERT TMP_102 to uint128
[i]Type for TMP_103

Name: TMP_103 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: raw balance
RETURN TMP_103
[i]Type for TMP_130

Name: TMP_130 Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: raw balance
globalSharesToAdd_1(uint128) := TMP_130(uint128)
[i]Type for globalSharesToAdd

Name: globalSharesToAdd Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: raw balance
totalGlobalShares_7(uint128) = totalGlobalShares_6 + globalSharesToAdd_1
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: raw balance
REF_25(uint128) -> v_1 (-> ['validators']).globalShares
[i]Type for REF_25

Name: REF_25 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_2 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: globalShares, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_25(-> v_2 (-> ['validators'])) = REF_25 + globalSharesToAdd_1
[i]Type for REF_25

Name: REF_25 Function: _stake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: raw balance
validators_2(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_2 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
newDelegatorSharesN_1(uint128) := 0(uint256)
[i]Type for newDelegatorSharesN

Name: newDelegatorSharesN Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_26(uint128) -> v_2 (-> ['validators']).totalShares
[i]Type for REF_26

Name: REF_26 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_2 (-> ['validators'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, globalShares, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_26(-> v_3 (-> ['validators'])) = REF_26 + newDelegatorSharesN_1
[i]Type for REF_26

Name: REF_26 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
validators_3(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_3 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
REF_27(uint128) -> s_1 (-> ['v']).shares
[i]Type for REF_27

Name: REF_27 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
s_2 (-> ['v'])(DelegatedStaking.Staking) := ϕ(["s_1 (-> ['v'])"])
[i]Type for s

Name: s Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares
Finance Type: undef
REF_27(-> s_2 (-> ['v'])) = REF_27 + newDelegatorSharesN_1
[i]Type for REF_27

Name: REF_27 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
v_5 (-> ['v'])(DelegatedStaking.Validator) := ϕ(["s_2 (-> ['v'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares
Finance Type: undef
REF_28(uint128) -> v_3 (-> ['validators']).delegated
[i]Type for REF_28

Name: REF_28 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_4 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_3 (-> ['validators'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, globalShares, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_28(-> v_4 (-> ['validators'])) = REF_28 + amount_1
[i]Type for REF_28

Name: REF_28 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
validators_4(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_4 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
REF_29(uint128) -> s_2 (-> ['v']).staked
[i]Type for REF_29

Name: REF_29 Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_3 (-> ['v'])(DelegatedStaking.Staking) := ϕ(["s_2 (-> ['v'])"])
[i]Type for s

Name: s Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: staked, shares
Finance Type: undef
REF_29(-> s_3 (-> ['v'])) = REF_29 + amount_1
[i]Type for REF_29

Name: REF_29 Function: _stake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
v_6 (-> ['v'])(DelegatedStaking.Validator) := ϕ(["s_3 (-> ['v'])"])
[i]Type for v

Name: v Function: _stake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: staked, shares
Finance Type: undef



unstake
function: unstake, function count: 29
validatorCoolDown_2(uint128) := ϕ(['validatorCoolDown_3', 'validatorCoolDown_0', 'validatorCoolDown_1', 'validatorCoolDown_4'])
[i]Type for validatorCoolDown

Name: validatorCoolDown Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1196280
Fields: 
Finance Type: undef
delegatorCoolDown_2(uint128) := ϕ(['delegatorCoolDown_3', 'delegatorCoolDown_0', 'delegatorCoolDown_1', 'delegatorCoolDown_4'])
[i]Type for delegatorCoolDown

Name: delegatorCoolDown Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 186088
Fields: 
Finance Type: undef
maxCapMultiplier_5(uint128) := ϕ(['maxCapMultiplier_0', 'maxCapMultiplier_7', 'maxCapMultiplier_1', 'maxCapMultiplier_6', 'maxCapMultiplier_4'])
[i]Type for maxCapMultiplier

Name: maxCapMultiplier Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
validatorMinStakedRequired_5(uint128) := ϕ(['validatorMinStakedRequired_6', 'validatorMinStakedRequired_1', 'validatorMinStakedRequired_4', 'validatorMinStakedRequired_0', 'validatorMinStakedRequired_7'])
[i]Type for validatorMinStakedRequired

Name: validatorMinStakedRequired Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
endEpoch_10(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: unstake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
totalGlobalShares_8(uint128) := ϕ(['totalGlobalShares_25', 'totalGlobalShares_9', 'totalGlobalShares_11', 'totalGlobalShares_7', 'totalGlobalShares_18', 'totalGlobalShares_0'])
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: unstake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: raw balance
globalExchangeRate_11(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: unstake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
validatorsN_2(uint128) := ϕ(['validatorsN_5', 'validatorsN_8', 'validatorsN_0'])
[i]Type for validatorsN

Name: validatorsN Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_5(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
TMP_132(bool) = validatorId_1 < validatorsN_2
[i]Type for TMP_132

Name: TMP_132 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_133(None) = SOLIDITY_CALL require(bool,string)(TMP_132,Invalid validator)
[i]Type for TMP_133

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_30(DelegatedStaking.Validator) -> validators_5[validatorId_1]
[i]Type for REF_30

Name: validators Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_1 (-> ['validators'])(DelegatedStaking.Validator) := REF_30(DelegatedStaking.Validator)
[i]Type for v

Name: v Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_31(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_31

Name: REF_31 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_32(DelegatedStaking.Staking) -> REF_31[msg.sender]
[i]Type for REF_32

Name: REF_31 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_1 (-> ['v'])(DelegatedStaking.Staking) := REF_32(DelegatedStaking.Staking)
[i]Type for s

Name: s Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_33(uint128) -> s_1 (-> ['v']).staked
[i]Type for REF_33

Name: REF_33 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_134(bool) = REF_33 >= amount_1
[i]Type for TMP_134

Name: TMP_134 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_135(None) = SOLIDITY_CALL require(bool,string)(TMP_134,Staked < amount provided)
[i]Type for TMP_135

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_34(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_34

Name: REF_34 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_136(bool) = msg.sender == REF_34
[i]Type for TMP_136

Name: TMP_136 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
isValidator_1(bool) := TMP_136(bool)
[i]Type for isValidator

Name: isValidator Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_35(uint128) -> v_1 (-> ['validators']).exchangeRate
[i]Type for REF_35

Name: REF_35 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_137(uint128) = INTERNAL_CALL, DelegatedStaking._tokensToShares(uint128,uint128)(amount_1,REF_35)
function: _tokensToShares, function count: 30
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_5', 'amount_3', 'TMP_181'])
[i]Type for amount

Name: amount Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['REF_35', 'REF_70', 'globalExchangeRate_9', 'REF_75', 'globalExchangeRate_20', 'globalExchangeRate_12'])
[i]Type for rate

Name: rate Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_5(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99 = CONVERT amount_1 to uint256
[i]Type for TMP_99

Name: TMP_99 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_100(uint256) = TMP_99 (c)* divider_5
[i]Type for TMP_100

Name: TMP_100 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_101 = CONVERT rate_1 to uint256
[i]Type for TMP_101

Name: TMP_101 Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_102(uint256) = TMP_100 (c)/ TMP_101
[i]Type for TMP_102

Name: TMP_102 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_103 = CONVERT TMP_102 to uint128
[i]Type for TMP_103

Name: TMP_103 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_103
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_5', 'amount_3', 'TMP_181'])
[i]Type for amount

Name: amount Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['REF_35', 'REF_70', 'globalExchangeRate_9', 'REF_75', 'globalExchangeRate_20', 'globalExchangeRate_12'])
[i]Type for rate

Name: rate Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_5(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99 = CONVERT amount_1 to uint256
[i]Type for TMP_99

Name: TMP_99 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_100(uint256) = TMP_99 (c)* divider_5
[i]Type for TMP_100

Name: TMP_100 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_101 = CONVERT rate_1 to uint256
[i]Type for TMP_101

Name: TMP_101 Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_102(uint256) = TMP_100 (c)/ TMP_101
[i]Type for TMP_102

Name: TMP_102 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_103 = CONVERT TMP_102 to uint128
[i]Type for TMP_103

Name: TMP_103 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_103
[i]Type for TMP_137

Name: TMP_137 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validatorSharesRemove_1(uint128) := TMP_137(uint128)
[i]Type for validatorSharesRemove

Name: validatorSharesRemove Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_138(bool) = validatorSharesRemove_1 > 0
[i]Type for TMP_138

Name: TMP_138 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_139(None) = SOLIDITY_CALL require(bool,string)(TMP_138,Unstake amount is too small)
[i]Type for TMP_139

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_36(uint128) -> v_1 (-> ['validators']).disabledEpoch
[i]Type for REF_36

Name: REF_36 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_140(bool) = REF_36 == 0
[i]Type for TMP_140

Name: TMP_140 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_5 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_4 (-> ['validators'])"])
[i]Type for v

Name: v Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: stakings, _address, exchangeRate, disabledEpoch
Finance Type: undef
TMP_141(bool) = endEpoch_11 > block.number
[i]Type for TMP_141

Name: TMP_141 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_142(bool) = isValidator_1 && TMP_141
[i]Type for TMP_142

Name: TMP_142 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_37(uint128) -> s_1 (-> ['v']).staked
[i]Type for REF_37

Name: REF_37 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_143(uint128) = REF_37 (c)- amount_1
[i]Type for TMP_143

Name: TMP_143 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newValidatorStaked_1(uint128) := TMP_143(uint128)
[i]Type for newValidatorStaked

Name: newValidatorStaked Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_43(uint128) -> s_1 (-> ['v']).shares
[i]Type for REF_43

Name: REF_43 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_2 (-> ['v'])(DelegatedStaking.Staking) := ϕ(["s_1 (-> ['v'])"])
[i]Type for s

Name: s Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares, staked
Finance Type: undef
REF_43(-> s_2 (-> ['v'])) = REF_43 - validatorSharesRemove_1
[i]Type for REF_43

Name: REF_43 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_8 (-> ['v'])(DelegatedStaking.Validator) := ϕ(["s_2 (-> ['v'])"])
[i]Type for v

Name: v Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares, staked
Finance Type: undef
TMP_144(uint128) = newValidatorStaked_1 (c)* maxCapMultiplier_6
[i]Type for TMP_144

Name: TMP_144 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
newValidatorMaxCap_1(uint128) := TMP_144(uint128)
[i]Type for newValidatorMaxCap

Name: newValidatorMaxCap Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
REF_44(uint128) -> s_2 (-> ['v']).staked
[i]Type for REF_44

Name: REF_44 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_3 (-> ['v'])(DelegatedStaking.Staking) := ϕ(["s_2 (-> ['v'])"])
[i]Type for s

Name: s Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares, staked
Finance Type: undef
REF_44(-> s_3 (-> ['v'])) = REF_44 - amount_1
[i]Type for REF_44

Name: REF_44 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_9 (-> ['v'])(DelegatedStaking.Validator) := ϕ(["s_3 (-> ['v'])"])
[i]Type for v

Name: v Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares, staked
Finance Type: undef
TMP_150(uint128) = INTERNAL_CALL, DelegatedStaking._tokensToShares(uint128,uint128)(amount_1,globalExchangeRate_12)
[i]Type for TMP_150

Name: TMP_150 Function: unstake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
globalSharesRemove_1(uint128) := TMP_150(uint128)
[i]Type for globalSharesRemove

Name: globalSharesRemove Function: unstake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_38(uint128) -> v_1 (-> ['validators']).delegated
[i]Type for REF_38

Name: REF_38 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_39(uint128) -> s_1 (-> ['v']).staked
[i]Type for REF_39

Name: REF_39 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_145(uint128) = REF_38 (c)- REF_39
[i]Type for TMP_145

Name: TMP_145 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
delegated_1(uint128) := TMP_145(uint128)
[i]Type for delegated

Name: delegated Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_151(bool) = globalSharesRemove_1 > 0
[i]Type for TMP_151

Name: TMP_151 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_152(None) = SOLIDITY_CALL require(bool,string)(TMP_151,Unstake amount is too small)
[i]Type for TMP_152

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_50(uint128) -> v_5 (-> ['validators']).disabledEpoch
[i]Type for REF_50

Name: REF_50 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_160(bool) = REF_50 != 0
[i]Type for TMP_160

Name: TMP_160 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalGlobalShares_11(uint128) = totalGlobalShares_10 - globalSharesRemove_1
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: unstake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_146(bool) = delegated_1 <= newValidatorMaxCap_1
[i]Type for TMP_146

Name: TMP_146 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,Cannot unstake beyond max cap)
[i]Type for TMP_147

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_161 = CONVERT block.number to uint128
[i]Type for TMP_161

Name: TMP_161 Function: unstake
Num: -1
Den: -1
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
coolDownEnd_1(uint128) := TMP_161(uint128)
[i]Type for coolDownEnd

Name: coolDownEnd Function: unstake
Num: -1
Den: -1
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
REF_40(uint128) -> v_1 (-> ['validators']).globalShares
[i]Type for REF_40

Name: REF_40 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_2 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])"])
[i]Type for v

Name: v Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
REF_40(-> v_2 (-> ['validators'])) = REF_40 - globalSharesRemove_1
[i]Type for REF_40

Name: REF_40 Function: unstake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
validators_6(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_2 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
REF_41(uint128) -> v_2 (-> ['validators']).totalShares
[i]Type for REF_41

Name: REF_41 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_3 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_2 (-> ['validators'])"])
[i]Type for v

Name: v Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
REF_41(-> v_3 (-> ['validators'])) = REF_41 - validatorSharesRemove_1
[i]Type for REF_41

Name: REF_41 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_7(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_3 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
REF_51(uint128) -> v_5 (-> ['validators']).disabledEpoch
[i]Type for REF_51

Name: REF_51 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
coolDownEnd_2(uint128) := REF_51(uint128)
[i]Type for coolDownEnd

Name: coolDownEnd Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_42(uint128) -> v_3 (-> ['validators']).delegated
[i]Type for REF_42

Name: REF_42 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_4 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_3 (-> ['validators'])"])
[i]Type for v

Name: v Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
REF_42(-> v_4 (-> ['validators'])) = REF_42 - amount_1
[i]Type for REF_42

Name: REF_42 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_8(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_4 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
coolDownEnd_3(uint128) := ϕ(['coolDownEnd_1', 'coolDownEnd_2'])
[i]Type for coolDownEnd

Name: coolDownEnd Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_148(bool) = newValidatorStaked_1 >= validatorMinStakedRequired_6
[i]Type for TMP_148

Name: TMP_148 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,Unstake > min staked required)
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
coolDownEnd_4(uint128) = coolDownEnd_3 + delegatorCoolDown_4
[i]Type for coolDownEnd

Name: coolDownEnd Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 186088
Fields: 
Finance Type: undef
coolDownEnd_5(uint128) = coolDownEnd_3 + validatorCoolDown_4
[i]Type for coolDownEnd

Name: coolDownEnd Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1196280
Fields: 
Finance Type: undef
coolDownEnd_6(uint128) := ϕ(['coolDownEnd_4', 'coolDownEnd_5'])
[i]Type for coolDownEnd

Name: coolDownEnd Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateGlobalExchangeRate()()
INTERNAL_CALL, DelegatedStaking._updateValidator(DelegatedStaking.Validator)(v_5 (-> ['validators']))
function: _updateValidator, function count: 31
v_1 (-> [])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_1 (-> ['validators'])", "v_1 (-> ['validators'])", 'REF_94', "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, lastUpdateGlobalRate, globalShares, commissionRate, staked, delegated, stakings, _address, exchangeRate, disabledEpoch
Finance Type: undef
divider_2(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_4(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_2(uint128) -> v_1 (-> []).disabledEpoch
[i]Type for REF_2

Name: REF_2 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = REF_2 == 0
[i]Type for TMP_80

Name: TMP_80 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_3

Name: REF_3 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = REF_3 == 0
[i]Type for TMP_81

Name: TMP_81 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_2 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, lastUpdateGlobalRate, globalShares, commissionRate, staked, delegated, stakings, _address, exchangeRate, disabledEpoch
Finance Type: undef
REF_4 (->v_2 (-> [])) := globalExchangeRate_4(uint128)
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_5 (-> [])(DelegatedStaking.Validator) := ϕ(['v_2 (-> [])', 'v_4 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_5(uint128) -> v_1 (-> []).lastUpdateGlobalRate
[i]Type for REF_5

Name: REF_5 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(uint128) = globalExchangeRate_4 - REF_5
[i]Type for TMP_82

Name: TMP_82 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rateDifference_1(uint128) := TMP_82(uint128)
[i]Type for rateDifference

Name: rateDifference Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_6(uint128) -> v_1 (-> []).globalShares
[i]Type for REF_6

Name: REF_6 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_6,rateDifference_1)
[i]Type for TMP_83

Name: TMP_83 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
tokensGivenToValidator_1(uint128) := TMP_83(uint128)
[i]Type for tokensGivenToValidator

Name: tokensGivenToValidator Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_11(uint128) -> v_5 (-> []).lastUpdateGlobalRate
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_6 (-> [])(DelegatedStaking.Validator) := ϕ(['v_5 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, exchangeRate, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, disabledEpoch, _address, stakings, staked, delegated
Finance Type: undef
REF_11 (->v_6 (-> [])) := globalExchangeRate_5(uint128)
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_84 = CONVERT tokensGivenToValidator_1 to uint256
[i]Type for TMP_84

Name: TMP_84 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_7(uint128) -> v_1 (-> []).commissionRate
[i]Type for REF_7

Name: REF_7 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT REF_7 to uint256
[i]Type for TMP_85

Name: TMP_85 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86(uint256) = TMP_84 * TMP_85
[i]Type for TMP_86

Name: TMP_86 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_87(uint256) = TMP_86 / divider_3
[i]Type for TMP_87

Name: TMP_87 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_88 = CONVERT TMP_87 to uint128
[i]Type for TMP_88

Name: TMP_88 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_88(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_8(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_89(uint128) = tokensGivenToValidator_1 (c)- commissionPaid_1
[i]Type for TMP_89

Name: TMP_89 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_90 = CONVERT TMP_89 to uint256
[i]Type for TMP_90

Name: TMP_90 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_91(uint256) = TMP_90 (c)* divider_3
[i]Type for TMP_91

Name: TMP_91 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_9(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_9

Name: REF_9 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(uint256) = TMP_91 (c)/ REF_9
[i]Type for TMP_92

Name: TMP_92 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_93 = CONVERT TMP_92 to uint128
[i]Type for TMP_93

Name: TMP_93 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, lastUpdateGlobalRate, globalShares, commissionRate, staked, delegated, stakings, _address, exchangeRate, disabledEpoch
Finance Type: undef
REF_8(-> v_3 (-> [])) = REF_8 (c)+ TMP_93
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_10(uint128) -> v_3 (-> []).commissionAvailableToRedeem
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(['v_3 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, staked, delegated, stakings, _address, exchangeRate, disabledEpoch
Finance Type: undef
REF_10(-> v_4 (-> [])) = REF_10 + commissionPaid_1
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_1 (-> [])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_1 (-> ['validators'])", "v_1 (-> ['validators'])", 'REF_94', "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, lastUpdateGlobalRate, globalShares, commissionRate, staked, delegated, stakings, _address, exchangeRate, disabledEpoch
Finance Type: undef
divider_2(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_4(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_2(uint128) -> v_1 (-> []).disabledEpoch
[i]Type for REF_2

Name: REF_2 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = REF_2 == 0
[i]Type for TMP_80

Name: TMP_80 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_3

Name: REF_3 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = REF_3 == 0
[i]Type for TMP_81

Name: TMP_81 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_2 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, lastUpdateGlobalRate, globalShares, commissionRate, staked, delegated, stakings, _address, exchangeRate, disabledEpoch
Finance Type: undef
REF_4 (->v_2 (-> [])) := globalExchangeRate_4(uint128)
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_5 (-> [])(DelegatedStaking.Validator) := ϕ(['v_2 (-> [])', 'v_4 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, staked, delegated, stakings, _address, exchangeRate, disabledEpoch
Finance Type: undef
REF_5(uint128) -> v_1 (-> []).lastUpdateGlobalRate
[i]Type for REF_5

Name: REF_5 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(uint128) = globalExchangeRate_4 - REF_5
[i]Type for TMP_82

Name: TMP_82 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rateDifference_1(uint128) := TMP_82(uint128)
[i]Type for rateDifference

Name: rateDifference Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_6(uint128) -> v_1 (-> []).globalShares
[i]Type for REF_6

Name: REF_6 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_6,rateDifference_1)
[i]Type for TMP_83

Name: TMP_83 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
tokensGivenToValidator_1(uint128) := TMP_83(uint128)
[i]Type for tokensGivenToValidator

Name: tokensGivenToValidator Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_11(uint128) -> v_5 (-> []).lastUpdateGlobalRate
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_6 (-> [])(DelegatedStaking.Validator) := ϕ(['v_5 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, staked, delegated, stakings, _address, exchangeRate, disabledEpoch
Finance Type: undef
REF_11 (->v_6 (-> [])) := globalExchangeRate_5(uint128)
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_84 = CONVERT tokensGivenToValidator_1 to uint256
[i]Type for TMP_84

Name: TMP_84 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_7(uint128) -> v_1 (-> []).commissionRate
[i]Type for REF_7

Name: REF_7 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT REF_7 to uint256
[i]Type for TMP_85

Name: TMP_85 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86(uint256) = TMP_84 * TMP_85
[i]Type for TMP_86

Name: TMP_86 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_87(uint256) = TMP_86 / divider_3
[i]Type for TMP_87

Name: TMP_87 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_88 = CONVERT TMP_87 to uint128
[i]Type for TMP_88

Name: TMP_88 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_88(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_8(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_89(uint128) = tokensGivenToValidator_1 (c)- commissionPaid_1
[i]Type for TMP_89

Name: TMP_89 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_90 = CONVERT TMP_89 to uint256
[i]Type for TMP_90

Name: TMP_90 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_91(uint256) = TMP_90 (c)* divider_3
[i]Type for TMP_91

Name: TMP_91 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_9(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_9

Name: REF_9 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(uint256) = TMP_91 (c)/ REF_9
[i]Type for TMP_92

Name: TMP_92 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_93 = CONVERT TMP_92 to uint128
[i]Type for TMP_93

Name: TMP_93 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, lastUpdateGlobalRate, globalShares, commissionRate, staked, delegated, stakings, _address, exchangeRate, disabledEpoch
Finance Type: undef
REF_8(-> v_3 (-> [])) = REF_8 (c)+ TMP_93
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_10(uint128) -> v_3 (-> []).commissionAvailableToRedeem
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(['v_3 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, staked, delegated, stakings, _address, exchangeRate, disabledEpoch
Finance Type: undef
REF_10(-> v_4 (-> [])) = REF_10 + commissionPaid_1
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
REF_45(mapping(address => DelegatedStaking.Unstaking[])) -> v_5 (-> ['validators']).unstakings
[i]Type for REF_45

Name: REF_45 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_46(DelegatedStaking.Unstaking[]) -> REF_45[msg.sender]
[i]Type for REF_46

Name: REF_45 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_155 = new Unstaking(coolDownEnd_6,amount_1)
[i]Type for TMP_155

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_48 -> LENGTH REF_46
[i]Type for REF_48

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_157(uint256) := REF_48(uint256)
[i]Type for TMP_157

Name: TMP_157 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_158(uint256) = TMP_157 (c)+ 1
[i]Type for TMP_158

Name: TMP_158 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
v_6 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: stakings, _address, exchangeRate, disabledEpoch
Finance Type: undef
REF_48 (->v_7 (-> ['validators'])) := TMP_158(uint256)
[i]Type for REF_48

Name: REF_48 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
REF_49(DelegatedStaking.Unstaking) -> REF_46[TMP_157]
[i]Type for REF_49

Name: REF_45 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_7 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_6 (-> ['validators'])"])
[i]Type for v

Name: v Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: unstakings, stakings, _address, exchangeRate, disabledEpoch
Finance Type: undef
REF_49 (->v_7 (-> ['validators'])) := TMP_155(DelegatedStaking.Unstaking)
[i]Type for REF_49

Name: REF_49 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_9(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_7 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
validatorCoolDown_2(uint128) := ϕ(['validatorCoolDown_3', 'validatorCoolDown_0', 'validatorCoolDown_1', 'validatorCoolDown_4'])
[i]Type for validatorCoolDown

Name: validatorCoolDown Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1196280
Fields: 
Finance Type: undef
delegatorCoolDown_2(uint128) := ϕ(['delegatorCoolDown_3', 'delegatorCoolDown_0', 'delegatorCoolDown_1', 'delegatorCoolDown_4'])
[i]Type for delegatorCoolDown

Name: delegatorCoolDown Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 186088
Fields: 
Finance Type: undef
maxCapMultiplier_5(uint128) := ϕ(['maxCapMultiplier_0', 'maxCapMultiplier_7', 'maxCapMultiplier_1', 'maxCapMultiplier_6', 'maxCapMultiplier_4'])
[i]Type for maxCapMultiplier

Name: maxCapMultiplier Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
validatorMinStakedRequired_5(uint128) := ϕ(['validatorMinStakedRequired_6', 'validatorMinStakedRequired_1', 'validatorMinStakedRequired_4', 'validatorMinStakedRequired_0', 'validatorMinStakedRequired_7'])
[i]Type for validatorMinStakedRequired

Name: validatorMinStakedRequired Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
endEpoch_10(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: unstake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
totalGlobalShares_8(uint128) := ϕ(['totalGlobalShares_25', 'totalGlobalShares_9', 'totalGlobalShares_11', 'totalGlobalShares_7', 'totalGlobalShares_18', 'totalGlobalShares_0'])
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: unstake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: raw balance
globalExchangeRate_11(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: unstake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
validatorsN_2(uint128) := ϕ(['validatorsN_5', 'validatorsN_8', 'validatorsN_0'])
[i]Type for validatorsN

Name: validatorsN Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_5(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
TMP_132(bool) = validatorId_1 < validatorsN_2
[i]Type for TMP_132

Name: TMP_132 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_133(None) = SOLIDITY_CALL require(bool,string)(TMP_132,Invalid validator)
[i]Type for TMP_133

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_30(DelegatedStaking.Validator) -> validators_5[validatorId_1]
[i]Type for REF_30

Name: validators Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_1 (-> ['validators'])(DelegatedStaking.Validator) := REF_30(DelegatedStaking.Validator)
[i]Type for v

Name: v Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
REF_31(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_31

Name: REF_31 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_32(DelegatedStaking.Staking) -> REF_31[msg.sender]
[i]Type for REF_32

Name: REF_31 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_1 (-> ['v'])(DelegatedStaking.Staking) := REF_32(DelegatedStaking.Staking)
[i]Type for s

Name: s Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: staked
Finance Type: undef
REF_33(uint128) -> s_1 (-> ['v']).staked
[i]Type for REF_33

Name: REF_33 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_134(bool) = REF_33 >= amount_1
[i]Type for TMP_134

Name: TMP_134 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_135(None) = SOLIDITY_CALL require(bool,string)(TMP_134,Staked < amount provided)
[i]Type for TMP_135

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_34(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_34

Name: REF_34 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_136(bool) = msg.sender == REF_34
[i]Type for TMP_136

Name: TMP_136 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
isValidator_1(bool) := TMP_136(bool)
[i]Type for isValidator

Name: isValidator Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_35(uint128) -> v_1 (-> ['validators']).exchangeRate
[i]Type for REF_35

Name: REF_35 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_137(uint128) = INTERNAL_CALL, DelegatedStaking._tokensToShares(uint128,uint128)(amount_1,REF_35)
function: _tokensToShares, function count: 32
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_5', 'amount_3', 'TMP_181'])
[i]Type for amount

Name: amount Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['REF_35', 'REF_70', 'globalExchangeRate_9', 'REF_75', 'globalExchangeRate_20', 'globalExchangeRate_12'])
[i]Type for rate

Name: rate Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_5(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99 = CONVERT amount_1 to uint256
[i]Type for TMP_99

Name: TMP_99 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_100(uint256) = TMP_99 (c)* divider_5
[i]Type for TMP_100

Name: TMP_100 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_101 = CONVERT rate_1 to uint256
[i]Type for TMP_101

Name: TMP_101 Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_102(uint256) = TMP_100 (c)/ TMP_101
[i]Type for TMP_102

Name: TMP_102 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_103 = CONVERT TMP_102 to uint128
[i]Type for TMP_103

Name: TMP_103 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_103
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_5', 'amount_3', 'TMP_181'])
[i]Type for amount

Name: amount Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['REF_35', 'REF_70', 'globalExchangeRate_9', 'REF_75', 'globalExchangeRate_20', 'globalExchangeRate_12'])
[i]Type for rate

Name: rate Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_5(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99 = CONVERT amount_1 to uint256
[i]Type for TMP_99

Name: TMP_99 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_100(uint256) = TMP_99 (c)* divider_5
[i]Type for TMP_100

Name: TMP_100 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_101 = CONVERT rate_1 to uint256
[i]Type for TMP_101

Name: TMP_101 Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_102(uint256) = TMP_100 (c)/ TMP_101
[i]Type for TMP_102

Name: TMP_102 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_103 = CONVERT TMP_102 to uint128
[i]Type for TMP_103

Name: TMP_103 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_103
[i]Type for TMP_137

Name: TMP_137 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validatorSharesRemove_1(uint128) := TMP_137(uint128)
[i]Type for validatorSharesRemove

Name: validatorSharesRemove Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_138(bool) = validatorSharesRemove_1 > 0
[i]Type for TMP_138

Name: TMP_138 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_139(None) = SOLIDITY_CALL require(bool,string)(TMP_138,Unstake amount is too small)
[i]Type for TMP_139

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_36(uint128) -> v_1 (-> ['validators']).disabledEpoch
[i]Type for REF_36

Name: REF_36 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_140(bool) = REF_36 == 0
[i]Type for TMP_140

Name: TMP_140 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_5 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_4 (-> ['validators'])"])
[i]Type for v

Name: v Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
TMP_141(bool) = endEpoch_11 > block.number
[i]Type for TMP_141

Name: TMP_141 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_142(bool) = isValidator_1 && TMP_141
[i]Type for TMP_142

Name: TMP_142 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_37(uint128) -> s_1 (-> ['v']).staked
[i]Type for REF_37

Name: REF_37 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_143(uint128) = REF_37 (c)- amount_1
[i]Type for TMP_143

Name: TMP_143 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newValidatorStaked_1(uint128) := TMP_143(uint128)
[i]Type for newValidatorStaked

Name: newValidatorStaked Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_43(uint128) -> s_1 (-> ['v']).shares
[i]Type for REF_43

Name: REF_43 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_2 (-> ['v'])(DelegatedStaking.Staking) := ϕ(["s_1 (-> ['v'])"])
[i]Type for s

Name: s Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares, staked
Finance Type: undef
REF_43(-> s_2 (-> ['v'])) = REF_43 - validatorSharesRemove_1
[i]Type for REF_43

Name: REF_43 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_8 (-> ['v'])(DelegatedStaking.Validator) := ϕ(["s_2 (-> ['v'])"])
[i]Type for v

Name: v Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares, staked
Finance Type: undef
TMP_144(uint128) = newValidatorStaked_1 (c)* maxCapMultiplier_6
[i]Type for TMP_144

Name: TMP_144 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
newValidatorMaxCap_1(uint128) := TMP_144(uint128)
[i]Type for newValidatorMaxCap

Name: newValidatorMaxCap Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
REF_44(uint128) -> s_2 (-> ['v']).staked
[i]Type for REF_44

Name: REF_44 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_3 (-> ['v'])(DelegatedStaking.Staking) := ϕ(["s_2 (-> ['v'])"])
[i]Type for s

Name: s Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares, staked
Finance Type: undef
REF_44(-> s_3 (-> ['v'])) = REF_44 - amount_1
[i]Type for REF_44

Name: REF_44 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_9 (-> ['v'])(DelegatedStaking.Validator) := ϕ(["s_3 (-> ['v'])"])
[i]Type for v

Name: v Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares, staked
Finance Type: undef
TMP_150(uint128) = INTERNAL_CALL, DelegatedStaking._tokensToShares(uint128,uint128)(amount_1,globalExchangeRate_12)
[i]Type for TMP_150

Name: TMP_150 Function: unstake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
globalSharesRemove_1(uint128) := TMP_150(uint128)
[i]Type for globalSharesRemove

Name: globalSharesRemove Function: unstake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_38(uint128) -> v_1 (-> ['validators']).delegated
[i]Type for REF_38

Name: REF_38 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_39(uint128) -> s_1 (-> ['v']).staked
[i]Type for REF_39

Name: REF_39 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_145(uint128) = REF_38 (c)- REF_39
[i]Type for TMP_145

Name: TMP_145 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
delegated_1(uint128) := TMP_145(uint128)
[i]Type for delegated

Name: delegated Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_151(bool) = globalSharesRemove_1 > 0
[i]Type for TMP_151

Name: TMP_151 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_152(None) = SOLIDITY_CALL require(bool,string)(TMP_151,Unstake amount is too small)
[i]Type for TMP_152

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_50(uint128) -> v_5 (-> ['validators']).disabledEpoch
[i]Type for REF_50

Name: REF_50 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_160(bool) = REF_50 != 0
[i]Type for TMP_160

Name: TMP_160 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalGlobalShares_11(uint128) = totalGlobalShares_10 - globalSharesRemove_1
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: unstake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_146(bool) = delegated_1 <= newValidatorMaxCap_1
[i]Type for TMP_146

Name: TMP_146 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 10
Fields: 
Finance Type: undef
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,Cannot unstake beyond max cap)
[i]Type for TMP_147

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_161 = CONVERT block.number to uint128
[i]Type for TMP_161

Name: TMP_161 Function: unstake
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
coolDownEnd_1(uint128) := TMP_161(uint128)
[i]Type for coolDownEnd

Name: coolDownEnd Function: unstake
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
REF_40(uint128) -> v_1 (-> ['validators']).globalShares
[i]Type for REF_40

Name: REF_40 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
v_2 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])"])
[i]Type for v

Name: v Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
REF_40(-> v_2 (-> ['validators'])) = REF_40 - globalSharesRemove_1
[i]Type for REF_40

Name: REF_40 Function: unstake
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
validators_6(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_2 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
REF_41(uint128) -> v_2 (-> ['validators']).totalShares
[i]Type for REF_41

Name: REF_41 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_3 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_2 (-> ['validators'])"])
[i]Type for v

Name: v Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
REF_41(-> v_3 (-> ['validators'])) = REF_41 - validatorSharesRemove_1
[i]Type for REF_41

Name: REF_41 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_7(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_3 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
REF_51(uint128) -> v_5 (-> ['validators']).disabledEpoch
[i]Type for REF_51

Name: REF_51 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
coolDownEnd_2(uint128) := REF_51(uint128)
[i]Type for coolDownEnd

Name: coolDownEnd Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_42(uint128) -> v_3 (-> ['validators']).delegated
[i]Type for REF_42

Name: REF_42 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_4 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_3 (-> ['validators'])"])
[i]Type for v

Name: v Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
REF_42(-> v_4 (-> ['validators'])) = REF_42 - amount_1
[i]Type for REF_42

Name: REF_42 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_8(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_4 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
coolDownEnd_3(uint128) := ϕ(['coolDownEnd_1', 'coolDownEnd_2'])
[i]Type for coolDownEnd

Name: coolDownEnd Function: unstake
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_148(bool) = newValidatorStaked_1 >= validatorMinStakedRequired_6
[i]Type for TMP_148

Name: TMP_148 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,Unstake > min staked required)
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
coolDownEnd_4(uint128) = coolDownEnd_3 + delegatorCoolDown_4
[i]Type for coolDownEnd

Name: coolDownEnd Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 186088
Fields: 
Finance Type: undef
coolDownEnd_5(uint128) = coolDownEnd_3 + validatorCoolDown_4
[i]Type for coolDownEnd

Name: coolDownEnd Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1196280
Fields: 
Finance Type: undef
coolDownEnd_6(uint128) := ϕ(['coolDownEnd_4', 'coolDownEnd_5'])
[i]Type for coolDownEnd

Name: coolDownEnd Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateGlobalExchangeRate()()
INTERNAL_CALL, DelegatedStaking._updateValidator(DelegatedStaking.Validator)(v_5 (-> ['validators']))
function: _updateValidator, function count: 33
v_1 (-> [])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_1 (-> ['validators'])", "v_1 (-> ['validators'])", 'REF_94', "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
divider_2(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_4(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_2(uint128) -> v_1 (-> []).disabledEpoch
[i]Type for REF_2

Name: REF_2 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = REF_2 == 0
[i]Type for TMP_80

Name: TMP_80 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_3

Name: REF_3 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = REF_3 == 0
[i]Type for TMP_81

Name: TMP_81 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_2 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
REF_4 (->v_2 (-> [])) := globalExchangeRate_4(uint128)
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_5 (-> [])(DelegatedStaking.Validator) := ϕ(['v_2 (-> [])', 'v_4 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, staked, delegated, stakings, _address, exchangeRate, disabledEpoch
Finance Type: undef
REF_5(uint128) -> v_1 (-> []).lastUpdateGlobalRate
[i]Type for REF_5

Name: REF_5 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(uint128) = globalExchangeRate_4 - REF_5
[i]Type for TMP_82

Name: TMP_82 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rateDifference_1(uint128) := TMP_82(uint128)
[i]Type for rateDifference

Name: rateDifference Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_6(uint128) -> v_1 (-> []).globalShares
[i]Type for REF_6

Name: REF_6 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_6,rateDifference_1)
[i]Type for TMP_83

Name: TMP_83 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
tokensGivenToValidator_1(uint128) := TMP_83(uint128)
[i]Type for tokensGivenToValidator

Name: tokensGivenToValidator Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_11(uint128) -> v_5 (-> []).lastUpdateGlobalRate
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_6 (-> [])(DelegatedStaking.Validator) := ϕ(['v_5 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, totalShares, lastUpdateGlobalRate, globalShares, commissionRate, staked, delegated, stakings, _address, exchangeRate, disabledEpoch
Finance Type: undef
REF_11 (->v_6 (-> [])) := globalExchangeRate_5(uint128)
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_84 = CONVERT tokensGivenToValidator_1 to uint256
[i]Type for TMP_84

Name: TMP_84 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_7(uint128) -> v_1 (-> []).commissionRate
[i]Type for REF_7

Name: REF_7 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT REF_7 to uint256
[i]Type for TMP_85

Name: TMP_85 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86(uint256) = TMP_84 * TMP_85
[i]Type for TMP_86

Name: TMP_86 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_87(uint256) = TMP_86 / divider_3
[i]Type for TMP_87

Name: TMP_87 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_88 = CONVERT TMP_87 to uint128
[i]Type for TMP_88

Name: TMP_88 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_88(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_8(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_89(uint128) = tokensGivenToValidator_1 (c)- commissionPaid_1
[i]Type for TMP_89

Name: TMP_89 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_90 = CONVERT TMP_89 to uint256
[i]Type for TMP_90

Name: TMP_90 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_91(uint256) = TMP_90 (c)* divider_3
[i]Type for TMP_91

Name: TMP_91 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_9(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_9

Name: REF_9 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(uint256) = TMP_91 (c)/ REF_9
[i]Type for TMP_92

Name: TMP_92 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_93 = CONVERT TMP_92 to uint128
[i]Type for TMP_93

Name: TMP_93 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
REF_8(-> v_3 (-> [])) = REF_8 (c)+ TMP_93
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_10(uint128) -> v_3 (-> []).commissionAvailableToRedeem
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(['v_3 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
REF_10(-> v_4 (-> [])) = REF_10 + commissionPaid_1
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_1 (-> [])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_1 (-> ['validators'])", "v_1 (-> ['validators'])", 'REF_94', "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
divider_2(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_4(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_2(uint128) -> v_1 (-> []).disabledEpoch
[i]Type for REF_2

Name: REF_2 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = REF_2 == 0
[i]Type for TMP_80

Name: TMP_80 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_3

Name: REF_3 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = REF_3 == 0
[i]Type for TMP_81

Name: TMP_81 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_2 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
REF_4 (->v_2 (-> [])) := globalExchangeRate_4(uint128)
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_5 (-> [])(DelegatedStaking.Validator) := ϕ(['v_2 (-> [])', 'v_4 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
REF_5(uint128) -> v_1 (-> []).lastUpdateGlobalRate
[i]Type for REF_5

Name: REF_5 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(uint128) = globalExchangeRate_4 - REF_5
[i]Type for TMP_82

Name: TMP_82 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rateDifference_1(uint128) := TMP_82(uint128)
[i]Type for rateDifference

Name: rateDifference Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_6(uint128) -> v_1 (-> []).globalShares
[i]Type for REF_6

Name: REF_6 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_6,rateDifference_1)
[i]Type for TMP_83

Name: TMP_83 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
tokensGivenToValidator_1(uint128) := TMP_83(uint128)
[i]Type for tokensGivenToValidator

Name: tokensGivenToValidator Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_11(uint128) -> v_5 (-> []).lastUpdateGlobalRate
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_6 (-> [])(DelegatedStaking.Validator) := ϕ(['v_5 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
REF_11 (->v_6 (-> [])) := globalExchangeRate_5(uint128)
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_84 = CONVERT tokensGivenToValidator_1 to uint256
[i]Type for TMP_84

Name: TMP_84 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_7(uint128) -> v_1 (-> []).commissionRate
[i]Type for REF_7

Name: REF_7 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT REF_7 to uint256
[i]Type for TMP_85

Name: TMP_85 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86(uint256) = TMP_84 * TMP_85
[i]Type for TMP_86

Name: TMP_86 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_87(uint256) = TMP_86 / divider_3
[i]Type for TMP_87

Name: TMP_87 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_88 = CONVERT TMP_87 to uint128
[i]Type for TMP_88

Name: TMP_88 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_88(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_8(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_89(uint128) = tokensGivenToValidator_1 (c)- commissionPaid_1
[i]Type for TMP_89

Name: TMP_89 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_90 = CONVERT TMP_89 to uint256
[i]Type for TMP_90

Name: TMP_90 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_91(uint256) = TMP_90 (c)* divider_3
[i]Type for TMP_91

Name: TMP_91 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_9(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_9

Name: REF_9 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(uint256) = TMP_91 (c)/ REF_9
[i]Type for TMP_92

Name: TMP_92 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_93 = CONVERT TMP_92 to uint128
[i]Type for TMP_93

Name: TMP_93 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
REF_8(-> v_3 (-> [])) = REF_8 (c)+ TMP_93
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_10(uint128) -> v_3 (-> []).commissionAvailableToRedeem
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(['v_3 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
REF_10(-> v_4 (-> [])) = REF_10 + commissionPaid_1
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
REF_45(mapping(address => DelegatedStaking.Unstaking[])) -> v_5 (-> ['validators']).unstakings
[i]Type for REF_45

Name: REF_45 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_46(DelegatedStaking.Unstaking[]) -> REF_45[msg.sender]
[i]Type for REF_46

Name: REF_45 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_155 = new Unstaking(coolDownEnd_6,amount_1)
[i]Type for TMP_155

Name: TMP_155 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_48 -> LENGTH REF_46
[i]Type for REF_48

Name: REF_48 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_157(uint256) := REF_48(uint256)
[i]Type for TMP_157

Name: TMP_157 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_158(uint256) = TMP_157 (c)+ 1
[i]Type for TMP_158

Name: TMP_158 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
v_6 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
REF_48 (->v_7 (-> ['validators'])) := TMP_158(uint256)
[i]Type for REF_48

Name: REF_48 Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
REF_49(DelegatedStaking.Unstaking) -> REF_46[TMP_157]
[i]Type for REF_49

Name: REF_45 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_7 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_6 (-> ['validators'])"])
[i]Type for v

Name: v Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: unstakings, totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
REF_49 (->v_7 (-> ['validators'])) := TMP_155(DelegatedStaking.Unstaking)
[i]Type for REF_49

Name: REF_49 Function: unstake
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_9(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_7 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: unstake
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef



recoverUnstaking
function: recoverUnstaking, function count: 34
validators_10(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: recoverUnstaking
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
REF_52(DelegatedStaking.Validator) -> validators_10[validatorId_1]
[i]Type for REF_52

Name: validators Function: recoverUnstaking
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_53(mapping(address => DelegatedStaking.Unstaking[])) -> REF_52.unstakings
[i]Type for REF_53

Name: REF_53 Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_54(DelegatedStaking.Unstaking[]) -> REF_53[msg.sender]
[i]Type for REF_54

Name: REF_53 Function: recoverUnstaking
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_55(DelegatedStaking.Unstaking) -> REF_54[unstakingId_1]
[i]Type for REF_55

Name: REF_53 Function: recoverUnstaking
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
us_1 (-> ['validators'])(DelegatedStaking.Unstaking) := REF_55(DelegatedStaking.Unstaking)
[i]Type for us

Name: us Function: recoverUnstaking
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_56(uint128) -> us_1 (-> ['validators']).amount
[i]Type for REF_56

Name: REF_56 Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_162(bool) = REF_56 >= amount_1
[i]Type for TMP_162

Name: TMP_162 Function: recoverUnstaking
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_163(None) = SOLIDITY_CALL require(bool,string)(TMP_162,Unstaking has less tokens)
[i]Type for TMP_163

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._stake(uint128,uint128,bool)(validatorId_1,amount_1,False)
REF_57(uint128) -> us_1 (-> ['validators']).amount
[i]Type for REF_57

Name: REF_57 Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
us_2 (-> ['validators'])(DelegatedStaking.Unstaking) := ϕ(["us_1 (-> ['validators'])"])
[i]Type for us

Name: us Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
REF_57(-> us_2 (-> ['validators'])) = REF_57 (c)- amount_1
[i]Type for REF_57

Name: REF_57 Function: recoverUnstaking
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_11(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["us_2 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: recoverUnstaking
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
REF_58(uint128) -> us_2 (-> ['validators']).amount
[i]Type for REF_58

Name: REF_58 Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_165(bool) = REF_58 == 0
[i]Type for TMP_165

Name: TMP_165 Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_59(uint128) -> us_2 (-> ['validators']).coolDownEnd
[i]Type for REF_59

Name: REF_59 Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
us_3 (-> ['validators'])(DelegatedStaking.Unstaking) := ϕ(["us_2 (-> ['validators'])"])
[i]Type for us

Name: us Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: coolDownEnd, amount
Finance Type: undef
REF_59 (->us_3 (-> ['validators'])) := 0(uint256)
[i]Type for REF_59

Name: REF_59 Function: recoverUnstaking
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
validators_12(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["us_3 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: recoverUnstaking
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
validators_10(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: recoverUnstaking
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: unstakings, exchangeRate
Finance Type: undef
REF_52(DelegatedStaking.Validator) -> validators_10[validatorId_1]
[i]Type for REF_52

Name: validators Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_53(mapping(address => DelegatedStaking.Unstaking[])) -> REF_52.unstakings
[i]Type for REF_53

Name: REF_53 Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_54(DelegatedStaking.Unstaking[]) -> REF_53[msg.sender]
[i]Type for REF_54

Name: REF_53 Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_55(DelegatedStaking.Unstaking) -> REF_54[unstakingId_1]
[i]Type for REF_55

Name: REF_53 Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
us_1 (-> ['validators'])(DelegatedStaking.Unstaking) := REF_55(DelegatedStaking.Unstaking)
[i]Type for us

Name: us Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
REF_56(uint128) -> us_1 (-> ['validators']).amount
[i]Type for REF_56

Name: REF_56 Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_162(bool) = REF_56 >= amount_1
[i]Type for TMP_162

Name: TMP_162 Function: recoverUnstaking
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_163(None) = SOLIDITY_CALL require(bool,string)(TMP_162,Unstaking has less tokens)
[i]Type for TMP_163

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._stake(uint128,uint128,bool)(validatorId_1,amount_1,False)
REF_57(uint128) -> us_1 (-> ['validators']).amount
[i]Type for REF_57

Name: REF_57 Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
us_2 (-> ['validators'])(DelegatedStaking.Unstaking) := ϕ(["us_1 (-> ['validators'])"])
[i]Type for us

Name: us Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
REF_57(-> us_2 (-> ['validators'])) = REF_57 (c)- amount_1
[i]Type for REF_57

Name: REF_57 Function: recoverUnstaking
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_11(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["us_2 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: recoverUnstaking
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
REF_58(uint128) -> us_2 (-> ['validators']).amount
[i]Type for REF_58

Name: REF_58 Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_165(bool) = REF_58 == 0
[i]Type for TMP_165

Name: TMP_165 Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_59(uint128) -> us_2 (-> ['validators']).coolDownEnd
[i]Type for REF_59

Name: REF_59 Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
us_3 (-> ['validators'])(DelegatedStaking.Unstaking) := ϕ(["us_2 (-> ['validators'])"])
[i]Type for us

Name: us Function: recoverUnstaking
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: coolDownEnd, amount
Finance Type: undef
REF_59 (->us_3 (-> ['validators'])) := 0(uint256)
[i]Type for REF_59

Name: REF_59 Function: recoverUnstaking
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
validators_12(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["us_3 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: recoverUnstaking
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef



redeemRewards
function: redeemRewards, function count: 35
TMP_196(bool) = amount_1 > 0
[i]Type for TMP_196

Name: TMP_196 Function: redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_197(None) = SOLIDITY_CALL require(bool,string)(TMP_196,Amount is 0)
[i]Type for TMP_197

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._redeemRewards(uint128,address,uint128)(validatorId_1,beneficiary_1,amount_1)
function: _redeemRewards, function count: 36
validatorId_1(uint128) := ϕ(['validatorId_1', 'validatorId_1'])
[i]Type for validatorId

Name: validatorId Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
beneficiary_1(address) := ϕ(['beneficiary_1', 'beneficiary_1'])
[i]Type for beneficiary

Name: beneficiary Function: _redeemRewards
Num: 
Den: 
Address: -999
Norm: u
LF: beneficiary
Value: u
Fields: 
Finance Type: undef
amount_1(uint128) := ϕ(['amount_1'])
[i]Type for amount

Name: amount Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalGlobalShares_12(uint128) := ϕ(['totalGlobalShares_25', 'totalGlobalShares_9', 'totalGlobalShares_11', 'totalGlobalShares_7', 'totalGlobalShares_18', 'totalGlobalShares_0'])
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: raw balance
globalExchangeRate_14(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
validators_13(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
TMP_167 = CONVERT 0 to address
[i]Type for TMP_167

Name: TMP_167 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_168(bool) = beneficiary_1 != TMP_167
[i]Type for TMP_168

Name: TMP_168 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_169(None) = SOLIDITY_CALL require(bool,string)(TMP_168,Invalid beneficiary)
[i]Type for TMP_169

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateGlobalExchangeRate()()
globalExchangeRate_15(uint128) := ϕ(['globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_60(DelegatedStaking.Validator) -> validators_14[validatorId_1]
[i]Type for REF_60

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_1 (-> ['validators'])(DelegatedStaking.Validator) := REF_60(DelegatedStaking.Validator)
[i]Type for v

Name: v Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateValidator(DelegatedStaking.Validator)(v_1 (-> ['validators']))
REF_61(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_61

Name: REF_61 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_62(DelegatedStaking.Staking) -> REF_61[msg.sender]
[i]Type for REF_62

Name: REF_61 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_1 (-> ['v'])(DelegatedStaking.Staking) := REF_62(DelegatedStaking.Staking)
[i]Type for s

Name: s Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_63(uint128) -> s_1 (-> ['v']).shares
[i]Type for REF_63

Name: REF_63 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_64(uint128) -> v_1 (-> ['validators']).exchangeRate
[i]Type for REF_64

Name: REF_64 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_172(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_63,REF_64)
function: _sharesToTokens, function count: 37
sharesN_1(uint128) := ϕ(['REF_63', 'REF_6', 'REF_145', 'REF_133', 'REF_138'])
[i]Type for sharesN

Name: sharesN Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['TMP_286', 'rateDifference_1', 'TMP_298', 'REF_64', 'REF_146'])
[i]Type for rate

Name: rate Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_4(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_94 = CONVERT sharesN_1 to uint256
[i]Type for TMP_94

Name: TMP_94 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_95 = CONVERT rate_1 to uint256
[i]Type for TMP_95

Name: TMP_95 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_96(uint256) = TMP_94 (c)* TMP_95
[i]Type for TMP_96

Name: TMP_96 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_97(uint256) = TMP_96 (c)/ divider_4
[i]Type for TMP_97

Name: TMP_97 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_98 = CONVERT TMP_97 to uint128
[i]Type for TMP_98

Name: TMP_98 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_98
sharesN_1(uint128) := ϕ(['REF_63', 'REF_6', 'REF_145', 'REF_133', 'REF_138'])
[i]Type for sharesN

Name: sharesN Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['TMP_286', 'rateDifference_1', 'TMP_298', 'REF_64', 'REF_146'])
[i]Type for rate

Name: rate Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_4(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_94 = CONVERT sharesN_1 to uint256
[i]Type for TMP_94

Name: TMP_94 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_95 = CONVERT rate_1 to uint256
[i]Type for TMP_95

Name: TMP_95 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_96(uint256) = TMP_94 (c)* TMP_95
[i]Type for TMP_96

Name: TMP_96 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_97(uint256) = TMP_96 (c)/ divider_4
[i]Type for TMP_97

Name: TMP_97 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_98 = CONVERT TMP_97 to uint128
[i]Type for TMP_98

Name: TMP_98 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_98
[i]Type for TMP_172

Name: TMP_172 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_65(uint128) -> s_1 (-> ['v']).staked
[i]Type for REF_65

Name: REF_65 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_173(uint128) = TMP_172 (c)- REF_65
[i]Type for TMP_173

Name: TMP_173 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rewards_1(uint128) := TMP_173(uint128)
[i]Type for rewards

Name: rewards Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_66(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_66

Name: REF_66 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_174(bool) = msg.sender == REF_66
[i]Type for TMP_174

Name: TMP_174 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_185(bool) = amount_1 == 0
[i]Type for TMP_185

Name: TMP_185 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_175(bool) = amount_1 == 0
[i]Type for TMP_175

Name: TMP_175 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_5(uint128) := ϕ(['amount_4', 'amount_1'])
[i]Type for amount

Name: amount Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_67(uint128) -> v_1 (-> ['validators']).commissionAvailableToRedeem
[i]Type for REF_67

Name: REF_67 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_176(uint128) = rewards_1 + REF_67
[i]Type for TMP_176

Name: TMP_176 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_4(uint128) := TMP_176(uint128)
[i]Type for amount

Name: amount Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_3(uint128) := ϕ(['amount_2', 'amount_1'])
[i]Type for amount

Name: amount Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_186(bool) = rewards_1 >= amount_3
[i]Type for TMP_186

Name: TMP_186 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_187(None) = SOLIDITY_CALL require(bool,string)(TMP_186,Redeem amount > available)
[i]Type for TMP_187

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_2(uint128) := rewards_1(uint128)
[i]Type for amount

Name: amount Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_68(uint128) -> v_1 (-> ['validators']).commissionAvailableToRedeem
[i]Type for REF_68

Name: REF_68 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_177(uint128) = rewards_1 (c)+ REF_68
[i]Type for TMP_177

Name: TMP_177 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_178(bool) = TMP_177 >= amount_5
[i]Type for TMP_178

Name: TMP_178 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_179(None) = SOLIDITY_CALL require(bool,string)(TMP_178,Redeem amount > available)
[i]Type for TMP_179

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_75(uint128) -> v_1 (-> ['validators']).exchangeRate
[i]Type for REF_75

Name: REF_75 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_188(uint128) = INTERNAL_CALL, DelegatedStaking._tokensToShares(uint128,uint128)(amount_3,REF_75)
function: _tokensToShares, function count: 38
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_5', 'amount_3', 'TMP_181'])
[i]Type for amount

Name: amount Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['REF_35', 'REF_70', 'globalExchangeRate_9', 'REF_75', 'globalExchangeRate_20', 'globalExchangeRate_12'])
[i]Type for rate

Name: rate Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_5(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99 = CONVERT amount_1 to uint256
[i]Type for TMP_99

Name: TMP_99 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_100(uint256) = TMP_99 (c)* divider_5
[i]Type for TMP_100

Name: TMP_100 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_101 = CONVERT rate_1 to uint256
[i]Type for TMP_101

Name: TMP_101 Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_102(uint256) = TMP_100 (c)/ TMP_101
[i]Type for TMP_102

Name: TMP_102 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_103 = CONVERT TMP_102 to uint128
[i]Type for TMP_103

Name: TMP_103 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_103
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_5', 'amount_3', 'TMP_181'])
[i]Type for amount

Name: amount Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['REF_35', 'REF_70', 'globalExchangeRate_9', 'REF_75', 'globalExchangeRate_20', 'globalExchangeRate_12'])
[i]Type for rate

Name: rate Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_5(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99 = CONVERT amount_1 to uint256
[i]Type for TMP_99

Name: TMP_99 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_100(uint256) = TMP_99 (c)* divider_5
[i]Type for TMP_100

Name: TMP_100 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_101 = CONVERT rate_1 to uint256
[i]Type for TMP_101

Name: TMP_101 Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_102(uint256) = TMP_100 (c)/ TMP_101
[i]Type for TMP_102

Name: TMP_102 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_103 = CONVERT TMP_102 to uint128
[i]Type for TMP_103

Name: TMP_103 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_103
[i]Type for TMP_188

Name: TMP_188 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validatorSharesRemove_scope_0_1(uint128) := TMP_188(uint128)
[i]Type for validatorSharesRemove_scope_0

Name: validatorSharesRemove_scope_0 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_80(uint128) -> v_1 (-> ['validators']).commissionAvailableToRedeem
[i]Type for REF_80

Name: REF_80 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_193(bool) = amount_5 < REF_80
[i]Type for TMP_193

Name: TMP_193 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_81(uint128) -> v_1 (-> ['validators']).commissionAvailableToRedeem
[i]Type for REF_81

Name: REF_81 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_194(uint128) = REF_81 (c)- amount_5
[i]Type for TMP_194

Name: TMP_194 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
commissionLeftOver_2(uint128) := TMP_194(uint128)
[i]Type for commissionLeftOver

Name: commissionLeftOver Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
commissionLeftOver_1(uint128) := 0(uint256)
[i]Type for commissionLeftOver

Name: commissionLeftOver Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_76(uint128) -> s_1 (-> ['v']).shares
[i]Type for REF_76

Name: REF_76 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_2 (-> ['v'])(DelegatedStaking.Staking) := ϕ(["s_1 (-> ['v'])"])
[i]Type for s

Name: s Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares, staked
Finance Type: undef
REF_76(-> s_2 (-> ['v'])) = REF_76 - validatorSharesRemove_scope_0_1
[i]Type for REF_76

Name: REF_76 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_8 (-> ['v'])(DelegatedStaking.Validator) := ϕ(["s_2 (-> ['v'])"])
[i]Type for v

Name: v Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares, staked
Finance Type: undef
commissionLeftOver_3(uint128) := ϕ(['commissionLeftOver_1', 'commissionLeftOver_2'])
[i]Type for commissionLeftOver

Name: commissionLeftOver Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_180(bool) = commissionLeftOver_3 == 0
[i]Type for TMP_180

Name: TMP_180 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_69(uint128) -> v_1 (-> ['validators']).commissionAvailableToRedeem
[i]Type for REF_69

Name: REF_69 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_181(uint128) = amount_5 (c)- REF_69
[i]Type for TMP_181

Name: TMP_181 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_70(uint128) -> v_1 (-> ['validators']).exchangeRate
[i]Type for REF_70

Name: REF_70 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_182(uint128) = INTERNAL_CALL, DelegatedStaking._tokensToShares(uint128,uint128)(TMP_181,REF_70)
function: _tokensToShares, function count: 39
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_5', 'amount_3', 'TMP_181'])
[i]Type for amount

Name: amount Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['REF_35', 'REF_70', 'globalExchangeRate_9', 'REF_75', 'globalExchangeRate_20', 'globalExchangeRate_12'])
[i]Type for rate

Name: rate Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_5(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99 = CONVERT amount_1 to uint256
[i]Type for TMP_99

Name: TMP_99 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_100(uint256) = TMP_99 (c)* divider_5
[i]Type for TMP_100

Name: TMP_100 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_101 = CONVERT rate_1 to uint256
[i]Type for TMP_101

Name: TMP_101 Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_102(uint256) = TMP_100 (c)/ TMP_101
[i]Type for TMP_102

Name: TMP_102 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_103 = CONVERT TMP_102 to uint128
[i]Type for TMP_103

Name: TMP_103 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_103
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_5', 'amount_3', 'TMP_181'])
[i]Type for amount

Name: amount Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['REF_35', 'REF_70', 'globalExchangeRate_9', 'REF_75', 'globalExchangeRate_20', 'globalExchangeRate_12'])
[i]Type for rate

Name: rate Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_5(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99 = CONVERT amount_1 to uint256
[i]Type for TMP_99

Name: TMP_99 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_100(uint256) = TMP_99 (c)* divider_5
[i]Type for TMP_100

Name: TMP_100 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_101 = CONVERT rate_1 to uint256
[i]Type for TMP_101

Name: TMP_101 Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_102(uint256) = TMP_100 (c)/ TMP_101
[i]Type for TMP_102

Name: TMP_102 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_103 = CONVERT TMP_102 to uint128
[i]Type for TMP_103

Name: TMP_103 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_103
[i]Type for TMP_182

Name: TMP_182 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validatorSharesRemove_1(uint128) := TMP_182(uint128)
[i]Type for validatorSharesRemove

Name: validatorSharesRemove Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_77(uint128) -> v_1 (-> ['validators']).totalShares
[i]Type for REF_77

Name: REF_77 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_2 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])"])
[i]Type for v

Name: v Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
REF_77(-> v_2 (-> ['validators'])) = REF_77 - validatorSharesRemove_scope_0_1
[i]Type for REF_77

Name: REF_77 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_15(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_2 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
v_4 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_3 (-> ['validators'])"])
[i]Type for v

Name: v Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
v_6 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_2 (-> ['validators'])", "v_1 (-> ['validators'])", "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
REF_71(uint128) -> s_1 (-> ['v']).shares
[i]Type for REF_71

Name: REF_71 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_3 (-> ['v'])(DelegatedStaking.Staking) := ϕ(["s_1 (-> ['v'])"])
[i]Type for s

Name: s Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares, staked
Finance Type: undef
REF_71(-> s_3 (-> ['v'])) = REF_71 - validatorSharesRemove_1
[i]Type for REF_71

Name: REF_71 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_9 (-> ['v'])(DelegatedStaking.Validator) := ϕ(["s_3 (-> ['v'])"])
[i]Type for v

Name: v Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares, staked
Finance Type: undef
REF_73(uint128) -> v_4 (-> ['validators']).commissionAvailableToRedeem
[i]Type for REF_73

Name: REF_73 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_183(uint128) = REF_73 (c)- commissionLeftOver_3
[i]Type for TMP_183

Name: TMP_183 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._transferFromContract(address,uint128)(beneficiary_1,amount_5)
function: _transferFromContract, function count: 40
to_1(address) := ϕ(['msg.sender', 'beneficiary_1'])
[i]Type for to

Name: to Function: _transferFromContract
Num: 
Den: 
Address: -999
Norm: u
LF: beneficiary
Value: u
Fields: 
Finance Type: undef
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'toTransfer_3', 'amount_5'])
[i]Type for amount

Name: amount Function: _transferFromContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
CQT_2(IERC20Upgradeable) := ϕ(['CQT_0'])
[i]Type for CQT

Name: CQT Function: _transferFromContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable,address,uint256), arguments:['CQT_2', 'to_1', 'amount_1'] 
to_1(address) := ϕ(['msg.sender', 'beneficiary_1'])
[i]Type for to

Name: to Function: _transferFromContract
Num: 
Den: 
Address: -999
Norm: u
LF: beneficiary
Value: u
Fields: 
Finance Type: undef
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'toTransfer_3', 'amount_5'])
[i]Type for amount

Name: amount Function: _transferFromContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
CQT_2(IERC20Upgradeable) := ϕ(['CQT_0'])
[i]Type for CQT

Name: CQT Function: _transferFromContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable,address,uint256), arguments:['CQT_2', 'to_1', 'amount_1'] 
REF_78(uint128) -> v_6 (-> ['validators']).disabledEpoch
[i]Type for REF_78

Name: REF_78 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_190(bool) = REF_78 == 0
[i]Type for TMP_190

Name: TMP_190 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_72(uint128) -> v_1 (-> ['validators']).totalShares
[i]Type for REF_72

Name: REF_72 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_3 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])"])
[i]Type for v

Name: v Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
REF_72(-> v_3 (-> ['validators'])) = REF_72 - validatorSharesRemove_1
[i]Type for REF_72

Name: REF_72 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_17(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_3 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
TMP_191(uint128) = INTERNAL_CALL, DelegatedStaking._tokensToShares(uint128,uint128)(amount_5,globalExchangeRate_20)
[i]Type for TMP_191

Name: TMP_191 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
globalSharesRemove_1(uint128) := TMP_191(uint128)
[i]Type for globalSharesRemove

Name: globalSharesRemove Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_74(uint128) -> v_4 (-> ['validators']).commissionAvailableToRedeem
[i]Type for REF_74

Name: REF_74 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_5 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_4 (-> ['validators'])"])
[i]Type for v

Name: v Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
REF_74 (->v_5 (-> ['validators'])) := commissionLeftOver_3(uint128)
[i]Type for REF_74

Name: REF_74 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_16(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_5 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
totalGlobalShares_20(uint128) = totalGlobalShares_19 - globalSharesRemove_1
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: -3000000000000000000
Fields: 
Finance Type: raw balance
REF_79(uint128) -> v_6 (-> ['validators']).globalShares
[i]Type for REF_79

Name: REF_79 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_7 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_6 (-> ['validators'])"])
[i]Type for v

Name: v Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: globalShares, totalShares, stakings, exchangeRate, _address, commissionAvailableToRedeem, disabledEpoch
Finance Type: undef
REF_79(-> v_7 (-> ['validators'])) = REF_79 - globalSharesRemove_1
[i]Type for REF_79

Name: REF_79 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
validators_18(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_7 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
validatorId_1(uint128) := ϕ(['validatorId_1', 'validatorId_1'])
[i]Type for validatorId

Name: validatorId Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
beneficiary_1(address) := ϕ(['beneficiary_1', 'beneficiary_1'])
[i]Type for beneficiary

Name: beneficiary Function: _redeemRewards
Num: 
Den: 
Address: -999
Norm: u
LF: beneficiary
Value: u
Fields: 
Finance Type: undef
amount_1(uint128) := ϕ(['amount_1'])
[i]Type for amount

Name: amount Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalGlobalShares_12(uint128) := ϕ(['totalGlobalShares_25', 'totalGlobalShares_9', 'totalGlobalShares_11', 'totalGlobalShares_7', 'totalGlobalShares_18', 'totalGlobalShares_0'])
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: -3000000000000000000
Fields: 
Finance Type: raw balance
globalExchangeRate_14(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
validators_13(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
TMP_167 = CONVERT 0 to address
[i]Type for TMP_167

Name: TMP_167 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_168(bool) = beneficiary_1 != TMP_167
[i]Type for TMP_168

Name: TMP_168 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_169(None) = SOLIDITY_CALL require(bool,string)(TMP_168,Invalid beneficiary)
[i]Type for TMP_169

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateGlobalExchangeRate()()
globalExchangeRate_15(uint128) := ϕ(['globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_60(DelegatedStaking.Validator) -> validators_14[validatorId_1]
[i]Type for REF_60

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_1 (-> ['validators'])(DelegatedStaking.Validator) := REF_60(DelegatedStaking.Validator)
[i]Type for v

Name: v Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateValidator(DelegatedStaking.Validator)(v_1 (-> ['validators']))
function: _updateValidator, function count: 41
v_1 (-> [])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_1 (-> ['validators'])", "v_1 (-> ['validators'])", 'REF_94', "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, commissionAvailableToRedeem, totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
divider_2(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_4(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_2(uint128) -> v_1 (-> []).disabledEpoch
[i]Type for REF_2

Name: REF_2 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = REF_2 == 0
[i]Type for TMP_80

Name: TMP_80 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_3

Name: REF_3 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = REF_3 == 0
[i]Type for TMP_81

Name: TMP_81 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_2 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, disabledEpoch, delegated, stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
REF_4 (->v_2 (-> [])) := globalExchangeRate_4(uint128)
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_5 (-> [])(DelegatedStaking.Validator) := ϕ(['v_2 (-> [])', 'v_4 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
REF_5(uint128) -> v_1 (-> []).lastUpdateGlobalRate
[i]Type for REF_5

Name: REF_5 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(uint128) = globalExchangeRate_4 - REF_5
[i]Type for TMP_82

Name: TMP_82 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rateDifference_1(uint128) := TMP_82(uint128)
[i]Type for rateDifference

Name: rateDifference Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_6(uint128) -> v_1 (-> []).globalShares
[i]Type for REF_6

Name: REF_6 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_6,rateDifference_1)
[i]Type for TMP_83

Name: TMP_83 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
tokensGivenToValidator_1(uint128) := TMP_83(uint128)
[i]Type for tokensGivenToValidator

Name: tokensGivenToValidator Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_11(uint128) -> v_5 (-> []).lastUpdateGlobalRate
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_6 (-> [])(DelegatedStaking.Validator) := ϕ(['v_5 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionAvailableToRedeem, lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
REF_11 (->v_6 (-> [])) := globalExchangeRate_5(uint128)
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_84 = CONVERT tokensGivenToValidator_1 to uint256
[i]Type for TMP_84

Name: TMP_84 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_7(uint128) -> v_1 (-> []).commissionRate
[i]Type for REF_7

Name: REF_7 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT REF_7 to uint256
[i]Type for TMP_85

Name: TMP_85 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86(uint256) = TMP_84 * TMP_85
[i]Type for TMP_86

Name: TMP_86 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_87(uint256) = TMP_86 / divider_3
[i]Type for TMP_87

Name: TMP_87 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_88 = CONVERT TMP_87 to uint128
[i]Type for TMP_88

Name: TMP_88 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_88(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_8(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_89(uint128) = tokensGivenToValidator_1 (c)- commissionPaid_1
[i]Type for TMP_89

Name: TMP_89 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_90 = CONVERT TMP_89 to uint256
[i]Type for TMP_90

Name: TMP_90 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_91(uint256) = TMP_90 (c)* divider_3
[i]Type for TMP_91

Name: TMP_91 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_9(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_9

Name: REF_9 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(uint256) = TMP_91 (c)/ REF_9
[i]Type for TMP_92

Name: TMP_92 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_93 = CONVERT TMP_92 to uint128
[i]Type for TMP_93

Name: TMP_93 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, disabledEpoch, delegated, stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
REF_8(-> v_3 (-> [])) = REF_8 (c)+ TMP_93
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_10(uint128) -> v_3 (-> []).commissionAvailableToRedeem
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(['v_3 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, disabledEpoch, delegated, stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
REF_10(-> v_4 (-> [])) = REF_10 + commissionPaid_1
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_1 (-> [])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_1 (-> ['validators'])", "v_1 (-> ['validators'])", 'REF_94', "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, commissionAvailableToRedeem, totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
divider_2(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_4(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_2(uint128) -> v_1 (-> []).disabledEpoch
[i]Type for REF_2

Name: REF_2 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = REF_2 == 0
[i]Type for TMP_80

Name: TMP_80 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_3

Name: REF_3 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = REF_3 == 0
[i]Type for TMP_81

Name: TMP_81 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_2 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, disabledEpoch, delegated, stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
REF_4 (->v_2 (-> [])) := globalExchangeRate_4(uint128)
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_5 (-> [])(DelegatedStaking.Validator) := ϕ(['v_2 (-> [])', 'v_4 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, disabledEpoch, delegated, stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
REF_5(uint128) -> v_1 (-> []).lastUpdateGlobalRate
[i]Type for REF_5

Name: REF_5 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(uint128) = globalExchangeRate_4 - REF_5
[i]Type for TMP_82

Name: TMP_82 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rateDifference_1(uint128) := TMP_82(uint128)
[i]Type for rateDifference

Name: rateDifference Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_6(uint128) -> v_1 (-> []).globalShares
[i]Type for REF_6

Name: REF_6 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_6,rateDifference_1)
[i]Type for TMP_83

Name: TMP_83 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
tokensGivenToValidator_1(uint128) := TMP_83(uint128)
[i]Type for tokensGivenToValidator

Name: tokensGivenToValidator Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_11(uint128) -> v_5 (-> []).lastUpdateGlobalRate
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_6 (-> [])(DelegatedStaking.Validator) := ϕ(['v_5 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, disabledEpoch, delegated, stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
REF_11 (->v_6 (-> [])) := globalExchangeRate_5(uint128)
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_84 = CONVERT tokensGivenToValidator_1 to uint256
[i]Type for TMP_84

Name: TMP_84 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_7(uint128) -> v_1 (-> []).commissionRate
[i]Type for REF_7

Name: REF_7 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT REF_7 to uint256
[i]Type for TMP_85

Name: TMP_85 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86(uint256) = TMP_84 * TMP_85
[i]Type for TMP_86

Name: TMP_86 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_87(uint256) = TMP_86 / divider_3
[i]Type for TMP_87

Name: TMP_87 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_88 = CONVERT TMP_87 to uint128
[i]Type for TMP_88

Name: TMP_88 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_88(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_8(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_89(uint128) = tokensGivenToValidator_1 (c)- commissionPaid_1
[i]Type for TMP_89

Name: TMP_89 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_90 = CONVERT TMP_89 to uint256
[i]Type for TMP_90

Name: TMP_90 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_91(uint256) = TMP_90 (c)* divider_3
[i]Type for TMP_91

Name: TMP_91 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_9(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_9

Name: REF_9 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(uint256) = TMP_91 (c)/ REF_9
[i]Type for TMP_92

Name: TMP_92 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_93 = CONVERT TMP_92 to uint128
[i]Type for TMP_93

Name: TMP_93 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, disabledEpoch, delegated, stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
REF_8(-> v_3 (-> [])) = REF_8 (c)+ TMP_93
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_10(uint128) -> v_3 (-> []).commissionAvailableToRedeem
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(['v_3 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, disabledEpoch, delegated, stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
REF_10(-> v_4 (-> [])) = REF_10 + commissionPaid_1
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
REF_61(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_61

Name: REF_61 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_62(DelegatedStaking.Staking) -> REF_61[msg.sender]
[i]Type for REF_62

Name: REF_61 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_1 (-> ['v'])(DelegatedStaking.Staking) := REF_62(DelegatedStaking.Staking)
[i]Type for s

Name: s Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares, staked
Finance Type: undef
REF_63(uint128) -> s_1 (-> ['v']).shares
[i]Type for REF_63

Name: REF_63 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_64(uint128) -> v_1 (-> ['validators']).exchangeRate
[i]Type for REF_64

Name: REF_64 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_172(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_63,REF_64)
function: _sharesToTokens, function count: 42
sharesN_1(uint128) := ϕ(['REF_63', 'REF_6', 'REF_145', 'REF_133', 'REF_138'])
[i]Type for sharesN

Name: sharesN Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['TMP_286', 'rateDifference_1', 'TMP_298', 'REF_64', 'REF_146'])
[i]Type for rate

Name: rate Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_4(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_94 = CONVERT sharesN_1 to uint256
[i]Type for TMP_94

Name: TMP_94 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_95 = CONVERT rate_1 to uint256
[i]Type for TMP_95

Name: TMP_95 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_96(uint256) = TMP_94 (c)* TMP_95
[i]Type for TMP_96

Name: TMP_96 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_97(uint256) = TMP_96 (c)/ divider_4
[i]Type for TMP_97

Name: TMP_97 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_98 = CONVERT TMP_97 to uint128
[i]Type for TMP_98

Name: TMP_98 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_98
sharesN_1(uint128) := ϕ(['REF_63', 'REF_6', 'REF_145', 'REF_133', 'REF_138'])
[i]Type for sharesN

Name: sharesN Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['TMP_286', 'rateDifference_1', 'TMP_298', 'REF_64', 'REF_146'])
[i]Type for rate

Name: rate Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_4(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_94 = CONVERT sharesN_1 to uint256
[i]Type for TMP_94

Name: TMP_94 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_95 = CONVERT rate_1 to uint256
[i]Type for TMP_95

Name: TMP_95 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_96(uint256) = TMP_94 (c)* TMP_95
[i]Type for TMP_96

Name: TMP_96 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_97(uint256) = TMP_96 (c)/ divider_4
[i]Type for TMP_97

Name: TMP_97 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_98 = CONVERT TMP_97 to uint128
[i]Type for TMP_98

Name: TMP_98 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_98
[i]Type for TMP_172

Name: TMP_172 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_65(uint128) -> s_1 (-> ['v']).staked
[i]Type for REF_65

Name: REF_65 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_173(uint128) = TMP_172 (c)- REF_65
[i]Type for TMP_173

Name: TMP_173 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rewards_1(uint128) := TMP_173(uint128)
[i]Type for rewards

Name: rewards Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_66(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_66

Name: REF_66 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_174(bool) = msg.sender == REF_66
[i]Type for TMP_174

Name: TMP_174 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_185(bool) = amount_1 == 0
[i]Type for TMP_185

Name: TMP_185 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_175(bool) = amount_1 == 0
[i]Type for TMP_175

Name: TMP_175 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_5(uint128) := ϕ(['amount_4', 'amount_1'])
[i]Type for amount

Name: amount Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_67(uint128) -> v_1 (-> ['validators']).commissionAvailableToRedeem
[i]Type for REF_67

Name: REF_67 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_176(uint128) = rewards_1 + REF_67
[i]Type for TMP_176

Name: TMP_176 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_4(uint128) := TMP_176(uint128)
[i]Type for amount

Name: amount Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_3(uint128) := ϕ(['amount_2', 'amount_1'])
[i]Type for amount

Name: amount Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_186(bool) = rewards_1 >= amount_3
[i]Type for TMP_186

Name: TMP_186 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_187(None) = SOLIDITY_CALL require(bool,string)(TMP_186,Redeem amount > available)
[i]Type for TMP_187

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_2(uint128) := rewards_1(uint128)
[i]Type for amount

Name: amount Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_68(uint128) -> v_1 (-> ['validators']).commissionAvailableToRedeem
[i]Type for REF_68

Name: REF_68 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_177(uint128) = rewards_1 (c)+ REF_68
[i]Type for TMP_177

Name: TMP_177 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_178(bool) = TMP_177 >= amount_5
[i]Type for TMP_178

Name: TMP_178 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_179(None) = SOLIDITY_CALL require(bool,string)(TMP_178,Redeem amount > available)
[i]Type for TMP_179

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_75(uint128) -> v_1 (-> ['validators']).exchangeRate
[i]Type for REF_75

Name: REF_75 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_188(uint128) = INTERNAL_CALL, DelegatedStaking._tokensToShares(uint128,uint128)(amount_3,REF_75)
function: _tokensToShares, function count: 43
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_5', 'amount_3', 'TMP_181'])
[i]Type for amount

Name: amount Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['REF_35', 'REF_70', 'globalExchangeRate_9', 'REF_75', 'globalExchangeRate_20', 'globalExchangeRate_12'])
[i]Type for rate

Name: rate Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_5(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99 = CONVERT amount_1 to uint256
[i]Type for TMP_99

Name: TMP_99 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_100(uint256) = TMP_99 (c)* divider_5
[i]Type for TMP_100

Name: TMP_100 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_101 = CONVERT rate_1 to uint256
[i]Type for TMP_101

Name: TMP_101 Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_102(uint256) = TMP_100 (c)/ TMP_101
[i]Type for TMP_102

Name: TMP_102 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_103 = CONVERT TMP_102 to uint128
[i]Type for TMP_103

Name: TMP_103 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_103
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_5', 'amount_3', 'TMP_181'])
[i]Type for amount

Name: amount Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['REF_35', 'REF_70', 'globalExchangeRate_9', 'REF_75', 'globalExchangeRate_20', 'globalExchangeRate_12'])
[i]Type for rate

Name: rate Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_5(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99 = CONVERT amount_1 to uint256
[i]Type for TMP_99

Name: TMP_99 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_100(uint256) = TMP_99 (c)* divider_5
[i]Type for TMP_100

Name: TMP_100 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_101 = CONVERT rate_1 to uint256
[i]Type for TMP_101

Name: TMP_101 Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_102(uint256) = TMP_100 (c)/ TMP_101
[i]Type for TMP_102

Name: TMP_102 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_103 = CONVERT TMP_102 to uint128
[i]Type for TMP_103

Name: TMP_103 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_103
[i]Type for TMP_188

Name: TMP_188 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validatorSharesRemove_scope_0_1(uint128) := TMP_188(uint128)
[i]Type for validatorSharesRemove_scope_0

Name: validatorSharesRemove_scope_0 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_80(uint128) -> v_1 (-> ['validators']).commissionAvailableToRedeem
[i]Type for REF_80

Name: REF_80 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_193(bool) = amount_5 < REF_80
[i]Type for TMP_193

Name: TMP_193 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_81(uint128) -> v_1 (-> ['validators']).commissionAvailableToRedeem
[i]Type for REF_81

Name: REF_81 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_194(uint128) = REF_81 (c)- amount_5
[i]Type for TMP_194

Name: TMP_194 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
commissionLeftOver_2(uint128) := TMP_194(uint128)
[i]Type for commissionLeftOver

Name: commissionLeftOver Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
commissionLeftOver_1(uint128) := 0(uint256)
[i]Type for commissionLeftOver

Name: commissionLeftOver Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_76(uint128) -> s_1 (-> ['v']).shares
[i]Type for REF_76

Name: REF_76 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_2 (-> ['v'])(DelegatedStaking.Staking) := ϕ(["s_1 (-> ['v'])"])
[i]Type for s

Name: s Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares, staked
Finance Type: undef
REF_76(-> s_2 (-> ['v'])) = REF_76 - validatorSharesRemove_scope_0_1
[i]Type for REF_76

Name: REF_76 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_8 (-> ['v'])(DelegatedStaking.Validator) := ϕ(["s_2 (-> ['v'])"])
[i]Type for v

Name: v Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares, staked
Finance Type: undef
commissionLeftOver_3(uint128) := ϕ(['commissionLeftOver_1', 'commissionLeftOver_2'])
[i]Type for commissionLeftOver

Name: commissionLeftOver Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_180(bool) = commissionLeftOver_3 == 0
[i]Type for TMP_180

Name: TMP_180 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_69(uint128) -> v_1 (-> ['validators']).commissionAvailableToRedeem
[i]Type for REF_69

Name: REF_69 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_181(uint128) = amount_5 (c)- REF_69
[i]Type for TMP_181

Name: TMP_181 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_70(uint128) -> v_1 (-> ['validators']).exchangeRate
[i]Type for REF_70

Name: REF_70 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_182(uint128) = INTERNAL_CALL, DelegatedStaking._tokensToShares(uint128,uint128)(TMP_181,REF_70)
function: _tokensToShares, function count: 44
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_5', 'amount_3', 'TMP_181'])
[i]Type for amount

Name: amount Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['REF_35', 'REF_70', 'globalExchangeRate_9', 'REF_75', 'globalExchangeRate_20', 'globalExchangeRate_12'])
[i]Type for rate

Name: rate Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_5(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99 = CONVERT amount_1 to uint256
[i]Type for TMP_99

Name: TMP_99 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_100(uint256) = TMP_99 (c)* divider_5
[i]Type for TMP_100

Name: TMP_100 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_101 = CONVERT rate_1 to uint256
[i]Type for TMP_101

Name: TMP_101 Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_102(uint256) = TMP_100 (c)/ TMP_101
[i]Type for TMP_102

Name: TMP_102 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_103 = CONVERT TMP_102 to uint128
[i]Type for TMP_103

Name: TMP_103 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_103
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'amount_5', 'amount_3', 'TMP_181'])
[i]Type for amount

Name: amount Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['REF_35', 'REF_70', 'globalExchangeRate_9', 'REF_75', 'globalExchangeRate_20', 'globalExchangeRate_12'])
[i]Type for rate

Name: rate Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_5(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99 = CONVERT amount_1 to uint256
[i]Type for TMP_99

Name: TMP_99 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_100(uint256) = TMP_99 (c)* divider_5
[i]Type for TMP_100

Name: TMP_100 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_101 = CONVERT rate_1 to uint256
[i]Type for TMP_101

Name: TMP_101 Function: _tokensToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_102(uint256) = TMP_100 (c)/ TMP_101
[i]Type for TMP_102

Name: TMP_102 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_103 = CONVERT TMP_102 to uint128
[i]Type for TMP_103

Name: TMP_103 Function: _tokensToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_103
[i]Type for TMP_182

Name: TMP_182 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validatorSharesRemove_1(uint128) := TMP_182(uint128)
[i]Type for validatorSharesRemove

Name: validatorSharesRemove Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_77(uint128) -> v_1 (-> ['validators']).totalShares
[i]Type for REF_77

Name: REF_77 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_2 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])"])
[i]Type for v

Name: v Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
REF_77(-> v_2 (-> ['validators'])) = REF_77 - validatorSharesRemove_scope_0_1
[i]Type for REF_77

Name: REF_77 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_15(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_2 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
v_4 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_3 (-> ['validators'])"])
[i]Type for v

Name: v Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
v_6 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_2 (-> ['validators'])", "v_1 (-> ['validators'])", "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: disabledEpoch, totalShares, stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
REF_71(uint128) -> s_1 (-> ['v']).shares
[i]Type for REF_71

Name: REF_71 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_3 (-> ['v'])(DelegatedStaking.Staking) := ϕ(["s_1 (-> ['v'])"])
[i]Type for s

Name: s Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares, staked
Finance Type: undef
REF_71(-> s_3 (-> ['v'])) = REF_71 - validatorSharesRemove_1
[i]Type for REF_71

Name: REF_71 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_9 (-> ['v'])(DelegatedStaking.Validator) := ϕ(["s_3 (-> ['v'])"])
[i]Type for v

Name: v Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shares, staked
Finance Type: undef
REF_73(uint128) -> v_4 (-> ['validators']).commissionAvailableToRedeem
[i]Type for REF_73

Name: REF_73 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_183(uint128) = REF_73 (c)- commissionLeftOver_3
[i]Type for TMP_183

Name: TMP_183 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._transferFromContract(address,uint128)(beneficiary_1,amount_5)
function: _transferFromContract, function count: 45
to_1(address) := ϕ(['msg.sender', 'beneficiary_1'])
[i]Type for to

Name: to Function: _transferFromContract
Num: 
Den: 
Address: -999
Norm: u
LF: beneficiary
Value: u
Fields: 
Finance Type: undef
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'toTransfer_3', 'amount_5'])
[i]Type for amount

Name: amount Function: _transferFromContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
CQT_2(IERC20Upgradeable) := ϕ(['CQT_0'])
[i]Type for CQT

Name: CQT Function: _transferFromContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable,address,uint256), arguments:['CQT_2', 'to_1', 'amount_1'] 
to_1(address) := ϕ(['msg.sender', 'beneficiary_1'])
[i]Type for to

Name: to Function: _transferFromContract
Num: 
Den: 
Address: -999
Norm: u
LF: beneficiary
Value: u
Fields: 
Finance Type: undef
amount_1(uint128) := ϕ(['amount_1', 'amount_1', 'toTransfer_3', 'amount_5'])
[i]Type for amount

Name: amount Function: _transferFromContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
CQT_2(IERC20Upgradeable) := ϕ(['CQT_0'])
[i]Type for CQT

Name: CQT Function: _transferFromContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable,address,uint256), arguments:['CQT_2', 'to_1', 'amount_1'] 
REF_78(uint128) -> v_6 (-> ['validators']).disabledEpoch
[i]Type for REF_78

Name: REF_78 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_190(bool) = REF_78 == 0
[i]Type for TMP_190

Name: TMP_190 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_72(uint128) -> v_1 (-> ['validators']).totalShares
[i]Type for REF_72

Name: REF_72 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_3 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])"])
[i]Type for v

Name: v Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
REF_72(-> v_3 (-> ['validators'])) = REF_72 - validatorSharesRemove_1
[i]Type for REF_72

Name: REF_72 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_17(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_3 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
TMP_191(uint128) = INTERNAL_CALL, DelegatedStaking._tokensToShares(uint128,uint128)(amount_5,globalExchangeRate_20)
[i]Type for TMP_191

Name: TMP_191 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
globalSharesRemove_1(uint128) := TMP_191(uint128)
[i]Type for globalSharesRemove

Name: globalSharesRemove Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_74(uint128) -> v_4 (-> ['validators']).commissionAvailableToRedeem
[i]Type for REF_74

Name: REF_74 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_5 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_4 (-> ['validators'])"])
[i]Type for v

Name: v Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalShares, stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
REF_74 (->v_5 (-> ['validators'])) := commissionLeftOver_3(uint128)
[i]Type for REF_74

Name: REF_74 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_16(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_5 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
totalGlobalShares_20(uint128) = totalGlobalShares_19 - globalSharesRemove_1
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: -3000000000000000000
Fields: 
Finance Type: raw balance
REF_79(uint128) -> v_6 (-> ['validators']).globalShares
[i]Type for REF_79

Name: REF_79 Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
v_7 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_6 (-> ['validators'])"])
[i]Type for v

Name: v Function: _redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: globalShares, disabledEpoch, totalShares, stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
REF_79(-> v_7 (-> ['validators'])) = REF_79 - globalSharesRemove_1
[i]Type for REF_79

Name: REF_79 Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
validators_18(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_7 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: _redeemRewards
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
TMP_196(bool) = amount_1 > 0
[i]Type for TMP_196

Name: TMP_196 Function: redeemRewards
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_197(None) = SOLIDITY_CALL require(bool,string)(TMP_196,Amount is 0)
[i]Type for TMP_197

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._redeemRewards(uint128,address,uint128)(validatorId_1,beneficiary_1,amount_1)



addValidator
function: addValidator, function count: 46
divider_7(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validatorsN_3(uint128) := ϕ(['validatorsN_5', 'validatorsN_8', 'validatorsN_0'])
[i]Type for validatorsN

Name: validatorsN Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_19(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate
Finance Type: undef
MODIFIER_CALL, OwnableUpgradeable.onlyOwner()()
TMP_199(bool) = commissionRate_1 < divider_8
[i]Type for TMP_199

Name: TMP_199 Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_200(None) = SOLIDITY_CALL require(bool,string)(TMP_199,Rate must be less than 100%)
[i]Type for TMP_200

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
N_1(uint128) := validatorsN_4(uint128)
[i]Type for N

Name: N Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_82(DelegatedStaking.Validator) -> validators_20[N_1]
[i]Type for REF_82

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_83(address) -> REF_82._address
[i]Type for REF_83

Name: REF_83 Function: addValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_21(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_20'])
[i]Type for validators

Name: validators Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address
Finance Type: undef
REF_83 (->validators_21) := validator_1(address)
[i]Type for REF_83

Name: REF_83 Function: addValidator
Num: 
Den: 
Address: -998
Norm: u
LF: validator
Value: u
Fields: 
Finance Type: undef
REF_84(DelegatedStaking.Validator) -> validators_21[N_1]
[i]Type for REF_84

Name: validators Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_85(address) -> REF_84.operator
[i]Type for REF_85

Name: REF_85 Function: addValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_22(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_21'])
[i]Type for validators

Name: validators Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator
Finance Type: undef
REF_85 (->validators_22) := operator_1(address)
[i]Type for REF_85

Name: REF_85 Function: addValidator
Num: 
Den: 
Address: -997
Norm: u
LF: operator
Value: u
Fields: 
Finance Type: undef
REF_86(DelegatedStaking.Validator) -> validators_22[N_1]
[i]Type for REF_86

Name: validators Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_87(uint128) -> REF_86.commissionRate
[i]Type for REF_87

Name: REF_87 Function: addValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_23(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_22'])
[i]Type for validators

Name: validators Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
REF_87 (->validators_23) := commissionRate_1(uint128)
[i]Type for REF_87

Name: REF_87 Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
validatorsN_5(uint128) = validatorsN_4 + 1
[i]Type for validatorsN

Name: validatorsN Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
divider_7(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validatorsN_3(uint128) := ϕ(['validatorsN_5', 'validatorsN_8', 'validatorsN_0'])
[i]Type for validatorsN

Name: validatorsN Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
validators_19(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
MODIFIER_CALL, OwnableUpgradeable.onlyOwner()()
TMP_199(bool) = commissionRate_1 < divider_8
[i]Type for TMP_199

Name: TMP_199 Function: addValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_200(None) = SOLIDITY_CALL require(bool,string)(TMP_199,Rate must be less than 100%)
[i]Type for TMP_200

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
N_1(uint128) := validatorsN_4(uint128)
[i]Type for N

Name: N Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_82(DelegatedStaking.Validator) -> validators_20[N_1]
[i]Type for REF_82

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_83(address) -> REF_82._address
[i]Type for REF_83

Name: REF_83 Function: addValidator
Num: 
Den: 
Address: u
Norm: u
LF: validator
Value: u
Fields: 
Finance Type: undef
validators_21(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_20'])
[i]Type for validators

Name: validators Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
REF_83 (->validators_21) := validator_1(address)
[i]Type for REF_83

Name: REF_83 Function: addValidator
Num: 
Den: 
Address: -998
Norm: u
LF: validator
Value: u
Fields: 
Finance Type: undef
REF_84(DelegatedStaking.Validator) -> validators_21[N_1]
[i]Type for REF_84

Name: validators Function: addValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_85(address) -> REF_84.operator
[i]Type for REF_85

Name: REF_85 Function: addValidator
Num: 
Den: 
Address: u
Norm: u
LF: operator
Value: u
Fields: 
Finance Type: undef
validators_22(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_21'])
[i]Type for validators

Name: validators Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
REF_85 (->validators_22) := operator_1(address)
[i]Type for REF_85

Name: REF_85 Function: addValidator
Num: 
Den: 
Address: -997
Norm: u
LF: operator
Value: u
Fields: 
Finance Type: undef
REF_86(DelegatedStaking.Validator) -> validators_22[N_1]
[i]Type for REF_86

Name: validators Function: addValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_87(uint128) -> REF_86.commissionRate
[i]Type for REF_87

Name: REF_87 Function: addValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_23(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_22'])
[i]Type for validators

Name: validators Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
REF_87 (->validators_23) := commissionRate_1(uint128)
[i]Type for REF_87

Name: REF_87 Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
validatorsN_5(uint128) = validatorsN_4 + 1
[i]Type for validatorsN

Name: validatorsN Function: addValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef



disableValidator
function: disableValidator, function count: 47
endEpoch_12(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: disableValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
totalGlobalShares_21(uint128) := ϕ(['totalGlobalShares_25', 'totalGlobalShares_9', 'totalGlobalShares_11', 'totalGlobalShares_7', 'totalGlobalShares_18', 'totalGlobalShares_0'])
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: disableValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: -3000000000000000000
Fields: 
Finance Type: raw balance
validators_24(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: disableValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
REF_88(DelegatedStaking.Validator) -> validators_24[validatorId_1]
[i]Type for REF_88

Name: validators Function: disableValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_1 (-> ['validators'])(DelegatedStaking.Validator) := REF_88(DelegatedStaking.Validator)
[i]Type for v

Name: v Function: disableValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_89(uint128) -> v_1 (-> ['validators']).disabledEpoch
[i]Type for REF_89

Name: REF_89 Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_203(bool) = REF_89 == 0
[i]Type for TMP_203

Name: TMP_203 Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_204(None) = SOLIDITY_CALL require(bool,string)(TMP_203,Validator is already disabled)
[i]Type for TMP_204

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_90(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_90

Name: REF_90 Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_205(bool) = REF_90 == msg.sender
[i]Type for TMP_205

Name: TMP_205 Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_206(address) = INTERNAL_CALL, OwnableUpgradeable.owner()()
[i]Type for TMP_206

Name: TMP_206 Function: disableValidator
Num: -1
Den: -1
Address: 1
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
TMP_207(bool) = msg.sender == TMP_206
[i]Type for TMP_207

Name: TMP_207 Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_208(bool) = TMP_205 || TMP_207
[i]Type for TMP_208

Name: TMP_208 Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_209(None) = SOLIDITY_CALL require(bool,string)(TMP_208,Caller is not owner or validator)
[i]Type for TMP_209

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateGlobalExchangeRate()()
INTERNAL_CALL, DelegatedStaking._updateValidator(DelegatedStaking.Validator)(v_1 (-> ['validators']))
TMP_213 = CONVERT block.number to uint128
[i]Type for TMP_213

Name: TMP_213 Function: disableValidator
Num: -1
Den: -1
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_214(bool) = TMP_213 < endEpoch_15
[i]Type for TMP_214

Name: TMP_214 Function: disableValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_92(uint128) -> v_1 (-> ['validators']).disabledEpoch
[i]Type for REF_92

Name: REF_92 Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_215 = CONVERT block.number to uint128
[i]Type for TMP_215

Name: TMP_215 Function: disableValidator
Num: -1
Den: -1
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
v_3 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])"])
[i]Type for v

Name: v Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: disabledEpoch, _address
Finance Type: undef
REF_92 (->v_3 (-> ['validators'])) := TMP_215(uint128)
[i]Type for REF_92

Name: REF_92 Function: disableValidator
Num: -1
Den: -1
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
validators_26(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_3 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: disableValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
REF_93(uint128) -> v_1 (-> ['validators']).disabledEpoch
[i]Type for REF_93

Name: REF_93 Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_2 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])"])
[i]Type for v

Name: v Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: disabledEpoch, _address
Finance Type: undef
REF_93 (->v_2 (-> ['validators'])) := endEpoch_15(uint128)
[i]Type for REF_93

Name: REF_93 Function: disableValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
validators_25(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_2 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: disableValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(["v_2 (-> ['validators'])", "v_3 (-> ['validators'])"])
[i]Type for v

Name: v Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: disabledEpoch, _address
Finance Type: undef
REF_91(uint128) -> v_4 (-> []).globalShares
[i]Type for REF_91

Name: REF_91 Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalGlobalShares_25(uint128) = totalGlobalShares_24 - REF_91
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: disableValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: -3000000000000000000
Fields: 
Finance Type: raw balance
endEpoch_12(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: disableValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
totalGlobalShares_21(uint128) := ϕ(['totalGlobalShares_25', 'totalGlobalShares_9', 'totalGlobalShares_11', 'totalGlobalShares_7', 'totalGlobalShares_18', 'totalGlobalShares_0'])
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: disableValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: -3000000000000000000
Fields: 
Finance Type: raw balance
validators_24(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: disableValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
REF_88(DelegatedStaking.Validator) -> validators_24[validatorId_1]
[i]Type for REF_88

Name: validators Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_1 (-> ['validators'])(DelegatedStaking.Validator) := REF_88(DelegatedStaking.Validator)
[i]Type for v

Name: v Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: disabledEpoch, _address
Finance Type: undef
REF_89(uint128) -> v_1 (-> ['validators']).disabledEpoch
[i]Type for REF_89

Name: REF_89 Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_203(bool) = REF_89 == 0
[i]Type for TMP_203

Name: TMP_203 Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_204(None) = SOLIDITY_CALL require(bool,string)(TMP_203,Validator is already disabled)
[i]Type for TMP_204

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_90(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_90

Name: REF_90 Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_205(bool) = REF_90 == msg.sender
[i]Type for TMP_205

Name: TMP_205 Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_206(address) = INTERNAL_CALL, OwnableUpgradeable.owner()()
[i]Type for TMP_206

Name: TMP_206 Function: disableValidator
Num: -1
Den: -1
Address: 1
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
TMP_207(bool) = msg.sender == TMP_206
[i]Type for TMP_207

Name: TMP_207 Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_208(bool) = TMP_205 || TMP_207
[i]Type for TMP_208

Name: TMP_208 Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_209(None) = SOLIDITY_CALL require(bool,string)(TMP_208,Caller is not owner or validator)
[i]Type for TMP_209

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateGlobalExchangeRate()()
INTERNAL_CALL, DelegatedStaking._updateValidator(DelegatedStaking.Validator)(v_1 (-> ['validators']))
function: _updateValidator, function count: 48
v_1 (-> [])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_1 (-> ['validators'])", "v_1 (-> ['validators'])", 'REF_94', "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, commissionAvailableToRedeem, totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
divider_2(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_4(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_2(uint128) -> v_1 (-> []).disabledEpoch
[i]Type for REF_2

Name: REF_2 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = REF_2 == 0
[i]Type for TMP_80

Name: TMP_80 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_3

Name: REF_3 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = REF_3 == 0
[i]Type for TMP_81

Name: TMP_81 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_2 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, delegated, stakings, exchangeRate, commissionAvailableToRedeem, disabledEpoch, _address
Finance Type: undef
REF_4 (->v_2 (-> [])) := globalExchangeRate_4(uint128)
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_5 (-> [])(DelegatedStaking.Validator) := ϕ(['v_2 (-> [])', 'v_4 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, disabledEpoch, delegated, stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
REF_5(uint128) -> v_1 (-> []).lastUpdateGlobalRate
[i]Type for REF_5

Name: REF_5 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(uint128) = globalExchangeRate_4 - REF_5
[i]Type for TMP_82

Name: TMP_82 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rateDifference_1(uint128) := TMP_82(uint128)
[i]Type for rateDifference

Name: rateDifference Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_6(uint128) -> v_1 (-> []).globalShares
[i]Type for REF_6

Name: REF_6 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_6,rateDifference_1)
[i]Type for TMP_83

Name: TMP_83 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
tokensGivenToValidator_1(uint128) := TMP_83(uint128)
[i]Type for tokensGivenToValidator

Name: tokensGivenToValidator Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_11(uint128) -> v_5 (-> []).lastUpdateGlobalRate
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_6 (-> [])(DelegatedStaking.Validator) := ϕ(['v_5 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, disabledEpoch, delegated, stakings, exchangeRate, _address, commissionAvailableToRedeem
Finance Type: undef
REF_11 (->v_6 (-> [])) := globalExchangeRate_5(uint128)
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_84 = CONVERT tokensGivenToValidator_1 to uint256
[i]Type for TMP_84

Name: TMP_84 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_7(uint128) -> v_1 (-> []).commissionRate
[i]Type for REF_7

Name: REF_7 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT REF_7 to uint256
[i]Type for TMP_85

Name: TMP_85 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86(uint256) = TMP_84 * TMP_85
[i]Type for TMP_86

Name: TMP_86 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_87(uint256) = TMP_86 / divider_3
[i]Type for TMP_87

Name: TMP_87 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_88 = CONVERT TMP_87 to uint128
[i]Type for TMP_88

Name: TMP_88 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_88(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_8(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_89(uint128) = tokensGivenToValidator_1 (c)- commissionPaid_1
[i]Type for TMP_89

Name: TMP_89 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_90 = CONVERT TMP_89 to uint256
[i]Type for TMP_90

Name: TMP_90 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_91(uint256) = TMP_90 (c)* divider_3
[i]Type for TMP_91

Name: TMP_91 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_9(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_9

Name: REF_9 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(uint256) = TMP_91 (c)/ REF_9
[i]Type for TMP_92

Name: TMP_92 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_93 = CONVERT TMP_92 to uint128
[i]Type for TMP_93

Name: TMP_93 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, delegated, stakings, exchangeRate, commissionAvailableToRedeem, disabledEpoch, _address
Finance Type: undef
REF_8(-> v_3 (-> [])) = REF_8 (c)+ TMP_93
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_10(uint128) -> v_3 (-> []).commissionAvailableToRedeem
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(['v_3 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, delegated, stakings, exchangeRate, commissionAvailableToRedeem, disabledEpoch, _address
Finance Type: undef
REF_10(-> v_4 (-> [])) = REF_10 + commissionPaid_1
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_1 (-> [])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_1 (-> ['validators'])", "v_1 (-> ['validators'])", 'REF_94', "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, commissionAvailableToRedeem, totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
divider_2(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_4(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_2(uint128) -> v_1 (-> []).disabledEpoch
[i]Type for REF_2

Name: REF_2 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = REF_2 == 0
[i]Type for TMP_80

Name: TMP_80 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_3

Name: REF_3 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = REF_3 == 0
[i]Type for TMP_81

Name: TMP_81 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_2 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, delegated, stakings, exchangeRate, commissionAvailableToRedeem, disabledEpoch, _address
Finance Type: undef
REF_4 (->v_2 (-> [])) := globalExchangeRate_4(uint128)
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_5 (-> [])(DelegatedStaking.Validator) := ϕ(['v_2 (-> [])', 'v_4 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, delegated, stakings, exchangeRate, commissionAvailableToRedeem, disabledEpoch, _address
Finance Type: undef
REF_5(uint128) -> v_1 (-> []).lastUpdateGlobalRate
[i]Type for REF_5

Name: REF_5 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(uint128) = globalExchangeRate_4 - REF_5
[i]Type for TMP_82

Name: TMP_82 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rateDifference_1(uint128) := TMP_82(uint128)
[i]Type for rateDifference

Name: rateDifference Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_6(uint128) -> v_1 (-> []).globalShares
[i]Type for REF_6

Name: REF_6 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_6,rateDifference_1)
[i]Type for TMP_83

Name: TMP_83 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
tokensGivenToValidator_1(uint128) := TMP_83(uint128)
[i]Type for tokensGivenToValidator

Name: tokensGivenToValidator Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_11(uint128) -> v_5 (-> []).lastUpdateGlobalRate
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_6 (-> [])(DelegatedStaking.Validator) := ϕ(['v_5 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, delegated, stakings, exchangeRate, commissionAvailableToRedeem, disabledEpoch, _address
Finance Type: undef
REF_11 (->v_6 (-> [])) := globalExchangeRate_5(uint128)
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_84 = CONVERT tokensGivenToValidator_1 to uint256
[i]Type for TMP_84

Name: TMP_84 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_7(uint128) -> v_1 (-> []).commissionRate
[i]Type for REF_7

Name: REF_7 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT REF_7 to uint256
[i]Type for TMP_85

Name: TMP_85 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86(uint256) = TMP_84 * TMP_85
[i]Type for TMP_86

Name: TMP_86 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_87(uint256) = TMP_86 / divider_3
[i]Type for TMP_87

Name: TMP_87 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_88 = CONVERT TMP_87 to uint128
[i]Type for TMP_88

Name: TMP_88 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_88(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_8(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_89(uint128) = tokensGivenToValidator_1 (c)- commissionPaid_1
[i]Type for TMP_89

Name: TMP_89 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_90 = CONVERT TMP_89 to uint256
[i]Type for TMP_90

Name: TMP_90 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_91(uint256) = TMP_90 (c)* divider_3
[i]Type for TMP_91

Name: TMP_91 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_9(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_9

Name: REF_9 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(uint256) = TMP_91 (c)/ REF_9
[i]Type for TMP_92

Name: TMP_92 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_93 = CONVERT TMP_92 to uint128
[i]Type for TMP_93

Name: TMP_93 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, delegated, stakings, exchangeRate, commissionAvailableToRedeem, disabledEpoch, _address
Finance Type: undef
REF_8(-> v_3 (-> [])) = REF_8 (c)+ TMP_93
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_10(uint128) -> v_3 (-> []).commissionAvailableToRedeem
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(['v_3 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, delegated, stakings, exchangeRate, commissionAvailableToRedeem, disabledEpoch, _address
Finance Type: undef
REF_10(-> v_4 (-> [])) = REF_10 + commissionPaid_1
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
TMP_213 = CONVERT block.number to uint128
[i]Type for TMP_213

Name: TMP_213 Function: disableValidator
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_214(bool) = TMP_213 < endEpoch_15
[i]Type for TMP_214

Name: TMP_214 Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_92(uint128) -> v_1 (-> ['validators']).disabledEpoch
[i]Type for REF_92

Name: REF_92 Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_215 = CONVERT block.number to uint128
[i]Type for TMP_215

Name: TMP_215 Function: disableValidator
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
v_3 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])"])
[i]Type for v

Name: v Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: disabledEpoch, _address
Finance Type: undef
REF_92 (->v_3 (-> ['validators'])) := TMP_215(uint128)
[i]Type for REF_92

Name: REF_92 Function: disableValidator
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
validators_26(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_3 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: disableValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
REF_93(uint128) -> v_1 (-> ['validators']).disabledEpoch
[i]Type for REF_93

Name: REF_93 Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
v_2 (-> ['validators'])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])"])
[i]Type for v

Name: v Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: disabledEpoch, _address
Finance Type: undef
REF_93 (->v_2 (-> ['validators'])) := endEpoch_15(uint128)
[i]Type for REF_93

Name: REF_93 Function: disableValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
validators_25(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["v_2 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: disableValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(["v_2 (-> ['validators'])", "v_3 (-> ['validators'])"])
[i]Type for v

Name: v Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: globalShares, disabledEpoch, _address
Finance Type: undef
REF_91(uint128) -> v_4 (-> []).globalShares
[i]Type for REF_91

Name: REF_91 Function: disableValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalGlobalShares_25(uint128) = totalGlobalShares_24 - REF_91
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: disableValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: -3000000000000000000
Fields: 
Finance Type: raw balance



setAllocatedTokensPerEpoch
function: setAllocatedTokensPerEpoch, function count: 49
rewardsLocked_9(uint128) := ϕ(['rewardsLocked_10', 'rewardsLocked_2', 'rewardsLocked_5', 'rewardsLocked_0', 'rewardsLocked_3', 'rewardsLocked_8', 'rewardsLocked_6'])
[i]Type for rewardsLocked

Name: rewardsLocked Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
endEpoch_16(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
MODIFIER_CALL, OwnableUpgradeable.onlyOwner()()
TMP_216(bool) = amount_1 > 0
[i]Type for TMP_216

Name: TMP_216 Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,Amount is 0)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_218(bool) = endEpoch_17 != 0
[i]Type for TMP_218

Name: TMP_218 Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateGlobalExchangeRate()()
TMP_232 = CONVERT block.number to uint128
[i]Type for TMP_232

Name: TMP_232 Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_233(bool) = endEpoch_18 > TMP_232
[i]Type for TMP_233

Name: TMP_233 Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_227(uint128) = rewardsLocked_10 (c)% amount_1
[i]Type for TMP_227

Name: TMP_227 Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toTransfer_2(uint128) := TMP_227(uint128)
[i]Type for toTransfer

Name: toTransfer Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
epochs_2(uint128) := 0(uint256)
[i]Type for epochs

Name: epochs Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_234 = CONVERT block.number to uint128
[i]Type for TMP_234

Name: TMP_234 Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_235(uint128) = endEpoch_18 (c)- TMP_234
[i]Type for TMP_235

Name: TMP_235 Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
epochs_1(uint128) := TMP_235(uint128)
[i]Type for epochs

Name: epochs Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
toTransfer_3(uint128) := ϕ(['toTransfer_0', 'toTransfer_1', 'toTransfer_2'])
[i]Type for toTransfer

Name: toTransfer Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
allocatedTokensPerEpoch_9(uint128) := amount_1(uint128)
[i]Type for allocatedTokensPerEpoch

Name: allocatedTokensPerEpoch Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
epochs_3(uint128) := ϕ(['epochs_1', 'epochs_2'])
[i]Type for epochs

Name: epochs Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_229(bool) = toTransfer_3 > 0
[i]Type for TMP_229

Name: TMP_229 Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_220(uint128) = allocatedTokensPerEpoch_8 (c)* epochs_3
[i]Type for TMP_220

Name: TMP_220 Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
futureRewards_1(uint128) := TMP_220(uint128)
[i]Type for futureRewards

Name: futureRewards Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
INTERNAL_CALL, DelegatedStaking._transferFromContract(address,uint128)(msg.sender,toTransfer_3)
TMP_221(uint128) = futureRewards_1 (c)/ amount_1
[i]Type for TMP_221

Name: TMP_221 Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
addEpochs_1(uint128) := TMP_221(uint128)
[i]Type for addEpochs

Name: addEpochs Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_222(uint128) = futureRewards_1 (c)% amount_1
[i]Type for TMP_222

Name: TMP_222 Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toTransfer_1(uint128) := TMP_222(uint128)
[i]Type for toTransfer

Name: toTransfer Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_223(bool) = addEpochs_1 != 0
[i]Type for TMP_223

Name: TMP_223 Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,This amount will end the program)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_225 = CONVERT block.number to uint128
[i]Type for TMP_225

Name: TMP_225 Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_226(uint128) = TMP_225 + addEpochs_1
[i]Type for TMP_226

Name: TMP_226 Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
endEpoch_19(uint128) := TMP_226(uint128)
[i]Type for endEpoch

Name: endEpoch Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
rewardsLocked_9(uint128) := ϕ(['rewardsLocked_10', 'rewardsLocked_2', 'rewardsLocked_5', 'rewardsLocked_0', 'rewardsLocked_3', 'rewardsLocked_8', 'rewardsLocked_6'])
[i]Type for rewardsLocked

Name: rewardsLocked Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
endEpoch_16(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
MODIFIER_CALL, OwnableUpgradeable.onlyOwner()()
TMP_216(bool) = amount_1 > 0
[i]Type for TMP_216

Name: TMP_216 Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,Amount is 0)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_218(bool) = endEpoch_17 != 0
[i]Type for TMP_218

Name: TMP_218 Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateGlobalExchangeRate()()
TMP_232 = CONVERT block.number to uint128
[i]Type for TMP_232

Name: TMP_232 Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_233(bool) = endEpoch_18 > TMP_232
[i]Type for TMP_233

Name: TMP_233 Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_227(uint128) = rewardsLocked_10 (c)% amount_1
[i]Type for TMP_227

Name: TMP_227 Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toTransfer_2(uint128) := TMP_227(uint128)
[i]Type for toTransfer

Name: toTransfer Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
epochs_2(uint128) := 0(uint256)
[i]Type for epochs

Name: epochs Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_234 = CONVERT block.number to uint128
[i]Type for TMP_234

Name: TMP_234 Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_235(uint128) = endEpoch_18 (c)- TMP_234
[i]Type for TMP_235

Name: TMP_235 Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
epochs_1(uint128) := TMP_235(uint128)
[i]Type for epochs

Name: epochs Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
toTransfer_3(uint128) := ϕ(['toTransfer_0', 'toTransfer_1', 'toTransfer_2'])
[i]Type for toTransfer

Name: toTransfer Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
allocatedTokensPerEpoch_9(uint128) := amount_1(uint128)
[i]Type for allocatedTokensPerEpoch

Name: allocatedTokensPerEpoch Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
epochs_3(uint128) := ϕ(['epochs_1', 'epochs_2'])
[i]Type for epochs

Name: epochs Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_229(bool) = toTransfer_3 > 0
[i]Type for TMP_229

Name: TMP_229 Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_220(uint128) = allocatedTokensPerEpoch_8 (c)* epochs_3
[i]Type for TMP_220

Name: TMP_220 Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
futureRewards_1(uint128) := TMP_220(uint128)
[i]Type for futureRewards

Name: futureRewards Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
INTERNAL_CALL, DelegatedStaking._transferFromContract(address,uint128)(msg.sender,toTransfer_3)
TMP_221(uint128) = futureRewards_1 (c)/ amount_1
[i]Type for TMP_221

Name: TMP_221 Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
addEpochs_1(uint128) := TMP_221(uint128)
[i]Type for addEpochs

Name: addEpochs Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_222(uint128) = futureRewards_1 (c)% amount_1
[i]Type for TMP_222

Name: TMP_222 Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toTransfer_1(uint128) := TMP_222(uint128)
[i]Type for toTransfer

Name: toTransfer Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_223(bool) = addEpochs_1 != 0
[i]Type for TMP_223

Name: TMP_223 Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,This amount will end the program)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_225 = CONVERT block.number to uint128
[i]Type for TMP_225

Name: TMP_225 Function: setAllocatedTokensPerEpoch
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_226(uint128) = TMP_225 + addEpochs_1
[i]Type for TMP_226

Name: TMP_226 Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
endEpoch_19(uint128) := TMP_226(uint128)
[i]Type for endEpoch

Name: endEpoch Function: setAllocatedTokensPerEpoch
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate



setMaxCapMultiplier
function: setMaxCapMultiplier, function count: 50
MODIFIER_CALL, OwnableUpgradeable.onlyOwner()()
TMP_236(bool) = amount_1 > 0
[i]Type for TMP_236

Name: TMP_236 Function: setMaxCapMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_237(None) = SOLIDITY_CALL require(bool,string)(TMP_236,Must be greater than 0)
[i]Type for TMP_237

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxCapMultiplier_7(uint128) := amount_1(uint128)
[i]Type for maxCapMultiplier

Name: maxCapMultiplier Function: setMaxCapMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, OwnableUpgradeable.onlyOwner()()
TMP_236(bool) = amount_1 > 0
[i]Type for TMP_236

Name: TMP_236 Function: setMaxCapMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_237(None) = SOLIDITY_CALL require(bool,string)(TMP_236,Must be greater than 0)
[i]Type for TMP_237

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxCapMultiplier_7(uint128) := amount_1(uint128)
[i]Type for maxCapMultiplier

Name: maxCapMultiplier Function: setMaxCapMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef



setValidatorCommissionRate
function: setValidatorCommissionRate, function count: 51
divider_9(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: setValidatorCommissionRate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_27(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: setValidatorCommissionRate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
MODIFIER_CALL, OwnableUpgradeable.onlyOwner()()
TMP_240(bool) = amount_1 < divider_10
[i]Type for TMP_240

Name: TMP_240 Function: setValidatorCommissionRate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,Rate must be less than 100%)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateGlobalExchangeRate()()
REF_94(DelegatedStaking.Validator) -> validators_29[validatorId_1]
[i]Type for REF_94

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateValidator(DelegatedStaking.Validator)(REF_94)
REF_95(DelegatedStaking.Validator) -> validators_30[validatorId_1]
[i]Type for REF_95

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_96(uint128) -> REF_95.commissionRate
[i]Type for REF_96

Name: REF_96 Function: setValidatorCommissionRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_31(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_30'])
[i]Type for validators

Name: validators Function: setValidatorCommissionRate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
REF_96 (->validators_31) := amount_1(uint128)
[i]Type for REF_96

Name: REF_96 Function: setValidatorCommissionRate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
divider_9(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: setValidatorCommissionRate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_27(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: setValidatorCommissionRate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
MODIFIER_CALL, OwnableUpgradeable.onlyOwner()()
TMP_240(bool) = amount_1 < divider_10
[i]Type for TMP_240

Name: TMP_240 Function: setValidatorCommissionRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,Rate must be less than 100%)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateGlobalExchangeRate()()
REF_94(DelegatedStaking.Validator) -> validators_29[validatorId_1]
[i]Type for REF_94

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._updateValidator(DelegatedStaking.Validator)(REF_94)
function: _updateValidator, function count: 52
v_1 (-> [])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_1 (-> ['validators'])", "v_1 (-> ['validators'])", 'REF_94', "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, commissionAvailableToRedeem, totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
divider_2(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_4(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_2(uint128) -> v_1 (-> []).disabledEpoch
[i]Type for REF_2

Name: REF_2 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = REF_2 == 0
[i]Type for TMP_80

Name: TMP_80 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_3

Name: REF_3 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = REF_3 == 0
[i]Type for TMP_81

Name: TMP_81 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_2 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, delegated, stakings, exchangeRate, commissionAvailableToRedeem, disabledEpoch, _address
Finance Type: undef
REF_4 (->v_2 (-> [])) := globalExchangeRate_4(uint128)
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_5 (-> [])(DelegatedStaking.Validator) := ϕ(['v_2 (-> [])', 'v_4 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, delegated, stakings, exchangeRate, commissionAvailableToRedeem, disabledEpoch, _address
Finance Type: undef
REF_5(uint128) -> v_1 (-> []).lastUpdateGlobalRate
[i]Type for REF_5

Name: REF_5 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(uint128) = globalExchangeRate_4 - REF_5
[i]Type for TMP_82

Name: TMP_82 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rateDifference_1(uint128) := TMP_82(uint128)
[i]Type for rateDifference

Name: rateDifference Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_6(uint128) -> v_1 (-> []).globalShares
[i]Type for REF_6

Name: REF_6 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_6,rateDifference_1)
[i]Type for TMP_83

Name: TMP_83 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
tokensGivenToValidator_1(uint128) := TMP_83(uint128)
[i]Type for tokensGivenToValidator

Name: tokensGivenToValidator Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_11(uint128) -> v_5 (-> []).lastUpdateGlobalRate
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_6 (-> [])(DelegatedStaking.Validator) := ϕ(['v_5 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, delegated, stakings, exchangeRate, commissionAvailableToRedeem, disabledEpoch, _address
Finance Type: undef
REF_11 (->v_6 (-> [])) := globalExchangeRate_5(uint128)
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_84 = CONVERT tokensGivenToValidator_1 to uint256
[i]Type for TMP_84

Name: TMP_84 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_7(uint128) -> v_1 (-> []).commissionRate
[i]Type for REF_7

Name: REF_7 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT REF_7 to uint256
[i]Type for TMP_85

Name: TMP_85 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86(uint256) = TMP_84 * TMP_85
[i]Type for TMP_86

Name: TMP_86 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_87(uint256) = TMP_86 / divider_3
[i]Type for TMP_87

Name: TMP_87 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_88 = CONVERT TMP_87 to uint128
[i]Type for TMP_88

Name: TMP_88 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_88(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_8(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_89(uint128) = tokensGivenToValidator_1 (c)- commissionPaid_1
[i]Type for TMP_89

Name: TMP_89 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_90 = CONVERT TMP_89 to uint256
[i]Type for TMP_90

Name: TMP_90 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_91(uint256) = TMP_90 (c)* divider_3
[i]Type for TMP_91

Name: TMP_91 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_9(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_9

Name: REF_9 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(uint256) = TMP_91 (c)/ REF_9
[i]Type for TMP_92

Name: TMP_92 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_93 = CONVERT TMP_92 to uint128
[i]Type for TMP_93

Name: TMP_93 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, delegated, stakings, exchangeRate, commissionAvailableToRedeem, disabledEpoch, _address
Finance Type: undef
REF_8(-> v_3 (-> [])) = REF_8 (c)+ TMP_93
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_10(uint128) -> v_3 (-> []).commissionAvailableToRedeem
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(['v_3 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, delegated, stakings, exchangeRate, commissionAvailableToRedeem, disabledEpoch, _address
Finance Type: undef
REF_10(-> v_4 (-> [])) = REF_10 + commissionPaid_1
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_1 (-> [])(DelegatedStaking.Validator) := ϕ(["v_1 (-> ['validators'])", "v_1 (-> ['validators'])", "v_1 (-> ['validators'])", 'REF_94', "v_5 (-> ['validators'])"])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, commissionAvailableToRedeem, totalShares, globalShares, stakings, _address, exchangeRate, disabledEpoch, delegated
Finance Type: undef
divider_2(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_4(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_2(uint128) -> v_1 (-> []).disabledEpoch
[i]Type for REF_2

Name: REF_2 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = REF_2 == 0
[i]Type for TMP_80

Name: TMP_80 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_3

Name: REF_3 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = REF_3 == 0
[i]Type for TMP_81

Name: TMP_81 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_2 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, delegated, stakings, exchangeRate, commissionAvailableToRedeem, disabledEpoch, _address
Finance Type: undef
REF_4 (->v_2 (-> [])) := globalExchangeRate_4(uint128)
[i]Type for REF_4

Name: REF_4 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_5 (-> [])(DelegatedStaking.Validator) := ϕ(['v_2 (-> [])', 'v_4 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, delegated, stakings, exchangeRate, commissionAvailableToRedeem, disabledEpoch, _address
Finance Type: undef
REF_5(uint128) -> v_1 (-> []).lastUpdateGlobalRate
[i]Type for REF_5

Name: REF_5 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(uint128) = globalExchangeRate_4 - REF_5
[i]Type for TMP_82

Name: TMP_82 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rateDifference_1(uint128) := TMP_82(uint128)
[i]Type for rateDifference

Name: rateDifference Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_6(uint128) -> v_1 (-> []).globalShares
[i]Type for REF_6

Name: REF_6 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_6,rateDifference_1)
[i]Type for TMP_83

Name: TMP_83 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
tokensGivenToValidator_1(uint128) := TMP_83(uint128)
[i]Type for tokensGivenToValidator

Name: tokensGivenToValidator Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_11(uint128) -> v_5 (-> []).lastUpdateGlobalRate
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
v_6 (-> [])(DelegatedStaking.Validator) := ϕ(['v_5 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, delegated, stakings, exchangeRate, commissionAvailableToRedeem, disabledEpoch, _address
Finance Type: undef
REF_11 (->v_6 (-> [])) := globalExchangeRate_5(uint128)
[i]Type for REF_11

Name: REF_11 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_84 = CONVERT tokensGivenToValidator_1 to uint256
[i]Type for TMP_84

Name: TMP_84 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_7(uint128) -> v_1 (-> []).commissionRate
[i]Type for REF_7

Name: REF_7 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT REF_7 to uint256
[i]Type for TMP_85

Name: TMP_85 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86(uint256) = TMP_84 * TMP_85
[i]Type for TMP_86

Name: TMP_86 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_87(uint256) = TMP_86 / divider_3
[i]Type for TMP_87

Name: TMP_87 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_88 = CONVERT TMP_87 to uint128
[i]Type for TMP_88

Name: TMP_88 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_88(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_8(uint128) -> v_1 (-> []).exchangeRate
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_89(uint128) = tokensGivenToValidator_1 (c)- commissionPaid_1
[i]Type for TMP_89

Name: TMP_89 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_90 = CONVERT TMP_89 to uint256
[i]Type for TMP_90

Name: TMP_90 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_91(uint256) = TMP_90 (c)* divider_3
[i]Type for TMP_91

Name: TMP_91 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_9(uint128) -> v_1 (-> []).totalShares
[i]Type for REF_9

Name: REF_9 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(uint256) = TMP_91 (c)/ REF_9
[i]Type for TMP_92

Name: TMP_92 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_93 = CONVERT TMP_92 to uint128
[i]Type for TMP_93

Name: TMP_93 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
v_3 (-> [])(DelegatedStaking.Validator) := ϕ(['v_1 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, delegated, stakings, exchangeRate, commissionAvailableToRedeem, disabledEpoch, _address
Finance Type: undef
REF_8(-> v_3 (-> [])) = REF_8 (c)+ TMP_93
[i]Type for REF_8

Name: REF_8 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_10(uint128) -> v_3 (-> []).commissionAvailableToRedeem
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
v_4 (-> [])(DelegatedStaking.Validator) := ϕ(['v_3 (-> [])'])
[i]Type for v

Name: v Function: _updateValidator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastUpdateGlobalRate, commissionRate, staked, totalShares, globalShares, delegated, stakings, exchangeRate, commissionAvailableToRedeem, disabledEpoch, _address
Finance Type: undef
REF_10(-> v_4 (-> [])) = REF_10 + commissionPaid_1
[i]Type for REF_10

Name: REF_10 Function: _updateValidator
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 6000000000000000000
Fields: 
Finance Type: undef
REF_95(DelegatedStaking.Validator) -> validators_30[validatorId_1]
[i]Type for REF_95

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_96(uint128) -> REF_95.commissionRate
[i]Type for REF_96

Name: REF_96 Function: setValidatorCommissionRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_31(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_30'])
[i]Type for validators

Name: validators Function: setValidatorCommissionRate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
REF_96 (->validators_31) := amount_1(uint128)
[i]Type for REF_96

Name: REF_96 Function: setValidatorCommissionRate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef



redelegateUnstaked
function: redelegateUnstaked, function count: 53
validators_32(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: redelegateUnstaked
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
REF_97(DelegatedStaking.Validator) -> validators_32[oldValidatorId_1]
[i]Type for REF_97

Name: validators Function: redelegateUnstaked
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_98(uint128) -> REF_97.disabledEpoch
[i]Type for REF_98

Name: REF_98 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_248(bool) = REF_98 != 0
[i]Type for TMP_248

Name: TMP_248 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_249(None) = SOLIDITY_CALL require(bool,string)(TMP_248,Validator is not disabled)
[i]Type for TMP_249

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_99(DelegatedStaking.Validator) -> validators_32[oldValidatorId_1]
[i]Type for REF_99

Name: validators Function: redelegateUnstaked
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_100(address) -> REF_99._address
[i]Type for REF_100

Name: REF_100 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_250(bool) = REF_100 != msg.sender
[i]Type for TMP_250

Name: TMP_250 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_251(None) = SOLIDITY_CALL require(bool,string)(TMP_250,Validator cannot redelegate)
[i]Type for TMP_251

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_101(DelegatedStaking.Validator) -> validators_32[oldValidatorId_1]
[i]Type for REF_101

Name: validators Function: redelegateUnstaked
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_102(mapping(address => DelegatedStaking.Unstaking[])) -> REF_101.unstakings
[i]Type for REF_102

Name: REF_102 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_103(DelegatedStaking.Unstaking[]) -> REF_102[msg.sender]
[i]Type for REF_103

Name: REF_102 Function: redelegateUnstaked
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_104(DelegatedStaking.Unstaking) -> REF_103[unstakingId_1]
[i]Type for REF_104

Name: REF_102 Function: redelegateUnstaked
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
us_1 (-> ['validators'])(DelegatedStaking.Unstaking) := REF_104(DelegatedStaking.Unstaking)
[i]Type for us

Name: us Function: redelegateUnstaked
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_105(uint128) -> us_1 (-> ['validators']).amount
[i]Type for REF_105

Name: REF_105 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_252(bool) = REF_105 >= amount_1
[i]Type for TMP_252

Name: TMP_252 Function: redelegateUnstaked
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_253(None) = SOLIDITY_CALL require(bool,string)(TMP_252,Unstaking has less tokens)
[i]Type for TMP_253

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._stake(uint128,uint128,bool)(newValidatorId_1,amount_1,False)
REF_106(uint128) -> us_1 (-> ['validators']).amount
[i]Type for REF_106

Name: REF_106 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
us_2 (-> ['validators'])(DelegatedStaking.Unstaking) := ϕ(["us_1 (-> ['validators'])"])
[i]Type for us

Name: us Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
REF_106(-> us_2 (-> ['validators'])) = REF_106 - amount_1
[i]Type for REF_106

Name: REF_106 Function: redelegateUnstaked
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_33(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["us_2 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: redelegateUnstaked
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
REF_107(uint128) -> us_2 (-> ['validators']).amount
[i]Type for REF_107

Name: REF_107 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_255(bool) = REF_107 == 0
[i]Type for TMP_255

Name: TMP_255 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_108(uint128) -> us_2 (-> ['validators']).coolDownEnd
[i]Type for REF_108

Name: REF_108 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
us_3 (-> ['validators'])(DelegatedStaking.Unstaking) := ϕ(["us_2 (-> ['validators'])"])
[i]Type for us

Name: us Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: coolDownEnd, amount
Finance Type: undef
REF_108 (->us_3 (-> ['validators'])) := 0(uint256)
[i]Type for REF_108

Name: REF_108 Function: redelegateUnstaked
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
validators_34(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["us_3 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: redelegateUnstaked
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
validators_32(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: redelegateUnstaked
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: disabledEpoch, unstakings, exchangeRate, _address, operator, commissionRate
Finance Type: undef
REF_97(DelegatedStaking.Validator) -> validators_32[oldValidatorId_1]
[i]Type for REF_97

Name: validators Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_98(uint128) -> REF_97.disabledEpoch
[i]Type for REF_98

Name: REF_98 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_248(bool) = REF_98 != 0
[i]Type for TMP_248

Name: TMP_248 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_249(None) = SOLIDITY_CALL require(bool,string)(TMP_248,Validator is not disabled)
[i]Type for TMP_249

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_99(DelegatedStaking.Validator) -> validators_32[oldValidatorId_1]
[i]Type for REF_99

Name: validators Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_100(address) -> REF_99._address
[i]Type for REF_100

Name: REF_100 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_250(bool) = REF_100 != msg.sender
[i]Type for TMP_250

Name: TMP_250 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_251(None) = SOLIDITY_CALL require(bool,string)(TMP_250,Validator cannot redelegate)
[i]Type for TMP_251

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_101(DelegatedStaking.Validator) -> validators_32[oldValidatorId_1]
[i]Type for REF_101

Name: validators Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_102(mapping(address => DelegatedStaking.Unstaking[])) -> REF_101.unstakings
[i]Type for REF_102

Name: REF_102 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_103(DelegatedStaking.Unstaking[]) -> REF_102[msg.sender]
[i]Type for REF_103

Name: REF_102 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_104(DelegatedStaking.Unstaking) -> REF_103[unstakingId_1]
[i]Type for REF_104

Name: REF_102 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
us_1 (-> ['validators'])(DelegatedStaking.Unstaking) := REF_104(DelegatedStaking.Unstaking)
[i]Type for us

Name: us Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
REF_105(uint128) -> us_1 (-> ['validators']).amount
[i]Type for REF_105

Name: REF_105 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_252(bool) = REF_105 >= amount_1
[i]Type for TMP_252

Name: TMP_252 Function: redelegateUnstaked
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_253(None) = SOLIDITY_CALL require(bool,string)(TMP_252,Unstaking has less tokens)
[i]Type for TMP_253

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._stake(uint128,uint128,bool)(newValidatorId_1,amount_1,False)
REF_106(uint128) -> us_1 (-> ['validators']).amount
[i]Type for REF_106

Name: REF_106 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
us_2 (-> ['validators'])(DelegatedStaking.Unstaking) := ϕ(["us_1 (-> ['validators'])"])
[i]Type for us

Name: us Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
REF_106(-> us_2 (-> ['validators'])) = REF_106 - amount_1
[i]Type for REF_106

Name: REF_106 Function: redelegateUnstaked
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_33(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["us_2 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: redelegateUnstaked
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
REF_107(uint128) -> us_2 (-> ['validators']).amount
[i]Type for REF_107

Name: REF_107 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_255(bool) = REF_107 == 0
[i]Type for TMP_255

Name: TMP_255 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_108(uint128) -> us_2 (-> ['validators']).coolDownEnd
[i]Type for REF_108

Name: REF_108 Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
us_3 (-> ['validators'])(DelegatedStaking.Unstaking) := ϕ(["us_2 (-> ['validators'])"])
[i]Type for us

Name: us Function: redelegateUnstaked
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: coolDownEnd, amount
Finance Type: undef
REF_108 (->us_3 (-> ['validators'])) := 0(uint256)
[i]Type for REF_108

Name: REF_108 Function: redelegateUnstaked
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
validators_34(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["us_3 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: redelegateUnstaked
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef



transferUnstakedOut
function: transferUnstakedOut, function count: 54
validators_35(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: transferUnstakedOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
REF_109(DelegatedStaking.Validator) -> validators_35[validatorId_1]
[i]Type for REF_109

Name: validators Function: transferUnstakedOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_110(mapping(address => DelegatedStaking.Unstaking[])) -> REF_109.unstakings
[i]Type for REF_110

Name: REF_110 Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_111(DelegatedStaking.Unstaking[]) -> REF_110[msg.sender]
[i]Type for REF_111

Name: REF_110 Function: transferUnstakedOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_112(DelegatedStaking.Unstaking) -> REF_111[unstakingId_1]
[i]Type for REF_112

Name: REF_110 Function: transferUnstakedOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
us_1 (-> ['validators'])(DelegatedStaking.Unstaking) := REF_112(DelegatedStaking.Unstaking)
[i]Type for us

Name: us Function: transferUnstakedOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_257 = CONVERT block.number to uint128
[i]Type for TMP_257

Name: TMP_257 Function: transferUnstakedOut
Num: -1
Den: -1
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
REF_113(uint128) -> us_1 (-> ['validators']).coolDownEnd
[i]Type for REF_113

Name: REF_113 Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_258(bool) = TMP_257 > REF_113
[i]Type for TMP_258

Name: TMP_258 Function: transferUnstakedOut
Num: -1
Den: -1
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_259(None) = SOLIDITY_CALL require(bool,string)(TMP_258,Cooldown period has not ended)
[i]Type for TMP_259

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_114(uint128) -> us_1 (-> ['validators']).amount
[i]Type for REF_114

Name: REF_114 Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_260(bool) = REF_114 >= amount_1
[i]Type for TMP_260

Name: TMP_260 Function: transferUnstakedOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_261(None) = SOLIDITY_CALL require(bool,string)(TMP_260,Amount is too high)
[i]Type for TMP_261

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._transferFromContract(address,uint128)(msg.sender,amount_1)
REF_115(uint128) -> us_1 (-> ['validators']).amount
[i]Type for REF_115

Name: REF_115 Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
us_2 (-> ['validators'])(DelegatedStaking.Unstaking) := ϕ(["us_1 (-> ['validators'])"])
[i]Type for us

Name: us Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: coolDownEnd, amount
Finance Type: undef
REF_115(-> us_2 (-> ['validators'])) = REF_115 - amount_1
[i]Type for REF_115

Name: REF_115 Function: transferUnstakedOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_36(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["us_2 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: transferUnstakedOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
REF_116(uint128) -> us_2 (-> ['validators']).amount
[i]Type for REF_116

Name: REF_116 Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_263(bool) = REF_116 == 0
[i]Type for TMP_263

Name: TMP_263 Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_117(uint128) -> us_2 (-> ['validators']).coolDownEnd
[i]Type for REF_117

Name: REF_117 Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
us_3 (-> ['validators'])(DelegatedStaking.Unstaking) := ϕ(["us_2 (-> ['validators'])"])
[i]Type for us

Name: us Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: coolDownEnd, amount
Finance Type: undef
REF_117 (->us_3 (-> ['validators'])) := 0(uint256)
[i]Type for REF_117

Name: REF_117 Function: transferUnstakedOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
validators_37(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["us_3 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: transferUnstakedOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
validators_35(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: transferUnstakedOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: unstakings, exchangeRate, _address, operator, commissionRate
Finance Type: undef
REF_109(DelegatedStaking.Validator) -> validators_35[validatorId_1]
[i]Type for REF_109

Name: validators Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_110(mapping(address => DelegatedStaking.Unstaking[])) -> REF_109.unstakings
[i]Type for REF_110

Name: REF_110 Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_111(DelegatedStaking.Unstaking[]) -> REF_110[msg.sender]
[i]Type for REF_111

Name: REF_110 Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_112(DelegatedStaking.Unstaking) -> REF_111[unstakingId_1]
[i]Type for REF_112

Name: REF_110 Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
us_1 (-> ['validators'])(DelegatedStaking.Unstaking) := REF_112(DelegatedStaking.Unstaking)
[i]Type for us

Name: us Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: coolDownEnd, amount
Finance Type: undef
TMP_257 = CONVERT block.number to uint128
[i]Type for TMP_257

Name: TMP_257 Function: transferUnstakedOut
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
REF_113(uint128) -> us_1 (-> ['validators']).coolDownEnd
[i]Type for REF_113

Name: REF_113 Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_258(bool) = TMP_257 > REF_113
[i]Type for TMP_258

Name: TMP_258 Function: transferUnstakedOut
Num: 
Den: 
Address: 3
Norm: u
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
TMP_259(None) = SOLIDITY_CALL require(bool,string)(TMP_258,Cooldown period has not ended)
[i]Type for TMP_259

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_114(uint128) -> us_1 (-> ['validators']).amount
[i]Type for REF_114

Name: REF_114 Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_260(bool) = REF_114 >= amount_1
[i]Type for TMP_260

Name: TMP_260 Function: transferUnstakedOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_261(None) = SOLIDITY_CALL require(bool,string)(TMP_260,Amount is too high)
[i]Type for TMP_261

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, DelegatedStaking._transferFromContract(address,uint128)(msg.sender,amount_1)
REF_115(uint128) -> us_1 (-> ['validators']).amount
[i]Type for REF_115

Name: REF_115 Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
us_2 (-> ['validators'])(DelegatedStaking.Unstaking) := ϕ(["us_1 (-> ['validators'])"])
[i]Type for us

Name: us Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: coolDownEnd, amount
Finance Type: undef
REF_115(-> us_2 (-> ['validators'])) = REF_115 - amount_1
[i]Type for REF_115

Name: REF_115 Function: transferUnstakedOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
validators_36(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["us_2 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: transferUnstakedOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
REF_116(uint128) -> us_2 (-> ['validators']).amount
[i]Type for REF_116

Name: REF_116 Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_263(bool) = REF_116 == 0
[i]Type for TMP_263

Name: TMP_263 Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_117(uint128) -> us_2 (-> ['validators']).coolDownEnd
[i]Type for REF_117

Name: REF_117 Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
us_3 (-> ['validators'])(DelegatedStaking.Unstaking) := ϕ(["us_2 (-> ['validators'])"])
[i]Type for us

Name: us Function: transferUnstakedOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: coolDownEnd, amount
Finance Type: undef
REF_117 (->us_3 (-> ['validators'])) := 0(uint256)
[i]Type for REF_117

Name: REF_117 Function: transferUnstakedOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
validators_37(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(["us_3 (-> ['validators'])"])
[i]Type for validators

Name: validators Function: transferUnstakedOut
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef



getValidatorsDetails
function: getValidatorsDetails, function count: 55
validatorsN_6(uint128) := ϕ(['validatorsN_5', 'validatorsN_8', 'validatorsN_0'])
[i]Type for validatorsN

Name: validatorsN Function: getValidatorsDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
validators_38(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: getValidatorsDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
TMP_266 = new uint128[](validatorsN_6)
[i]Type for TMP_266

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
commissionRates_1(uint128[]) := TMP_266(uint128)
[i]Type for commissionRates

Name: commissionRates Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_268 = new uint128[](validatorsN_6)
[i]Type for TMP_268

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
delegated_1(uint128[]) := TMP_268(uint128)
[i]Type for delegated

Name: delegated Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_1(uint128) := 0(uint256)
[i]Type for i

Name: i Function: getValidatorsDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_2(uint128) := ϕ(['i_3', 'i_1'])
[i]Type for i

Name: i Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_269(bool) = i_2 < validatorsN_6
[i]Type for TMP_269

Name: TMP_269 Function: getValidatorsDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
REF_118(DelegatedStaking.Validator) -> validators_38[i_2]
[i]Type for REF_118

Name: validators Function: getValidatorsDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_1 (-> ['validators'])(DelegatedStaking.Validator) := REF_118(DelegatedStaking.Validator)
[i]Type for v

Name: v Function: getValidatorsDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_119(uint128) -> commissionRates_1[i_2]
[i]Type for REF_119

Name: commissionRates Function: getValidatorsDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_120(uint128) -> v_1 (-> ['validators']).commissionRate
[i]Type for REF_120

Name: REF_120 Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
commissionRates_2(uint128[]) := ϕ(['commissionRates_1'])
[i]Type for commissionRates

Name: commissionRates Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_119 (->commissionRates_2) := REF_120(uint128)
[i]Type for REF_119

Name: REF_119 Function: getValidatorsDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_121(uint128) -> delegated_1[i_2]
[i]Type for REF_121

Name: delegated Function: getValidatorsDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_122(uint128) -> v_1 (-> ['validators']).delegated
[i]Type for REF_122

Name: REF_122 Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_123(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_123

Name: REF_123 Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_124(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_124

Name: REF_124 Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_125(DelegatedStaking.Staking) -> REF_123[REF_124]
[i]Type for REF_125

Name: REF_123 Function: getValidatorsDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_126(uint128) -> REF_125.staked
[i]Type for REF_126

Name: REF_126 Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_270(uint128) = REF_122 (c)- REF_126
[i]Type for TMP_270

Name: TMP_270 Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
delegated_2(uint128[]) := ϕ(['delegated_1'])
[i]Type for delegated

Name: delegated Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_121 (->delegated_2) := TMP_270(uint128)
[i]Type for REF_121

Name: REF_121 Function: getValidatorsDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN commissionRates_1,delegated_1
i_3(uint128) = i_2 (c)+ 1
[i]Type for i

Name: i Function: getValidatorsDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
validatorsN_6(uint128) := ϕ(['validatorsN_5', 'validatorsN_8', 'validatorsN_0'])
[i]Type for validatorsN

Name: validatorsN Function: getValidatorsDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
validators_38(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: getValidatorsDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
TMP_266 = new uint128[](validatorsN_6)
[i]Type for TMP_266

Name: TMP_266 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
commissionRates_1(uint128[]) := TMP_266(uint128)
[i]Type for commissionRates

Name: commissionRates Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_268 = new uint128[](validatorsN_6)
[i]Type for TMP_268

Name: TMP_268 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
delegated_1(uint128[]) := TMP_268(uint128)
[i]Type for delegated

Name: delegated Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_1(uint128) := 0(uint256)
[i]Type for i

Name: i Function: getValidatorsDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_2(uint128) := ϕ(['i_3', 'i_1'])
[i]Type for i

Name: i Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_269(bool) = i_2 < validatorsN_6
[i]Type for TMP_269

Name: TMP_269 Function: getValidatorsDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
REF_118(DelegatedStaking.Validator) -> validators_38[i_2]
[i]Type for REF_118

Name: validators Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_1 (-> ['validators'])(DelegatedStaking.Validator) := REF_118(DelegatedStaking.Validator)
[i]Type for v

Name: v Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: commissionRate, delegated, stakings, _address, staked
Finance Type: undef
REF_119(uint128) -> commissionRates_1[i_2]
[i]Type for REF_119

Name: commissionRates Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_120(uint128) -> v_1 (-> ['validators']).commissionRate
[i]Type for REF_120

Name: REF_120 Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
commissionRates_2(uint128[]) := ϕ(['commissionRates_1'])
[i]Type for commissionRates

Name: commissionRates Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_119 (->commissionRates_2) := REF_120(uint128)
[i]Type for REF_119

Name: REF_119 Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_121(uint128) -> delegated_1[i_2]
[i]Type for REF_121

Name: delegated Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_122(uint128) -> v_1 (-> ['validators']).delegated
[i]Type for REF_122

Name: REF_122 Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_123(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_123

Name: REF_123 Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_124(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_124

Name: REF_124 Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_125(DelegatedStaking.Staking) -> REF_123[REF_124]
[i]Type for REF_125

Name: REF_123 Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_126(uint128) -> REF_125.staked
[i]Type for REF_126

Name: REF_126 Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_270(uint128) = REF_122 (c)- REF_126
[i]Type for TMP_270

Name: TMP_270 Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
delegated_2(uint128[]) := ϕ(['delegated_1'])
[i]Type for delegated

Name: delegated Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_121 (->delegated_2) := TMP_270(uint128)
[i]Type for REF_121

Name: REF_121 Function: getValidatorsDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN commissionRates_1,delegated_1
i_3(uint128) = i_2 (c)+ 1
[i]Type for i

Name: i Function: getValidatorsDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef



getDelegatorDetails
function: getDelegatorDetails, function count: 56
divider_11(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
allocatedTokensPerEpoch_10(uint128) := ϕ(['allocatedTokensPerEpoch_3', 'allocatedTokensPerEpoch_0', 'allocatedTokensPerEpoch_1', 'allocatedTokensPerEpoch_5', 'allocatedTokensPerEpoch_9'])
[i]Type for allocatedTokensPerEpoch

Name: allocatedTokensPerEpoch Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
endEpoch_20(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
totalGlobalShares_26(uint128) := ϕ(['totalGlobalShares_25', 'totalGlobalShares_9', 'totalGlobalShares_11', 'totalGlobalShares_7', 'totalGlobalShares_18', 'totalGlobalShares_0'])
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: -3000000000000000000
Fields: 
Finance Type: raw balance
lastUpdateEpoch_3(uint128) := ϕ(['lastUpdateEpoch_0', 'lastUpdateEpoch_2'])
[i]Type for lastUpdateEpoch

Name: lastUpdateEpoch Function: getDelegatorDetails
Num: -1
Den: -1
Address: 3
Norm: 18
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_22(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
validatorsN_7(uint128) := ϕ(['validatorsN_5', 'validatorsN_8', 'validatorsN_0'])
[i]Type for validatorsN

Name: validatorsN Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
validators_39(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
TMP_272 = new uint128[](validatorsN_7)
[i]Type for TMP_272

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
delegated_1(uint128[]) := TMP_272(uint128)
[i]Type for delegated

Name: delegated Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_274 = new uint128[](validatorsN_7)
[i]Type for TMP_274

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rewardsAvailable_1(uint128[]) := TMP_274(uint128)
[i]Type for rewardsAvailable

Name: rewardsAvailable Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_276 = new uint128[](validatorsN_7)
[i]Type for TMP_276

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
commissionRewards_1(uint128[]) := TMP_276(uint128)
[i]Type for commissionRewards

Name: commissionRewards Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_306(bool) = block.number < endEpoch_20
[i]Type for TMP_306

Name: TMP_306 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentEpoch_1(uint256) := block.number(uint256)
[i]Type for currentEpoch

Name: currentEpoch Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentEpoch_2(uint256) := endEpoch_20(uint128)
[i]Type for currentEpoch

Name: currentEpoch Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
currentEpoch_3(uint256) := ϕ(['currentEpoch_1', 'currentEpoch_2'])
[i]Type for currentEpoch

Name: currentEpoch Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_277 = CONVERT allocatedTokensPerEpoch_10 to uint256
[i]Type for TMP_277

Name: TMP_277 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_278(uint256) = TMP_277 (c)* divider_11
[i]Type for TMP_278

Name: TMP_278 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_279(uint256) = TMP_278 (c)/ totalGlobalShares_26
[i]Type for TMP_279

Name: TMP_279 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: -3000000000000000000
Fields: 
Finance Type: price/exchange rate
TMP_280(uint256) = currentEpoch_3 (c)- lastUpdateEpoch_3
[i]Type for TMP_280

Name: TMP_280 Function: getDelegatorDetails
Num: -1
Den: -1
Address: 3
Norm: 18
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_281(uint256) = TMP_279 (c)* TMP_280
Error with TMP_281 in function getDelegatorDetails
Error with: TMP_281 in function getDelegatorDetails
[i]Type for TMP_281

Name: TMP_281 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_282 = CONVERT TMP_281 to uint128
[i]Type for TMP_282

Name: TMP_282 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_283(uint128) = TMP_282 (c)+ globalExchangeRate_22
[i]Type for TMP_283

Name: TMP_283 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
newGlobalExchangeRate_1(uint128) := TMP_283(uint128)
[i]Type for newGlobalExchangeRate

Name: newGlobalExchangeRate Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
i_1(uint128) := 0(uint256)
[i]Type for i

Name: i Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
delegated_2(uint128[]) := ϕ(['delegated_1', 'delegated_3'])
[i]Type for delegated

Name: delegated Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2(uint128) := ϕ(['i_1', 'i_3'])
[i]Type for i

Name: i Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_284(bool) = i_2 < validatorsN_7
[i]Type for TMP_284

Name: TMP_284 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
REF_127(DelegatedStaking.Validator) -> validators_39[i_2]
[i]Type for REF_127

Name: validators Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_1 (-> ['validators'])(DelegatedStaking.Validator) := REF_127(DelegatedStaking.Validator)
[i]Type for v

Name: v Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_128(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_128

Name: REF_128 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_129(DelegatedStaking.Staking) -> REF_128[delegator_1]
[i]Type for REF_129

Name: REF_128 Function: getDelegatorDetails
Num: -996
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_1 (-> ['v'])(DelegatedStaking.Staking) := REF_129(DelegatedStaking.Staking)
[i]Type for s

Name: s Function: getDelegatorDetails
Num: -996
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN delegated_2,rewardsAvailable_1,commissionRewards_1
REF_130(uint128) -> delegated_2[i_2]
[i]Type for REF_130

Name: delegated Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_131(uint128) -> s_1 (-> ['v']).staked
[i]Type for REF_131

Name: REF_131 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
delegated_3(uint128[]) := ϕ(['delegated_2'])
[i]Type for delegated

Name: delegated Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_130 (->delegated_3) := REF_131(uint128)
[i]Type for REF_130

Name: REF_130 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_132(uint128) -> v_1 (-> ['validators']).disabledEpoch
[i]Type for REF_132

Name: REF_132 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_285(bool) = REF_132 == 0
[i]Type for TMP_285

Name: TMP_285 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_133(uint128) -> v_1 (-> ['validators']).globalShares
[i]Type for REF_133

Name: REF_133 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_134(uint128) -> v_1 (-> ['validators']).lastUpdateGlobalRate
[i]Type for REF_134

Name: REF_134 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_286(uint128) = newGlobalExchangeRate_1 (c)- REF_134
[i]Type for TMP_286

Name: TMP_286 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_287(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_133,TMP_286)
[i]Type for TMP_287

Name: TMP_287 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
newTokensGiven_1(uint128) := TMP_287(uint128)
[i]Type for newTokensGiven

Name: newTokensGiven Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_144(uint128) -> rewardsAvailable_1[i_2]
[i]Type for REF_144

Name: rewardsAvailable Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_145(uint128) -> s_1 (-> ['v']).shares
[i]Type for REF_145

Name: REF_145 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_146(uint128) -> v_1 (-> ['validators']).exchangeRate
[i]Type for REF_146

Name: REF_146 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_303(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_145,REF_146)
function: _sharesToTokens, function count: 57
sharesN_1(uint128) := ϕ(['REF_63', 'REF_6', 'REF_145', 'REF_133', 'REF_138'])
[i]Type for sharesN

Name: sharesN Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['TMP_286', 'rateDifference_1', 'TMP_298', 'REF_64', 'REF_146'])
[i]Type for rate

Name: rate Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_4(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_94 = CONVERT sharesN_1 to uint256
[i]Type for TMP_94

Name: TMP_94 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_95 = CONVERT rate_1 to uint256
[i]Type for TMP_95

Name: TMP_95 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_96(uint256) = TMP_94 (c)* TMP_95
[i]Type for TMP_96

Name: TMP_96 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_97(uint256) = TMP_96 (c)/ divider_4
[i]Type for TMP_97

Name: TMP_97 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_98 = CONVERT TMP_97 to uint128
[i]Type for TMP_98

Name: TMP_98 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_98
sharesN_1(uint128) := ϕ(['REF_63', 'REF_6', 'REF_145', 'REF_133', 'REF_138'])
[i]Type for sharesN

Name: sharesN Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['TMP_286', 'rateDifference_1', 'TMP_298', 'REF_64', 'REF_146'])
[i]Type for rate

Name: rate Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_4(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_94 = CONVERT sharesN_1 to uint256
[i]Type for TMP_94

Name: TMP_94 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_95 = CONVERT rate_1 to uint256
[i]Type for TMP_95

Name: TMP_95 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_96(uint256) = TMP_94 (c)* TMP_95
[i]Type for TMP_96

Name: TMP_96 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_97(uint256) = TMP_96 (c)/ divider_4
[i]Type for TMP_97

Name: TMP_97 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_98 = CONVERT TMP_97 to uint128
[i]Type for TMP_98

Name: TMP_98 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_98
[i]Type for TMP_303

Name: TMP_303 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_147(uint128) -> s_1 (-> ['v']).staked
[i]Type for REF_147

Name: REF_147 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_304(uint128) = TMP_303 (c)- REF_147
[i]Type for TMP_304

Name: TMP_304 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rewardsAvailable_2(uint128[]) := ϕ(['rewardsAvailable_1'])
[i]Type for rewardsAvailable

Name: rewardsAvailable Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_144 (->rewardsAvailable_2) := TMP_304(uint128)
[i]Type for REF_144

Name: REF_144 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_288 = CONVERT newTokensGiven_1 to uint256
[i]Type for TMP_288

Name: TMP_288 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_135(uint128) -> v_1 (-> ['validators']).commissionRate
[i]Type for REF_135

Name: REF_135 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_289 = CONVERT REF_135 to uint256
[i]Type for TMP_289

Name: TMP_289 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_290(uint256) = TMP_288 (c)* TMP_289
[i]Type for TMP_290

Name: TMP_290 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_291(uint256) = TMP_290 (c)/ divider_13
[i]Type for TMP_291

Name: TMP_291 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_292 = CONVERT TMP_291 to uint128
[i]Type for TMP_292

Name: TMP_292 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_292(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_148(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_148

Name: REF_148 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_305(bool) = delegator_1 == REF_148
[i]Type for TMP_305

Name: TMP_305 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
commissionRewards_3(uint128[]) := ϕ(['commissionRewards_2', 'commissionRewards_1'])
[i]Type for commissionRewards

Name: commissionRewards Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_293(uint128) = newTokensGiven_1 (c)- commissionPaid_1
[i]Type for TMP_293

Name: TMP_293 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_294 = CONVERT TMP_293 to uint256
[i]Type for TMP_294

Name: TMP_294 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_295(uint256) = TMP_294 (c)* divider_13
[i]Type for TMP_295

Name: TMP_295 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_136(uint128) -> v_1 (-> ['validators']).totalShares
[i]Type for REF_136

Name: REF_136 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_296(uint256) = TMP_295 (c)/ REF_136
[i]Type for TMP_296

Name: TMP_296 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_297 = CONVERT TMP_296 to uint128
[i]Type for TMP_297

Name: TMP_297 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
rateIncrease_1(uint128) := TMP_297(uint128)
[i]Type for rateIncrease

Name: rateIncrease Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
rewardsAvailable_4(uint128[]) := ϕ(['rewardsAvailable_2', 'rewardsAvailable_3'])
[i]Type for rewardsAvailable

Name: rewardsAvailable Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_137(uint128) -> rewardsAvailable_1[i_2]
[i]Type for REF_137

Name: rewardsAvailable Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_138(uint128) -> s_1 (-> ['v']).shares
[i]Type for REF_138

Name: REF_138 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_139(uint128) -> v_1 (-> ['validators']).exchangeRate
[i]Type for REF_139

Name: REF_139 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_298(uint128) = REF_139 (c)+ rateIncrease_1
[i]Type for TMP_298

Name: TMP_298 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_299(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_138,TMP_298)
[i]Type for TMP_299

Name: TMP_299 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_140(uint128) -> s_1 (-> ['v']).staked
[i]Type for REF_140

Name: REF_140 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_300(uint128) = TMP_299 (c)- REF_140
[i]Type for TMP_300

Name: TMP_300 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rewardsAvailable_3(uint128[]) := ϕ(['rewardsAvailable_1'])
[i]Type for rewardsAvailable

Name: rewardsAvailable Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_137 (->rewardsAvailable_3) := TMP_300(uint128)
[i]Type for REF_137

Name: REF_137 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_149(uint128) -> commissionRewards_1[i_2]
[i]Type for REF_149

Name: commissionRewards Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_150(uint128) -> v_1 (-> ['validators']).commissionAvailableToRedeem
[i]Type for REF_150

Name: REF_150 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
commissionRewards_2(uint128[]) := ϕ(['commissionRewards_1'])
[i]Type for commissionRewards

Name: commissionRewards Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_149 (->commissionRewards_2) := REF_150(uint128)
[i]Type for REF_149

Name: REF_149 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_3(uint128) = i_2 (c)+ 1
[i]Type for i

Name: i Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
REF_141(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_141

Name: REF_141 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_301(bool) = delegator_1 == REF_141
[i]Type for TMP_301

Name: TMP_301 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_142(uint128) -> commissionRewards_1[i_2]
[i]Type for REF_142

Name: commissionRewards Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_143(uint128) -> v_1 (-> ['validators']).commissionAvailableToRedeem
[i]Type for REF_143

Name: REF_143 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_302(uint128) = REF_143 (c)+ commissionPaid_1
[i]Type for TMP_302

Name: TMP_302 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionRewards_4(uint128[]) := ϕ(['commissionRewards_1'])
[i]Type for commissionRewards

Name: commissionRewards Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_142 (->commissionRewards_4) := TMP_302(uint128)
[i]Type for REF_142

Name: REF_142 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionRewards_5(uint128[]) := ϕ(['commissionRewards_4', 'commissionRewards_1'])
[i]Type for commissionRewards

Name: commissionRewards Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
divider_11(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
allocatedTokensPerEpoch_10(uint128) := ϕ(['allocatedTokensPerEpoch_3', 'allocatedTokensPerEpoch_0', 'allocatedTokensPerEpoch_1', 'allocatedTokensPerEpoch_5', 'allocatedTokensPerEpoch_9'])
[i]Type for allocatedTokensPerEpoch

Name: allocatedTokensPerEpoch Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
endEpoch_20(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
totalGlobalShares_26(uint128) := ϕ(['totalGlobalShares_25', 'totalGlobalShares_9', 'totalGlobalShares_11', 'totalGlobalShares_7', 'totalGlobalShares_18', 'totalGlobalShares_0'])
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: -3000000000000000000
Fields: 
Finance Type: raw balance
lastUpdateEpoch_3(uint128) := ϕ(['lastUpdateEpoch_0', 'lastUpdateEpoch_2'])
[i]Type for lastUpdateEpoch

Name: lastUpdateEpoch Function: getDelegatorDetails
Num: -1
Den: -1
Address: 3
Norm: 18
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: undef
globalExchangeRate_22(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
validatorsN_7(uint128) := ϕ(['validatorsN_5', 'validatorsN_8', 'validatorsN_0'])
[i]Type for validatorsN

Name: validatorsN Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
validators_39(mapping(uint128 => DelegatedStaking.Validator)) := ϕ(['validators_11', 'validators_12', 'validators_34', 'validators_23', 'validators_33', 'validators_15', 'validators_31', 'validators_9', 'validators_0', 'validators_16', 'validators_4', 'validators_25', 'validators_40', 'validators_37', 'validators_38', 'validators_36', 'validators_26'])
[i]Type for validators

Name: validators Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: exchangeRate, _address, operator, commissionRate
Finance Type: undef
TMP_272 = new uint128[](validatorsN_7)
[i]Type for TMP_272

Name: TMP_272 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
delegated_1(uint128[]) := TMP_272(uint128)
[i]Type for delegated

Name: delegated Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_274 = new uint128[](validatorsN_7)
[i]Type for TMP_274

Name: TMP_274 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rewardsAvailable_1(uint128[]) := TMP_274(uint128)
[i]Type for rewardsAvailable

Name: rewardsAvailable Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_276 = new uint128[](validatorsN_7)
[i]Type for TMP_276

Name: TMP_276 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
commissionRewards_1(uint128[]) := TMP_276(uint128)
[i]Type for commissionRewards

Name: commissionRewards Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_306(bool) = block.number < endEpoch_20
[i]Type for TMP_306

Name: TMP_306 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentEpoch_1(uint256) := block.number(uint256)
[i]Type for currentEpoch

Name: currentEpoch Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentEpoch_2(uint256) := endEpoch_20(uint128)
[i]Type for currentEpoch

Name: currentEpoch Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
currentEpoch_3(uint256) := ϕ(['currentEpoch_1', 'currentEpoch_2'])
[i]Type for currentEpoch

Name: currentEpoch Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_277 = CONVERT allocatedTokensPerEpoch_10 to uint256
[i]Type for TMP_277

Name: TMP_277 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_278(uint256) = TMP_277 (c)* divider_11
[i]Type for TMP_278

Name: TMP_278 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_279(uint256) = TMP_278 (c)/ totalGlobalShares_26
[i]Type for TMP_279

Name: TMP_279 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: -3000000000000000000
Fields: 
Finance Type: price/exchange rate
TMP_280(uint256) = currentEpoch_3 (c)- lastUpdateEpoch_3
[i]Type for TMP_280

Name: TMP_280 Function: getDelegatorDetails
Num: -1
Den: -1
Address: 3
Norm: 18
LF: DelegatedStaking
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_281(uint256) = TMP_279 (c)* TMP_280
[i]Type for TMP_281

Name: TMP_281 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: -3000000000000000000
Fields: 
Finance Type: undef
TMP_282 = CONVERT TMP_281 to uint128
[i]Type for TMP_282

Name: TMP_282 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: -3000000000000000000
Fields: 
Finance Type: undef
TMP_283(uint128) = TMP_282 (c)+ globalExchangeRate_22
[i]Type for TMP_283

Name: TMP_283 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
newGlobalExchangeRate_1(uint128) := TMP_283(uint128)
[i]Type for newGlobalExchangeRate

Name: newGlobalExchangeRate Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
i_1(uint128) := 0(uint256)
[i]Type for i

Name: i Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
delegated_2(uint128[]) := ϕ(['delegated_1', 'delegated_3'])
[i]Type for delegated

Name: delegated Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_2(uint128) := ϕ(['i_1', 'i_3'])
[i]Type for i

Name: i Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_284(bool) = i_2 < validatorsN_7
[i]Type for TMP_284

Name: TMP_284 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
REF_127(DelegatedStaking.Validator) -> validators_39[i_2]
[i]Type for REF_127

Name: validators Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
v_1 (-> ['validators'])(DelegatedStaking.Validator) := REF_127(DelegatedStaking.Validator)
[i]Type for v

Name: v Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: stakings, disabledEpoch, globalShares, lastUpdateGlobalRate, exchangeRate, commissionRate, _address, totalShares, commissionAvailableToRedeem
Finance Type: undef
REF_128(mapping(address => DelegatedStaking.Staking)) -> v_1 (-> ['validators']).stakings
[i]Type for REF_128

Name: REF_128 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_129(DelegatedStaking.Staking) -> REF_128[delegator_1]
[i]Type for REF_129

Name: REF_128 Function: getDelegatorDetails
Num: -996
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
s_1 (-> ['v'])(DelegatedStaking.Staking) := REF_129(DelegatedStaking.Staking)
[i]Type for s

Name: s Function: getDelegatorDetails
Num: -996
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: staked, shares
Finance Type: undef
RETURN delegated_2,rewardsAvailable_1,commissionRewards_1
REF_130(uint128) -> delegated_2[i_2]
[i]Type for REF_130

Name: delegated Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_131(uint128) -> s_1 (-> ['v']).staked
[i]Type for REF_131

Name: REF_131 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
delegated_3(uint128[]) := ϕ(['delegated_2'])
[i]Type for delegated

Name: delegated Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_130 (->delegated_3) := REF_131(uint128)
[i]Type for REF_130

Name: REF_130 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_132(uint128) -> v_1 (-> ['validators']).disabledEpoch
[i]Type for REF_132

Name: REF_132 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_285(bool) = REF_132 == 0
[i]Type for TMP_285

Name: TMP_285 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_133(uint128) -> v_1 (-> ['validators']).globalShares
[i]Type for REF_133

Name: REF_133 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_134(uint128) -> v_1 (-> ['validators']).lastUpdateGlobalRate
[i]Type for REF_134

Name: REF_134 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_286(uint128) = newGlobalExchangeRate_1 (c)- REF_134
[i]Type for TMP_286

Name: TMP_286 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_287(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_133,TMP_286)
[i]Type for TMP_287

Name: TMP_287 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
newTokensGiven_1(uint128) := TMP_287(uint128)
[i]Type for newTokensGiven

Name: newTokensGiven Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_144(uint128) -> rewardsAvailable_1[i_2]
[i]Type for REF_144

Name: rewardsAvailable Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_145(uint128) -> s_1 (-> ['v']).shares
[i]Type for REF_145

Name: REF_145 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_146(uint128) -> v_1 (-> ['validators']).exchangeRate
[i]Type for REF_146

Name: REF_146 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_303(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_145,REF_146)
function: _sharesToTokens, function count: 58
sharesN_1(uint128) := ϕ(['REF_63', 'REF_6', 'REF_145', 'REF_133', 'REF_138'])
[i]Type for sharesN

Name: sharesN Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['TMP_286', 'rateDifference_1', 'TMP_298', 'REF_64', 'REF_146'])
[i]Type for rate

Name: rate Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_4(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_94 = CONVERT sharesN_1 to uint256
[i]Type for TMP_94

Name: TMP_94 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_95 = CONVERT rate_1 to uint256
[i]Type for TMP_95

Name: TMP_95 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_96(uint256) = TMP_94 (c)* TMP_95
[i]Type for TMP_96

Name: TMP_96 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_97(uint256) = TMP_96 (c)/ divider_4
[i]Type for TMP_97

Name: TMP_97 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_98 = CONVERT TMP_97 to uint128
[i]Type for TMP_98

Name: TMP_98 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_98
sharesN_1(uint128) := ϕ(['REF_63', 'REF_6', 'REF_145', 'REF_133', 'REF_138'])
[i]Type for sharesN

Name: sharesN Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rate_1(uint128) := ϕ(['TMP_286', 'rateDifference_1', 'TMP_298', 'REF_64', 'REF_146'])
[i]Type for rate

Name: rate Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
divider_4(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_94 = CONVERT sharesN_1 to uint256
[i]Type for TMP_94

Name: TMP_94 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_95 = CONVERT rate_1 to uint256
[i]Type for TMP_95

Name: TMP_95 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_96(uint256) = TMP_94 (c)* TMP_95
[i]Type for TMP_96

Name: TMP_96 Function: _sharesToTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_97(uint256) = TMP_96 (c)/ divider_4
[i]Type for TMP_97

Name: TMP_97 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_98 = CONVERT TMP_97 to uint128
[i]Type for TMP_98

Name: TMP_98 Function: _sharesToTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_98
[i]Type for TMP_303

Name: TMP_303 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_147(uint128) -> s_1 (-> ['v']).staked
[i]Type for REF_147

Name: REF_147 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_304(uint128) = TMP_303 (c)- REF_147
[i]Type for TMP_304

Name: TMP_304 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rewardsAvailable_2(uint128[]) := ϕ(['rewardsAvailable_1'])
[i]Type for rewardsAvailable

Name: rewardsAvailable Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_144 (->rewardsAvailable_2) := TMP_304(uint128)
[i]Type for REF_144

Name: REF_144 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_288 = CONVERT newTokensGiven_1 to uint256
[i]Type for TMP_288

Name: TMP_288 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_135(uint128) -> v_1 (-> ['validators']).commissionRate
[i]Type for REF_135

Name: REF_135 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_289 = CONVERT REF_135 to uint256
[i]Type for TMP_289

Name: TMP_289 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_290(uint256) = TMP_288 (c)* TMP_289
[i]Type for TMP_290

Name: TMP_290 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_291(uint256) = TMP_290 (c)/ divider_13
[i]Type for TMP_291

Name: TMP_291 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_292 = CONVERT TMP_291 to uint128
[i]Type for TMP_292

Name: TMP_292 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionPaid_1(uint128) := TMP_292(uint128)
[i]Type for commissionPaid

Name: commissionPaid Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_148(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_148

Name: REF_148 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_305(bool) = delegator_1 == REF_148
[i]Type for TMP_305

Name: TMP_305 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
commissionRewards_3(uint128[]) := ϕ(['commissionRewards_2', 'commissionRewards_1'])
[i]Type for commissionRewards

Name: commissionRewards Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_293(uint128) = newTokensGiven_1 (c)- commissionPaid_1
[i]Type for TMP_293

Name: TMP_293 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_294 = CONVERT TMP_293 to uint256
[i]Type for TMP_294

Name: TMP_294 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_295(uint256) = TMP_294 (c)* divider_13
[i]Type for TMP_295

Name: TMP_295 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
REF_136(uint128) -> v_1 (-> ['validators']).totalShares
[i]Type for REF_136

Name: REF_136 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_296(uint256) = TMP_295 (c)/ REF_136
[i]Type for TMP_296

Name: TMP_296 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_297 = CONVERT TMP_296 to uint128
[i]Type for TMP_297

Name: TMP_297 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
rateIncrease_1(uint128) := TMP_297(uint128)
[i]Type for rateIncrease

Name: rateIncrease Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
rewardsAvailable_4(uint128[]) := ϕ(['rewardsAvailable_2', 'rewardsAvailable_3'])
[i]Type for rewardsAvailable

Name: rewardsAvailable Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_137(uint128) -> rewardsAvailable_1[i_2]
[i]Type for REF_137

Name: rewardsAvailable Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_138(uint128) -> s_1 (-> ['v']).shares
[i]Type for REF_138

Name: REF_138 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_139(uint128) -> v_1 (-> ['validators']).exchangeRate
[i]Type for REF_139

Name: REF_139 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_298(uint128) = REF_139 (c)+ rateIncrease_1
[i]Type for TMP_298

Name: TMP_298 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_299(uint128) = INTERNAL_CALL, DelegatedStaking._sharesToTokens(uint128,uint128)(REF_138,TMP_298)
[i]Type for TMP_299

Name: TMP_299 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_140(uint128) -> s_1 (-> ['v']).staked
[i]Type for REF_140

Name: REF_140 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_300(uint128) = TMP_299 (c)- REF_140
[i]Type for TMP_300

Name: TMP_300 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
rewardsAvailable_3(uint128[]) := ϕ(['rewardsAvailable_1'])
[i]Type for rewardsAvailable

Name: rewardsAvailable Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_137 (->rewardsAvailable_3) := TMP_300(uint128)
[i]Type for REF_137

Name: REF_137 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
REF_149(uint128) -> commissionRewards_1[i_2]
[i]Type for REF_149

Name: commissionRewards Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_150(uint128) -> v_1 (-> ['validators']).commissionAvailableToRedeem
[i]Type for REF_150

Name: REF_150 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
commissionRewards_2(uint128[]) := ϕ(['commissionRewards_1'])
[i]Type for commissionRewards

Name: commissionRewards Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_149 (->commissionRewards_2) := REF_150(uint128)
[i]Type for REF_149

Name: REF_149 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_3(uint128) = i_2 (c)+ 1
[i]Type for i

Name: i Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
REF_141(address) -> v_1 (-> ['validators'])._address
[i]Type for REF_141

Name: REF_141 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_301(bool) = delegator_1 == REF_141
[i]Type for TMP_301

Name: TMP_301 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_142(uint128) -> commissionRewards_1[i_2]
[i]Type for REF_142

Name: commissionRewards Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_143(uint128) -> v_1 (-> ['validators']).commissionAvailableToRedeem
[i]Type for REF_143

Name: REF_143 Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_302(uint128) = REF_143 (c)+ commissionPaid_1
[i]Type for TMP_302

Name: TMP_302 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionRewards_4(uint128[]) := ϕ(['commissionRewards_1'])
[i]Type for commissionRewards

Name: commissionRewards Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_142 (->commissionRewards_4) := TMP_302(uint128)
[i]Type for REF_142

Name: REF_142 Function: getDelegatorDetails
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
commissionRewards_5(uint128[]) := ϕ(['commissionRewards_4', 'commissionRewards_1'])
[i]Type for commissionRewards

Name: commissionRewards Function: getDelegatorDetails
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef



getMetadata
function: getMetadata, function count: 59
divider_15(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxCapMultiplier_8(uint128) := ϕ(['maxCapMultiplier_0', 'maxCapMultiplier_7', 'maxCapMultiplier_1', 'maxCapMultiplier_6', 'maxCapMultiplier_4'])
[i]Type for maxCapMultiplier

Name: maxCapMultiplier Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
allocatedTokensPerEpoch_11(uint128) := ϕ(['allocatedTokensPerEpoch_3', 'allocatedTokensPerEpoch_0', 'allocatedTokensPerEpoch_1', 'allocatedTokensPerEpoch_5', 'allocatedTokensPerEpoch_9'])
[i]Type for allocatedTokensPerEpoch

Name: allocatedTokensPerEpoch Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
endEpoch_21(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
totalGlobalShares_27(uint128) := ϕ(['totalGlobalShares_25', 'totalGlobalShares_9', 'totalGlobalShares_11', 'totalGlobalShares_7', 'totalGlobalShares_18', 'totalGlobalShares_0'])
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: -3000000000000000000
Fields: 
Finance Type: raw balance
globalExchangeRate_23(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
validatorsN_11(uint128) := ϕ(['validatorsN_5', 'validatorsN_8', 'validatorsN_0'])
[i]Type for validatorsN

Name: validatorsN Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_307 = CONVERT totalGlobalShares_27 to uint256
[i]Type for TMP_307

Name: TMP_307 Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: -3000000000000000000
Fields: 
Finance Type: raw balance
TMP_308 = CONVERT globalExchangeRate_23 to uint256
[i]Type for TMP_308

Name: TMP_308 Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_309(uint256) = TMP_307 (c)* TMP_308
[i]Type for TMP_309

Name: TMP_309 Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 36
LF: None
Value: -9000000000000000000000000000000000000
Fields: 
Finance Type: raw balance
TMP_310(uint256) = TMP_309 (c)/ divider_15
[i]Type for TMP_310

Name: TMP_310 Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 36
LF: None
Value: -9000000000000000000000000000000000000
Fields: 
Finance Type: raw balance
TMP_311 = CONVERT TMP_310 to uint128
[i]Type for TMP_311

Name: TMP_311 Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 36
LF: None
Value: -9000000000000000000000000000000000000
Fields: 
Finance Type: raw balance
totalStaked_1(uint128) := TMP_311(uint128)
[i]Type for totalStaked

Name: totalStaked Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 36
LF: None
Value: -9000000000000000000000000000000000000
Fields: 
Finance Type: raw balance
RETURN allocatedTokensPerEpoch_11,endEpoch_21,maxCapMultiplier_8,totalStaked_1,validatorsN_11
divider_15(uint256) := ϕ(['divider_0', 'divider_3', 'divider_10', 'divider_8', 'divider_12'])
[i]Type for divider

Name: divider Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxCapMultiplier_8(uint128) := ϕ(['maxCapMultiplier_0', 'maxCapMultiplier_7', 'maxCapMultiplier_1', 'maxCapMultiplier_6', 'maxCapMultiplier_4'])
[i]Type for maxCapMultiplier

Name: maxCapMultiplier Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
allocatedTokensPerEpoch_11(uint128) := ϕ(['allocatedTokensPerEpoch_3', 'allocatedTokensPerEpoch_0', 'allocatedTokensPerEpoch_1', 'allocatedTokensPerEpoch_5', 'allocatedTokensPerEpoch_9'])
[i]Type for allocatedTokensPerEpoch

Name: allocatedTokensPerEpoch Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
endEpoch_21(uint128) := ϕ(['endEpoch_0', 'endEpoch_5', 'endEpoch_3', 'endEpoch_9', 'endEpoch_2', 'endEpoch_11', 'endEpoch_6', 'endEpoch_15', 'endEpoch_17'])
[i]Type for endEpoch

Name: endEpoch Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
totalGlobalShares_27(uint128) := ϕ(['totalGlobalShares_25', 'totalGlobalShares_9', 'totalGlobalShares_11', 'totalGlobalShares_7', 'totalGlobalShares_18', 'totalGlobalShares_0'])
[i]Type for totalGlobalShares

Name: totalGlobalShares Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: -3000000000000000000
Fields: 
Finance Type: raw balance
globalExchangeRate_23(uint128) := ϕ(['globalExchangeRate_10', 'globalExchangeRate_13', 'globalExchangeRate_1', 'globalExchangeRate_0', 'globalExchangeRate_20', 'globalExchangeRate_12', 'globalExchangeRate_5', 'globalExchangeRate_3'])
[i]Type for globalExchangeRate

Name: globalExchangeRate Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
validatorsN_11(uint128) := ϕ(['validatorsN_5', 'validatorsN_8', 'validatorsN_0'])
[i]Type for validatorsN

Name: validatorsN Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_307 = CONVERT totalGlobalShares_27 to uint256
[i]Type for TMP_307

Name: TMP_307 Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: -3000000000000000000
Fields: 
Finance Type: raw balance
TMP_308 = CONVERT globalExchangeRate_23 to uint256
[i]Type for TMP_308

Name: TMP_308 Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 3000000000000000000
Fields: 
Finance Type: undef
TMP_309(uint256) = TMP_307 (c)* TMP_308
[i]Type for TMP_309

Name: TMP_309 Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 36
LF: None
Value: -9000000000000000000000000000000000000
Fields: 
Finance Type: raw balance
TMP_310(uint256) = TMP_309 (c)/ divider_15
[i]Type for TMP_310

Name: TMP_310 Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 36
LF: None
Value: -9000000000000000000000000000000000000
Fields: 
Finance Type: raw balance
TMP_311 = CONVERT TMP_310 to uint128
[i]Type for TMP_311

Name: TMP_311 Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 36
LF: None
Value: -9000000000000000000000000000000000000
Fields: 
Finance Type: raw balance
totalStaked_1(uint128) := TMP_311(uint128)
[i]Type for totalStaked

Name: totalStaked Function: getMetadata
Num: -1
Den: -1
Address: u
Norm: 36
LF: None
Value: -9000000000000000000000000000000000000
Fields: 
Finance Type: raw balance
RETURN allocatedTokensPerEpoch_11,endEpoch_21,maxCapMultiplier_8,totalStaked_1,validatorsN_11
Function count: 59
Executing Group 13
[*] Tested 3 warnings for Covalent
Group 13 complete
Elapsed time: 13.399854723 seconds
Testing complete
