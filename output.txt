Switched global version to 0.8.9
Checking LiquidityBasedTWAP
Checking Babylonian
Checking BitMath
Checking FixedPoint
Checking FullMath
Checking UniswapV2OracleLibrary
Checking IBasePoolV2
Checking IVaderPoolV2
Checking IAggregatorV3
Checking IUniswapV2ERC20
Checking IUniswapV2Pair
Checking ILiquidityBasedTWAP
Checking Ownable
Checking IERC20
Checking IERC20Metadata
Checking IERC721
Checking Context
Checking IERC165
Add to address_to_label {'global:vader': 1}
Add to address_to_label {'global:vader': 1, 'global:USDC': 2}
Add to address_to_label {'global:vader': 1, 'global:USDC': 2, 'global:_owner': 3}
Add to address_to_label {'global:vader': 1, 'global:USDC': 2, 'global:_owner': 3, 'constructor:_vader': -999}
Add to address_to_label {'global:vader': 1, 'global:USDC': 2, 'global:_owner': 3, 'constructor:_vader': -999, 'getChainlinkPrice:asset': -998}
State_var: totalLiquidityWeight
Finding type for totalLiquidityWeight(uint256[2] ... )
querrying!!!
State_var: twapData
Finding type for twapData(mapping(address => ILiquidityBasedTWAP.ExchangePair) ... )
global
twapData
nativeTokenPriceCumulative
OUT KEY: global_twapData_nativeTokenPriceCumulative
global
twapData
nativeTokenPriceAverage
OUT KEY: global_twapData_nativeTokenPriceAverage
global
twapData
lastMeasurement
OUT KEY: global_twapData_lastMeasurement
global
twapData
updatePeriod
OUT KEY: global_twapData_updatePeriod
global
twapData
pastLiquidityEvaluation
OUT KEY: global_twapData_pastLiquidityEvaluation
global
twapData
foreignAsset
OUT KEY: global_twapData_foreignAsset
global
twapData
foreignUnit
OUT KEY: global_twapData_foreignUnit
querrying!!!
State_var: usdvPairs
Finding type for usdvPairs(IERC20[] ... )
querrying!!!
State_var: previousPrices
Finding type for previousPrices(uint256[2] ... )
querrying!!!
State_var: vaderPairs
Finding type for vaderPairs(IUniswapV2Pair[] ... )
querrying!!!
State_var: vader
Finding type for vader(address ... )
prev address? u
Head Addr: 1
    Norm: 18
    Set: {1}
    Fin: NULL
querrying!!!
State_var: oracles
Finding type for oracles(mapping(address => IAggregatorV3) ... )
querrying!!!
State_var: vaderPool
Finding type for vaderPool(IVaderPoolV2 ... )
querrying!!!
State_var: maxUpdateWindow
Finding type for maxUpdateWindow(uint256 ... )
querrying!!!
State_var: _owner
Finding type for _owner(address ... )
prev address? u
Head Addr: 3
    Norm: 0
    Set: {3}
    Fin: NULL
querrying!!!



constructor
Finding type for _vader(address ... )
prev address? u
Head Addr: -999
    Norm: 18
    Set: {-999}
    Fin: NULL
Finding type for _vaderPool(IVaderPoolV2 ... )
Param: 0
    num: []
    den: []
    norm: u
    link: _vader
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


TMP_11 = CONVERT 0 to address
TMP_12(bool) = _vader_1 != TMP_11
TMP_13 = CONVERT 0 to address
TMP_14 = CONVERT TMP_13 to IVaderPoolV2
TMP_15(bool) = _vaderPool_1 != TMP_14
TMP_16(bool) = TMP_12 && TMP_15
TMP_17(None) = SOLIDITY_CALL require(bool,string)(TMP_16,LBTWAP::construction: Zero Address)
vader_1(address) := _vader_1(address)
vaderPool_1(IVaderPoolV2) := _vaderPool_1(IVaderPoolV2)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _vaderPool, Num: 1
Globalname: _vaderPool
End popogation
TMP_11 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_11

Name: TMP_11 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_12(bool) = _vader_1 != TMP_11
[i]Type for TMP_12

Name: TMP_12 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_13 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_13

Name: TMP_13 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_14 = CONVERT TMP_13 to IVaderPoolV2
Converting TMP_13

Name: TMP_13 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_13 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
VaderPoolV2
[i]Type for TMP_14

Name: TMP_14 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: VaderPoolV2
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_15(bool) = _vaderPool_1 != TMP_14
[i]Type for TMP_15

Name: TMP_15 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_16(bool) = TMP_12 && TMP_15
[i]Type for TMP_16

Name: TMP_16 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_17(None) = SOLIDITY_CALL require(bool,string)(TMP_16,LBTWAP::construction: Zero Address)
[i]Type for TMP_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: vader, Num: 1
Globalname: vader
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
End popogation
vader_1(address) := _vader_1(address)
asgn
init
end
_______________

Name: _vader Function: None
Num: 
Den: 
Address: -999
Norm: u
LF: _vader
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for vader

Name: vader Function: constructor
Num: -1
Den: -1
Address: -999
Norm: u
LF: _vader
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _vaderPool, Num: 1
Globalname: _vaderPool
Name: vaderPool, Num: 1
Globalname: vaderPool
global...

Name: PIC_8 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
vaderPool_1(IVaderPoolV2) := _vaderPool_1(IVaderPoolV2)
asgn
init
end
_______________

Name: _vaderPool Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for vaderPool

Name: vaderPool Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


TMP_11 = CONVERT 0 to address
TMP_12(bool) = _vader_1 != TMP_11
TMP_13 = CONVERT 0 to address
TMP_14 = CONVERT TMP_13 to IVaderPoolV2
TMP_15(bool) = _vaderPool_1 != TMP_14
TMP_16(bool) = TMP_12 && TMP_15
TMP_17(None) = SOLIDITY_CALL require(bool,string)(TMP_16,LBTWAP::construction: Zero Address)
vader_1(address) := _vader_1(address)
vaderPool_1(IVaderPoolV2) := _vaderPool_1(IVaderPoolV2)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _vaderPool, Num: 1
Globalname: _vaderPool
End popogation
TMP_11 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_11

Name: TMP_11 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_12(bool) = _vader_1 != TMP_11
[i]Type for TMP_12

Name: TMP_12 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_13 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_13

Name: TMP_13 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_14 = CONVERT TMP_13 to IVaderPoolV2
Converting TMP_13

Name: TMP_13 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_13 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
VaderPoolV2
[i]Type for TMP_14

Name: TMP_14 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: VaderPoolV2
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_15(bool) = _vaderPool_1 != TMP_14
[i]Type for TMP_15

Name: TMP_15 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_16(bool) = TMP_12 && TMP_15
[i]Type for TMP_16

Name: TMP_16 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_17(None) = SOLIDITY_CALL require(bool,string)(TMP_16,LBTWAP::construction: Zero Address)
[i]Type for TMP_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
vader_1(address) := _vader_1(address)
asgn
init
end
_______________

Name: _vader Function: None
Num: 
Den: 
Address: -999
Norm: u
LF: _vader
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for vader

Name: vader Function: constructor
Num: -1
Den: -1
Address: -999
Norm: u
LF: _vader
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _vaderPool, Num: 1
Globalname: _vaderPool
End popogation
vaderPool_1(IVaderPoolV2) := _vaderPool_1(IVaderPoolV2)
asgn
init
end
_______________

Name: _vaderPool Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for vaderPool

Name: vaderPool Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX



getStaleVaderPrice


vaderPairs_1(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
totalLiquidityWeight_1(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
twapData_1(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
REF_0 -> LENGTH vaderPairs_1
totalPairs_1(uint256) := REF_0(uint256)
TMP_19 = new uint256[](totalPairs_1)
pastLiquidityWeights_1(uint256[]) := TMP_19(uint256)
REF_1(ILiquidityBasedTWAP.Paths) -> Paths.VADER
TMP_20 = CONVERT REF_1 to uint256
REF_2(uint256) -> totalLiquidityWeight_1[TMP_20]
pastTotalLiquidityWeight_1(uint256) := REF_2(uint256)
i_1(uint256) := ϕ(['i_0', 'i_2'])
TMP_21(bool) = i_1 < totalPairs_1
CONDITION TMP_21
REF_3(uint256) -> pastLiquidityWeights_1[i_1]
REF_4(IUniswapV2Pair) -> vaderPairs_1[i_1]
TMP_22 = CONVERT REF_4 to address
REF_5(ILiquidityBasedTWAP.ExchangePair) -> twapData_1[TMP_22]
REF_6(uint256) -> REF_5.pastLiquidityEvaluation
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
REF_3 (->pastLiquidityWeights_2) := REF_6(uint256)
i_2(uint256) = i_1 (c)+ 1
TMP_23(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateVaderPrice(uint256[],uint256)(pastLiquidityWeights_1,pastTotalLiquidityWeight_1)
RETURN TMP_23


Propogating parameters and globals to SSA variables...
End popogation
Name: vaderPairs, Num: 1
Globalname: vaderPairs
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 1
Globalname: totalLiquidityWeight
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: twapData, Num: 1
Globalname: twapData
global...

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
vaderPairs_1(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_1(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_1(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
End popogation
REF_0 -> LENGTH vaderPairs_1
[i]Type for REF_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_0(uint256)
asgn
init
end
_______________

Name: REF_0 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_19 = new uint256[](totalPairs_1)
[i]Type for TMP_19

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1(uint256[]) := TMP_19(uint256)
asgn
init
end
_______________

Name: TMP_19 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastTotalLiquidityWeight, Num: 1
Globalname: pastTotalLiquidityWeight
End popogation
REF_1(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
OUT KEY: global_Paths_VADER
OUT KEY: global_Paths_VADER
FTT: None
No field found
[i]Type for REF_1

Name: Paths.VADER Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_20 = CONVERT REF_1 to uint256
Converting REF_1

Name: Paths.VADER Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_20

Name: TMP_20 Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_2(uint256) -> totalLiquidityWeight_1[TMP_20]
INDEX
[i]Type for REF_2

Name: totalLiquidityWeight Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastTotalLiquidityWeight_1(uint256) := REF_2(uint256)
asgn
init
end
_______________

Name: totalLiquidityWeight Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: i, Num: 1
Globalname: i
End popogation
Name: i, Num: 1
Globalname: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
i_1(uint256) := ϕ(['i_0', 'i_2'])
Phi
[i]Type for i

Name: i Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_21(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: totalPairs Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: totalPairs Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_21

Name: TMP_21 Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_3(uint256) -> pastLiquidityWeights_1[i_1]
INDEX
[i]Type for REF_3

Name: pastLiquidityWeights Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_4(IUniswapV2Pair) -> vaderPairs_1[i_1]
INDEX
[i]Type for REF_4

Name: vaderPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_22 = CONVERT REF_4 to address
Converting REF_4

Name: vaderPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: vaderPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_22

Name: TMP_22 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_5(ILiquidityBasedTWAP.ExchangePair) -> twapData_1[TMP_22]
INDEX
[i]Type for REF_5

Name: twapData Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_6(uint256) -> REF_5.pastLiquidityEvaluation
MEMBER
init
end
init
end
OUT KEY: getStaleVaderPrice_twapData_pastLiquidityEvaluation
OUT KEY: getStaleVaderPrice_twapData_pastLiquidityEvaluation
FTT: None
No field found
[i]Type for REF_6

Name: twapData.pastLiquidityEvaluation Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_5, Field: pastLiquidityEvaluation
#################
Member: 
Name: twapData Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: twapData.pastLiquidityEvaluation Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_3 (->pastLiquidityWeights_2) := REF_6(uint256)
asgn
init
end
_______________

Name: twapData.pastLiquidityEvaluation Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_3

Name: REF_3 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: i, Num: 2
Globalname: i
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_23(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateVaderPrice(uint256[],uint256)(pastLiquidityWeights_1,pastTotalLiquidityWeight_1)
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: liquidityWeights Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: totalVaderLiquidityWeight Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights

Name: liquidityWeights_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalVaderLiquidityWeight_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: vaderPairs, Num: 4
Globalname: vaderPairs
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: twapData, Num: 6
Globalname: twapData
global...

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
liquidityWeights_1(uint256[]) := ϕ(['pastLiquidityWeights_1', 'pastLiquidityWeights_1 (-> [])'])
Phi
[i]Type for liquidityWeights

Name: liquidityWeights Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalVaderLiquidityWeight_1(uint256) := ϕ(['pastTotalLiquidityWeight_1', 'pastTotalLiquidityWeight_1'])
Phi
[i]Type for totalVaderLiquidityWeight

Name: totalVaderLiquidityWeight Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_4(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_6(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
End popogation
REF_39 -> LENGTH vaderPairs_4
[i]Type for REF_39

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_39(uint256)
asgn
init
end
_______________

Name: REF_39 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: i, Num: 1
Globalname: i
Name: totalUSD, Num: 1
Globalname: totalUSD
Name: totalVader, Num: 1
Globalname: totalVader
End popogation
Name: totalUSD, Num: 1
Globalname: totalUSD

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalVader, Num: 1
Globalname: totalVader

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: i, Num: 1
Globalname: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
totalUSD_1(uint256) := ϕ(['totalUSD_0', 'totalUSD_2'])
Phi
[i]Type for totalUSD

Name: totalUSD Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalVader_1(uint256) := ϕ(['totalVader_2', 'totalVader_0'])
Phi
[i]Type for totalVader

Name: totalVader Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_1(uint256) := ϕ(['i_0', 'i_2'])
Phi
[i]Type for i

Name: i Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_57(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: totalPairs Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: totalPairs Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_57

Name: TMP_57 Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: pair, Num: 1
Globalname: pair
End popogation
REF_40(IUniswapV2Pair) -> vaderPairs_4[i_1]
INDEX
[i]Type for REF_40

Name: vaderPairs Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pair_1(IUniswapV2Pair) := REF_40(IUniswapV2Pair)
asgn
init
end
_______________

Name: vaderPairs Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pair

Name: pair Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 1 (-> ['twapData'])
Globalname: pairData
End popogation
TMP_58 = CONVERT pair_1 to address
Converting pair_1

Name: pair Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_58

Name: TMP_58 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_41(ILiquidityBasedTWAP.ExchangePair) -> twapData_6[TMP_58]
INDEX
[i]Type for REF_41

Name: twapData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_41(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: foreignPrice, Num: 1
Globalname: foreignPrice
End popogation
REF_42(address) -> pairData_1 (-> ['twapData']).foreignAsset
MEMBER
init
end
init
end
OUT KEY: _calculateVaderPrice_pairData_foreignAsset
OUT KEY: _calculateVaderPrice_pairData_foreignAsset
FTT: None
No field found
[i]Type for REF_42

Name: pairData.foreignAsset Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignAsset
#################
Member: 
Name: pairData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: foreignAsset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignAsset Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_59(uint256) = INTERNAL_CALL, LiquidityBasedTWAP.getChainlinkPrice(address)(REF_42)
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: asset Function: None
Num: 
Den: 
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: asset, Num: 1
Globalname: asset

Name: asset_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid
Name: oracles, Num: 1
Globalname: oracles
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: asset, Num: 1
Globalname: asset
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
global assignment: 4
4
Finding type for hlc_0([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: asset, Num: 1
Globalname: asset

Name: asset_1 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: asset, Num: 1
Globalname: asset
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_59

Name: TMP_59 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignPrice_1(uint256) := TMP_59(uint256)
asgn
init
end
_______________

Name: TMP_59 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignPrice

Name: foreignPrice Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights
Name: totalUSD, Num: 1
Globalname: totalUSD
Name: totalUSD, Num: 2
Globalname: totalUSD
End popogation
REF_43(uint256) -> liquidityWeights_1[i_1]
INDEX
[i]Type for REF_43

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_60(uint256) = foreignPrice_1 (c)* REF_43
testing mul...
init
end
init
end

Name: foreignPrice Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_60

Name: TMP_60 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_61(uint256) = TMP_60 (c)/ totalVaderLiquidityWeight_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_61

Name: TMP_61 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSD_2(uint256) = totalUSD_1 (c)+ TMP_61
init
end
init
end
init
end
_______________

Name: TMP_61 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalUSD

Name: totalUSD Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights
Name: totalVader, Num: 1
Globalname: totalVader
Name: totalVader, Num: 2
Globalname: totalVader
End popogation
REF_44(FixedPoint.uq112x112) -> pairData_1 (-> ['twapData']).nativeTokenPriceAverage
MEMBER
init
end
init
end
OUT KEY: _calculateVaderPrice_pairData_nativeTokenPriceAverage
OUT KEY: _calculateVaderPrice_pairData_nativeTokenPriceAverage
FTT: None
No field found
[i]Type for REF_44

Name: pairData.nativeTokenPriceAverage Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: nativeTokenPriceAverage
#################
Member: 
Name: pairData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceAverage Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceAverage Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
REF_46(uint96) -> pairData_1 (-> ['twapData']).foreignUnit
MEMBER
init
end
init
end
OUT KEY: _calculateVaderPrice_pairData_foreignUnit
OUT KEY: _calculateVaderPrice_pairData_foreignUnit
FTT: None
No field found
[i]Type for REF_46

Name: pairData.foreignUnit Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignUnit
#################
Member: 
Name: pairData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset, nativeTokenPriceAverage
Finance Type: undef
Fieldf: 
Name: foreignUnit Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignUnit Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_62(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_44', 'REF_46'] 
testing mul...
init
end
init
end

Name: pairData.nativeTokenPriceAverage Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: pairData.foreignUnit Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: pairData.foreignUnit Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_62

Name: TMP_62 Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_63(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_62'] 
Written func info: FixedPoint, decode144
Handling balance function!
u
prev address? u
global assignment: 5
5
Finding type for TMP_63(uint144 ... )
[i]Type for TMP_63

Name: TMP_63 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_48(uint256) -> liquidityWeights_1[i_1]
INDEX
[i]Type for REF_48

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_64(uint144) = TMP_63 (c)* REF_48
testing mul...
init
end
init
end

Name: TMP_63 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_64

Name: TMP_64 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_65(uint144) = TMP_64 (c)/ totalVaderLiquidityWeight_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_65

Name: TMP_65 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalVader_2(uint256) = totalVader_1 (c)+ TMP_65
init
end
init
end
init
end
_______________

Name: TMP_65 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalVader

Name: totalVader Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: i, Num: 2
Globalname: i
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: totalUSD, Num: 1
Globalname: totalUSD
Name: totalVader, Num: 1
Globalname: totalVader
End popogation
TMP_66(uint256) = totalUSD_1 (c)* 1000000000000000000
testing mul...
init
end
init
end

Name: totalUSD Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
_______________

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_66

Name: TMP_66 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_67(uint256) = TMP_66 (c)/ totalVader_1
init
end
init
end
lnorm: 18 rnorm: u
init
end
_______________

Name: TMP_66 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
lnorm: 18 rnorm: u
[i]Type for TMP_67

Name: TMP_67 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_67
RETURN
init
end

Name: TMP_67 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalVaderLiquidityWeight_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: vaderPairs Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
liquidityWeights_1(uint256[]) := ϕ(['pastLiquidityWeights_1', 'pastLiquidityWeights_1 (-> [])'])
Phi
[i]Type for liquidityWeights

Name: liquidityWeights Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalVaderLiquidityWeight_1(uint256) := ϕ(['pastTotalLiquidityWeight_1', 'pastTotalLiquidityWeight_1'])
Phi
[i]Type for totalVaderLiquidityWeight

Name: totalVaderLiquidityWeight Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_4(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_6(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
End popogation
REF_39 -> LENGTH vaderPairs_4
[i]Type for REF_39

Name: REF_39 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_39(uint256)
asgn
init
end
_______________

Name: REF_39 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: i, Num: 1
Globalname: i
Name: totalUSD, Num: 1
Globalname: totalUSD
Name: totalVader, Num: 1
Globalname: totalVader
End popogation
Name: totalUSD, Num: 1
Globalname: totalUSD

Name: totalUSD Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalVader, Num: 1
Globalname: totalVader

Name: totalVader Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: i, Num: 1
Globalname: i

Name: i Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
totalUSD_1(uint256) := ϕ(['totalUSD_0', 'totalUSD_2'])
Phi
init
end
_______________

Name: totalUSD Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalUSD

Name: totalUSD Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalVader_1(uint256) := ϕ(['totalVader_2', 'totalVader_0'])
Phi
init
end
_______________

Name: totalVader Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalVader

Name: totalVader Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_1(uint256) := ϕ(['i_0', 'i_2'])
Phi
init
end
_______________

Name: i Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_57(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: i Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: i Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_57

Name: TMP_57 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pair, Num: 1
Globalname: pair
End popogation
REF_40(IUniswapV2Pair) -> vaderPairs_4[i_1]
INDEX
[i]Type for REF_40

Name: vaderPairs Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pair_1(IUniswapV2Pair) := REF_40(IUniswapV2Pair)
asgn
init
end
_______________

Name: vaderPairs Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pair

Name: pair Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 1 (-> ['twapData'])
Globalname: pairData
End popogation
TMP_58 = CONVERT pair_1 to address
Converting pair_1

Name: pair Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_58

Name: TMP_58 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_41(ILiquidityBasedTWAP.ExchangePair) -> twapData_6[TMP_58]
INDEX
[i]Type for REF_41

Name: twapData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_41(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset, nativeTokenPriceAverage, foreignUnit
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: foreignPrice, Num: 1
Globalname: foreignPrice
End popogation
REF_42(address) -> pairData_1 (-> ['twapData']).foreignAsset
MEMBER
init
end
init
end
[i]Type for REF_42

Name: pairData.foreignAsset Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignAsset
#################
Member: 
Name: pairData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset, nativeTokenPriceAverage, foreignUnit
Finance Type: undef
Fieldf: 
Name: foreignAsset Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignAsset Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: foreignAsset Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_59(uint256) = INTERNAL_CALL, LiquidityBasedTWAP.getChainlinkPrice(address)(REF_42)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: asset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_0([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_59

Name: TMP_59 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignPrice_1(uint256) := TMP_59(uint256)
asgn
init
end
_______________

Name: TMP_59 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignPrice

Name: foreignPrice Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights
Name: totalUSD, Num: 2
Globalname: totalUSD
End popogation
REF_43(uint256) -> liquidityWeights_1[i_1]
INDEX
[i]Type for REF_43

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_60(uint256) = foreignPrice_1 (c)* REF_43
testing mul...
init
end
init
end

Name: foreignPrice Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_60

Name: TMP_60 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_61(uint256) = TMP_60 (c)/ totalVaderLiquidityWeight_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_61

Name: TMP_61 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSD_2(uint256) = totalUSD_1 (c)+ TMP_61
init
end
init
end
init
end
_______________

Name: TMP_61 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalUSD

Name: totalUSD Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights
Name: totalVader, Num: 2
Globalname: totalVader
End popogation
REF_44(FixedPoint.uq112x112) -> pairData_1 (-> ['twapData']).nativeTokenPriceAverage
MEMBER
init
end
init
end
[i]Type for REF_44

Name: pairData.nativeTokenPriceAverage Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: nativeTokenPriceAverage
#################
Member: 
Name: pairData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset, nativeTokenPriceAverage, foreignUnit
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceAverage Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceAverage Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceAverage Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_46(uint96) -> pairData_1 (-> ['twapData']).foreignUnit
MEMBER
init
end
init
end
[i]Type for REF_46

Name: pairData.foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignUnit
#################
Member: 
Name: pairData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset, nativeTokenPriceAverage, foreignUnit
Finance Type: undef
Fieldf: 
Name: foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_62(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_44', 'REF_46'] 
testing mul...
init
end
init
end

Name: pairData.nativeTokenPriceAverage Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: pairData.foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: pairData.foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_62

Name: TMP_62 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_63(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_62'] 
Written func info: FixedPoint, decode144
Handling balance function!
5
Finding type for TMP_63(uint144 ... )
[i]Type for TMP_63

Name: TMP_63 Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_48(uint256) -> liquidityWeights_1[i_1]
INDEX
[i]Type for REF_48

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_64(uint144) = TMP_63 (c)* REF_48
testing mul...
init
end
init
end

Name: TMP_63 Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_64

Name: TMP_64 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_65(uint144) = TMP_64 (c)/ totalVaderLiquidityWeight_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_65

Name: TMP_65 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalVader_2(uint256) = totalVader_1 (c)+ TMP_65
init
end
init
end
init
end
_______________

Name: TMP_65 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalVader

Name: totalVader Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 2
Globalname: i
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_66(uint256) = totalUSD_1 (c)* 1000000000000000000
testing mul...
init
end
init
end

Name: totalUSD Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
_______________

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_66

Name: TMP_66 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_67(uint256) = TMP_66 (c)/ totalVader_1
init
end
init
end
lnorm: 18 rnorm: u
init
end
init
end
init
end
lnorm: 18 rnorm: u
init
end
[i]Type for TMP_67

Name: TMP_67 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_67
RETURN
init
end

Name: TMP_67 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalVaderLiquidityWeight Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: vaderPairs Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
liquidityWeights_1(uint256[]) := ϕ(['pastLiquidityWeights_1', 'pastLiquidityWeights_1 (-> [])'])
Phi
[i]Type for liquidityWeights

Name: liquidityWeights Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalVaderLiquidityWeight_1(uint256) := ϕ(['pastTotalLiquidityWeight_1', 'pastTotalLiquidityWeight_1'])
Phi
[i]Type for totalVaderLiquidityWeight

Name: totalVaderLiquidityWeight Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_4(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_6(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_39 -> LENGTH vaderPairs_4
[i]Type for REF_39

Name: REF_39 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_39(uint256)
asgn
init
end
_______________

Name: REF_39 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: totalUSD Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalVader Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: i Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
totalUSD_1(uint256) := ϕ(['totalUSD_0', 'totalUSD_2'])
Phi
[i]Type for totalUSD

Name: totalUSD Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalVader_1(uint256) := ϕ(['totalVader_2', 'totalVader_0'])
Phi
[i]Type for totalVader

Name: totalVader Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_1(uint256) := ϕ(['i_0', 'i_2'])
Phi
[i]Type for i

Name: i Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_57(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_57

Name: TMP_57 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_40(IUniswapV2Pair) -> vaderPairs_4[i_1]
INDEX
[i]Type for REF_40

Name: vaderPairs Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pair_1(IUniswapV2Pair) := REF_40(IUniswapV2Pair)
asgn
init
end
_______________

Name: vaderPairs Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pair

Name: pair Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_58 = CONVERT pair_1 to address
Converting pair_1

Name: pair Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_58

Name: TMP_58 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_41(ILiquidityBasedTWAP.ExchangePair) -> twapData_6[TMP_58]
INDEX
[i]Type for REF_41

Name: twapData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_41(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset, nativeTokenPriceAverage, foreignUnit
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_42(address) -> pairData_1 (-> ['twapData']).foreignAsset
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.foreignAsset Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_42

Name: pairData.foreignAsset Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignAsset
#################
Member: 
Name: pairData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset, nativeTokenPriceAverage, foreignUnit
Finance Type: undef
Fieldf: 
Name: foreignAsset Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignAsset Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: foreignAsset Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_59(uint256) = INTERNAL_CALL, LiquidityBasedTWAP.getChainlinkPrice(address)(REF_42)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: asset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_0([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_59

Name: TMP_59 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignPrice_1(uint256) := TMP_59(uint256)
asgn
init
end
_______________

Name: TMP_59 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignPrice

Name: foreignPrice Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights
End popogation
REF_43(uint256) -> liquidityWeights_1[i_1]
INDEX
[i]Type for REF_43

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_60(uint256) = foreignPrice_1 (c)* REF_43
testing mul...
init
end
init
end

Name: foreignPrice Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_60

Name: TMP_60 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_61(uint256) = TMP_60 (c)/ totalVaderLiquidityWeight_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_61

Name: TMP_61 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSD_2(uint256) = totalUSD_1 (c)+ TMP_61
init
end
init
end
init
end
_______________

Name: TMP_61 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalUSD

Name: totalUSD Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights
End popogation
REF_44(FixedPoint.uq112x112) -> pairData_1 (-> ['twapData']).nativeTokenPriceAverage
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.nativeTokenPriceAverage Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_44

Name: pairData.nativeTokenPriceAverage Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: nativeTokenPriceAverage
#################
Member: 
Name: pairData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset, nativeTokenPriceAverage, foreignUnit
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceAverage Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceAverage Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceAverage Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_46(uint96) -> pairData_1 (-> ['twapData']).foreignUnit
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_46

Name: pairData.foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignUnit
#################
Member: 
Name: pairData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset, nativeTokenPriceAverage, foreignUnit
Finance Type: undef
Fieldf: 
Name: foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_62(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_44', 'REF_46'] 
testing mul...
init
end
init
end

Name: pairData.nativeTokenPriceAverage Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: pairData.foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: pairData.foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_62

Name: TMP_62 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_63(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_62'] 
Written func info: FixedPoint, decode144
Handling balance function!
5
Finding type for TMP_63(uint144 ... )
[i]Type for TMP_63

Name: TMP_63 Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_48(uint256) -> liquidityWeights_1[i_1]
INDEX
[i]Type for REF_48

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_64(uint144) = TMP_63 (c)* REF_48
testing mul...
init
end
init
end

Name: TMP_63 Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_64

Name: TMP_64 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_65(uint144) = TMP_64 (c)/ totalVaderLiquidityWeight_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_65

Name: TMP_65 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalVader_2(uint256) = totalVader_1 (c)+ TMP_65
init
end
init
end
init
end
_______________

Name: TMP_65 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalVader

Name: totalVader Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_66(uint256) = totalUSD_1 (c)* 1000000000000000000
testing mul...
init
end
init
end

Name: totalUSD Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
_______________

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_66

Name: TMP_66 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_67(uint256) = TMP_66 (c)/ totalVader_1
init
end
init
end
lnorm: 18 rnorm: u
init
end
init
end
init
end
lnorm: 18 rnorm: u
init
end
[i]Type for TMP_67

Name: TMP_67 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_67
RETURN
init
end

Name: TMP_67 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalVaderLiquidityWeight Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: vaderPairs Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
liquidityWeights_1(uint256[]) := ϕ(['pastLiquidityWeights_1', 'pastLiquidityWeights_1 (-> [])'])
Phi
[i]Type for liquidityWeights

Name: liquidityWeights Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalVaderLiquidityWeight_1(uint256) := ϕ(['pastTotalLiquidityWeight_1', 'pastTotalLiquidityWeight_1'])
Phi
[i]Type for totalVaderLiquidityWeight

Name: totalVaderLiquidityWeight Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_4(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_6(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_39 -> LENGTH vaderPairs_4
[i]Type for REF_39

Name: REF_39 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_39(uint256)
asgn
init
end
_______________

Name: REF_39 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: totalUSD Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalVader Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: i Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
totalUSD_1(uint256) := ϕ(['totalUSD_0', 'totalUSD_2'])
Phi
[i]Type for totalUSD

Name: totalUSD Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalVader_1(uint256) := ϕ(['totalVader_2', 'totalVader_0'])
Phi
[i]Type for totalVader

Name: totalVader Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_1(uint256) := ϕ(['i_0', 'i_2'])
Phi
[i]Type for i

Name: i Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_57(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_57

Name: TMP_57 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_40(IUniswapV2Pair) -> vaderPairs_4[i_1]
INDEX
[i]Type for REF_40

Name: vaderPairs Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pair_1(IUniswapV2Pair) := REF_40(IUniswapV2Pair)
asgn
init
end
_______________

Name: vaderPairs Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pair

Name: pair Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_58 = CONVERT pair_1 to address
Converting pair_1

Name: pair Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_58

Name: TMP_58 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_41(ILiquidityBasedTWAP.ExchangePair) -> twapData_6[TMP_58]
INDEX
[i]Type for REF_41

Name: twapData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_41(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset, nativeTokenPriceAverage, foreignUnit
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_42(address) -> pairData_1 (-> ['twapData']).foreignAsset
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.foreignAsset Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_42

Name: pairData.foreignAsset Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignAsset
#################
Member: 
Name: pairData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset, nativeTokenPriceAverage, foreignUnit
Finance Type: undef
Fieldf: 
Name: foreignAsset Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignAsset Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: foreignAsset Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_59(uint256) = INTERNAL_CALL, LiquidityBasedTWAP.getChainlinkPrice(address)(REF_42)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: asset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_0([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_59

Name: TMP_59 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignPrice_1(uint256) := TMP_59(uint256)
asgn
init
end
_______________

Name: TMP_59 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignPrice

Name: foreignPrice Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights
End popogation
REF_43(uint256) -> liquidityWeights_1[i_1]
INDEX
[i]Type for REF_43

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_60(uint256) = foreignPrice_1 (c)* REF_43
testing mul...
init
end
init
end

Name: foreignPrice Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_60

Name: TMP_60 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_61(uint256) = TMP_60 (c)/ totalVaderLiquidityWeight_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_61

Name: TMP_61 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSD_2(uint256) = totalUSD_1 (c)+ TMP_61
init
end
init
end
init
end
_______________

Name: TMP_61 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalUSD

Name: totalUSD Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights
End popogation
REF_44(FixedPoint.uq112x112) -> pairData_1 (-> ['twapData']).nativeTokenPriceAverage
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.nativeTokenPriceAverage Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_44

Name: pairData.nativeTokenPriceAverage Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: nativeTokenPriceAverage
#################
Member: 
Name: pairData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset, nativeTokenPriceAverage, foreignUnit
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceAverage Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceAverage Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceAverage Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_46(uint96) -> pairData_1 (-> ['twapData']).foreignUnit
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_46

Name: pairData.foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignUnit
#################
Member: 
Name: pairData Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset, nativeTokenPriceAverage, foreignUnit
Finance Type: undef
Fieldf: 
Name: foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_62(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_44', 'REF_46'] 
testing mul...
init
end
init
end

Name: pairData.nativeTokenPriceAverage Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: pairData.foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: pairData.foreignUnit Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_62

Name: TMP_62 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_63(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_62'] 
Written func info: FixedPoint, decode144
Handling balance function!
5
Finding type for TMP_63(uint144 ... )
[i]Type for TMP_63

Name: TMP_63 Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_48(uint256) -> liquidityWeights_1[i_1]
INDEX
[i]Type for REF_48

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_64(uint144) = TMP_63 (c)* REF_48
testing mul...
init
end
init
end

Name: TMP_63 Function: _calculateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityWeights_1 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_64

Name: TMP_64 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_65(uint144) = TMP_64 (c)/ totalVaderLiquidityWeight_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_65

Name: TMP_65 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalVader_2(uint256) = totalVader_1 (c)+ TMP_65
init
end
init
end
init
end
_______________

Name: TMP_65 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalVader

Name: totalVader Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_66(uint256) = totalUSD_1 (c)* 1000000000000000000
testing mul...
init
end
init
end

Name: totalUSD Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
_______________

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_66

Name: TMP_66 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_67(uint256) = TMP_66 (c)/ totalVader_1
init
end
init
end
lnorm: 18 rnorm: u
init
end
init
end
init
end
lnorm: 18 rnorm: u
init
end
[i]Type for TMP_67

Name: TMP_67 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_67
RETURN
init
end

Name: TMP_67 Function: _calculateVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_23

Name: TMP_23 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_23
RETURN
init
end

Name: TMP_23 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef


vaderPairs_1(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
totalLiquidityWeight_1(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
twapData_1(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
REF_0 -> LENGTH vaderPairs_1
totalPairs_1(uint256) := REF_0(uint256)
TMP_19 = new uint256[](totalPairs_1)
pastLiquidityWeights_1(uint256[]) := TMP_19(uint256)
REF_1(ILiquidityBasedTWAP.Paths) -> Paths.VADER
TMP_20 = CONVERT REF_1 to uint256
REF_2(uint256) -> totalLiquidityWeight_1[TMP_20]
pastTotalLiquidityWeight_1(uint256) := REF_2(uint256)
i_1(uint256) := ϕ(['i_0', 'i_2'])
TMP_21(bool) = i_1 < totalPairs_1
CONDITION TMP_21
REF_3(uint256) -> pastLiquidityWeights_1[i_1]
REF_4(IUniswapV2Pair) -> vaderPairs_1[i_1]
TMP_22 = CONVERT REF_4 to address
REF_5(ILiquidityBasedTWAP.ExchangePair) -> twapData_1[TMP_22]
REF_6(uint256) -> REF_5.pastLiquidityEvaluation
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
REF_3 (->pastLiquidityWeights_2) := REF_6(uint256)
i_2(uint256) = i_1 (c)+ 1
TMP_23(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateVaderPrice(uint256[],uint256)(pastLiquidityWeights_1,pastTotalLiquidityWeight_1)
RETURN TMP_23


Propogating parameters and globals to SSA variables...
End popogation

Name: vaderPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
Phid
vaderPairs_1(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_1(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_1(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
End popogation
REF_0 -> LENGTH vaderPairs_1
[i]Type for REF_0

Name: REF_0 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_0(uint256)
asgn
init
end
_______________

Name: REF_0 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_19 = new uint256[](totalPairs_1)
[i]Type for TMP_19

Name: TMP_19 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1(uint256[]) := TMP_19(uint256)
asgn
init
end
_______________

Name: TMP_19 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastTotalLiquidityWeight, Num: 1
Globalname: pastTotalLiquidityWeight
End popogation
REF_1(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
[i]Type for REF_1

Name: Paths.VADER Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER
Finance Type: undef
Fieldf: 
Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_20 = CONVERT REF_1 to uint256
Converting REF_1

Name: Paths.VADER Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_20

Name: TMP_20 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_2(uint256) -> totalLiquidityWeight_1[TMP_20]
INDEX
[i]Type for REF_2

Name: totalLiquidityWeight Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastTotalLiquidityWeight_1(uint256) := REF_2(uint256)
asgn
init
end
_______________

Name: totalLiquidityWeight Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: i, Num: 1
Globalname: i
End popogation
Name: i, Num: 1
Globalname: i

Name: i Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
i_1(uint256) := ϕ(['i_0', 'i_2'])
Phi
init
end
_______________

Name: i Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_21(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: i Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: i Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_21

Name: TMP_21 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_3(uint256) -> pastLiquidityWeights_1[i_1]
INDEX
[i]Type for REF_3

Name: pastLiquidityWeights Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_4(IUniswapV2Pair) -> vaderPairs_1[i_1]
INDEX
[i]Type for REF_4

Name: vaderPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_22 = CONVERT REF_4 to address
Converting REF_4

Name: vaderPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: vaderPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_22

Name: TMP_22 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_5(ILiquidityBasedTWAP.ExchangePair) -> twapData_1[TMP_22]
INDEX
[i]Type for REF_5

Name: twapData Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
Root: None, Field: None
XXXX
REF_6(uint256) -> REF_5.pastLiquidityEvaluation
MEMBER
init
end
init
end
[i]Type for REF_6

Name: twapData.pastLiquidityEvaluation Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_5, Field: pastLiquidityEvaluation
#################
Member: 
Name: twapData Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: twapData.pastLiquidityEvaluation Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_3 (->pastLiquidityWeights_2) := REF_6(uint256)
asgn
init
end
_______________

Name: twapData.pastLiquidityEvaluation Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_3

Name: REF_3 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 2
Globalname: i
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_23(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateVaderPrice(uint256[],uint256)(pastLiquidityWeights_1,pastTotalLiquidityWeight_1)
init
end
init
end
init
end
_______________

Name: PIC_16 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_23

Name: TMP_23 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_23
RETURN
init
end

Name: TMP_23 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef


vaderPairs_1(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
totalLiquidityWeight_1(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
twapData_1(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
REF_0 -> LENGTH vaderPairs_1
totalPairs_1(uint256) := REF_0(uint256)
TMP_19 = new uint256[](totalPairs_1)
pastLiquidityWeights_1(uint256[]) := TMP_19(uint256)
REF_1(ILiquidityBasedTWAP.Paths) -> Paths.VADER
TMP_20 = CONVERT REF_1 to uint256
REF_2(uint256) -> totalLiquidityWeight_1[TMP_20]
pastTotalLiquidityWeight_1(uint256) := REF_2(uint256)
i_1(uint256) := ϕ(['i_0', 'i_2'])
TMP_21(bool) = i_1 < totalPairs_1
CONDITION TMP_21
REF_3(uint256) -> pastLiquidityWeights_1[i_1]
REF_4(IUniswapV2Pair) -> vaderPairs_1[i_1]
TMP_22 = CONVERT REF_4 to address
REF_5(ILiquidityBasedTWAP.ExchangePair) -> twapData_1[TMP_22]
REF_6(uint256) -> REF_5.pastLiquidityEvaluation
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
REF_3 (->pastLiquidityWeights_2) := REF_6(uint256)
i_2(uint256) = i_1 (c)+ 1
TMP_23(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateVaderPrice(uint256[],uint256)(pastLiquidityWeights_1,pastTotalLiquidityWeight_1)
RETURN TMP_23


Propogating parameters and globals to SSA variables...
End popogation

Name: vaderPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
Phid
vaderPairs_1(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_1(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_1(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_0 -> LENGTH vaderPairs_1
[i]Type for REF_0

Name: REF_0 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_0(uint256)
asgn
init
end
_______________

Name: REF_0 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_19 = new uint256[](totalPairs_1)
[i]Type for TMP_19

Name: TMP_19 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1(uint256[]) := TMP_19(uint256)
asgn
init
end
_______________

Name: TMP_19 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_1(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
init
end
_______________

Name: Paths.VADER Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_1

Name: Paths.VADER Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER
Finance Type: undef
Fieldf: 
Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_20 = CONVERT REF_1 to uint256
Converting REF_1

Name: Paths.VADER Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_20

Name: TMP_20 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_2(uint256) -> totalLiquidityWeight_1[TMP_20]
INDEX
[i]Type for REF_2

Name: totalLiquidityWeight Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastTotalLiquidityWeight_1(uint256) := REF_2(uint256)
asgn
init
end
_______________

Name: totalLiquidityWeight Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: i Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
i_1(uint256) := ϕ(['i_0', 'i_2'])
Phi
[i]Type for i

Name: i Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_21(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_21

Name: TMP_21 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_3(uint256) -> pastLiquidityWeights_1[i_1]
INDEX
[i]Type for REF_3

Name: pastLiquidityWeights Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_4(IUniswapV2Pair) -> vaderPairs_1[i_1]
INDEX
[i]Type for REF_4

Name: vaderPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_22 = CONVERT REF_4 to address
Converting REF_4

Name: vaderPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: vaderPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_22

Name: TMP_22 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_5(ILiquidityBasedTWAP.ExchangePair) -> twapData_1[TMP_22]
INDEX
[i]Type for REF_5

Name: twapData Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
Root: None, Field: None
XXXX
REF_6(uint256) -> REF_5.pastLiquidityEvaluation
MEMBER
init
end
init
end
init
end
_______________

Name: twapData.pastLiquidityEvaluation Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_6

Name: twapData.pastLiquidityEvaluation Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_5, Field: pastLiquidityEvaluation
#################
Member: 
Name: twapData Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: twapData.pastLiquidityEvaluation Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_3 (->pastLiquidityWeights_2) := REF_6(uint256)
asgn
init
end
_______________

Name: twapData.pastLiquidityEvaluation Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_3

Name: REF_3 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_23(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateVaderPrice(uint256[],uint256)(pastLiquidityWeights_1,pastTotalLiquidityWeight_1)
init
end
init
end
init
end
_______________

Name: PIC_16 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_23

Name: TMP_23 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_23
RETURN
init
end

Name: TMP_23 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef


vaderPairs_1(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
totalLiquidityWeight_1(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
twapData_1(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
REF_0 -> LENGTH vaderPairs_1
totalPairs_1(uint256) := REF_0(uint256)
TMP_19 = new uint256[](totalPairs_1)
pastLiquidityWeights_1(uint256[]) := TMP_19(uint256)
REF_1(ILiquidityBasedTWAP.Paths) -> Paths.VADER
TMP_20 = CONVERT REF_1 to uint256
REF_2(uint256) -> totalLiquidityWeight_1[TMP_20]
pastTotalLiquidityWeight_1(uint256) := REF_2(uint256)
i_1(uint256) := ϕ(['i_0', 'i_2'])
TMP_21(bool) = i_1 < totalPairs_1
CONDITION TMP_21
REF_3(uint256) -> pastLiquidityWeights_1[i_1]
REF_4(IUniswapV2Pair) -> vaderPairs_1[i_1]
TMP_22 = CONVERT REF_4 to address
REF_5(ILiquidityBasedTWAP.ExchangePair) -> twapData_1[TMP_22]
REF_6(uint256) -> REF_5.pastLiquidityEvaluation
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
REF_3 (->pastLiquidityWeights_2) := REF_6(uint256)
i_2(uint256) = i_1 (c)+ 1
TMP_23(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateVaderPrice(uint256[],uint256)(pastLiquidityWeights_1,pastTotalLiquidityWeight_1)
RETURN TMP_23


Propogating parameters and globals to SSA variables...
End popogation

Name: vaderPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
Phid
vaderPairs_1(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_1(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_1(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_0 -> LENGTH vaderPairs_1
[i]Type for REF_0

Name: REF_0 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_0(uint256)
asgn
init
end
_______________

Name: REF_0 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_19 = new uint256[](totalPairs_1)
[i]Type for TMP_19

Name: TMP_19 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1(uint256[]) := TMP_19(uint256)
asgn
init
end
_______________

Name: TMP_19 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_1(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
init
end
_______________

Name: Paths.VADER Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_1

Name: Paths.VADER Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER
Finance Type: undef
Fieldf: 
Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_20 = CONVERT REF_1 to uint256
Converting REF_1

Name: Paths.VADER Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_20

Name: TMP_20 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_2(uint256) -> totalLiquidityWeight_1[TMP_20]
INDEX
[i]Type for REF_2

Name: totalLiquidityWeight Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastTotalLiquidityWeight_1(uint256) := REF_2(uint256)
asgn
init
end
_______________

Name: totalLiquidityWeight Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: i Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
i_1(uint256) := ϕ(['i_0', 'i_2'])
Phi
[i]Type for i

Name: i Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_21(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_21

Name: TMP_21 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_3(uint256) -> pastLiquidityWeights_1[i_1]
INDEX
[i]Type for REF_3

Name: pastLiquidityWeights Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_4(IUniswapV2Pair) -> vaderPairs_1[i_1]
INDEX
[i]Type for REF_4

Name: vaderPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_22 = CONVERT REF_4 to address
Converting REF_4

Name: vaderPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: vaderPairs Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_22

Name: TMP_22 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_5(ILiquidityBasedTWAP.ExchangePair) -> twapData_1[TMP_22]
INDEX
[i]Type for REF_5

Name: twapData Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
Root: None, Field: None
XXXX
REF_6(uint256) -> REF_5.pastLiquidityEvaluation
MEMBER
init
end
init
end
init
end
_______________

Name: twapData.pastLiquidityEvaluation Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_6

Name: twapData.pastLiquidityEvaluation Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_5, Field: pastLiquidityEvaluation
#################
Member: 
Name: twapData Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: twapData.pastLiquidityEvaluation Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_3 (->pastLiquidityWeights_2) := REF_6(uint256)
asgn
init
end
_______________

Name: twapData.pastLiquidityEvaluation Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_3

Name: REF_3 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_23(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateVaderPrice(uint256[],uint256)(pastLiquidityWeights_1,pastTotalLiquidityWeight_1)
init
end
init
end
init
end
_______________

Name: PIC_16 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_23

Name: TMP_23 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_23
RETURN
init
end

Name: TMP_23 Function: getStaleVaderPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: totalLiquidityWeight
State_var: twapData
State_var: usdvPairs
State_var: previousPrices
State_var: vaderPairs
State_var: vader
State_var: oracles
State_var: vaderPool
State_var: maxUpdateWindow
State_var: _owner



getStaleUSDVPrice


usdvPairs_1(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
totalLiquidityWeight_2(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
twapData_2(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
REF_7 -> LENGTH usdvPairs_1
totalPairs_1(uint256) := REF_7(uint256)
TMP_25 = new uint256[](totalPairs_1)
pastLiquidityWeights_1(uint256[]) := TMP_25(uint256)
REF_8(ILiquidityBasedTWAP.Paths) -> Paths.USDV
TMP_26 = CONVERT REF_8 to uint256
REF_9(uint256) -> totalLiquidityWeight_2[TMP_26]
pastTotalLiquidityWeight_1(uint256) := REF_9(uint256)
i_1(uint256) := ϕ(['i_2', 'i_0'])
TMP_27(bool) = i_1 < totalPairs_1
CONDITION TMP_27
REF_10(uint256) -> pastLiquidityWeights_1[i_1]
REF_11(IERC20) -> usdvPairs_1[i_1]
TMP_28 = CONVERT REF_11 to address
REF_12(ILiquidityBasedTWAP.ExchangePair) -> twapData_2[TMP_28]
REF_13(uint256) -> REF_12.pastLiquidityEvaluation
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
REF_10 (->pastLiquidityWeights_2) := REF_13(uint256)
i_2(uint256) = i_1 (c)+ 1
TMP_29(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateUSDVPrice(uint256[],uint256)(pastLiquidityWeights_1,pastTotalLiquidityWeight_1)
RETURN TMP_29


Propogating parameters and globals to SSA variables...
End popogation
Name: usdvPairs, Num: 1
Globalname: usdvPairs
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 2
Globalname: totalLiquidityWeight
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: twapData, Num: 2
Globalname: twapData
global...

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
usdvPairs_1(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_2(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_2(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
End popogation
REF_7 -> LENGTH usdvPairs_1
[i]Type for REF_7

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_7(uint256)
asgn
init
end
_______________

Name: REF_7 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_25 = new uint256[](totalPairs_1)
[i]Type for TMP_25

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1(uint256[]) := TMP_25(uint256)
asgn
init
end
_______________

Name: TMP_25 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastTotalLiquidityWeight, Num: 1
Globalname: pastTotalLiquidityWeight
End popogation
REF_8(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
OUT KEY: global_Paths_USDV
OUT KEY: global_Paths_USDV
FTT: None
No field found
[i]Type for REF_8

Name: Paths.USDV Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_26 = CONVERT REF_8 to uint256
Converting REF_8

Name: Paths.USDV Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_26

Name: TMP_26 Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_9(uint256) -> totalLiquidityWeight_2[TMP_26]
INDEX
[i]Type for REF_9

Name: totalLiquidityWeight Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastTotalLiquidityWeight_1(uint256) := REF_9(uint256)
asgn
init
end
_______________

Name: totalLiquidityWeight Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: i, Num: 1
Globalname: i
End popogation
Name: i, Num: 1
Globalname: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
i_1(uint256) := ϕ(['i_2', 'i_0'])
Phi
[i]Type for i

Name: i Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_27(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: totalPairs Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: totalPairs Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_27

Name: TMP_27 Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_10(uint256) -> pastLiquidityWeights_1[i_1]
INDEX
[i]Type for REF_10

Name: pastLiquidityWeights Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_11(IERC20) -> usdvPairs_1[i_1]
INDEX
[i]Type for REF_11

Name: usdvPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_28 = CONVERT REF_11 to address
Converting REF_11

Name: usdvPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: usdvPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_28

Name: TMP_28 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_12(ILiquidityBasedTWAP.ExchangePair) -> twapData_2[TMP_28]
INDEX
[i]Type for REF_12

Name: twapData Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_13(uint256) -> REF_12.pastLiquidityEvaluation
MEMBER
init
end
init
end
OUT KEY: getStaleUSDVPrice_twapData_pastLiquidityEvaluation
OUT KEY: getStaleUSDVPrice_twapData_pastLiquidityEvaluation
FTT: None
No field found
[i]Type for REF_13

Name: twapData.pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_12, Field: pastLiquidityEvaluation
#################
Member: 
Name: twapData Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: twapData.pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_10 (->pastLiquidityWeights_2) := REF_13(uint256)
asgn
init
end
_______________

Name: twapData.pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_10

Name: REF_10 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: i, Num: 2
Globalname: i
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_29(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateUSDVPrice(uint256[],uint256)(pastLiquidityWeights_1,pastTotalLiquidityWeight_1)
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: liquidityWeights Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: totalUSDVLiquidityWeight Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights

Name: liquidityWeights_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalUSDVLiquidityWeight_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: usdvPairs, Num: 4
Globalname: usdvPairs
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: twapData, Num: 20
Globalname: twapData
global...

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
liquidityWeights_1(uint256[]) := ϕ(['pastLiquidityWeights_1 (-> [])', 'pastLiquidityWeights_1'])
Phi
[i]Type for liquidityWeights

Name: liquidityWeights Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSDVLiquidityWeight_1(uint256) := ϕ(['pastTotalLiquidityWeight_1', 'pastTotalLiquidityWeight_1'])
Phi
[i]Type for totalUSDVLiquidityWeight

Name: totalUSDVLiquidityWeight Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
usdvPairs_4(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_20(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
End popogation
REF_102 -> LENGTH usdvPairs_4
[i]Type for REF_102

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_102(uint256)
asgn
init
end
_______________

Name: REF_102 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: i, Num: 1
Globalname: i
Name: totalUSD, Num: 1
Globalname: totalUSD
Name: totalUSDV, Num: 1
Globalname: totalUSDV
End popogation
Name: totalUSD, Num: 1
Globalname: totalUSD

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalUSDV, Num: 1
Globalname: totalUSDV

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: i, Num: 1
Globalname: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
totalUSD_1(uint256) := ϕ(['totalUSD_0', 'totalUSD_2'])
Phi
[i]Type for totalUSD

Name: totalUSD Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSDV_1(uint256) := ϕ(['totalUSDV_2', 'totalUSDV_0'])
Phi
[i]Type for totalUSDV

Name: totalUSDV Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_1(uint256) := ϕ(['i_0', 'i_2'])
Phi
[i]Type for i

Name: i Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_131(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: totalPairs Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: totalPairs Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_131

Name: TMP_131 Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: foreignAsset, Num: 1
Globalname: foreignAsset
End popogation
REF_103(IERC20) -> usdvPairs_4[i_1]
INDEX
[i]Type for REF_103

Name: usdvPairs Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
foreignAsset_1(IERC20) := REF_103(IERC20)
asgn
init
end
_______________

Name: usdvPairs Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignAsset

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 1 (-> ['twapData'])
Globalname: pairData
End popogation
TMP_132 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_132

Name: TMP_132 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_104(ILiquidityBasedTWAP.ExchangePair) -> twapData_20[TMP_132]
INDEX
[i]Type for REF_104

Name: twapData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_104(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: foreignPrice, Num: 1
Globalname: foreignPrice
End popogation
TMP_133 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_133

Name: TMP_133 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_134(uint256) = INTERNAL_CALL, LiquidityBasedTWAP.getChainlinkPrice(address)(TMP_133)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: asset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_0([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_134

Name: TMP_134 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignPrice_1(uint256) := TMP_134(uint256)
asgn
init
end
_______________

Name: TMP_134 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignPrice

Name: foreignPrice Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights
Name: totalUSD, Num: 1
Globalname: totalUSD
Name: i, Num: 1
Globalname: i
Name: totalUSD, Num: 2
Globalname: totalUSD
End popogation
REF_105(uint256) -> liquidityWeights_1[i_1]
INDEX
[i]Type for REF_105

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_135(uint256) = foreignPrice_1 (c)* REF_105
testing mul...
init
end
init
end

Name: foreignPrice Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_135

Name: TMP_135 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_136(uint256) = TMP_135 (c)/ totalUSDVLiquidityWeight_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_136

Name: TMP_136 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSD_2(uint256) = totalUSD_1 (c)+ TMP_136
init
end
init
end
init
end
_______________

Name: TMP_136 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalUSD

Name: totalUSD Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights
Name: totalUSDV, Num: 1
Globalname: totalUSDV
Name: i, Num: 1
Globalname: i
Name: totalUSDV, Num: 2
Globalname: totalUSDV
End popogation
REF_106(FixedPoint.uq112x112) -> pairData_1 (-> ['twapData']).nativeTokenPriceAverage
MEMBER
init
end
init
end
OUT KEY: _calculateUSDVPrice_pairData_nativeTokenPriceAverage
OUT KEY: _calculateUSDVPrice_pairData_nativeTokenPriceAverage
FTT: None
No field found
[i]Type for REF_106

Name: pairData.nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: nativeTokenPriceAverage
#################
Member: 
Name: pairData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceAverage Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
REF_108(uint96) -> pairData_1 (-> ['twapData']).foreignUnit
MEMBER
init
end
init
end
OUT KEY: _calculateUSDVPrice_pairData_foreignUnit
OUT KEY: _calculateUSDVPrice_pairData_foreignUnit
FTT: None
No field found
[i]Type for REF_108

Name: pairData.foreignUnit Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignUnit
#################
Member: 
Name: pairData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage
Finance Type: undef
Fieldf: 
Name: foreignUnit Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignUnit Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_137(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_106', 'REF_108'] 
testing mul...
init
end
init
end

Name: pairData.nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: pairData.foreignUnit Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: pairData.foreignUnit Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_137

Name: TMP_137 Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_138(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_137'] 
Written func info: FixedPoint, decode144
Handling balance function!
5
Finding type for TMP_138(uint144 ... )
[i]Type for TMP_138

Name: TMP_138 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_110(uint256) -> liquidityWeights_1[i_1]
INDEX
[i]Type for REF_110

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_139(uint144) = TMP_138 (c)* REF_110
testing mul...
init
end
init
end

Name: TMP_138 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_139

Name: TMP_139 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_140(uint144) = TMP_139 (c)/ totalUSDVLiquidityWeight_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_140

Name: TMP_140 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSDV_2(uint256) = totalUSDV_1 (c)+ TMP_140
init
end
init
end
init
end
_______________

Name: TMP_140 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalUSDV

Name: totalUSDV Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: i, Num: 2
Globalname: i
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: totalUSD, Num: 1
Globalname: totalUSD
Name: totalUSDV, Num: 1
Globalname: totalUSDV
End popogation
TMP_141(uint256) = totalUSD_1 (c)* 1000000000000000000
testing mul...
init
end
init
end

Name: totalUSD Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
_______________

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_141

Name: TMP_141 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_142(uint256) = TMP_141 (c)/ totalUSDV_1
init
end
init
end
lnorm: 18 rnorm: u
init
end
_______________

Name: TMP_141 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
lnorm: 18 rnorm: u
[i]Type for TMP_142

Name: TMP_142 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_142
RETURN
init
end

Name: TMP_142 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalUSDVLiquidityWeight_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: usdvPairs Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
liquidityWeights_1(uint256[]) := ϕ(['pastLiquidityWeights_1 (-> [])', 'pastLiquidityWeights_1'])
Phi
[i]Type for liquidityWeights

Name: liquidityWeights Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSDVLiquidityWeight_1(uint256) := ϕ(['pastTotalLiquidityWeight_1', 'pastTotalLiquidityWeight_1'])
Phi
[i]Type for totalUSDVLiquidityWeight

Name: totalUSDVLiquidityWeight Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
usdvPairs_4(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_20(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
End popogation
REF_102 -> LENGTH usdvPairs_4
[i]Type for REF_102

Name: REF_102 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_102(uint256)
asgn
init
end
_______________

Name: REF_102 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: i, Num: 1
Globalname: i
Name: totalUSD, Num: 1
Globalname: totalUSD
Name: totalUSDV, Num: 1
Globalname: totalUSDV
End popogation
Name: totalUSD, Num: 1
Globalname: totalUSD

Name: totalUSD Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalUSDV, Num: 1
Globalname: totalUSDV

Name: totalUSDV Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: i, Num: 1
Globalname: i

Name: i Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
totalUSD_1(uint256) := ϕ(['totalUSD_0', 'totalUSD_2'])
Phi
init
end
_______________

Name: totalUSD Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalUSD

Name: totalUSD Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSDV_1(uint256) := ϕ(['totalUSDV_2', 'totalUSDV_0'])
Phi
init
end
_______________

Name: totalUSDV Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalUSDV

Name: totalUSDV Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_1(uint256) := ϕ(['i_0', 'i_2'])
Phi
init
end
_______________

Name: i Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_131(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: i Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: i Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_131

Name: TMP_131 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
End popogation
REF_103(IERC20) -> usdvPairs_4[i_1]
INDEX
[i]Type for REF_103

Name: usdvPairs Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
foreignAsset_1(IERC20) := REF_103(IERC20)
asgn
init
end
_______________

Name: usdvPairs Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignAsset

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 1 (-> ['twapData'])
Globalname: pairData
End popogation
TMP_132 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_132

Name: TMP_132 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_104(ILiquidityBasedTWAP.ExchangePair) -> twapData_20[TMP_132]
INDEX
[i]Type for REF_104

Name: twapData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_104(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, foreignUnit
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: foreignPrice, Num: 1
Globalname: foreignPrice
End popogation
TMP_133 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_133

Name: TMP_133 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_134(uint256) = INTERNAL_CALL, LiquidityBasedTWAP.getChainlinkPrice(address)(TMP_133)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: asset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_0([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_134

Name: TMP_134 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignPrice_1(uint256) := TMP_134(uint256)
asgn
init
end
_______________

Name: TMP_134 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignPrice

Name: foreignPrice Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights
Name: totalUSD, Num: 2
Globalname: totalUSD
End popogation
REF_105(uint256) -> liquidityWeights_1[i_1]
INDEX
[i]Type for REF_105

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_135(uint256) = foreignPrice_1 (c)* REF_105
testing mul...
init
end
init
end

Name: foreignPrice Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_135

Name: TMP_135 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_136(uint256) = TMP_135 (c)/ totalUSDVLiquidityWeight_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_136

Name: TMP_136 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSD_2(uint256) = totalUSD_1 (c)+ TMP_136
init
end
init
end
init
end
_______________

Name: TMP_136 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalUSD

Name: totalUSD Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights
Name: totalUSDV, Num: 2
Globalname: totalUSDV
End popogation
REF_106(FixedPoint.uq112x112) -> pairData_1 (-> ['twapData']).nativeTokenPriceAverage
MEMBER
init
end
init
end
[i]Type for REF_106

Name: pairData.nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: nativeTokenPriceAverage
#################
Member: 
Name: pairData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, foreignUnit
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_108(uint96) -> pairData_1 (-> ['twapData']).foreignUnit
MEMBER
init
end
init
end
[i]Type for REF_108

Name: pairData.foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignUnit
#################
Member: 
Name: pairData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, foreignUnit
Finance Type: undef
Fieldf: 
Name: foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_137(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_106', 'REF_108'] 
testing mul...
init
end
init
end

Name: pairData.nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: pairData.foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: pairData.foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_137

Name: TMP_137 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_138(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_137'] 
Written func info: FixedPoint, decode144
Handling balance function!
5
Finding type for TMP_138(uint144 ... )
[i]Type for TMP_138

Name: TMP_138 Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_110(uint256) -> liquidityWeights_1[i_1]
INDEX
[i]Type for REF_110

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_139(uint144) = TMP_138 (c)* REF_110
testing mul...
init
end
init
end

Name: TMP_138 Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_139

Name: TMP_139 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_140(uint144) = TMP_139 (c)/ totalUSDVLiquidityWeight_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_140

Name: TMP_140 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSDV_2(uint256) = totalUSDV_1 (c)+ TMP_140
init
end
init
end
init
end
_______________

Name: TMP_140 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalUSDV

Name: totalUSDV Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 2
Globalname: i
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_141(uint256) = totalUSD_1 (c)* 1000000000000000000
testing mul...
init
end
init
end

Name: totalUSD Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
_______________

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_141

Name: TMP_141 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_142(uint256) = TMP_141 (c)/ totalUSDV_1
init
end
init
end
lnorm: 18 rnorm: u
init
end
init
end
init
end
lnorm: 18 rnorm: u
init
end
[i]Type for TMP_142

Name: TMP_142 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_142
RETURN
init
end

Name: TMP_142 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalUSDVLiquidityWeight Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: usdvPairs Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
liquidityWeights_1(uint256[]) := ϕ(['pastLiquidityWeights_1 (-> [])', 'pastLiquidityWeights_1'])
Phi
[i]Type for liquidityWeights

Name: liquidityWeights Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSDVLiquidityWeight_1(uint256) := ϕ(['pastTotalLiquidityWeight_1', 'pastTotalLiquidityWeight_1'])
Phi
[i]Type for totalUSDVLiquidityWeight

Name: totalUSDVLiquidityWeight Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
usdvPairs_4(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_20(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_102 -> LENGTH usdvPairs_4
[i]Type for REF_102

Name: REF_102 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_102(uint256)
asgn
init
end
_______________

Name: REF_102 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: totalUSD Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalUSDV Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: i Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
totalUSD_1(uint256) := ϕ(['totalUSD_0', 'totalUSD_2'])
Phi
[i]Type for totalUSD

Name: totalUSD Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSDV_1(uint256) := ϕ(['totalUSDV_2', 'totalUSDV_0'])
Phi
[i]Type for totalUSDV

Name: totalUSDV Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_1(uint256) := ϕ(['i_0', 'i_2'])
Phi
[i]Type for i

Name: i Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_131(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_131

Name: TMP_131 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_103(IERC20) -> usdvPairs_4[i_1]
INDEX
[i]Type for REF_103

Name: usdvPairs Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
foreignAsset_1(IERC20) := REF_103(IERC20)
asgn
init
end
_______________

Name: usdvPairs Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignAsset

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_132 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_132

Name: TMP_132 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_104(ILiquidityBasedTWAP.ExchangePair) -> twapData_20[TMP_132]
INDEX
[i]Type for REF_104

Name: twapData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_104(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, foreignUnit
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_133 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_133

Name: TMP_133 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_134(uint256) = INTERNAL_CALL, LiquidityBasedTWAP.getChainlinkPrice(address)(TMP_133)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: asset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_0([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_134

Name: TMP_134 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignPrice_1(uint256) := TMP_134(uint256)
asgn
init
end
_______________

Name: TMP_134 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignPrice

Name: foreignPrice Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights
End popogation
REF_105(uint256) -> liquidityWeights_1[i_1]
INDEX
[i]Type for REF_105

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_135(uint256) = foreignPrice_1 (c)* REF_105
testing mul...
init
end
init
end

Name: foreignPrice Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_135

Name: TMP_135 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_136(uint256) = TMP_135 (c)/ totalUSDVLiquidityWeight_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_136

Name: TMP_136 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSD_2(uint256) = totalUSD_1 (c)+ TMP_136
init
end
init
end
init
end
_______________

Name: TMP_136 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalUSD

Name: totalUSD Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights
End popogation
REF_106(FixedPoint.uq112x112) -> pairData_1 (-> ['twapData']).nativeTokenPriceAverage
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_106

Name: pairData.nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: nativeTokenPriceAverage
#################
Member: 
Name: pairData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, foreignUnit
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_108(uint96) -> pairData_1 (-> ['twapData']).foreignUnit
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_108

Name: pairData.foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignUnit
#################
Member: 
Name: pairData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, foreignUnit
Finance Type: undef
Fieldf: 
Name: foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_137(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_106', 'REF_108'] 
testing mul...
init
end
init
end

Name: pairData.nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: pairData.foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: pairData.foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_137

Name: TMP_137 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_138(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_137'] 
Written func info: FixedPoint, decode144
Handling balance function!
5
Finding type for TMP_138(uint144 ... )
[i]Type for TMP_138

Name: TMP_138 Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_110(uint256) -> liquidityWeights_1[i_1]
INDEX
[i]Type for REF_110

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_139(uint144) = TMP_138 (c)* REF_110
testing mul...
init
end
init
end

Name: TMP_138 Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_139

Name: TMP_139 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_140(uint144) = TMP_139 (c)/ totalUSDVLiquidityWeight_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_140

Name: TMP_140 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSDV_2(uint256) = totalUSDV_1 (c)+ TMP_140
init
end
init
end
init
end
_______________

Name: TMP_140 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalUSDV

Name: totalUSDV Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_141(uint256) = totalUSD_1 (c)* 1000000000000000000
testing mul...
init
end
init
end

Name: totalUSD Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
_______________

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_141

Name: TMP_141 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_142(uint256) = TMP_141 (c)/ totalUSDV_1
init
end
init
end
lnorm: 18 rnorm: u
init
end
init
end
init
end
lnorm: 18 rnorm: u
init
end
[i]Type for TMP_142

Name: TMP_142 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_142
RETURN
init
end

Name: TMP_142 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalUSDVLiquidityWeight Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: usdvPairs Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
liquidityWeights_1(uint256[]) := ϕ(['pastLiquidityWeights_1 (-> [])', 'pastLiquidityWeights_1'])
Phi
[i]Type for liquidityWeights

Name: liquidityWeights Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSDVLiquidityWeight_1(uint256) := ϕ(['pastTotalLiquidityWeight_1', 'pastTotalLiquidityWeight_1'])
Phi
[i]Type for totalUSDVLiquidityWeight

Name: totalUSDVLiquidityWeight Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
usdvPairs_4(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_20(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_102 -> LENGTH usdvPairs_4
[i]Type for REF_102

Name: REF_102 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_102(uint256)
asgn
init
end
_______________

Name: REF_102 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: totalUSD Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalUSDV Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: i Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
totalUSD_1(uint256) := ϕ(['totalUSD_0', 'totalUSD_2'])
Phi
[i]Type for totalUSD

Name: totalUSD Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSDV_1(uint256) := ϕ(['totalUSDV_2', 'totalUSDV_0'])
Phi
[i]Type for totalUSDV

Name: totalUSDV Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_1(uint256) := ϕ(['i_0', 'i_2'])
Phi
[i]Type for i

Name: i Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_131(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_131

Name: TMP_131 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_103(IERC20) -> usdvPairs_4[i_1]
INDEX
[i]Type for REF_103

Name: usdvPairs Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
foreignAsset_1(IERC20) := REF_103(IERC20)
asgn
init
end
_______________

Name: usdvPairs Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignAsset

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_132 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_132

Name: TMP_132 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_104(ILiquidityBasedTWAP.ExchangePair) -> twapData_20[TMP_132]
INDEX
[i]Type for REF_104

Name: twapData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_104(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, foreignUnit
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_133 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_133

Name: TMP_133 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_134(uint256) = INTERNAL_CALL, LiquidityBasedTWAP.getChainlinkPrice(address)(TMP_133)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: asset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_0([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_134

Name: TMP_134 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignPrice_1(uint256) := TMP_134(uint256)
asgn
init
end
_______________

Name: TMP_134 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignPrice

Name: foreignPrice Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights
End popogation
REF_105(uint256) -> liquidityWeights_1[i_1]
INDEX
[i]Type for REF_105

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_135(uint256) = foreignPrice_1 (c)* REF_105
testing mul...
init
end
init
end

Name: foreignPrice Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_135

Name: TMP_135 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_136(uint256) = TMP_135 (c)/ totalUSDVLiquidityWeight_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_136

Name: TMP_136 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSD_2(uint256) = totalUSD_1 (c)+ TMP_136
init
end
init
end
init
end
_______________

Name: TMP_136 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalUSD

Name: totalUSD Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: liquidityWeights, Num: 1
Globalname: liquidityWeights
End popogation
REF_106(FixedPoint.uq112x112) -> pairData_1 (-> ['twapData']).nativeTokenPriceAverage
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_106

Name: pairData.nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: nativeTokenPriceAverage
#################
Member: 
Name: pairData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, foreignUnit
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_108(uint96) -> pairData_1 (-> ['twapData']).foreignUnit
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_108

Name: pairData.foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignUnit
#################
Member: 
Name: pairData Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, foreignUnit
Finance Type: undef
Fieldf: 
Name: foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_137(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_106', 'REF_108'] 
testing mul...
init
end
init
end

Name: pairData.nativeTokenPriceAverage Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: pairData.foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: pairData.foreignUnit Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_137

Name: TMP_137 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_138(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_137'] 
Written func info: FixedPoint, decode144
Handling balance function!
5
Finding type for TMP_138(uint144 ... )
[i]Type for TMP_138

Name: TMP_138 Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_110(uint256) -> liquidityWeights_1[i_1]
INDEX
[i]Type for REF_110

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_139(uint144) = TMP_138 (c)* REF_110
testing mul...
init
end
init
end

Name: TMP_138 Function: _calculateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityWeights_1 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_139

Name: TMP_139 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_140(uint144) = TMP_139 (c)/ totalUSDVLiquidityWeight_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_140

Name: TMP_140 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUSDV_2(uint256) = totalUSDV_1 (c)+ TMP_140
init
end
init
end
init
end
_______________

Name: TMP_140 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalUSDV

Name: totalUSDV Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_141(uint256) = totalUSD_1 (c)* 1000000000000000000
testing mul...
init
end
init
end

Name: totalUSD Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
_______________

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_141

Name: TMP_141 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_142(uint256) = TMP_141 (c)/ totalUSDV_1
init
end
init
end
lnorm: 18 rnorm: u
init
end
init
end
init
end
lnorm: 18 rnorm: u
init
end
[i]Type for TMP_142

Name: TMP_142 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_142
RETURN
init
end

Name: TMP_142 Function: _calculateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_29

Name: TMP_29 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_29
RETURN
init
end

Name: TMP_29 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef


usdvPairs_1(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
totalLiquidityWeight_2(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
twapData_2(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
REF_7 -> LENGTH usdvPairs_1
totalPairs_1(uint256) := REF_7(uint256)
TMP_25 = new uint256[](totalPairs_1)
pastLiquidityWeights_1(uint256[]) := TMP_25(uint256)
REF_8(ILiquidityBasedTWAP.Paths) -> Paths.USDV
TMP_26 = CONVERT REF_8 to uint256
REF_9(uint256) -> totalLiquidityWeight_2[TMP_26]
pastTotalLiquidityWeight_1(uint256) := REF_9(uint256)
i_1(uint256) := ϕ(['i_2', 'i_0'])
TMP_27(bool) = i_1 < totalPairs_1
CONDITION TMP_27
REF_10(uint256) -> pastLiquidityWeights_1[i_1]
REF_11(IERC20) -> usdvPairs_1[i_1]
TMP_28 = CONVERT REF_11 to address
REF_12(ILiquidityBasedTWAP.ExchangePair) -> twapData_2[TMP_28]
REF_13(uint256) -> REF_12.pastLiquidityEvaluation
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
REF_10 (->pastLiquidityWeights_2) := REF_13(uint256)
i_2(uint256) = i_1 (c)+ 1
TMP_29(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateUSDVPrice(uint256[],uint256)(pastLiquidityWeights_1,pastTotalLiquidityWeight_1)
RETURN TMP_29


Propogating parameters and globals to SSA variables...
End popogation

Name: usdvPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
Phid
usdvPairs_1(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_2(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_2(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
End popogation
REF_7 -> LENGTH usdvPairs_1
[i]Type for REF_7

Name: REF_7 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_7(uint256)
asgn
init
end
_______________

Name: REF_7 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_25 = new uint256[](totalPairs_1)
[i]Type for TMP_25

Name: TMP_25 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1(uint256[]) := TMP_25(uint256)
asgn
init
end
_______________

Name: TMP_25 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastTotalLiquidityWeight, Num: 1
Globalname: pastTotalLiquidityWeight
End popogation
REF_8(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
[i]Type for REF_8

Name: Paths.USDV Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_26 = CONVERT REF_8 to uint256
Converting REF_8

Name: Paths.USDV Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_26

Name: TMP_26 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_9(uint256) -> totalLiquidityWeight_2[TMP_26]
INDEX
[i]Type for REF_9

Name: totalLiquidityWeight Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastTotalLiquidityWeight_1(uint256) := REF_9(uint256)
asgn
init
end
_______________

Name: totalLiquidityWeight Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: i, Num: 1
Globalname: i
End popogation
Name: i, Num: 1
Globalname: i

Name: i Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
i_1(uint256) := ϕ(['i_2', 'i_0'])
Phi
init
end
_______________

Name: i Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_27(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: i Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: i Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_27

Name: TMP_27 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_10(uint256) -> pastLiquidityWeights_1[i_1]
INDEX
[i]Type for REF_10

Name: pastLiquidityWeights Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_11(IERC20) -> usdvPairs_1[i_1]
INDEX
[i]Type for REF_11

Name: usdvPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_28 = CONVERT REF_11 to address
Converting REF_11

Name: usdvPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: usdvPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_28

Name: TMP_28 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_12(ILiquidityBasedTWAP.ExchangePair) -> twapData_2[TMP_28]
INDEX
[i]Type for REF_12

Name: twapData Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
Root: None, Field: None
XXXX
REF_13(uint256) -> REF_12.pastLiquidityEvaluation
MEMBER
init
end
init
end
[i]Type for REF_13

Name: twapData.pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_12, Field: pastLiquidityEvaluation
#################
Member: 
Name: twapData Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: twapData.pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_10 (->pastLiquidityWeights_2) := REF_13(uint256)
asgn
init
end
_______________

Name: twapData.pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_10

Name: REF_10 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 2
Globalname: i
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_29(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateUSDVPrice(uint256[],uint256)(pastLiquidityWeights_1,pastTotalLiquidityWeight_1)
init
end
init
end
init
end
_______________

Name: PIC_22 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_29

Name: TMP_29 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_29
RETURN
init
end

Name: TMP_29 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef


usdvPairs_1(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
totalLiquidityWeight_2(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
twapData_2(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
REF_7 -> LENGTH usdvPairs_1
totalPairs_1(uint256) := REF_7(uint256)
TMP_25 = new uint256[](totalPairs_1)
pastLiquidityWeights_1(uint256[]) := TMP_25(uint256)
REF_8(ILiquidityBasedTWAP.Paths) -> Paths.USDV
TMP_26 = CONVERT REF_8 to uint256
REF_9(uint256) -> totalLiquidityWeight_2[TMP_26]
pastTotalLiquidityWeight_1(uint256) := REF_9(uint256)
i_1(uint256) := ϕ(['i_2', 'i_0'])
TMP_27(bool) = i_1 < totalPairs_1
CONDITION TMP_27
REF_10(uint256) -> pastLiquidityWeights_1[i_1]
REF_11(IERC20) -> usdvPairs_1[i_1]
TMP_28 = CONVERT REF_11 to address
REF_12(ILiquidityBasedTWAP.ExchangePair) -> twapData_2[TMP_28]
REF_13(uint256) -> REF_12.pastLiquidityEvaluation
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
REF_10 (->pastLiquidityWeights_2) := REF_13(uint256)
i_2(uint256) = i_1 (c)+ 1
TMP_29(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateUSDVPrice(uint256[],uint256)(pastLiquidityWeights_1,pastTotalLiquidityWeight_1)
RETURN TMP_29


Propogating parameters and globals to SSA variables...
End popogation

Name: usdvPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
Phid
usdvPairs_1(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_2(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_2(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_7 -> LENGTH usdvPairs_1
[i]Type for REF_7

Name: REF_7 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_7(uint256)
asgn
init
end
_______________

Name: REF_7 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_25 = new uint256[](totalPairs_1)
[i]Type for TMP_25

Name: TMP_25 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1(uint256[]) := TMP_25(uint256)
asgn
init
end
_______________

Name: TMP_25 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_8(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
init
end
_______________

Name: Paths.USDV Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_8

Name: Paths.USDV Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_26 = CONVERT REF_8 to uint256
Converting REF_8

Name: Paths.USDV Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_26

Name: TMP_26 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_9(uint256) -> totalLiquidityWeight_2[TMP_26]
INDEX
[i]Type for REF_9

Name: totalLiquidityWeight Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastTotalLiquidityWeight_1(uint256) := REF_9(uint256)
asgn
init
end
_______________

Name: totalLiquidityWeight Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: i Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
i_1(uint256) := ϕ(['i_2', 'i_0'])
Phi
[i]Type for i

Name: i Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_27(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_27

Name: TMP_27 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_10(uint256) -> pastLiquidityWeights_1[i_1]
INDEX
[i]Type for REF_10

Name: pastLiquidityWeights Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_11(IERC20) -> usdvPairs_1[i_1]
INDEX
[i]Type for REF_11

Name: usdvPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_28 = CONVERT REF_11 to address
Converting REF_11

Name: usdvPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: usdvPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_28

Name: TMP_28 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_12(ILiquidityBasedTWAP.ExchangePair) -> twapData_2[TMP_28]
INDEX
[i]Type for REF_12

Name: twapData Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
Root: None, Field: None
XXXX
REF_13(uint256) -> REF_12.pastLiquidityEvaluation
MEMBER
init
end
init
end
init
end
_______________

Name: twapData.pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_13

Name: twapData.pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_12, Field: pastLiquidityEvaluation
#################
Member: 
Name: twapData Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: twapData.pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_10 (->pastLiquidityWeights_2) := REF_13(uint256)
asgn
init
end
_______________

Name: twapData.pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_10

Name: REF_10 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_29(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateUSDVPrice(uint256[],uint256)(pastLiquidityWeights_1,pastTotalLiquidityWeight_1)
init
end
init
end
init
end
_______________

Name: PIC_22 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_29

Name: TMP_29 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_29
RETURN
init
end

Name: TMP_29 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef


usdvPairs_1(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
totalLiquidityWeight_2(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
twapData_2(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
REF_7 -> LENGTH usdvPairs_1
totalPairs_1(uint256) := REF_7(uint256)
TMP_25 = new uint256[](totalPairs_1)
pastLiquidityWeights_1(uint256[]) := TMP_25(uint256)
REF_8(ILiquidityBasedTWAP.Paths) -> Paths.USDV
TMP_26 = CONVERT REF_8 to uint256
REF_9(uint256) -> totalLiquidityWeight_2[TMP_26]
pastTotalLiquidityWeight_1(uint256) := REF_9(uint256)
i_1(uint256) := ϕ(['i_2', 'i_0'])
TMP_27(bool) = i_1 < totalPairs_1
CONDITION TMP_27
REF_10(uint256) -> pastLiquidityWeights_1[i_1]
REF_11(IERC20) -> usdvPairs_1[i_1]
TMP_28 = CONVERT REF_11 to address
REF_12(ILiquidityBasedTWAP.ExchangePair) -> twapData_2[TMP_28]
REF_13(uint256) -> REF_12.pastLiquidityEvaluation
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
REF_10 (->pastLiquidityWeights_2) := REF_13(uint256)
i_2(uint256) = i_1 (c)+ 1
TMP_29(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateUSDVPrice(uint256[],uint256)(pastLiquidityWeights_1,pastTotalLiquidityWeight_1)
RETURN TMP_29


Propogating parameters and globals to SSA variables...
End popogation

Name: usdvPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
Phid
usdvPairs_1(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_2(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_2(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_7 -> LENGTH usdvPairs_1
[i]Type for REF_7

Name: REF_7 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_7(uint256)
asgn
init
end
_______________

Name: REF_7 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_25 = new uint256[](totalPairs_1)
[i]Type for TMP_25

Name: TMP_25 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1(uint256[]) := TMP_25(uint256)
asgn
init
end
_______________

Name: TMP_25 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_8(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
init
end
_______________

Name: Paths.USDV Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_8

Name: Paths.USDV Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_26 = CONVERT REF_8 to uint256
Converting REF_8

Name: Paths.USDV Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_26

Name: TMP_26 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_9(uint256) -> totalLiquidityWeight_2[TMP_26]
INDEX
[i]Type for REF_9

Name: totalLiquidityWeight Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastTotalLiquidityWeight_1(uint256) := REF_9(uint256)
asgn
init
end
_______________

Name: totalLiquidityWeight Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: i Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
i_1(uint256) := ϕ(['i_2', 'i_0'])
Phi
[i]Type for i

Name: i Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_27(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_27

Name: TMP_27 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_10(uint256) -> pastLiquidityWeights_1[i_1]
INDEX
[i]Type for REF_10

Name: pastLiquidityWeights Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_11(IERC20) -> usdvPairs_1[i_1]
INDEX
[i]Type for REF_11

Name: usdvPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_28 = CONVERT REF_11 to address
Converting REF_11

Name: usdvPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: usdvPairs Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_28

Name: TMP_28 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_12(ILiquidityBasedTWAP.ExchangePair) -> twapData_2[TMP_28]
INDEX
[i]Type for REF_12

Name: twapData Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
Root: None, Field: None
XXXX
REF_13(uint256) -> REF_12.pastLiquidityEvaluation
MEMBER
init
end
init
end
init
end
_______________

Name: twapData.pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_13

Name: twapData.pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_12, Field: pastLiquidityEvaluation
#################
Member: 
Name: twapData Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: twapData.pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getStaleUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_10 (->pastLiquidityWeights_2) := REF_13(uint256)
asgn
init
end
_______________

Name: twapData.pastLiquidityEvaluation Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_10

Name: REF_10 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_29(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateUSDVPrice(uint256[],uint256)(pastLiquidityWeights_1,pastTotalLiquidityWeight_1)
init
end
init
end
init
end
_______________

Name: PIC_22 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_29

Name: TMP_29 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_29
RETURN
init
end

Name: TMP_29 Function: getStaleUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: totalLiquidityWeight
State_var: twapData
State_var: usdvPairs
State_var: previousPrices
State_var: vaderPairs
State_var: vader
State_var: oracles
State_var: vaderPool
State_var: maxUpdateWindow
State_var: _owner



getChainlinkPrice
Finding type for asset(address ... )
prev address? u
Head Addr: -998
    Norm: 6
    Set: {-998}
    Fin: NULL
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: asset
    fields: []
    fintype: -1


asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
REF_14(IAggregatorV3) -> oracles_1[asset_1]
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
price_1(int256)= UNPACK TUPLE_0 index: 1 
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
TMP_30(bool) = answeredInRound_1 >= roundID_1
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
TMP_32(bool) = price_1 > 0
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
TMP_34 = CONVERT price_1 to uint256
RETURN TMP_34


Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: 
Den: 
Address: -998
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: 
Den: 
Address: -998
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_0([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
REF_14(IAggregatorV3) -> oracles_1[asset_1]
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
price_1(int256)= UNPACK TUPLE_0 index: 1 
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
TMP_30(bool) = answeredInRound_1 >= roundID_1
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
TMP_32(bool) = price_1 > 0
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
TMP_34 = CONVERT price_1 to uint256
RETURN TMP_34


Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: 
Den: 
Address: -998
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: 
Den: 
Address: -998
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: totalLiquidityWeight
State_var: twapData
State_var: usdvPairs
State_var: previousPrices
State_var: vaderPairs
State_var: vader
State_var: oracles
State_var: vaderPool
State_var: maxUpdateWindow
State_var: _owner



getVaderPrice


TUPLE_1(uint256[],uint256) = INTERNAL_CALL, LiquidityBasedTWAP.syncVaderPrice()()
pastLiquidityWeights_1 (-> [])(uint256[])= UNPACK TUPLE_1 index: 0 
pastTotalLiquidityWeight_1(uint256)= UNPACK TUPLE_1 index: 1 
TMP_35(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateVaderPrice(uint256[],uint256)(pastLiquidityWeights_1 (-> []),pastTotalLiquidityWeight_1)
RETURN TMP_35


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1 (-> [])
Globalname: pastLiquidityWeights
Name: pastTotalLiquidityWeight, Num: 1
Globalname: pastTotalLiquidityWeight
End popogation
TUPLE_1(uint256[],uint256) = INTERNAL_CALL, LiquidityBasedTWAP.syncVaderPrice()()
[i]Type for TUPLE_1

Name: TUPLE_1 Function: getVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1 (-> [])(uint256[])= UNPACK TUPLE_1 index: 0 
Finding type for pastLiquidityWeights(uint256[] ... )
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastTotalLiquidityWeight_1(uint256)= UNPACK TUPLE_1 index: 1 
Finding type for pastTotalLiquidityWeight(uint256 ... )
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: getVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_35(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateVaderPrice(uint256[],uint256)(pastLiquidityWeights_1 (-> []),pastTotalLiquidityWeight_1)
[i]Type for TMP_35

Name: TMP_35 Function: getVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_35
RETURN
init
end

Name: TMP_35 Function: getVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


TUPLE_1(uint256[],uint256) = INTERNAL_CALL, LiquidityBasedTWAP.syncVaderPrice()()
pastLiquidityWeights_1 (-> [])(uint256[])= UNPACK TUPLE_1 index: 0 
pastTotalLiquidityWeight_1(uint256)= UNPACK TUPLE_1 index: 1 
TMP_35(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateVaderPrice(uint256[],uint256)(pastLiquidityWeights_1 (-> []),pastTotalLiquidityWeight_1)
RETURN TMP_35


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1 (-> [])
Globalname: pastLiquidityWeights
Name: pastTotalLiquidityWeight, Num: 1
Globalname: pastTotalLiquidityWeight
End popogation
TUPLE_1(uint256[],uint256) = INTERNAL_CALL, LiquidityBasedTWAP.syncVaderPrice()()
[i]Type for TUPLE_1

Name: TUPLE_1 Function: getVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1 (-> [])(uint256[])= UNPACK TUPLE_1 index: 0 
Finding type for pastLiquidityWeights(uint256[] ... )
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastTotalLiquidityWeight_1(uint256)= UNPACK TUPLE_1 index: 1 
Finding type for pastTotalLiquidityWeight(uint256 ... )
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: getVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1 (-> [])
Globalname: pastLiquidityWeights
Name: pastTotalLiquidityWeight, Num: 1
Globalname: pastTotalLiquidityWeight
End popogation
TMP_35(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateVaderPrice(uint256[],uint256)(pastLiquidityWeights_1 (-> []),pastTotalLiquidityWeight_1)
[i]Type for TMP_35

Name: TMP_35 Function: getVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_35
RETURN
init
end

Name: TMP_35 Function: getVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: totalLiquidityWeight
State_var: twapData
State_var: usdvPairs
State_var: previousPrices
State_var: vaderPairs
State_var: vader
State_var: oracles
State_var: vaderPool
State_var: maxUpdateWindow
State_var: _owner



syncVaderPrice


vaderPairs_2(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
totalLiquidityWeight_3(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
twapData_3(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
REF_16 -> LENGTH vaderPairs_2
totalPairs_1(uint256) := REF_16(uint256)
TMP_37 = new uint256[](totalPairs_1)
pastLiquidityWeights_1(uint256[]) := TMP_37(uint256)
REF_17(ILiquidityBasedTWAP.Paths) -> Paths.VADER
TMP_38 = CONVERT REF_17 to uint256
REF_18(uint256) -> totalLiquidityWeight_3[TMP_38]
pastTotalLiquidityWeight_1(uint256) := REF_18(uint256)
_totalLiquidityWeight_1(uint256) := ϕ(['_totalLiquidityWeight_0', '_totalLiquidityWeight_2'])
i_1(uint256) := ϕ(['i_0', 'i_2'])
TMP_39(bool) = i_1 < totalPairs_1
CONDITION TMP_39
REF_19(IUniswapV2Pair) -> vaderPairs_2[i_1]
pair_1(IUniswapV2Pair) := REF_19(IUniswapV2Pair)
REF_26(ILiquidityBasedTWAP.Paths) -> Paths.VADER
TMP_44 = CONVERT REF_26 to uint256
REF_27(uint256) -> totalLiquidityWeight_3[TMP_44]
totalLiquidityWeight_4(uint256[2]) := ϕ(['totalLiquidityWeight_3'])
REF_27 (->totalLiquidityWeight_4) := _totalLiquidityWeight_1(uint256)
TMP_40 = CONVERT pair_1 to address
REF_20(ILiquidityBasedTWAP.ExchangePair) -> twapData_3[TMP_40]
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_20(ILiquidityBasedTWAP.ExchangePair)
REF_21(uint256) -> pairData_1 (-> ['twapData']).lastMeasurement
TMP_41(uint256) = block.timestamp (c)- REF_21
timeElapsed_1(uint256) := TMP_41(uint256)
REF_22(uint256) -> pairData_1 (-> ['twapData']).updatePeriod
TMP_42(bool) = timeElapsed_1 < REF_22
CONDITION TMP_42
REF_23(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
pastLiquidityEvaluation_1(uint256) := REF_23(uint256)
TMP_43(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._updateVaderPrice(IUniswapV2Pair,ILiquidityBasedTWAP.ExchangePair,uint256)(pair_1,pairData_1 (-> ['twapData']),timeElapsed_1)
currentLiquidityEvaluation_1(uint256) := TMP_43(uint256)
REF_24(uint256) -> pastLiquidityWeights_1[i_1]
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
REF_24 (->pastLiquidityWeights_2) := pastLiquidityEvaluation_1(uint256)
REF_25(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
REF_25 (->pairData_2 (-> ['twapData'])) := currentLiquidityEvaluation_1(uint256)
twapData_5(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
_totalLiquidityWeight_2(uint256) = _totalLiquidityWeight_1 (c)+ currentLiquidityEvaluation_1
i_2(uint256) = i_1 (c)+ 1


Propogating parameters and globals to SSA variables...
End popogation
Name: vaderPairs, Num: 2
Globalname: vaderPairs
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 3
Globalname: totalLiquidityWeight
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: twapData, Num: 3
Globalname: twapData
global...

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
vaderPairs_2(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_3(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_3(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
End popogation
REF_16 -> LENGTH vaderPairs_2
[i]Type for REF_16

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_16(uint256)
asgn
init
end
_______________

Name: REF_16 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_37 = new uint256[](totalPairs_1)
[i]Type for TMP_37

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1(uint256[]) := TMP_37(uint256)
asgn
init
end
_______________

Name: TMP_37 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastTotalLiquidityWeight, Num: 1
Globalname: pastTotalLiquidityWeight
End popogation
REF_17(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
[i]Type for REF_17

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_38 = CONVERT REF_17 to uint256
Converting REF_17

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_38

Name: TMP_38 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_18(uint256) -> totalLiquidityWeight_3[TMP_38]
INDEX
[i]Type for REF_18

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastTotalLiquidityWeight_1(uint256) := REF_18(uint256)
asgn
init
end
_______________

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: i, Num: 1
Globalname: i
End popogation
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: i, Num: 1
Globalname: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_totalLiquidityWeight_1(uint256) := ϕ(['_totalLiquidityWeight_0', '_totalLiquidityWeight_2'])
Phi
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_1(uint256) := ϕ(['i_0', 'i_2'])
Phi
[i]Type for i

Name: i Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_39(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: totalPairs Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: totalPairs Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_39

Name: TMP_39 Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: pair, Num: 1
Globalname: pair
End popogation
REF_19(IUniswapV2Pair) -> vaderPairs_2[i_1]
INDEX
[i]Type for REF_19

Name: vaderPairs Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pair_1(IUniswapV2Pair) := REF_19(IUniswapV2Pair)
asgn
init
end
_______________

Name: vaderPairs Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pair

Name: pair Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: totalLiquidityWeight, Num: 4
Globalname: totalLiquidityWeight
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_26(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
[i]Type for REF_26

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_44 = CONVERT REF_26 to uint256
Converting REF_26

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_44

Name: TMP_44 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_27(uint256) -> totalLiquidityWeight_3[TMP_44]
INDEX
[i]Type for REF_27

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalLiquidityWeight_4(uint256[2]) := ϕ(['totalLiquidityWeight_3'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_27 (->totalLiquidityWeight_4) := _totalLiquidityWeight_1(uint256)
asgn
init
end
_______________

Name: _totalLiquidityWeight Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_27

Name: REF_27 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 1 (-> ['twapData'])
Globalname: pairData
End popogation
TMP_40 = CONVERT pair_1 to address
Converting pair_1

Name: pair Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_40

Name: TMP_40 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_20(ILiquidityBasedTWAP.ExchangePair) -> twapData_3[TMP_40]
INDEX
[i]Type for REF_20

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_20(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: timeElapsed, Num: 1
Globalname: timeElapsed
End popogation
REF_21(uint256) -> pairData_1 (-> ['twapData']).lastMeasurement
MEMBER
init
end
init
end
OUT KEY: syncVaderPrice_pairData_lastMeasurement
OUT KEY: syncVaderPrice_pairData_lastMeasurement
FTT: None
No field found
[i]Type for REF_21

Name: pairData.lastMeasurement Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: lastMeasurement
#################
Member: 
Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.lastMeasurement Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_41(uint256) = block.timestamp (c)- REF_21
init
end
init
end
init
end
_______________

Name: PIC_25 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_41

Name: TMP_41 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint256) := TMP_41(uint256)
asgn
init
end
_______________

Name: TMP_41 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_22(uint256) -> pairData_1 (-> ['twapData']).updatePeriod
MEMBER
init
end
init
end
OUT KEY: syncVaderPrice_pairData_updatePeriod
OUT KEY: syncVaderPrice_pairData_updatePeriod
FTT: None
No field found
[i]Type for REF_22

Name: pairData.updatePeriod Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: updatePeriod
#################
Member: 
Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement
Finance Type: undef
Fieldf: 
Name: updatePeriod Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.updatePeriod Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_42(bool) = timeElapsed_1 < REF_22
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: timeElapsed Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: timeElapsed Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_42

Name: TMP_42 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pastLiquidityEvaluation, Num: 1
Globalname: pastLiquidityEvaluation
End popogation
REF_23(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
OUT KEY: syncVaderPrice_pairData_pastLiquidityEvaluation
OUT KEY: syncVaderPrice_pairData_pastLiquidityEvaluation
FTT: None
No field found
[i]Type for REF_23

Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
pastLiquidityEvaluation_1(uint256) := REF_23(uint256)
asgn
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityEvaluation

Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
End popogation
TMP_43(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._updateVaderPrice(IUniswapV2Pair,ILiquidityBasedTWAP.ExchangePair,uint256)(pair_1,pairData_1 (-> ['twapData']),timeElapsed_1)
init
end
init
end
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: pair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [lastMeasurement, updatePeriod, pastLiquidityEvaluation], -1, 'u', 'u']

Name: pairData Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: timeElapsed Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: pair_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: pairData_1 (-> []) Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Phid

Name: timeElapsed_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: vader, Num: 2
Globalname: vader
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 1
Globalname: previousPrices
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
pair_1(IUniswapV2Pair) := ϕ(['pair_1'])
Phi
[i]Type for pair

Name: pair Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_1 (-> [])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
Phi
[i]Type for pairData

Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
timeElapsed_1(uint256) := ϕ(['timeElapsed_1'])
Phi
[i]Type for timeElapsed

Name: timeElapsed Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vader_2(address) := ϕ(['vader_1', 'vader_0', 'vader_3', 'vader_8', 'vader_10'])
Phi
[i]Type for vader

Name: vader Function: _updateVaderPrice
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_1(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: vader, Num: 3
Globalname: vader
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Name: isFirst, Num: 1
Globalname: isFirst
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 2
Globalname: previousPrices
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_45(address) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:token0, arguments:[]  
High Call: token0
Running querryfc
Written func info: UniswapV2Pair, token0
Retvar: ('c', [-1], [-1], 'u', 'u', 1)
([-1], [-1], 'u', 'u', 1, -1)
[i]Type for TMP_45

Name: TMP_45 Function: _updateVaderPrice
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vader_3(address) := ϕ(['vader_2', 'vader_1', 'vader_3', 'vader_8', 'vader_10'])
Phi
[i]Type for vader

Name: vader Function: _updateVaderPrice
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_2(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_1', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_46(bool) = TMP_45 == vader_3
[i]Type for TMP_46

Name: TMP_46 Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
isFirst_1(bool) := TMP_46(bool)
asgn
init
end
_______________

Name: TMP_46 Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for isFirst

Name: isFirst Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: reserve0, Num: 1
Globalname: reserve0
Name: reserve1, Num: 1
Globalname: reserve1
End popogation
Name: previousPrices, Num: 3
Globalname: previousPrices
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TUPLE_2(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:getReserves, arguments:[]  
High Call: getReserves
Running querryfc
Written func info: UniswapV2Pair, getReserves
Handling balance function!
u
prev address? u
global assignment: 6
6
Finding type for hlc_0([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b1867fa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b1452eb0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b145c0a0>] ... )
[i]Type for TUPLE_2

Name: TUPLE_2 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_3(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_2', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_1(uint256)= UNPACK TUPLE_2 index: 0 
Finding type for reserve0(uint256 ... )
[i]Type for reserve0

Name: reserve0 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_1(uint256)= UNPACK TUPLE_2 index: 1 
Finding type for reserve1(uint256 ... )
[i]Type for reserve1

Name: reserve1 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: isFirst, Num: 1
Globalname: isFirst
End popogation
Propogating parameters and globals to SSA variables...
Name: reserveForeign, Num: 2
Globalname: reserveForeign
Name: reserveNative, Num: 2
Globalname: reserveNative
End popogation
reserveNative_2(uint256) := reserve1_1(uint256)
asgn
init
end
_______________

Name: reserve1 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for reserveNative

Name: reserveNative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_2(uint256) := reserve0_1(uint256)
asgn
init
end
_______________

Name: reserve0 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for reserveForeign

Name: reserveForeign Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: reserveNative, Num: 1
Globalname: reserveNative
Name: reserveForeign, Num: 1
Globalname: reserveForeign
End popogation
reserveNative_1(uint256) := reserve0_1(uint256)
asgn
init
end
_______________

Name: reserve0 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for reserveNative

Name: reserveNative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint256) := reserve1_1(uint256)
asgn
init
end
_______________

Name: reserve1 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for reserveForeign

Name: reserveForeign Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: reserveNative, Num: 3
Globalname: reserveNative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: reserveForeign, Num: 3
Globalname: reserveForeign

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
reserveNative_3(uint256) := ϕ(['reserveNative_1', 'reserveNative_2'])
Phi
init
end
_______________

Name: reserveNative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for reserveNative

Name: reserveNative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_3(uint256) := ϕ(['reserveForeign_1', 'reserveForeign_2'])
Phi
init
end
_______________

Name: reserveForeign Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for reserveForeign

Name: reserveForeign Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: price0Cumulative, Num: 1
Globalname: price0Cumulative
Name: price1Cumulative, Num: 1
Globalname: price1Cumulative
Name: currentMeasurement, Num: 1
Globalname: currentMeasurement
End popogation
TMP_47 = CONVERT pair_1 to address
Converting pair_1

Name: pair Function: _updateVaderPrice
Num: -1
Den: -1
Address: 6
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: _updateVaderPrice
Num: -1
Den: -1
Address: 6
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_47

Name: TMP_47 Function: _updateVaderPrice
Num: -1
Den: -1
Address: 6
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_3(uint256,uint256,uint32) = LIBRARY_CALL, dest:UniswapV2OracleLibrary, function:UniswapV2OracleLibrary.currentCumulativePrices(address), arguments:['TMP_47'] 
Written func info: UniswapV2OracleLibrary, currentCumulativePrices
Handling balance function!
u
prev address? u
global assignment: 7
7
Finding type for TUPLE_3([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b1532e80>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b153d070>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b153d220>] ... )
[i]Type for TUPLE_3

Name: TUPLE_3 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price0Cumulative_1(uint256)= UNPACK TUPLE_3 index: 0 
Finding type for price0Cumulative(uint256 ... )
[i]Type for price0Cumulative

Name: price0Cumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price1Cumulative_1(uint256)= UNPACK TUPLE_3 index: 1 
Finding type for price1Cumulative(uint256 ... )
[i]Type for price1Cumulative

Name: price1Cumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentMeasurement_1(uint256)= UNPACK TUPLE_3 index: 2 
Finding type for currentMeasurement(uint256 ... )
[i]Type for currentMeasurement

Name: currentMeasurement Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: isFirst, Num: 1
Globalname: isFirst
End popogation
Propogating parameters and globals to SSA variables...
Name: nativeTokenPriceCumulative, Num: 2
Globalname: nativeTokenPriceCumulative
End popogation
nativeTokenPriceCumulative_2(uint256) := price0Cumulative_1(uint256)
asgn
init
end
_______________

Name: price0Cumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for nativeTokenPriceCumulative

Name: nativeTokenPriceCumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: nativeTokenPriceCumulative, Num: 1
Globalname: nativeTokenPriceCumulative
End popogation
nativeTokenPriceCumulative_1(uint256) := price1Cumulative_1(uint256)
asgn
init
end
_______________

Name: price1Cumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for nativeTokenPriceCumulative

Name: nativeTokenPriceCumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: nativeTokenPriceCumulative, Num: 3
Globalname: nativeTokenPriceCumulative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
nativeTokenPriceCumulative_3(uint256) := ϕ(['nativeTokenPriceCumulative_1', 'nativeTokenPriceCumulative_2'])
Phi
init
end
_______________

Name: nativeTokenPriceCumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for nativeTokenPriceCumulative

Name: nativeTokenPriceCumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 2 (-> [])
Globalname: pairData
End popogation
Name: pairData, Num: 2 (-> [])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_31(FixedPoint.uq112x112) -> pairData_1 (-> []).nativeTokenPriceAverage
MEMBER
init
end
init
end
OUT KEY: _updateVaderPrice_pairData_nativeTokenPriceAverage
OUT KEY: _updateVaderPrice_pairData_nativeTokenPriceAverage
FTT: None
No field found
[i]Type for REF_31

Name: pairData.nativeTokenPriceAverage Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> []), Field: nativeTokenPriceAverage
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceAverage Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceAverage Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
REF_33(uint256) -> pairData_1 (-> []).nativeTokenPriceCumulative
MEMBER
init
end
init
end
OUT KEY: _updateVaderPrice_pairData_nativeTokenPriceCumulative
OUT KEY: _updateVaderPrice_pairData_nativeTokenPriceCumulative
FTT: None
No field found
[i]Type for REF_33

Name: pairData.nativeTokenPriceCumulative Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> []), Field: nativeTokenPriceCumulative
#################
Member: 
Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceCumulative Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_48(uint256) = nativeTokenPriceCumulative_3 - REF_33
init
end
init
end
init
end
_______________

Name: nativeTokenPriceCumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_48

Name: TMP_48 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_49(uint256) = TMP_48 / timeElapsed_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_49

Name: TMP_49 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_50 = CONVERT TMP_49 to uint224
Converting TMP_49

Name: TMP_49 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_49 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_50

Name: TMP_50 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51 = new uq112x112(TMP_50)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_2 (-> [])(ILiquidityBasedTWAP.ExchangePair) := ϕ(['pairData_1 (-> [])'])
Phi
init
end
_______________

Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
XXXX
REF_31 (->pairData_2 (-> [])) := TMP_51(FixedPoint.uq112x112)
asgn
init
end
_______________

Name: TMP_51 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_31

Name: REF_31 Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> []), Field: nativeTokenPriceAverage
#################
Member: 
Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceAverage Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_31 Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceAverage Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 3 (-> [])
Globalname: pairData
End popogation
Name: pairData, Num: 3 (-> [])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_34(uint256) -> pairData_2 (-> []).nativeTokenPriceCumulative
MEMBER
init
end
init
end
[i]Type for REF_34

Name: pairData.nativeTokenPriceCumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> []), Field: nativeTokenPriceCumulative
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceCumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
pairData_3 (-> [])(ILiquidityBasedTWAP.ExchangePair) := ϕ(['pairData_2 (-> [])'])
Phi
init
end
_______________

Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
XXXX
REF_34 (->pairData_3 (-> [])) := nativeTokenPriceCumulative_3(uint256)
asgn
init
end
_______________

Name: nativeTokenPriceCumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_34

Name: REF_34 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> []), Field: nativeTokenPriceCumulative
#################
Member: 
Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_34 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceCumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 4 (-> [])
Globalname: pairData
End popogation
Name: pairData, Num: 4 (-> [])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_35(uint256) -> pairData_3 (-> []).lastMeasurement
MEMBER
init
end
init
end
[i]Type for REF_35

Name: pairData.lastMeasurement Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_3 (-> []), Field: lastMeasurement
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.lastMeasurement Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
pairData_4 (-> [])(ILiquidityBasedTWAP.ExchangePair) := ϕ(['pairData_3 (-> [])'])
Phi
init
end
_______________

Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
XXXX
REF_35 (->pairData_4 (-> [])) := currentMeasurement_1(uint256)
asgn
init
end
_______________

Name: currentMeasurement Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_35

Name: REF_35 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_3 (-> []), Field: lastMeasurement
#################
Member: 
Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_35 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
End popogation
REF_36(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
[i]Type for REF_36

Name: Paths.VADER Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52 = CONVERT REF_36 to uint256
Converting REF_36

Name: Paths.VADER Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_52

Name: TMP_52 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_37(uint256) -> previousPrices_3[TMP_52]
INDEX
[i]Type for REF_37

Name: previousPrices Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_53(uint256) = reserveNative_3 (c)* REF_37
testing mul...
init
end
init
end

Name: reserveNative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: previousPrices Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: previousPrices Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_53

Name: TMP_53 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_38(address) -> pairData_4 (-> []).foreignAsset
MEMBER
init
end
init
end
OUT KEY: _updateVaderPrice_pairData_foreignAsset
OUT KEY: _updateVaderPrice_pairData_foreignAsset
FTT: None
No field found
[i]Type for REF_38

Name: pairData.foreignAsset Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_4 (-> []), Field: foreignAsset
#################
Member: 
Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
Fieldf: 
Name: foreignAsset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignAsset Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_54(uint256) = INTERNAL_CALL, LiquidityBasedTWAP.getChainlinkPrice(address)(REF_38)
init
end
init
end
_______________

Name: PIC_12 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_54

Name: TMP_54 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = reserveForeign_3 (c)* TMP_54
testing mul...
init
end
init
end

Name: reserveForeign Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_54 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: TMP_54 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_55

Name: TMP_55 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_56(uint256) = TMP_53 (c)+ TMP_55
init
end
init
end
init
end
_______________

Name: TMP_55 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_56

Name: TMP_56 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentLiquidityEvaluation_1(uint256) := TMP_56(uint256)
asgn
init
end
_______________

Name: TMP_56 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for currentLiquidityEvaluation

Name: currentLiquidityEvaluation Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: pair_1 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: pairData_1 (-> []) Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Phid

Name: timeElapsed_1 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: vader Function: _updateVaderPrice
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
pair_1(IUniswapV2Pair) := ϕ(['pair_1'])
Phi
[i]Type for pair

Name: pair Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_1 (-> [])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
Phi
[i]Type for pairData

Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
timeElapsed_1(uint256) := ϕ(['timeElapsed_1'])
Phi
[i]Type for timeElapsed

Name: timeElapsed Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vader_2(address) := ϕ(['vader_1', 'vader_0', 'vader_3', 'vader_8', 'vader_10'])
Phi
[i]Type for vader

Name: vader Function: _updateVaderPrice
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_1(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: isFirst, Num: 1
Globalname: isFirst
End popogation

Name: vader Function: _updateVaderPrice
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_45(address) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:token0, arguments:[]  
High Call: token0
Running querryfc
Written func info: UniswapV2Pair, token0
Retvar: ('c', [-1], [-1], 'u', 'u', 1)
([-1], [-1], 'u', 'u', 1, -1)
[i]Type for TMP_45

Name: TMP_45 Function: _updateVaderPrice
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vader_3(address) := ϕ(['vader_2', 'vader_1', 'vader_3', 'vader_8', 'vader_10'])
Phi
[i]Type for vader

Name: vader Function: _updateVaderPrice
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_2(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_1', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_46(bool) = TMP_45 == vader_3
[i]Type for TMP_46

Name: TMP_46 Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
isFirst_1(bool) := TMP_46(bool)
asgn
init
end
_______________

Name: TMP_46 Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for isFirst

Name: isFirst Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: reserve0, Num: 1
Globalname: reserve0
Name: reserve1, Num: 1
Globalname: reserve1
End popogation

Name: previousPrices Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TUPLE_2(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:getReserves, arguments:[]  
High Call: getReserves
Running querryfc
Written func info: UniswapV2Pair, getReserves
Handling balance function!
u
prev address? u
Finding type for hlc_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b1867fa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b1452eb0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b145c0a0>] ... )
[i]Type for TUPLE_2

Name: TUPLE_2 Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_3(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_2', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_1(uint256)= UNPACK TUPLE_2 index: 0 
Finding type for reserve0(uint256 ... )
[i]Type for reserve0

Name: reserve0 Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_1(uint256)= UNPACK TUPLE_2 index: 1 
Finding type for reserve1(uint256 ... )
[i]Type for reserve1

Name: reserve1 Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: isFirst, Num: 1
Globalname: isFirst
End popogation
Propogating parameters and globals to SSA variables...
Name: reserve0, Num: 1
Globalname: reserve0
Name: reserve1, Num: 1
Globalname: reserve1
Name: reserveForeign, Num: 2
Globalname: reserveForeign
Name: reserveNative, Num: 2
Globalname: reserveNative
End popogation
reserveNative_2(uint256) := reserve1_1(uint256)
asgn
init
end
_______________

Name: reserve1 Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for reserveNative

Name: reserveNative Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_2(uint256) := reserve0_1(uint256)
asgn
init
end
_______________

Name: reserve0 Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for reserveForeign

Name: reserveForeign Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: reserve0, Num: 1
Globalname: reserve0
Name: reserve1, Num: 1
Globalname: reserve1
Name: reserveNative, Num: 1
Globalname: reserveNative
Name: reserveForeign, Num: 1
Globalname: reserveForeign
End popogation
reserveNative_1(uint256) := reserve0_1(uint256)
asgn
init
end
_______________

Name: reserve0 Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for reserveNative

Name: reserveNative Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint256) := reserve1_1(uint256)
asgn
init
end
_______________

Name: reserve1 Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for reserveForeign

Name: reserveForeign Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: reserveNative, Num: 3
Globalname: reserveNative

Name: reserveNative Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: reserveForeign, Num: 3
Globalname: reserveForeign

Name: reserveForeign Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
reserveNative_3(uint256) := ϕ(['reserveNative_1', 'reserveNative_2'])
Phi
[i]Type for reserveNative

Name: reserveNative Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_3(uint256) := ϕ(['reserveForeign_1', 'reserveForeign_2'])
Phi
[i]Type for reserveForeign

Name: reserveForeign Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: price0Cumulative, Num: 1
Globalname: price0Cumulative
Name: price1Cumulative, Num: 1
Globalname: price1Cumulative
Name: currentMeasurement, Num: 1
Globalname: currentMeasurement
End popogation
TMP_47 = CONVERT pair_1 to address
Converting pair_1

Name: pair Function: _updateVaderPrice
Num: -1
Den: -1
Address: 6
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: _updateVaderPrice
Num: -1
Den: -1
Address: 6
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_47

Name: TMP_47 Function: _updateVaderPrice
Num: -1
Den: -1
Address: 6
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_3(uint256,uint256,uint32) = LIBRARY_CALL, dest:UniswapV2OracleLibrary, function:UniswapV2OracleLibrary.currentCumulativePrices(address), arguments:['TMP_47'] 
Written func info: UniswapV2OracleLibrary, currentCumulativePrices
Handling balance function!
7
Finding type for TUPLE_3([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b1532e80>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b153d070>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b153d220>] ... )
[i]Type for TUPLE_3

Name: TUPLE_3 Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price0Cumulative_1(uint256)= UNPACK TUPLE_3 index: 0 
Finding type for price0Cumulative(uint256 ... )
[i]Type for price0Cumulative

Name: price0Cumulative Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price1Cumulative_1(uint256)= UNPACK TUPLE_3 index: 1 
Finding type for price1Cumulative(uint256 ... )
[i]Type for price1Cumulative

Name: price1Cumulative Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentMeasurement_1(uint256)= UNPACK TUPLE_3 index: 2 
Finding type for currentMeasurement(uint256 ... )
[i]Type for currentMeasurement

Name: currentMeasurement Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: isFirst, Num: 1
Globalname: isFirst
End popogation
Propogating parameters and globals to SSA variables...
Name: price0Cumulative, Num: 1
Globalname: price0Cumulative
Name: nativeTokenPriceCumulative, Num: 2
Globalname: nativeTokenPriceCumulative
End popogation
nativeTokenPriceCumulative_2(uint256) := price0Cumulative_1(uint256)
asgn
init
end
_______________

Name: price0Cumulative Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for nativeTokenPriceCumulative

Name: nativeTokenPriceCumulative Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price1Cumulative, Num: 1
Globalname: price1Cumulative
Name: nativeTokenPriceCumulative, Num: 1
Globalname: nativeTokenPriceCumulative
End popogation
nativeTokenPriceCumulative_1(uint256) := price1Cumulative_1(uint256)
asgn
init
end
_______________

Name: price1Cumulative Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for nativeTokenPriceCumulative

Name: nativeTokenPriceCumulative Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: nativeTokenPriceCumulative, Num: 3
Globalname: nativeTokenPriceCumulative

Name: nativeTokenPriceCumulative Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
nativeTokenPriceCumulative_3(uint256) := ϕ(['nativeTokenPriceCumulative_1', 'nativeTokenPriceCumulative_2'])
Phi
[i]Type for nativeTokenPriceCumulative

Name: nativeTokenPriceCumulative Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: nativeTokenPriceCumulative, Num: 3
Globalname: nativeTokenPriceCumulative
Name: pairData, Num: 2 (-> [])
Globalname: pairData
End popogation
Name: pairData, Num: 2 (-> [])
Globalname: pairData

Name: pairData Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
Phid
REF_31(FixedPoint.uq112x112) -> pairData_1 (-> []).nativeTokenPriceAverage
MEMBER
init
end
init
end
OUT KEY: _updateVaderPrice_pairData_nativeTokenPriceAverage
OUT KEY: _updateVaderPrice_pairData_nativeTokenPriceAverage
FTT: None
No field found
[i]Type for REF_31

Name: pairData.nativeTokenPriceAverage Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> []), Field: nativeTokenPriceAverage
#################
Member: 
Name: pairData Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceAverage Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceAverage Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceAverage Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_33(uint256) -> pairData_1 (-> []).nativeTokenPriceCumulative
MEMBER
init
end
init
end
[i]Type for REF_33

Name: pairData.nativeTokenPriceCumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> []), Field: nativeTokenPriceCumulative
#################
Member: 
Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceCumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceCumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_48(uint256) = nativeTokenPriceCumulative_3 - REF_33
init
end
init
end
init
end
_______________

Name: pairData.nativeTokenPriceCumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_48

Name: TMP_48 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_49(uint256) = TMP_48 / timeElapsed_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_49

Name: TMP_49 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_50 = CONVERT TMP_49 to uint224
Converting TMP_49

Name: TMP_49 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_49 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_50

Name: TMP_50 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51 = new uq112x112(TMP_50)
[i]Type for TMP_51

Name: TMP_51 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_2 (-> [])(ILiquidityBasedTWAP.ExchangePair) := ϕ(['pairData_1 (-> [])'])
Phi
init
end
_______________

Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
REF_31 (->pairData_2 (-> [])) := TMP_51(FixedPoint.uq112x112)
asgn
init
end
_______________

Name: TMP_51 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_31

Name: REF_31 Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> []), Field: nativeTokenPriceAverage
#################
Member: 
Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceAverage Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_31 Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceAverage Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: nativeTokenPriceCumulative, Num: 3
Globalname: nativeTokenPriceCumulative
Name: pairData, Num: 3 (-> [])
Globalname: pairData
End popogation
Name: pairData, Num: 3 (-> [])
Globalname: pairData

Name: pairData Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
Phid
REF_34(uint256) -> pairData_2 (-> []).nativeTokenPriceCumulative
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.nativeTokenPriceCumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_34

Name: pairData.nativeTokenPriceCumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> []), Field: nativeTokenPriceCumulative
#################
Member: 
Name: pairData Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceCumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceCumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_3 (-> [])(ILiquidityBasedTWAP.ExchangePair) := ϕ(['pairData_2 (-> [])'])
Phi
init
end
_______________

Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
REF_34 (->pairData_3 (-> [])) := nativeTokenPriceCumulative_3(uint256)
asgn
init
end
_______________

Name: nativeTokenPriceCumulative Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_34

Name: REF_34 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> []), Field: nativeTokenPriceCumulative
#################
Member: 
Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_34 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceCumulative Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: currentMeasurement, Num: 1
Globalname: currentMeasurement
Name: pairData, Num: 4 (-> [])
Globalname: pairData
End popogation
Name: pairData, Num: 4 (-> [])
Globalname: pairData

Name: pairData Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative, foreignAsset
Finance Type: undef
Phid
REF_35(uint256) -> pairData_3 (-> []).lastMeasurement
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.lastMeasurement Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_35

Name: pairData.lastMeasurement Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_3 (-> []), Field: lastMeasurement
#################
Member: 
Name: pairData Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative, foreignAsset
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.lastMeasurement Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_4 (-> [])(ILiquidityBasedTWAP.ExchangePair) := ϕ(['pairData_3 (-> [])'])
Phi
init
end
_______________

Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset, nativeTokenPriceAverage, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
REF_35 (->pairData_4 (-> [])) := currentMeasurement_1(uint256)
asgn
init
end
_______________

Name: currentMeasurement Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_35

Name: REF_35 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_3 (-> []), Field: lastMeasurement
#################
Member: 
Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset, nativeTokenPriceAverage, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_35 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: reserveForeign, Num: 3
Globalname: reserveForeign
Name: reserveNative, Num: 3
Globalname: reserveNative
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
End popogation
REF_36(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
init
end
_______________

Name: Paths.VADER Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_36

Name: Paths.VADER Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52 = CONVERT REF_36 to uint256
Converting REF_36

Name: Paths.VADER Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_52

Name: TMP_52 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_37(uint256) -> previousPrices_3[TMP_52]
INDEX
[i]Type for REF_37

Name: previousPrices Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_53(uint256) = reserveNative_3 (c)* REF_37
testing mul...
init
end
init
end

Name: reserveNative Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: previousPrices Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: previousPrices Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_53

Name: TMP_53 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_38(address) -> pairData_4 (-> []).foreignAsset
MEMBER
init
end
init
end
[i]Type for REF_38

Name: pairData.foreignAsset Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_4 (-> []), Field: foreignAsset
#################
Member: 
Name: pairData Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset, nativeTokenPriceAverage, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: foreignAsset Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignAsset Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: foreignAsset Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = INTERNAL_CALL, LiquidityBasedTWAP.getChainlinkPrice(address)(REF_38)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_0([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_54

Name: TMP_54 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_55(uint256) = reserveForeign_3 (c)* TMP_54
testing mul...
init
end
init
end

Name: reserveForeign Function: _updateVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_54 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: TMP_54 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_55

Name: TMP_55 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_56(uint256) = TMP_53 (c)+ TMP_55
init
end
init
end
init
end
_______________

Name: TMP_55 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_56

Name: TMP_56 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentLiquidityEvaluation_1(uint256) := TMP_56(uint256)
asgn
init
end
_______________

Name: TMP_56 Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for currentLiquidityEvaluation

Name: currentLiquidityEvaluation Function: _updateVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_43

Name: TMP_43 Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentLiquidityEvaluation_1(uint256) := TMP_43(uint256)
asgn
init
end
_______________

Name: TMP_43 Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for currentLiquidityEvaluation

Name: currentLiquidityEvaluation Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: pastLiquidityEvaluation, Num: 1
Globalname: pastLiquidityEvaluation
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_24(uint256) -> pastLiquidityWeights_1[i_1]
INDEX
[i]Type for REF_24

Name: pastLiquidityWeights Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_24 (->pastLiquidityWeights_2) := pastLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_24

Name: REF_24 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
Name: twapData, Num: 5
Globalname: twapData
global...

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData
End popogation
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_25(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
[i]Type for REF_25

Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
[i]Type for pairData

Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
REF_25 (->pairData_2 (-> ['twapData'])) := currentLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: currentLiquidityEvaluation Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_25

Name: REF_25 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_25 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_5(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
Name: _totalLiquidityWeight, Num: 2
Globalname: _totalLiquidityWeight
End popogation
_totalLiquidityWeight_2(uint256) = _totalLiquidityWeight_1 (c)+ currentLiquidityEvaluation_1
init
end
init
end
init
end
_______________

Name: currentLiquidityEvaluation Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: i, Num: 2
Globalname: i
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


vaderPairs_2(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
totalLiquidityWeight_3(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
twapData_3(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
REF_16 -> LENGTH vaderPairs_2
totalPairs_1(uint256) := REF_16(uint256)
TMP_37 = new uint256[](totalPairs_1)
pastLiquidityWeights_1(uint256[]) := TMP_37(uint256)
REF_17(ILiquidityBasedTWAP.Paths) -> Paths.VADER
TMP_38 = CONVERT REF_17 to uint256
REF_18(uint256) -> totalLiquidityWeight_3[TMP_38]
pastTotalLiquidityWeight_1(uint256) := REF_18(uint256)
_totalLiquidityWeight_1(uint256) := ϕ(['_totalLiquidityWeight_0', '_totalLiquidityWeight_2'])
i_1(uint256) := ϕ(['i_0', 'i_2'])
TMP_39(bool) = i_1 < totalPairs_1
CONDITION TMP_39
REF_19(IUniswapV2Pair) -> vaderPairs_2[i_1]
pair_1(IUniswapV2Pair) := REF_19(IUniswapV2Pair)
REF_26(ILiquidityBasedTWAP.Paths) -> Paths.VADER
TMP_44 = CONVERT REF_26 to uint256
REF_27(uint256) -> totalLiquidityWeight_3[TMP_44]
totalLiquidityWeight_4(uint256[2]) := ϕ(['totalLiquidityWeight_3'])
REF_27 (->totalLiquidityWeight_4) := _totalLiquidityWeight_1(uint256)
TMP_40 = CONVERT pair_1 to address
REF_20(ILiquidityBasedTWAP.ExchangePair) -> twapData_3[TMP_40]
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_20(ILiquidityBasedTWAP.ExchangePair)
REF_21(uint256) -> pairData_1 (-> ['twapData']).lastMeasurement
TMP_41(uint256) = block.timestamp (c)- REF_21
timeElapsed_1(uint256) := TMP_41(uint256)
REF_22(uint256) -> pairData_1 (-> ['twapData']).updatePeriod
TMP_42(bool) = timeElapsed_1 < REF_22
CONDITION TMP_42
REF_23(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
pastLiquidityEvaluation_1(uint256) := REF_23(uint256)
TMP_43(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._updateVaderPrice(IUniswapV2Pair,ILiquidityBasedTWAP.ExchangePair,uint256)(pair_1,pairData_1 (-> ['twapData']),timeElapsed_1)
currentLiquidityEvaluation_1(uint256) := TMP_43(uint256)
REF_24(uint256) -> pastLiquidityWeights_1[i_1]
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
REF_24 (->pastLiquidityWeights_2) := pastLiquidityEvaluation_1(uint256)
REF_25(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
REF_25 (->pairData_2 (-> ['twapData'])) := currentLiquidityEvaluation_1(uint256)
twapData_5(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
_totalLiquidityWeight_2(uint256) = _totalLiquidityWeight_1 (c)+ currentLiquidityEvaluation_1
i_2(uint256) = i_1 (c)+ 1


Propogating parameters and globals to SSA variables...
End popogation

Name: vaderPairs Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
vaderPairs_2(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_3(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_3(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
End popogation
REF_16 -> LENGTH vaderPairs_2
[i]Type for REF_16

Name: REF_16 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_16(uint256)
asgn
init
end
_______________

Name: REF_16 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_37 = new uint256[](totalPairs_1)
[i]Type for TMP_37

Name: TMP_37 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1(uint256[]) := TMP_37(uint256)
asgn
init
end
_______________

Name: TMP_37 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastTotalLiquidityWeight, Num: 1
Globalname: pastTotalLiquidityWeight
End popogation
REF_17(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
init
end
_______________

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_17

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_38 = CONVERT REF_17 to uint256
Converting REF_17

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_38

Name: TMP_38 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_18(uint256) -> totalLiquidityWeight_3[TMP_38]
INDEX
[i]Type for REF_18

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastTotalLiquidityWeight_1(uint256) := REF_18(uint256)
asgn
init
end
_______________

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: i, Num: 1
Globalname: i
End popogation
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: i, Num: 1
Globalname: i

Name: i Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_totalLiquidityWeight_1(uint256) := ϕ(['_totalLiquidityWeight_0', '_totalLiquidityWeight_2'])
Phi
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_1(uint256) := ϕ(['i_0', 'i_2'])
Phi
init
end
_______________

Name: i Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_39(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: i Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: i Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_39

Name: TMP_39 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pair, Num: 1
Globalname: pair
End popogation
REF_19(IUniswapV2Pair) -> vaderPairs_2[i_1]
INDEX
[i]Type for REF_19

Name: vaderPairs Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pair_1(IUniswapV2Pair) := REF_19(IUniswapV2Pair)
asgn
init
end
_______________

Name: vaderPairs Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pair

Name: pair Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
End popogation

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_26(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
init
end
_______________

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_26

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_44 = CONVERT REF_26 to uint256
Converting REF_26

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_44

Name: TMP_44 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_27(uint256) -> totalLiquidityWeight_3[TMP_44]
INDEX
[i]Type for REF_27

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalLiquidityWeight_4(uint256[2]) := ϕ(['totalLiquidityWeight_3'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_27 (->totalLiquidityWeight_4) := _totalLiquidityWeight_1(uint256)
asgn
init
end
_______________

Name: _totalLiquidityWeight Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_27

Name: REF_27 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 1 (-> ['twapData'])
Globalname: pairData
End popogation
TMP_40 = CONVERT pair_1 to address
Converting pair_1

Name: pair Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_40

Name: TMP_40 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_20(ILiquidityBasedTWAP.ExchangePair) -> twapData_3[TMP_40]
INDEX
[i]Type for REF_20

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_20(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: timeElapsed, Num: 1
Globalname: timeElapsed
End popogation
REF_21(uint256) -> pairData_1 (-> ['twapData']).lastMeasurement
MEMBER
init
end
init
end
[i]Type for REF_21

Name: pairData.lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: lastMeasurement
#################
Member: 
Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_41(uint256) = block.timestamp (c)- REF_21
init
end
init
end
init
end
_______________

Name: pairData.lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_41

Name: TMP_41 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint256) := TMP_41(uint256)
asgn
init
end
_______________

Name: TMP_41 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_22(uint256) -> pairData_1 (-> ['twapData']).updatePeriod
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.updatePeriod Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_22

Name: pairData.updatePeriod Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: updatePeriod
#################
Member: 
Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: updatePeriod Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.updatePeriod Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: updatePeriod Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_42(bool) = timeElapsed_1 < REF_22
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_42

Name: TMP_42 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pastLiquidityEvaluation, Num: 1
Globalname: pastLiquidityEvaluation
End popogation
REF_23(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
[i]Type for REF_23

Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityEvaluation_1(uint256) := REF_23(uint256)
asgn
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityEvaluation

Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
End popogation
TMP_43(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._updateVaderPrice(IUniswapV2Pair,ILiquidityBasedTWAP.ExchangePair,uint256)(pair_1,pairData_1 (-> ['twapData']),timeElapsed_1)
init
end
init
end
init
end
init
end
_______________

Name: PIC_27 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_43

Name: TMP_43 Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentLiquidityEvaluation_1(uint256) := TMP_43(uint256)
asgn
init
end
_______________

Name: TMP_43 Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for currentLiquidityEvaluation

Name: currentLiquidityEvaluation Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights

Name: pastLiquidityWeights Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_24(uint256) -> pastLiquidityWeights_1[i_1]
INDEX
[i]Type for REF_24

Name: pastLiquidityWeights Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_24 (->pastLiquidityWeights_2) := pastLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_24

Name: REF_24 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData
End popogation
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData

Name: pairData Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Phid

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_25(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_25

Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
[i]Type for pairData

Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
REF_25 (->pairData_2 (-> ['twapData'])) := currentLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: currentLiquidityEvaluation Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_25

Name: REF_25 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_25 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_5(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
Name: _totalLiquidityWeight, Num: 2
Globalname: _totalLiquidityWeight
End popogation
_totalLiquidityWeight_2(uint256) = _totalLiquidityWeight_1 (c)+ currentLiquidityEvaluation_1
init
end
init
end
init
end
_______________

Name: currentLiquidityEvaluation Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 2
Globalname: i
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


vaderPairs_2(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
totalLiquidityWeight_3(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
twapData_3(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
REF_16 -> LENGTH vaderPairs_2
totalPairs_1(uint256) := REF_16(uint256)
TMP_37 = new uint256[](totalPairs_1)
pastLiquidityWeights_1(uint256[]) := TMP_37(uint256)
REF_17(ILiquidityBasedTWAP.Paths) -> Paths.VADER
TMP_38 = CONVERT REF_17 to uint256
REF_18(uint256) -> totalLiquidityWeight_3[TMP_38]
pastTotalLiquidityWeight_1(uint256) := REF_18(uint256)
_totalLiquidityWeight_1(uint256) := ϕ(['_totalLiquidityWeight_0', '_totalLiquidityWeight_2'])
i_1(uint256) := ϕ(['i_0', 'i_2'])
TMP_39(bool) = i_1 < totalPairs_1
CONDITION TMP_39
REF_19(IUniswapV2Pair) -> vaderPairs_2[i_1]
pair_1(IUniswapV2Pair) := REF_19(IUniswapV2Pair)
REF_26(ILiquidityBasedTWAP.Paths) -> Paths.VADER
TMP_44 = CONVERT REF_26 to uint256
REF_27(uint256) -> totalLiquidityWeight_3[TMP_44]
totalLiquidityWeight_4(uint256[2]) := ϕ(['totalLiquidityWeight_3'])
REF_27 (->totalLiquidityWeight_4) := _totalLiquidityWeight_1(uint256)
TMP_40 = CONVERT pair_1 to address
REF_20(ILiquidityBasedTWAP.ExchangePair) -> twapData_3[TMP_40]
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_20(ILiquidityBasedTWAP.ExchangePair)
REF_21(uint256) -> pairData_1 (-> ['twapData']).lastMeasurement
TMP_41(uint256) = block.timestamp (c)- REF_21
timeElapsed_1(uint256) := TMP_41(uint256)
REF_22(uint256) -> pairData_1 (-> ['twapData']).updatePeriod
TMP_42(bool) = timeElapsed_1 < REF_22
CONDITION TMP_42
REF_23(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
pastLiquidityEvaluation_1(uint256) := REF_23(uint256)
TMP_43(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._updateVaderPrice(IUniswapV2Pair,ILiquidityBasedTWAP.ExchangePair,uint256)(pair_1,pairData_1 (-> ['twapData']),timeElapsed_1)
currentLiquidityEvaluation_1(uint256) := TMP_43(uint256)
REF_24(uint256) -> pastLiquidityWeights_1[i_1]
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
REF_24 (->pastLiquidityWeights_2) := pastLiquidityEvaluation_1(uint256)
REF_25(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
REF_25 (->pairData_2 (-> ['twapData'])) := currentLiquidityEvaluation_1(uint256)
twapData_5(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
_totalLiquidityWeight_2(uint256) = _totalLiquidityWeight_1 (c)+ currentLiquidityEvaluation_1
i_2(uint256) = i_1 (c)+ 1


Propogating parameters and globals to SSA variables...
End popogation

Name: vaderPairs Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
vaderPairs_2(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_3(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_3(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_16 -> LENGTH vaderPairs_2
[i]Type for REF_16

Name: REF_16 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_16(uint256)
asgn
init
end
_______________

Name: REF_16 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_37 = new uint256[](totalPairs_1)
[i]Type for TMP_37

Name: TMP_37 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1(uint256[]) := TMP_37(uint256)
asgn
init
end
_______________

Name: TMP_37 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_17(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
init
end
_______________

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_17

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_38 = CONVERT REF_17 to uint256
Converting REF_17

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_38

Name: TMP_38 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_18(uint256) -> totalLiquidityWeight_3[TMP_38]
INDEX
[i]Type for REF_18

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastTotalLiquidityWeight_1(uint256) := REF_18(uint256)
asgn
init
end
_______________

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
End popogation
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: i Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_totalLiquidityWeight_1(uint256) := ϕ(['_totalLiquidityWeight_0', '_totalLiquidityWeight_2'])
Phi
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_1(uint256) := ϕ(['i_0', 'i_2'])
Phi
[i]Type for i

Name: i Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_39(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_39

Name: TMP_39 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_19(IUniswapV2Pair) -> vaderPairs_2[i_1]
INDEX
[i]Type for REF_19

Name: vaderPairs Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pair_1(IUniswapV2Pair) := REF_19(IUniswapV2Pair)
asgn
init
end
_______________

Name: vaderPairs Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pair

Name: pair Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
End popogation

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_26(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
init
end
_______________

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_26

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_44 = CONVERT REF_26 to uint256
Converting REF_26

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_44

Name: TMP_44 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_27(uint256) -> totalLiquidityWeight_3[TMP_44]
INDEX
[i]Type for REF_27

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalLiquidityWeight_4(uint256[2]) := ϕ(['totalLiquidityWeight_3'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_27 (->totalLiquidityWeight_4) := _totalLiquidityWeight_1(uint256)
asgn
init
end
_______________

Name: _totalLiquidityWeight Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_27

Name: REF_27 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_40 = CONVERT pair_1 to address
Converting pair_1

Name: pair Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_40

Name: TMP_40 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_20(ILiquidityBasedTWAP.ExchangePair) -> twapData_3[TMP_40]
INDEX
[i]Type for REF_20

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_20(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_21(uint256) -> pairData_1 (-> ['twapData']).lastMeasurement
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_21

Name: pairData.lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: lastMeasurement
#################
Member: 
Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_41(uint256) = block.timestamp (c)- REF_21
init
end
init
end
init
end
_______________

Name: pairData.lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_41

Name: TMP_41 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint256) := TMP_41(uint256)
asgn
init
end
_______________

Name: TMP_41 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_22(uint256) -> pairData_1 (-> ['twapData']).updatePeriod
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.updatePeriod Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_22

Name: pairData.updatePeriod Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: updatePeriod
#################
Member: 
Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: updatePeriod Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.updatePeriod Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: updatePeriod Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_42(bool) = timeElapsed_1 < REF_22
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_42

Name: TMP_42 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_23(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_23

Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityEvaluation_1(uint256) := REF_23(uint256)
asgn
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityEvaluation

Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
End popogation
TMP_43(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._updateVaderPrice(IUniswapV2Pair,ILiquidityBasedTWAP.ExchangePair,uint256)(pair_1,pairData_1 (-> ['twapData']),timeElapsed_1)
init
end
init
end
init
end
init
end
_______________

Name: PIC_27 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_43

Name: TMP_43 Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentLiquidityEvaluation_1(uint256) := TMP_43(uint256)
asgn
init
end
_______________

Name: TMP_43 Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for currentLiquidityEvaluation

Name: currentLiquidityEvaluation Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights

Name: pastLiquidityWeights Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_24(uint256) -> pastLiquidityWeights_1[i_1]
INDEX
[i]Type for REF_24

Name: pastLiquidityWeights Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_24 (->pastLiquidityWeights_2) := pastLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_24

Name: REF_24 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
End popogation

Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Phid

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_25(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_25

Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
Phi
[i]Type for pairData

Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
REF_25 (->pairData_2 (-> ['twapData'])) := currentLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: currentLiquidityEvaluation Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_25

Name: REF_25 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_25 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_5(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
Name: _totalLiquidityWeight, Num: 2
Globalname: _totalLiquidityWeight
End popogation
_totalLiquidityWeight_2(uint256) = _totalLiquidityWeight_1 (c)+ currentLiquidityEvaluation_1
init
end
init
end
init
end
_______________

Name: currentLiquidityEvaluation Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


vaderPairs_2(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
totalLiquidityWeight_3(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
twapData_3(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
REF_16 -> LENGTH vaderPairs_2
totalPairs_1(uint256) := REF_16(uint256)
TMP_37 = new uint256[](totalPairs_1)
pastLiquidityWeights_1(uint256[]) := TMP_37(uint256)
REF_17(ILiquidityBasedTWAP.Paths) -> Paths.VADER
TMP_38 = CONVERT REF_17 to uint256
REF_18(uint256) -> totalLiquidityWeight_3[TMP_38]
pastTotalLiquidityWeight_1(uint256) := REF_18(uint256)
_totalLiquidityWeight_1(uint256) := ϕ(['_totalLiquidityWeight_0', '_totalLiquidityWeight_2'])
i_1(uint256) := ϕ(['i_0', 'i_2'])
TMP_39(bool) = i_1 < totalPairs_1
CONDITION TMP_39
REF_19(IUniswapV2Pair) -> vaderPairs_2[i_1]
pair_1(IUniswapV2Pair) := REF_19(IUniswapV2Pair)
REF_26(ILiquidityBasedTWAP.Paths) -> Paths.VADER
TMP_44 = CONVERT REF_26 to uint256
REF_27(uint256) -> totalLiquidityWeight_3[TMP_44]
totalLiquidityWeight_4(uint256[2]) := ϕ(['totalLiquidityWeight_3'])
REF_27 (->totalLiquidityWeight_4) := _totalLiquidityWeight_1(uint256)
TMP_40 = CONVERT pair_1 to address
REF_20(ILiquidityBasedTWAP.ExchangePair) -> twapData_3[TMP_40]
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_20(ILiquidityBasedTWAP.ExchangePair)
REF_21(uint256) -> pairData_1 (-> ['twapData']).lastMeasurement
TMP_41(uint256) = block.timestamp (c)- REF_21
timeElapsed_1(uint256) := TMP_41(uint256)
REF_22(uint256) -> pairData_1 (-> ['twapData']).updatePeriod
TMP_42(bool) = timeElapsed_1 < REF_22
CONDITION TMP_42
REF_23(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
pastLiquidityEvaluation_1(uint256) := REF_23(uint256)
TMP_43(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._updateVaderPrice(IUniswapV2Pair,ILiquidityBasedTWAP.ExchangePair,uint256)(pair_1,pairData_1 (-> ['twapData']),timeElapsed_1)
currentLiquidityEvaluation_1(uint256) := TMP_43(uint256)
REF_24(uint256) -> pastLiquidityWeights_1[i_1]
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
REF_24 (->pastLiquidityWeights_2) := pastLiquidityEvaluation_1(uint256)
REF_25(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
REF_25 (->pairData_2 (-> ['twapData'])) := currentLiquidityEvaluation_1(uint256)
twapData_5(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
_totalLiquidityWeight_2(uint256) = _totalLiquidityWeight_1 (c)+ currentLiquidityEvaluation_1
i_2(uint256) = i_1 (c)+ 1


Propogating parameters and globals to SSA variables...
End popogation

Name: vaderPairs Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
vaderPairs_2(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_3(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_3(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_16 -> LENGTH vaderPairs_2
[i]Type for REF_16

Name: REF_16 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_16(uint256)
asgn
init
end
_______________

Name: REF_16 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_37 = new uint256[](totalPairs_1)
[i]Type for TMP_37

Name: TMP_37 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1(uint256[]) := TMP_37(uint256)
asgn
init
end
_______________

Name: TMP_37 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_17(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
init
end
_______________

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_17

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_38 = CONVERT REF_17 to uint256
Converting REF_17

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_38

Name: TMP_38 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_18(uint256) -> totalLiquidityWeight_3[TMP_38]
INDEX
[i]Type for REF_18

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastTotalLiquidityWeight_1(uint256) := REF_18(uint256)
asgn
init
end
_______________

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
End popogation
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: i Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_totalLiquidityWeight_1(uint256) := ϕ(['_totalLiquidityWeight_0', '_totalLiquidityWeight_2'])
Phi
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_1(uint256) := ϕ(['i_0', 'i_2'])
Phi
[i]Type for i

Name: i Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_39(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_39

Name: TMP_39 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_19(IUniswapV2Pair) -> vaderPairs_2[i_1]
INDEX
[i]Type for REF_19

Name: vaderPairs Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pair_1(IUniswapV2Pair) := REF_19(IUniswapV2Pair)
asgn
init
end
_______________

Name: vaderPairs Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pair

Name: pair Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
End popogation

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_26(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
init
end
_______________

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_26

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_44 = CONVERT REF_26 to uint256
Converting REF_26

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_44

Name: TMP_44 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_27(uint256) -> totalLiquidityWeight_3[TMP_44]
INDEX
[i]Type for REF_27

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalLiquidityWeight_4(uint256[2]) := ϕ(['totalLiquidityWeight_3'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_27 (->totalLiquidityWeight_4) := _totalLiquidityWeight_1(uint256)
asgn
init
end
_______________

Name: _totalLiquidityWeight Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_27

Name: REF_27 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_40 = CONVERT pair_1 to address
Converting pair_1

Name: pair Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_40

Name: TMP_40 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_20(ILiquidityBasedTWAP.ExchangePair) -> twapData_3[TMP_40]
INDEX
[i]Type for REF_20

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_20(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_21(uint256) -> pairData_1 (-> ['twapData']).lastMeasurement
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_21

Name: pairData.lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: lastMeasurement
#################
Member: 
Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_41(uint256) = block.timestamp (c)- REF_21
init
end
init
end
init
end
_______________

Name: pairData.lastMeasurement Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_41

Name: TMP_41 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint256) := TMP_41(uint256)
asgn
init
end
_______________

Name: TMP_41 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_22(uint256) -> pairData_1 (-> ['twapData']).updatePeriod
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.updatePeriod Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_22

Name: pairData.updatePeriod Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: updatePeriod
#################
Member: 
Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: updatePeriod Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.updatePeriod Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: updatePeriod Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_42(bool) = timeElapsed_1 < REF_22
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_42

Name: TMP_42 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_23(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_23

Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityEvaluation_1(uint256) := REF_23(uint256)
asgn
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityEvaluation

Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
End popogation
TMP_43(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._updateVaderPrice(IUniswapV2Pair,ILiquidityBasedTWAP.ExchangePair,uint256)(pair_1,pairData_1 (-> ['twapData']),timeElapsed_1)
init
end
init
end
init
end
init
end
_______________

Name: PIC_27 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_43

Name: TMP_43 Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentLiquidityEvaluation_1(uint256) := TMP_43(uint256)
asgn
init
end
_______________

Name: TMP_43 Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for currentLiquidityEvaluation

Name: currentLiquidityEvaluation Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights

Name: pastLiquidityWeights Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_24(uint256) -> pastLiquidityWeights_1[i_1]
INDEX
[i]Type for REF_24

Name: pastLiquidityWeights Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_24 (->pastLiquidityWeights_2) := pastLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_24

Name: REF_24 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
End popogation

Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Phid

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_25(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_25

Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
Phi
[i]Type for pairData

Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
REF_25 (->pairData_2 (-> ['twapData'])) := currentLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: currentLiquidityEvaluation Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_25

Name: REF_25 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_25 Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_5(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
Name: _totalLiquidityWeight, Num: 2
Globalname: _totalLiquidityWeight
End popogation
_totalLiquidityWeight_2(uint256) = _totalLiquidityWeight_1 (c)+ currentLiquidityEvaluation_1
init
end
init
end
init
end
_______________

Name: currentLiquidityEvaluation Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncVaderPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
State_var: totalLiquidityWeight
State_var: twapData
State_var: usdvPairs
State_var: previousPrices
State_var: vaderPairs
State_var: vader
State_var: oracles
State_var: vaderPool
State_var: maxUpdateWindow
State_var: _owner



_updateVaderPrice
State_var: totalLiquidityWeight
State_var: twapData
State_var: usdvPairs
State_var: previousPrices
State_var: vaderPairs
State_var: vader
State_var: oracles
State_var: vaderPool
State_var: maxUpdateWindow
State_var: _owner



_calculateVaderPrice
State_var: totalLiquidityWeight
State_var: twapData
State_var: usdvPairs
State_var: previousPrices
State_var: vaderPairs
State_var: vader
State_var: oracles
State_var: vaderPool
State_var: maxUpdateWindow
State_var: _owner



setupVader
Finding type for pair(IUniswapV2Pair ... )
Finding type for oracle(IAggregatorV3 ... )
Finding type for updatePeriod(uint256 ... )
Finding type for vaderPrice(uint256 ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


previousPrices_5(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
MODIFIER_CALL, Ownable.onlyOwner()()
REF_49(ILiquidityBasedTWAP.Paths) -> Paths.VADER
TMP_68 = CONVERT REF_49 to uint256
REF_50(uint256) -> previousPrices_6[TMP_68]
TMP_69(bool) = REF_50 == 0
TMP_70(None) = SOLIDITY_CALL require(bool,string)(TMP_69,LBTWAP::setupVader: Already Initialized)
REF_51(ILiquidityBasedTWAP.Paths) -> Paths.VADER
TMP_71 = CONVERT REF_51 to uint256
REF_52(uint256) -> previousPrices_6[TMP_71]
previousPrices_7(uint256[2]) := ϕ(['previousPrices_6'])
REF_52 (->previousPrices_7) := vaderPrice_1(uint256)
INTERNAL_CALL, LiquidityBasedTWAP._addVaderPair(IUniswapV2Pair,IAggregatorV3,uint256)(pair_1,oracle_1,updatePeriod_1)


Propogating parameters and globals to SSA variables...
End popogation
Name: previousPrices, Num: 5
Globalname: previousPrices
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
previousPrices_5(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Ownable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_178(address) = INTERNAL_CALL, Ownable.owner()()
Propogating parameters and globals to SSA variables...
End popogation
Name: _owner, Num: 1
Globalname: _owner
global...

Name: PIC_10 Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
Phid
_owner_1(address) := ϕ(['_owner_3', '_owner_0'])
Phi
[i]Type for _owner

Name: _owner Function: owner
Num: -1
Den: -1
Address: 3
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN _owner_1
RETURN
init
end

Name: _owner Function: owner
Num: -1
Den: -1
Address: 3
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _owner Function: owner
Num: -1
Den: -1
Address: 3
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
Phid
_owner_1(address) := ϕ(['_owner_3', '_owner_0'])
Phi
[i]Type for _owner

Name: _owner Function: owner
Num: -1
Den: -1
Address: 3
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN _owner_1
RETURN
init
end

Name: _owner Function: owner
Num: -1
Den: -1
Address: 3
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_178

Name: TMP_178 Function: onlyOwner
Num: -1
Den: -1
Address: 3
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_179(address) = INTERNAL_CALL, Context._msgSender()()
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
RETURN msg.sender
RETURN
init
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
RETURN msg.sender
RETURN
init
[i]Type for TMP_179

Name: TMP_179 Function: onlyOwner
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_180(bool) = TMP_178 == TMP_179
[i]Type for TMP_180

Name: TMP_180 Function: onlyOwner
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_181(None) = SOLIDITY_CALL require(bool,string)(TMP_180,Ownable: caller is not the owner)
[i]Type for TMP_181

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_178(address) = INTERNAL_CALL, Ownable.owner()()
init
end
_______________

Name: PIC_32 Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_178

Name: TMP_178 Function: onlyOwner
Num: -1
Den: -1
Address: 3
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_179(address) = INTERNAL_CALL, Context._msgSender()()
init
end
_______________

Name: PIC_35 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_179

Name: TMP_179 Function: onlyOwner
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_180(bool) = TMP_178 == TMP_179
[i]Type for TMP_180

Name: TMP_180 Function: onlyOwner
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_181(None) = SOLIDITY_CALL require(bool,string)(TMP_180,Ownable: caller is not the owner)
[i]Type for TMP_181

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: previousPrices, Num: 6
Globalname: previousPrices
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_49(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
[i]Type for REF_49

Name: Paths.VADER Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_68 = CONVERT REF_49 to uint256
Converting REF_49

Name: Paths.VADER Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_68

Name: TMP_68 Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_50(uint256) -> previousPrices_6[TMP_68]
INDEX
[i]Type for REF_50

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_69(bool) = REF_50 == 0
[i]Type for TMP_69

Name: TMP_69 Function: setupVader
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_70(None) = SOLIDITY_CALL require(bool,string)(TMP_69,LBTWAP::setupVader: Already Initialized)
[i]Type for TMP_70

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: vaderPrice, Num: 1
Globalname: vaderPrice
Name: previousPrices, Num: 7
Globalname: previousPrices
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_51(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
[i]Type for REF_51

Name: Paths.VADER Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_71 = CONVERT REF_51 to uint256
Converting REF_51

Name: Paths.VADER Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_71

Name: TMP_71 Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_52(uint256) -> previousPrices_6[TMP_71]
INDEX
[i]Type for REF_52

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
previousPrices_7(uint256[2]) := ϕ(['previousPrices_6'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_52 (->previousPrices_7) := vaderPrice_1(uint256)
asgn
init
end
_______________

Name: vaderPrice Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_52

Name: REF_52 Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: updatePeriod, Num: 1
Globalname: updatePeriod
Name: pair, Num: 1
Globalname: pair
Name: oracle, Num: 1
Globalname: oracle
End popogation
INTERNAL_CALL, LiquidityBasedTWAP._addVaderPair(IUniswapV2Pair,IAggregatorV3,uint256)(pair_1,oracle_1,updatePeriod_1)
init
end
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: pair Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: oracle Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: updatePeriod Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: pair, Num: 1
Globalname: pair

Name: pair_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: oracle, Num: 1
Globalname: oracle

Name: oracle_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: updatePeriod, Num: 1
Globalname: updatePeriod

Name: updatePeriod_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: vader, Num: 4
Globalname: vader
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Phid
Name: vaderPairs, Num: 6
Globalname: vaderPairs
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: maxUpdateWindow, Num: 1
Globalname: maxUpdateWindow
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 5
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 10
Globalname: previousPrices
global...

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: twapData, Num: 8
Globalname: twapData
global...

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
pair_1(IUniswapV2Pair) := ϕ(['pair_1', 'pair_1'])
Phi
[i]Type for pair

Name: pair Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
oracle_1(IAggregatorV3) := ϕ(['oracle_1', 'oracle_1'])
Phi
[i]Type for oracle

Name: oracle Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
updatePeriod_1(uint256) := ϕ(['updatePeriod_1', 'updatePeriod_1'])
Phi
[i]Type for updatePeriod

Name: updatePeriod Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vader_4(address) := ϕ(['vader_1', 'vader_0', 'vader_3', 'vader_8', 'vader_10'])
Phi
[i]Type for vader

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_6(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_1(uint256) := ϕ(['maxUpdateWindow_12', 'maxUpdateWindow_0', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_5(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_10(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_8(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: updatePeriod, Num: 1
Globalname: updatePeriod
End popogation
TMP_79(bool) = updatePeriod_1 != 0
[i]Type for TMP_79

Name: TMP_79 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_80(None) = SOLIDITY_CALL require(bool,string)(TMP_79,LBTWAP::addVaderPair: Incorrect Update Period)
[i]Type for TMP_80

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
Name: vader, Num: 5
Globalname: vader
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Phid
Name: vaderPairs, Num: 7
Globalname: vaderPairs
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: maxUpdateWindow, Num: 2
Globalname: maxUpdateWindow
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 6
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 11
Globalname: previousPrices
global...

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: twapData, Num: 9
Globalname: twapData
global...

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_81(uint8) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Written func info: AggregatorV3, decimals
Handling balance function!
u
prev address? u
global assignment: 8
8
[i]Type for TMP_81

Name: TMP_81 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vader_5(address) := ϕ(['vader_1', 'vader_3', 'vader_8', 'vader_10', 'vader_4'])
Phi
[i]Type for vader

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_7(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_6', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_2(uint256) := ϕ(['maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19', 'maxUpdateWindow_1'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_6(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_5', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_11(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_10', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_9(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_8', 'twapData_3', 'twapData_28'])
Phi
[i]Type for twapData

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_82(bool) = TMP_81 == 8
[i]Type for TMP_82

Name: TMP_82 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_83(None) = SOLIDITY_CALL require(bool,string)(TMP_82,LBTWAP::addVaderPair: Non-USD Oracle)
[i]Type for TMP_83

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pair, Num: 1
Globalname: pair
Name: pairData, Num: 1 (-> ['twapData'])
Globalname: pairData
End popogation
TMP_84 = CONVERT pair_1 to address
Converting pair_1

Name: pair_1 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair_1 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_84

Name: TMP_84 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_56(ILiquidityBasedTWAP.ExchangePair) -> twapData_9[TMP_84]
INDEX
[i]Type for REF_56

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_56(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pair, Num: 1
Globalname: pair
Name: vader, Num: 6
Globalname: vader
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Name: isFirst, Num: 1
Globalname: isFirst
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Phid
Name: vaderPairs, Num: 8
Globalname: vaderPairs
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: maxUpdateWindow, Num: 3
Globalname: maxUpdateWindow
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 7
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 12
Globalname: previousPrices
global...

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_85(address) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:token0, arguments:[]  
High Call: token0
Running querryfc
Written func info: UniswapV2Pair, token0
Retvar: ('c', [-1], [-1], 'u', 'u', 1)
([-1], [-1], 'u', 'u', 1, -1)
[i]Type for TMP_85

Name: TMP_85 Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vader_6(address) := ϕ(['vader_5', 'vader_1', 'vader_3', 'vader_8', 'vader_10'])
Phi
[i]Type for vader

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_8(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_7', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_3(uint256) := ϕ(['maxUpdateWindow_2', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_7(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_6', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_12(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_11', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_86(bool) = TMP_85 == vader_6
[i]Type for TMP_86

Name: TMP_86 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
isFirst_1(bool) := TMP_86(bool)
asgn
init
end
_______________

Name: TMP_86 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for isFirst

Name: isFirst Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: isFirst, Num: 1
Globalname: isFirst
End popogation
Propogating parameters and globals to SSA variables...
Name: pair, Num: 1
Globalname: pair
Name: foreignAsset, Num: 1
Globalname: foreignAsset
Name: nativeAsset, Num: 1
Globalname: nativeAsset
End popogation
Name: vader, Num: 7
Globalname: vader
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Phid
Name: vaderPairs, Num: 9
Globalname: vaderPairs
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: maxUpdateWindow, Num: 4
Globalname: maxUpdateWindow
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 8
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 13
Globalname: previousPrices
global...

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: vader, Num: 8
Globalname: vader
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Phid
Name: vaderPairs, Num: 10
Globalname: vaderPairs
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: maxUpdateWindow, Num: 5
Globalname: maxUpdateWindow
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 9
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 14
Globalname: previousPrices
global...

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_106(address) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:token1, arguments:[]  
High Call: token1
Running querryfc
Written func info: UniswapV2Pair, token1
Retvar: ('c', [-1], [-1], 'u', 'u', 2)
([-1], [-1], 'u', 'u', 2, -1)
[i]Type for TMP_106

Name: TMP_106 Function: _addVaderPair
Num: -1
Den: -1
Address: 2
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vader_7(address) := ϕ(['vader_1', 'vader_3', 'vader_8', 'vader_10', 'vader_6'])
Phi
[i]Type for vader

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_9(IUniswapV2Pair[]) := ϕ(['vaderPairs_8', 'vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_4(uint256) := ϕ(['maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_3', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_8(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_7', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_13(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_12', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_107(address) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:token0, arguments:[]  
High Call: token0
Running querryfc
Written func info: UniswapV2Pair, token0
Retvar: ('c', [-1], [-1], 'u', 'u', 1)
([-1], [-1], 'u', 'u', 1, -1)
[i]Type for TMP_107

Name: TMP_107 Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vader_8(address) := ϕ(['vader_7', 'vader_1', 'vader_3', 'vader_8', 'vader_10'])
Phi
[i]Type for vader

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_10(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_9', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_5(uint256) := ϕ(['maxUpdateWindow_4', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_9(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_8', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_14(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_13', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nativeAsset_1(address) := TMP_106(address)
asgn
init
end
_______________

Name: TMP_106 Function: _addVaderPair
Num: -1
Den: -1
Address: 2
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for nativeAsset

Name: nativeAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 2
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAsset_1(address) := TMP_107(address)
asgn
init
end
_______________

Name: TMP_107 Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignAsset

Name: foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pair, Num: 1
Globalname: pair
Name: foreignAsset, Num: 2
Globalname: foreignAsset
Name: nativeAsset, Num: 2
Globalname: nativeAsset
End popogation
Name: vader, Num: 9
Globalname: vader
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Phid
Name: vaderPairs, Num: 11
Globalname: vaderPairs
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: maxUpdateWindow, Num: 6
Globalname: maxUpdateWindow
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 10
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 15
Globalname: previousPrices
global...

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: vader, Num: 10
Globalname: vader
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Phid
Name: vaderPairs, Num: 12
Globalname: vaderPairs
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: maxUpdateWindow, Num: 7
Globalname: maxUpdateWindow
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 11
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 16
Globalname: previousPrices
global...

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_104(address) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:token0, arguments:[]  
High Call: token0
Running querryfc
Written func info: UniswapV2Pair, token0
Retvar: ('c', [-1], [-1], 'u', 'u', 1)
([-1], [-1], 'u', 'u', 1, -1)
[i]Type for TMP_104

Name: TMP_104 Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vader_9(address) := ϕ(['vader_8', 'vader_3', 'vader_10', 'vader_1'])
Phi
[i]Type for vader

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_11(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_10', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_6(uint256) := ϕ(['maxUpdateWindow_19', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_5', 'maxUpdateWindow_20'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_10(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_9', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_15(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_14', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_105(address) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:token1, arguments:[]  
High Call: token1
Running querryfc
Written func info: UniswapV2Pair, token1
Retvar: ('c', [-1], [-1], 'u', 'u', 2)
([-1], [-1], 'u', 'u', 2, -1)
[i]Type for TMP_105

Name: TMP_105 Function: _addVaderPair
Num: -1
Den: -1
Address: 2
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vader_10(address) := ϕ(['vader_9', 'vader_1', 'vader_3', 'vader_8', 'vader_10'])
Phi
[i]Type for vader

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_12(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_11', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_7(uint256) := ϕ(['maxUpdateWindow_6', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_11(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_10', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_16(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_15', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nativeAsset_2(address) := TMP_104(address)
asgn
init
end
_______________

Name: TMP_104 Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for nativeAsset

Name: nativeAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAsset_2(address) := TMP_105(address)
asgn
init
end
_______________

Name: TMP_105 Function: _addVaderPair
Num: -1
Den: -1
Address: 2
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignAsset

Name: foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 2
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: nativeAsset, Num: 3
Globalname: nativeAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: foreignAsset, Num: 3
Globalname: foreignAsset

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
nativeAsset_3(address) := ϕ(['nativeAsset_1', 'nativeAsset_2'])
Phi
init
end
_______________

Name: nativeAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 2
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for nativeAsset

Name: nativeAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 2
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAsset_3(address) := ϕ(['foreignAsset_1', 'foreignAsset_2'])
Phi
init
end
_______________

Name: foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for foreignAsset

Name: foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracles, Num: 2
Globalname: oracles
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_58(IAggregatorV3) -> oracles_1[foreignAsset_3]
INDEX
[i]Type for REF_58

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracles_2(mapping(address => IAggregatorV3)) := ϕ(['oracles_1'])
Phi
[i]Type for oracles

Name: oracles Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_58 (->oracles_2) := oracle_1(IAggregatorV3)
asgn
init
end
_______________

Name: oracle_1 Function: _addVaderPair
Num: 
Den: 
Address: 8
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_58

Name: REF_58 Function: _addVaderPair
Num: -1
Den: -1
Address: 8
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_87(bool) = nativeAsset_3 == vader_10
[i]Type for TMP_87

Name: TMP_87 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,LBTWAP::addVaderPair: Unsupported Pair)
[i]Type for TMP_88

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: twapData, Num: 10
Globalname: twapData
global...

Name: twapData Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData
End popogation
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_59(address) -> pairData_1 (-> ['twapData']).foreignAsset
MEMBER
init
end
init
end
OUT KEY: _addVaderPair_pairData_foreignAsset
OUT KEY: _addVaderPair_pairData_foreignAsset
FTT: None
No field found
[i]Type for REF_59

Name: pairData.foreignAsset Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignAsset
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: foreignAsset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignAsset Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset
Finance Type: undef
XXXX
REF_59 (->pairData_2 (-> ['twapData'])) := foreignAsset_3(address)
asgn
init
end
_______________

Name: foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_59

Name: REF_59 Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignAsset
#################
Member: 
Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset
Finance Type: undef
Fieldf: 
Name: foreignAsset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_59 Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: foreignAsset Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_10(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: twapData, Num: 11
Globalname: twapData
global...

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData, Num: 3 (-> ['twapData'])
Globalname: pairData
End popogation
Name: vaderPairs, Num: 13
Globalname: vaderPairs
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: maxUpdateWindow, Num: 8
Globalname: maxUpdateWindow
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 12
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 17
Globalname: previousPrices
global...

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: pairData, Num: 3 (-> ['twapData'])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_60(uint96) -> pairData_2 (-> ['twapData']).foreignUnit
MEMBER
init
end
init
end
OUT KEY: _addVaderPair_pairData_foreignUnit
OUT KEY: _addVaderPair_pairData_foreignUnit
FTT: None
No field found
[i]Type for REF_60

Name: pairData.foreignUnit Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> ['twapData']), Field: foreignUnit
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: foreignUnit Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignUnit Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_89 = CONVERT foreignAsset_3 to IERC20Metadata
Converting foreignAsset_3

Name: foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ERC20Metadata
[i]Type for TMP_89

Name: TMP_89 Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_90(uint8) = HIGH_LEVEL_CALL, dest:TMP_89(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Written func info: ERC20Metadata, decimals
Handling balance function!
1
[i]Type for TMP_90

Name: TMP_90 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 18
Fields: 
Finance Type: undef
XXXX
vaderPairs_13(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_12', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_8(uint256) := ϕ(['maxUpdateWindow_19', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_7', 'maxUpdateWindow_20'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_12(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_11', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_17(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_16', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_91 = CONVERT TMP_90 to uint256
Converting TMP_90

Name: TMP_90 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 18
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_90 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 18
Fields: 
Finance Type: undef
[i]Type for TMP_91

Name: TMP_91 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 18
Fields: 
Finance Type: undef
XXXX
TMP_92(uint256) = 10 (c)** TMP_91
init
end
init
end
[i]Type for TMP_92

Name: TMP_92 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_93 = CONVERT TMP_92 to uint96
Converting TMP_92

Name: TMP_92 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_92 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_93

Name: TMP_93 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_3 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_2 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignUnit, foreignAsset
Finance Type: undef
XXXX
REF_60 (->pairData_3 (-> ['twapData'])) := TMP_93(uint96)
asgn
init
end
_______________

Name: TMP_93 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_60

Name: REF_60 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> ['twapData']), Field: foreignUnit
#################
Member: 
Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignUnit, foreignAsset
Finance Type: undef
Fieldf: 
Name: foreignUnit Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_60 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: foreignUnit Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_11(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_3 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: updatePeriod, Num: 1
Globalname: updatePeriod
Name: pairData, Num: 4 (-> ['twapData'])
Globalname: pairData
Name: twapData, Num: 12
Globalname: twapData
global...

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Name: pairData, Num: 4 (-> ['twapData'])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_62(uint256) -> pairData_3 (-> ['twapData']).updatePeriod
MEMBER
init
end
init
end
OUT KEY: _addVaderPair_pairData_updatePeriod
OUT KEY: _addVaderPair_pairData_updatePeriod
FTT: None
No field found
[i]Type for REF_62

Name: pairData.updatePeriod Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_3 (-> ['twapData']), Field: updatePeriod
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: updatePeriod Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.updatePeriod Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
pairData_4 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_3 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignUnit, foreignAsset
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
XXXX
REF_62 (->pairData_4 (-> ['twapData'])) := updatePeriod_1(uint256)
asgn
init
end
_______________

Name: updatePeriod_1 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_62

Name: REF_62 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_3 (-> ['twapData']), Field: updatePeriod
#################
Member: 
Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Fieldf: 
Name: updatePeriod Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_62 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: updatePeriod Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_12(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_4 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 5 (-> ['twapData'])
Globalname: pairData
Name: twapData, Num: 13
Globalname: twapData
global...

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Name: pairData, Num: 5 (-> ['twapData'])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_63(uint256) -> pairData_4 (-> ['twapData']).lastMeasurement
MEMBER
init
end
init
end
OUT KEY: _addVaderPair_pairData_lastMeasurement
OUT KEY: _addVaderPair_pairData_lastMeasurement
FTT: None
No field found
[i]Type for REF_63

Name: pairData.lastMeasurement Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_4 (-> ['twapData']), Field: lastMeasurement
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.lastMeasurement Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
pairData_5 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_4 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
XXXX
REF_63 (->pairData_5 (-> ['twapData'])) := block.timestamp(uint256)
asgn
init
_______________

Name: block.timestamp Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_63

Name: REF_63 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_4 (-> ['twapData']), Field: lastMeasurement
#################
Member: 
Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_63 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_13(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_5 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: isFirst, Num: 1
Globalname: isFirst
End popogation
Propogating parameters and globals to SSA variables...
Name: pair, Num: 1
Globalname: pair
Name: pairData, Num: 7 (-> ['twapData'])
Globalname: pairData
Name: twapData, Num: 15
Globalname: twapData
global...

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Name: vaderPairs, Num: 15
Globalname: vaderPairs
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: maxUpdateWindow, Num: 10
Globalname: maxUpdateWindow
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 14
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 19
Globalname: previousPrices
global...

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: pairData, Num: 7 (-> ['twapData'])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_79(uint256) -> pairData_5 (-> ['twapData']).nativeTokenPriceCumulative
MEMBER
init
end
init
end
OUT KEY: _addVaderPair_pairData_nativeTokenPriceCumulative
OUT KEY: _addVaderPair_pairData_nativeTokenPriceCumulative
FTT: None
No field found
[i]Type for REF_79

Name: pairData.nativeTokenPriceCumulative Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_5 (-> ['twapData']), Field: nativeTokenPriceCumulative
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceCumulative Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_109(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price1CumulativeLast, arguments:[]  
High Call: price1CumulativeLast
Running querryfc
Written func info: UniswapV2Pair, price1CumulativeLast
Handling balance function!
u
prev address? u
global assignment: 9
9
Finding type for hlc_0(uint256 ... )
[i]Type for TMP_109

Name: TMP_109 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_15(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_14', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_10(uint256) := ϕ(['maxUpdateWindow_9', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_14(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_13', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_19(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_18', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_7 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_5 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
XXXX
REF_79 (->pairData_7 (-> ['twapData'])) := TMP_109(uint256)
asgn
init
end
_______________

Name: TMP_109 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_79

Name: REF_79 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_5 (-> ['twapData']), Field: nativeTokenPriceCumulative
#################
Member: 
Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_79 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceCumulative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_15(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_7 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: twapData, Num: 14
Globalname: twapData
global...

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData, Num: 6 (-> ['twapData'])
Globalname: pairData
End popogation
Name: vaderPairs, Num: 14
Globalname: vaderPairs
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: maxUpdateWindow, Num: 9
Globalname: maxUpdateWindow
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 13
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 18
Globalname: previousPrices
global...

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: pairData, Num: 6 (-> ['twapData'])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_77(uint256) -> pairData_5 (-> ['twapData']).nativeTokenPriceCumulative
MEMBER
init
end
init
end
OUT KEY: _addVaderPair_pairData_nativeTokenPriceCumulative
OUT KEY: _addVaderPair_pairData_nativeTokenPriceCumulative
FTT: None
No field found
[i]Type for REF_77

Name: pairData.nativeTokenPriceCumulative Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_5 (-> ['twapData']), Field: nativeTokenPriceCumulative
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceCumulative Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_108(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price0CumulativeLast, arguments:[]  
High Call: price0CumulativeLast
Running querryfc
Written func info: UniswapV2Pair, price0CumulativeLast
Handling balance function!
9
Finding type for hlc_1(uint256 ... )
[i]Type for TMP_108

Name: TMP_108 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_14(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_3', 'vaderPairs_13'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_9(uint256) := ϕ(['maxUpdateWindow_8', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_13(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1', 'totalLiquidityWeight_12'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_18(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_17', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_6 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_5 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
XXXX
REF_77 (->pairData_6 (-> ['twapData'])) := TMP_108(uint256)
asgn
init
end
_______________

Name: TMP_108 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_77

Name: REF_77 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_5 (-> ['twapData']), Field: nativeTokenPriceCumulative
#################
Member: 
Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_77 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceCumulative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_14(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_6 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: pairData, Num: 8 (-> ['twapData'])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
pairData_8 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_6 (-> ['twapData'])", "pairData_7 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: reserve0, Num: 1
Globalname: reserve0
Name: reserve1, Num: 1
Globalname: reserve1
End popogation
Name: vaderPairs, Num: 16
Globalname: vaderPairs
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: maxUpdateWindow, Num: 11
Globalname: maxUpdateWindow
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 15
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 20
Globalname: previousPrices
global...

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TUPLE_4(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:getReserves, arguments:[]  
High Call: getReserves
Running querryfc
Written func info: UniswapV2Pair, getReserves
Handling balance function!
9
Finding type for hlc_2([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b1867fa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b1452eb0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b145c0a0>] ... )
[i]Type for TUPLE_4

Name: TUPLE_4 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_16(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_3', 'vaderPairs_15'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_11(uint256) := ϕ(['maxUpdateWindow_10', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_15(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1', 'totalLiquidityWeight_14'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_20(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_19', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_1(uint256)= UNPACK TUPLE_4 index: 0 
Finding type for reserve0(uint256 ... )
[i]Type for reserve0

Name: reserve0 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_1(uint256)= UNPACK TUPLE_4 index: 1 
Finding type for reserve1(uint256 ... )
[i]Type for reserve1

Name: reserve1 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: isFirst, Num: 1
Globalname: isFirst
End popogation
Propogating parameters and globals to SSA variables...
Name: reserveForeign, Num: 2
Globalname: reserveForeign
Name: reserveNative, Num: 2
Globalname: reserveNative
End popogation
reserveNative_2(uint256) := reserve1_1(uint256)
asgn
init
end
_______________

Name: reserve1 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for reserveNative

Name: reserveNative Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_2(uint256) := reserve0_1(uint256)
asgn
init
end
_______________

Name: reserve0 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for reserveForeign

Name: reserveForeign Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: reserveNative, Num: 1
Globalname: reserveNative
Name: reserveForeign, Num: 1
Globalname: reserveForeign
End popogation
reserveNative_1(uint256) := reserve0_1(uint256)
asgn
init
end
_______________

Name: reserve0 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for reserveNative

Name: reserveNative Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint256) := reserve1_1(uint256)
asgn
init
end
_______________

Name: reserve1 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for reserveForeign

Name: reserveForeign Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: reserveNative, Num: 3
Globalname: reserveNative

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: reserveForeign, Num: 3
Globalname: reserveForeign

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
reserveNative_3(uint256) := ϕ(['reserveNative_1', 'reserveNative_2'])
Phi
init
end
_______________

Name: reserveNative Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for reserveNative

Name: reserveNative Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_3(uint256) := ϕ(['reserveForeign_1', 'reserveForeign_2'])
Phi
init
end
_______________

Name: reserveForeign Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for reserveForeign

Name: reserveForeign Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pairLiquidityEvaluation, Num: 1
Globalname: pairLiquidityEvaluation
End popogation
REF_65(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
[i]Type for REF_65

Name: Paths.VADER Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_94 = CONVERT REF_65 to uint256
Converting REF_65

Name: Paths.VADER Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_94

Name: TMP_94 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_66(uint256) -> previousPrices_20[TMP_94]
INDEX
[i]Type for REF_66

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_95(uint256) = reserveNative_3 (c)* REF_66
testing mul...
init
end
init
end

Name: reserveNative Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_95

Name: TMP_95 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_96(uint256) = INTERNAL_CALL, LiquidityBasedTWAP.getChainlinkPrice(address)(foreignAsset_3)
init
end
[[-1], [-1], 'u', None, [], -1, 1, 'u']

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: 1
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: 1
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: 1
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_0([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: 1
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: 1
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_96

Name: TMP_96 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_97(uint256) = reserveForeign_3 (c)* TMP_96
testing mul...
init
end
init
end

Name: reserveForeign Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_96 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: TMP_96 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_97

Name: TMP_97 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_98(uint256) = TMP_95 (c)+ TMP_97
init
end
init
end
init
end
_______________

Name: TMP_97 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_98

Name: TMP_98 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairLiquidityEvaluation_1(uint256) := TMP_98(uint256)
asgn
init
end
_______________

Name: TMP_98 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairLiquidityEvaluation

Name: pairLiquidityEvaluation Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 9 (-> ['twapData'])
Globalname: pairData
Name: twapData, Num: 16
Globalname: twapData
global...

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Name: pairData, Num: 9 (-> ['twapData'])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_67(uint256) -> pairData_8 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
OUT KEY: _addVaderPair_pairData_pastLiquidityEvaluation
OUT KEY: _addVaderPair_pairData_pastLiquidityEvaluation
FTT: None
No field found
[i]Type for REF_67

Name: pairData.pastLiquidityEvaluation Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_8 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
pairData_9 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_8 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
XXXX
REF_67 (->pairData_9 (-> ['twapData'])) := pairLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: pairLiquidityEvaluation Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_67

Name: REF_67 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_8 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_67 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_16(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_9 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: totalLiquidityWeight, Num: 17
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: syncVaderPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_68(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
[i]Type for REF_68

Name: Paths.VADER Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_99 = CONVERT REF_68 to uint256
Converting REF_68

Name: Paths.VADER Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_99

Name: TMP_99 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(uint256) -> totalLiquidityWeight_16[TMP_99]
INDEX
[i]Type for REF_69

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalLiquidityWeight_17(uint256[2]) := ϕ(['totalLiquidityWeight_16'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(-> totalLiquidityWeight_17) = REF_69 (c)+ pairLiquidityEvaluation_1
init
end
init
end
init
end
_______________

Name: pairLiquidityEvaluation Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_69

Name: REF_69 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: vaderPairs, Num: 18
Globalname: vaderPairs
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderPairs, Num: 17
Globalname: vaderPairs
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: vaderPairs, Num: 19
Globalname: vaderPairs
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_71 -> LENGTH vaderPairs_17
[i]Type for REF_71

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_101(uint256) := REF_71(uint256)
asgn
init
end
_______________

Name: REF_71 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for TMP_101

Name: TMP_101 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_102(uint256) = TMP_101 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_102

Name: TMP_102 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_18(IUniswapV2Pair[]) := ϕ(['vaderPairs_17'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71 (->vaderPairs_18) := TMP_102(uint256)
asgn
init
end
_______________

Name: TMP_102 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_71

Name: REF_71 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_72(IUniswapV2Pair) -> vaderPairs_18[TMP_101]
INDEX
[i]Type for REF_72

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
vaderPairs_19(IUniswapV2Pair[]) := ϕ(['vaderPairs_18'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_72 (->vaderPairs_19) := pair_1(IUniswapV2Pair)
asgn
init
end
_______________

Name: pair_1 Function: _addVaderPair
Num: 
Den: 
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_72

Name: REF_72 Function: _addVaderPair
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: updatePeriod, Num: 1
Globalname: updatePeriod
Name: maxUpdateWindow, Num: 12
Globalname: maxUpdateWindow
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_103(bool) = maxUpdateWindow_12 < updatePeriod_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: maxUpdateWindow Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: maxUpdateWindow Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_103

Name: TMP_103 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: maxUpdateWindow, Num: 13
Globalname: maxUpdateWindow
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
maxUpdateWindow_13(uint256) := updatePeriod_1(uint256)
asgn
init
end
_______________

Name: updatePeriod_1 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: pair, Num: 1
Globalname: pair

Name: pair_1 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: oracle, Num: 1
Globalname: oracle

Name: oracle_1 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: updatePeriod, Num: 1
Globalname: updatePeriod

Name: updatePeriod_1 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Phid

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
pair_1(IUniswapV2Pair) := ϕ(['pair_1', 'pair_1'])
Phi
[i]Type for pair

Name: pair Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
oracle_1(IAggregatorV3) := ϕ(['oracle_1', 'oracle_1'])
Phi
[i]Type for oracle

Name: oracle Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
updatePeriod_1(uint256) := ϕ(['updatePeriod_1', 'updatePeriod_1'])
Phi
[i]Type for updatePeriod

Name: updatePeriod Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vader_4(address) := ϕ(['vader_1', 'vader_0', 'vader_3', 'vader_8', 'vader_10'])
Phi
[i]Type for vader

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_6(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_0', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_1(uint256) := ϕ(['maxUpdateWindow_12', 'maxUpdateWindow_0', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_5(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_10(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_8(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: updatePeriod, Num: 1
Globalname: updatePeriod
End popogation
TMP_79(bool) = updatePeriod_1 != 0
[i]Type for TMP_79

Name: TMP_79 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_80(None) = SOLIDITY_CALL require(bool,string)(TMP_79,LBTWAP::addVaderPair: Incorrect Update Period)
[i]Type for TMP_80

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Phid

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_81(uint8) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Written func info: AggregatorV3, decimals
Handling balance function!
u
prev address? u
[i]Type for TMP_81

Name: TMP_81 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vader_5(address) := ϕ(['vader_1', 'vader_3', 'vader_8', 'vader_10', 'vader_4'])
Phi
[i]Type for vader

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_7(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_6', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_2(uint256) := ϕ(['maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19', 'maxUpdateWindow_1'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_6(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_5', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_11(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_10', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_9(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_8', 'twapData_3', 'twapData_28'])
Phi
[i]Type for twapData

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_82(bool) = TMP_81 == 8
[i]Type for TMP_82

Name: TMP_82 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_83(None) = SOLIDITY_CALL require(bool,string)(TMP_82,LBTWAP::addVaderPair: Non-USD Oracle)
[i]Type for TMP_83

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pair, Num: 1
Globalname: pair
Name: pairData, Num: 1 (-> ['twapData'])
Globalname: pairData
End popogation
TMP_84 = CONVERT pair_1 to address
Converting pair_1

Name: pair_1 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair_1 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_84

Name: TMP_84 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_56(ILiquidityBasedTWAP.ExchangePair) -> twapData_9[TMP_84]
INDEX
[i]Type for REF_56

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_56(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pair, Num: 1
Globalname: pair
Name: isFirst, Num: 1
Globalname: isFirst
End popogation

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Phid

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_85(address) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:token0, arguments:[]  
High Call: token0
Running querryfc
Written func info: UniswapV2Pair, token0
Retvar: ('c', [-1], [-1], 'u', 'u', 1)
([-1], [-1], 'u', 'u', 1, -1)
[i]Type for TMP_85

Name: TMP_85 Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vader_6(address) := ϕ(['vader_5', 'vader_1', 'vader_3', 'vader_8', 'vader_10'])
Phi
[i]Type for vader

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_8(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_7', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_3(uint256) := ϕ(['maxUpdateWindow_2', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_7(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_6', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_12(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_11', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_86(bool) = TMP_85 == vader_6
[i]Type for TMP_86

Name: TMP_86 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
isFirst_1(bool) := TMP_86(bool)
asgn
init
end
_______________

Name: TMP_86 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for isFirst

Name: isFirst Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: isFirst, Num: 1
Globalname: isFirst
End popogation
Propogating parameters and globals to SSA variables...
Name: pair, Num: 1
Globalname: pair
Name: foreignAsset, Num: 1
Globalname: foreignAsset
Name: nativeAsset, Num: 1
Globalname: nativeAsset
End popogation

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Phid

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Phid

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_106(address) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:token1, arguments:[]  
High Call: token1
Running querryfc
Written func info: UniswapV2Pair, token1
Retvar: ('c', [-1], [-1], 'u', 'u', 2)
([-1], [-1], 'u', 'u', 2, -1)
[i]Type for TMP_106

Name: TMP_106 Function: _addVaderPair
Num: -1
Den: -1
Address: 2
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vader_7(address) := ϕ(['vader_1', 'vader_3', 'vader_8', 'vader_10', 'vader_6'])
Phi
[i]Type for vader

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_9(IUniswapV2Pair[]) := ϕ(['vaderPairs_8', 'vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_4(uint256) := ϕ(['maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_3', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_8(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_7', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_13(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_12', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_107(address) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:token0, arguments:[]  
High Call: token0
Running querryfc
Written func info: UniswapV2Pair, token0
Retvar: ('c', [-1], [-1], 'u', 'u', 1)
([-1], [-1], 'u', 'u', 1, -1)
[i]Type for TMP_107

Name: TMP_107 Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vader_8(address) := ϕ(['vader_7', 'vader_1', 'vader_3', 'vader_8', 'vader_10'])
Phi
[i]Type for vader

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_10(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_9', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_5(uint256) := ϕ(['maxUpdateWindow_4', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_9(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_8', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_14(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_13', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nativeAsset_1(address) := TMP_106(address)
asgn
init
end
_______________

Name: TMP_106 Function: _addVaderPair
Num: -1
Den: -1
Address: 2
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for nativeAsset

Name: nativeAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 2
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAsset_1(address) := TMP_107(address)
asgn
init
end
_______________

Name: TMP_107 Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignAsset

Name: foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pair, Num: 1
Globalname: pair
Name: foreignAsset, Num: 2
Globalname: foreignAsset
Name: nativeAsset, Num: 2
Globalname: nativeAsset
End popogation

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Phid

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
Phid

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_104(address) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:token0, arguments:[]  
High Call: token0
Running querryfc
Written func info: UniswapV2Pair, token0
Retvar: ('c', [-1], [-1], 'u', 'u', 1)
([-1], [-1], 'u', 'u', 1, -1)
[i]Type for TMP_104

Name: TMP_104 Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vader_9(address) := ϕ(['vader_8', 'vader_3', 'vader_10', 'vader_1'])
Phi
[i]Type for vader

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_11(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_10', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_6(uint256) := ϕ(['maxUpdateWindow_19', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_5', 'maxUpdateWindow_20'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_10(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_9', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_15(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_14', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_105(address) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:token1, arguments:[]  
High Call: token1
Running querryfc
Written func info: UniswapV2Pair, token1
Retvar: ('c', [-1], [-1], 'u', 'u', 2)
([-1], [-1], 'u', 'u', 2, -1)
[i]Type for TMP_105

Name: TMP_105 Function: _addVaderPair
Num: -1
Den: -1
Address: 2
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vader_10(address) := ϕ(['vader_9', 'vader_1', 'vader_3', 'vader_8', 'vader_10'])
Phi
[i]Type for vader

Name: vader Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: vader
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_12(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_11', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_7(uint256) := ϕ(['maxUpdateWindow_6', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_11(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_10', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_16(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_15', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nativeAsset_2(address) := TMP_104(address)
asgn
init
end
_______________

Name: TMP_104 Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for nativeAsset

Name: nativeAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAsset_2(address) := TMP_105(address)
asgn
init
end
_______________

Name: TMP_105 Function: _addVaderPair
Num: -1
Den: -1
Address: 2
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignAsset

Name: foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 2
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: nativeAsset, Num: 3
Globalname: nativeAsset

Name: nativeAsset Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: foreignAsset, Num: 3
Globalname: foreignAsset

Name: foreignAsset Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
nativeAsset_3(address) := ϕ(['nativeAsset_1', 'nativeAsset_2'])
Phi
init
end
_______________

Name: nativeAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 2
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for nativeAsset

Name: nativeAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 2
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
foreignAsset_3(address) := ϕ(['foreignAsset_1', 'foreignAsset_2'])
Phi
init
end
_______________

Name: foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for foreignAsset

Name: foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: oracles Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_58(IAggregatorV3) -> oracles_1[foreignAsset_3]
INDEX
[i]Type for REF_58

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracles_2(mapping(address => IAggregatorV3)) := ϕ(['oracles_1'])
Phi
[i]Type for oracles

Name: oracles Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_58 (->oracles_2) := oracle_1(IAggregatorV3)
asgn
init
end
_______________

Name: oracle_1 Function: _addVaderPair
Num: 
Den: 
Address: 8
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_58

Name: REF_58 Function: _addVaderPair
Num: -1
Den: -1
Address: 8
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_87(bool) = nativeAsset_3 == vader_10
[i]Type for TMP_87

Name: TMP_87 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,LBTWAP::addVaderPair: Unsupported Pair)
[i]Type for TMP_88

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData
End popogation
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData

Name: pairData Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset
Finance Type: undef
Phid

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_59(address) -> pairData_1 (-> ['twapData']).foreignAsset
MEMBER
init
end
init
end
[i]Type for REF_59

Name: pairData.foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignAsset
#################
Member: 
Name: pairData Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset
Finance Type: undef
Fieldf: 
Name: foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset
Finance Type: undef
XXXX
REF_59 (->pairData_2 (-> ['twapData'])) := foreignAsset_3(address)
asgn
init
end
_______________

Name: foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_59

Name: REF_59 Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignAsset
#################
Member: 
Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset
Finance Type: undef
Fieldf: 
Name: foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_59 Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_10(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 3 (-> ['twapData'])
Globalname: pairData
End popogation

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: pairData, Num: 3 (-> ['twapData'])
Globalname: pairData

Name: pairData Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: foreignUnit, foreignAsset
Finance Type: undef
Phid

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_60(uint96) -> pairData_2 (-> ['twapData']).foreignUnit
MEMBER
init
end
init
end
OUT KEY: _addVaderPair_pairData_foreignUnit
OUT KEY: _addVaderPair_pairData_foreignUnit
FTT: None
No field found
[i]Type for REF_60

Name: pairData.foreignUnit Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> ['twapData']), Field: foreignUnit
#################
Member: 
Name: pairData Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: foreignUnit, foreignAsset
Finance Type: undef
Fieldf: 
Name: foreignUnit Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignUnit Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: foreignUnit Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_89 = CONVERT foreignAsset_3 to IERC20Metadata
Converting foreignAsset_3

Name: foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ERC20Metadata
[i]Type for TMP_89

Name: TMP_89 Function: _addVaderPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_90(uint8) = HIGH_LEVEL_CALL, dest:TMP_89(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Written func info: ERC20Metadata, decimals
Handling balance function!
1
[i]Type for TMP_90

Name: TMP_90 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 18
Fields: 
Finance Type: undef
XXXX
vaderPairs_13(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_12', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_8(uint256) := ϕ(['maxUpdateWindow_19', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_7', 'maxUpdateWindow_20'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_12(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_11', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_17(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_16', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_91 = CONVERT TMP_90 to uint256
Converting TMP_90

Name: TMP_90 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 18
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_90 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 18
Fields: 
Finance Type: undef
[i]Type for TMP_91

Name: TMP_91 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 18
Fields: 
Finance Type: undef
XXXX
TMP_92(uint256) = 10 (c)** TMP_91
init
end
init
end
[i]Type for TMP_92

Name: TMP_92 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_93 = CONVERT TMP_92 to uint96
Converting TMP_92

Name: TMP_92 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_92 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_93

Name: TMP_93 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_3 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_2 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignAsset
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignUnit, foreignAsset
Finance Type: undef
XXXX
REF_60 (->pairData_3 (-> ['twapData'])) := TMP_93(uint96)
asgn
init
end
_______________

Name: TMP_93 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_60

Name: REF_60 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> ['twapData']), Field: foreignUnit
#################
Member: 
Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignUnit, foreignAsset
Finance Type: undef
Fieldf: 
Name: foreignUnit Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_60 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: foreignUnit Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_11(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_3 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: updatePeriod, Num: 1
Globalname: updatePeriod
Name: pairData, Num: 4 (-> ['twapData'])
Globalname: pairData
End popogation
Name: pairData, Num: 4 (-> ['twapData'])
Globalname: pairData

Name: pairData Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Phid

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_62(uint256) -> pairData_3 (-> ['twapData']).updatePeriod
MEMBER
init
end
init
end
OUT KEY: _addVaderPair_pairData_updatePeriod
OUT KEY: _addVaderPair_pairData_updatePeriod
FTT: None
No field found
[i]Type for REF_62

Name: pairData.updatePeriod Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_3 (-> ['twapData']), Field: updatePeriod
#################
Member: 
Name: pairData Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Fieldf: 
Name: updatePeriod Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.updatePeriod Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: updatePeriod Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_4 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_3 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignUnit, foreignAsset
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
XXXX
REF_62 (->pairData_4 (-> ['twapData'])) := updatePeriod_1(uint256)
asgn
init
end
_______________

Name: updatePeriod_1 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_62

Name: REF_62 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_3 (-> ['twapData']), Field: updatePeriod
#################
Member: 
Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Fieldf: 
Name: updatePeriod Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_62 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: updatePeriod Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_12(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_4 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 5 (-> ['twapData'])
Globalname: pairData
End popogation
Name: pairData, Num: 5 (-> ['twapData'])
Globalname: pairData

Name: pairData Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Phid

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_63(uint256) -> pairData_4 (-> ['twapData']).lastMeasurement
MEMBER
init
end
init
end
OUT KEY: _addVaderPair_pairData_lastMeasurement
OUT KEY: _addVaderPair_pairData_lastMeasurement
FTT: None
No field found
[i]Type for REF_63

Name: pairData.lastMeasurement Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_4 (-> ['twapData']), Field: lastMeasurement
#################
Member: 
Name: pairData Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.lastMeasurement Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_5 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_4 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
XXXX
REF_63 (->pairData_5 (-> ['twapData'])) := block.timestamp(uint256)
asgn
init
_______________

Name: block.timestamp Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_63

Name: REF_63 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_4 (-> ['twapData']), Field: lastMeasurement
#################
Member: 
Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_63 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_13(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_5 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: isFirst, Num: 1
Globalname: isFirst
End popogation
Propogating parameters and globals to SSA variables...
Name: pair, Num: 1
Globalname: pair
Name: pairData, Num: 7 (-> ['twapData'])
Globalname: pairData
End popogation

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: pairData, Num: 7 (-> ['twapData'])
Globalname: pairData

Name: pairData Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Phid

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_79(uint256) -> pairData_5 (-> ['twapData']).nativeTokenPriceCumulative
MEMBER
init
end
init
end
[i]Type for REF_79

Name: pairData.nativeTokenPriceCumulative Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_5 (-> ['twapData']), Field: nativeTokenPriceCumulative
#################
Member: 
Name: pairData Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceCumulative Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceCumulative Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_109(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price1CumulativeLast, arguments:[]  
High Call: price1CumulativeLast
Running querryfc
Written func info: UniswapV2Pair, price1CumulativeLast
Handling balance function!
u
prev address? u
Finding type for hlc_2(uint256 ... )
[i]Type for TMP_109

Name: TMP_109 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_15(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_14', 'vaderPairs_3'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_10(uint256) := ϕ(['maxUpdateWindow_9', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_14(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_13', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_19(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_18', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_7 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_5 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
XXXX
REF_79 (->pairData_7 (-> ['twapData'])) := TMP_109(uint256)
asgn
init
end
_______________

Name: TMP_109 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_79

Name: REF_79 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_5 (-> ['twapData']), Field: nativeTokenPriceCumulative
#################
Member: 
Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_79 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceCumulative Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_15(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_7 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 6 (-> ['twapData'])
Globalname: pairData
End popogation

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: pairData, Num: 6 (-> ['twapData'])
Globalname: pairData

Name: pairData Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Phid

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_77(uint256) -> pairData_5 (-> ['twapData']).nativeTokenPriceCumulative
MEMBER
init
end
init
end
[i]Type for REF_77

Name: pairData.nativeTokenPriceCumulative Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_5 (-> ['twapData']), Field: nativeTokenPriceCumulative
#################
Member: 
Name: pairData Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceCumulative Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceCumulative Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_108(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price0CumulativeLast, arguments:[]  
High Call: price0CumulativeLast
Running querryfc
Written func info: UniswapV2Pair, price0CumulativeLast
Handling balance function!
9
Finding type for hlc_3(uint256 ... )
[i]Type for TMP_108

Name: TMP_108 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_14(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_3', 'vaderPairs_13'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_9(uint256) := ϕ(['maxUpdateWindow_8', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_13(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1', 'totalLiquidityWeight_12'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_18(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_17', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_6 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_5 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
XXXX
REF_77 (->pairData_6 (-> ['twapData'])) := TMP_108(uint256)
asgn
init
end
_______________

Name: TMP_108 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_77

Name: REF_77 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_5 (-> ['twapData']), Field: nativeTokenPriceCumulative
#################
Member: 
Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_77 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceCumulative Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_14(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_6 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: pairData, Num: 8 (-> ['twapData'])
Globalname: pairData

Name: pairData Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Phid
pairData_8 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_6 (-> ['twapData'])", "pairData_7 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: reserve0, Num: 1
Globalname: reserve0
Name: reserve1, Num: 1
Globalname: reserve1
End popogation

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TUPLE_4(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:getReserves, arguments:[]  
High Call: getReserves
Running querryfc
Written func info: UniswapV2Pair, getReserves
Handling balance function!
9
Finding type for hlc_4([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b1867fa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b1452eb0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b145c0a0>] ... )
[i]Type for TUPLE_4

Name: TUPLE_4 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_16(IUniswapV2Pair[]) := ϕ(['vaderPairs_1', 'vaderPairs_2', 'vaderPairs_4', 'vaderPairs_5', 'vaderPairs_19', 'vaderPairs_3', 'vaderPairs_15'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_11(uint256) := ϕ(['maxUpdateWindow_10', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_15(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1', 'totalLiquidityWeight_14'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_20(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_19', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_1(uint256)= UNPACK TUPLE_4 index: 0 
Finding type for reserve0(uint256 ... )
[i]Type for reserve0

Name: reserve0 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_1(uint256)= UNPACK TUPLE_4 index: 1 
Finding type for reserve1(uint256 ... )
[i]Type for reserve1

Name: reserve1 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: isFirst, Num: 1
Globalname: isFirst
End popogation
Propogating parameters and globals to SSA variables...
Name: reserve0, Num: 1
Globalname: reserve0
Name: reserve1, Num: 1
Globalname: reserve1
Name: reserveForeign, Num: 2
Globalname: reserveForeign
Name: reserveNative, Num: 2
Globalname: reserveNative
End popogation
reserveNative_2(uint256) := reserve1_1(uint256)
asgn
init
end
_______________

Name: reserve1 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for reserveNative

Name: reserveNative Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_2(uint256) := reserve0_1(uint256)
asgn
init
end
_______________

Name: reserve0 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for reserveForeign

Name: reserveForeign Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: reserve0, Num: 1
Globalname: reserve0
Name: reserve1, Num: 1
Globalname: reserve1
Name: reserveNative, Num: 1
Globalname: reserveNative
Name: reserveForeign, Num: 1
Globalname: reserveForeign
End popogation
reserveNative_1(uint256) := reserve0_1(uint256)
asgn
init
end
_______________

Name: reserve0 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for reserveNative

Name: reserveNative Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint256) := reserve1_1(uint256)
asgn
init
end
_______________

Name: reserve1 Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for reserveForeign

Name: reserveForeign Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: reserveNative, Num: 3
Globalname: reserveNative

Name: reserveNative Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: reserveForeign, Num: 3
Globalname: reserveForeign

Name: reserveForeign Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
reserveNative_3(uint256) := ϕ(['reserveNative_1', 'reserveNative_2'])
Phi
[i]Type for reserveNative

Name: reserveNative Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_3(uint256) := ϕ(['reserveForeign_1', 'reserveForeign_2'])
Phi
[i]Type for reserveForeign

Name: reserveForeign Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: reserveNative, Num: 3
Globalname: reserveNative
Name: reserveForeign, Num: 3
Globalname: reserveForeign
Name: pairLiquidityEvaluation, Num: 1
Globalname: pairLiquidityEvaluation
End popogation
REF_65(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
init
end
_______________

Name: Paths.VADER Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_65

Name: Paths.VADER Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_94 = CONVERT REF_65 to uint256
Converting REF_65

Name: Paths.VADER Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_94

Name: TMP_94 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_66(uint256) -> previousPrices_20[TMP_94]
INDEX
[i]Type for REF_66

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_95(uint256) = reserveNative_3 (c)* REF_66
testing mul...
init
end
init
end

Name: reserveNative Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: previousPrices Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_95

Name: TMP_95 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_96(uint256) = INTERNAL_CALL, LiquidityBasedTWAP.getChainlinkPrice(address)(foreignAsset_3)
init
end
[[-1], [-1], 'u', None, [], -1, 1, 'u']

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: 1
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: 1
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: 1
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_0([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: 1
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: 1
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_96

Name: TMP_96 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_97(uint256) = reserveForeign_3 (c)* TMP_96
testing mul...
init
end
init
end

Name: reserveForeign Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_96 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: TMP_96 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_97

Name: TMP_97 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_98(uint256) = TMP_95 (c)+ TMP_97
init
end
init
end
init
end
_______________

Name: TMP_97 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_98

Name: TMP_98 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairLiquidityEvaluation_1(uint256) := TMP_98(uint256)
asgn
init
end
_______________

Name: TMP_98 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairLiquidityEvaluation

Name: pairLiquidityEvaluation Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 9 (-> ['twapData'])
Globalname: pairData
End popogation
Name: pairData, Num: 9 (-> ['twapData'])
Globalname: pairData

Name: pairData Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Phid

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_67(uint256) -> pairData_8 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
[i]Type for REF_67

Name: pairData.pastLiquidityEvaluation Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_8 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: _addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_9 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_8 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
XXXX
REF_67 (->pairData_9 (-> ['twapData'])) := pairLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: pairLiquidityEvaluation Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_67

Name: REF_67 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_8 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit, foreignAsset
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_67 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_16(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_9 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_68(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
init
end
_______________

Name: Paths.VADER Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_68

Name: Paths.VADER Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_99 = CONVERT REF_68 to uint256
Converting REF_68

Name: Paths.VADER Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_99

Name: TMP_99 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(uint256) -> totalLiquidityWeight_16[TMP_99]
INDEX
[i]Type for REF_69

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalLiquidityWeight_17(uint256[2]) := ϕ(['totalLiquidityWeight_16'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(-> totalLiquidityWeight_17) = REF_69 (c)+ pairLiquidityEvaluation_1
init
end
init
end
init
end
_______________

Name: pairLiquidityEvaluation Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_69

Name: REF_69 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_71 -> LENGTH vaderPairs_17
[i]Type for REF_71

Name: REF_71 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_101(uint256) := REF_71(uint256)
asgn
init
end
_______________

Name: REF_71 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for TMP_101

Name: TMP_101 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_102(uint256) = TMP_101 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_102

Name: TMP_102 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPairs_18(IUniswapV2Pair[]) := ϕ(['vaderPairs_17'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71 (->vaderPairs_18) := TMP_102(uint256)
asgn
init
end
_______________

Name: TMP_102 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_71

Name: REF_71 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_72(IUniswapV2Pair) -> vaderPairs_18[TMP_101]
INDEX
[i]Type for REF_72

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
vaderPairs_19(IUniswapV2Pair[]) := ϕ(['vaderPairs_18'])
Phi
[i]Type for vaderPairs

Name: vaderPairs Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_72 (->vaderPairs_19) := pair_1(IUniswapV2Pair)
asgn
init
end
_______________

Name: pair_1 Function: _addVaderPair
Num: 
Den: 
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_72

Name: REF_72 Function: _addVaderPair
Num: -1
Den: -1
Address: 9
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: updatePeriod, Num: 1
Globalname: updatePeriod
End popogation
TMP_103(bool) = maxUpdateWindow_12 < updatePeriod_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: maxUpdateWindow Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: maxUpdateWindow Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_103

Name: TMP_103 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
maxUpdateWindow_13(uint256) := updatePeriod_1(uint256)
asgn
init
end
_______________

Name: updatePeriod_1 Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation


previousPrices_5(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
MODIFIER_CALL, Ownable.onlyOwner()()
REF_49(ILiquidityBasedTWAP.Paths) -> Paths.VADER
TMP_68 = CONVERT REF_49 to uint256
REF_50(uint256) -> previousPrices_6[TMP_68]
TMP_69(bool) = REF_50 == 0
TMP_70(None) = SOLIDITY_CALL require(bool,string)(TMP_69,LBTWAP::setupVader: Already Initialized)
REF_51(ILiquidityBasedTWAP.Paths) -> Paths.VADER
TMP_71 = CONVERT REF_51 to uint256
REF_52(uint256) -> previousPrices_6[TMP_71]
previousPrices_7(uint256[2]) := ϕ(['previousPrices_6'])
REF_52 (->previousPrices_7) := vaderPrice_1(uint256)
INTERNAL_CALL, LiquidityBasedTWAP._addVaderPair(IUniswapV2Pair,IAggregatorV3,uint256)(pair_1,oracle_1,updatePeriod_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
previousPrices_5(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Ownable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
REF_49(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
init
end
_______________

Name: Paths.VADER Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_49

Name: Paths.VADER Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_68 = CONVERT REF_49 to uint256
Converting REF_49

Name: Paths.VADER Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_68

Name: TMP_68 Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_50(uint256) -> previousPrices_6[TMP_68]
INDEX
[i]Type for REF_50

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_69(bool) = REF_50 == 0
[i]Type for TMP_69

Name: TMP_69 Function: setupVader
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_70(None) = SOLIDITY_CALL require(bool,string)(TMP_69,LBTWAP::setupVader: Already Initialized)
[i]Type for TMP_70

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: vaderPrice, Num: 1
Globalname: vaderPrice
End popogation

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_51(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
init
end
_______________

Name: Paths.VADER Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_51

Name: Paths.VADER Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_71 = CONVERT REF_51 to uint256
Converting REF_51

Name: Paths.VADER Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_71

Name: TMP_71 Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_52(uint256) -> previousPrices_6[TMP_71]
INDEX
[i]Type for REF_52

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
previousPrices_7(uint256[2]) := ϕ(['previousPrices_6'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_52 (->previousPrices_7) := vaderPrice_1(uint256)
asgn
init
end
_______________

Name: vaderPrice Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_52

Name: REF_52 Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: updatePeriod, Num: 1
Globalname: updatePeriod
Name: pair, Num: 1
Globalname: pair
Name: oracle, Num: 1
Globalname: oracle
End popogation
INTERNAL_CALL, LiquidityBasedTWAP._addVaderPair(IUniswapV2Pair,IAggregatorV3,uint256)(pair_1,oracle_1,updatePeriod_1)
init
end
init
end
init
end
State_var: totalLiquidityWeight
State_var: twapData
State_var: usdvPairs
State_var: previousPrices
State_var: vaderPairs
State_var: vader
State_var: oracles
State_var: vaderPool
State_var: maxUpdateWindow
State_var: _owner



addVaderPair
Finding type for pair(IUniswapV2Pair ... )
Finding type for oracle(IAggregatorV3 ... )
Finding type for updatePeriod(uint256 ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


previousPrices_8(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
MODIFIER_CALL, Ownable.onlyOwner()()
REF_53(ILiquidityBasedTWAP.Paths) -> Paths.VADER
TMP_74 = CONVERT REF_53 to uint256
REF_54(uint256) -> previousPrices_9[TMP_74]
TMP_75(bool) = REF_54 != 0
TMP_76(None) = SOLIDITY_CALL require(bool,string)(TMP_75,LBTWAP::addVaderPair: Vader Uninitialized)
INTERNAL_CALL, LiquidityBasedTWAP._addVaderPair(IUniswapV2Pair,IAggregatorV3,uint256)(pair_1,oracle_1,updatePeriod_1)


Propogating parameters and globals to SSA variables...
End popogation
Name: previousPrices, Num: 8
Globalname: previousPrices
global...

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
previousPrices_8(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Ownable.onlyOwner()()
Propogating parameters and globals to SSA variables...
Name: previousPrices, Num: 9
Globalname: previousPrices
global...

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_53(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
[i]Type for REF_53

Name: Paths.VADER Function: addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_74 = CONVERT REF_53 to uint256
Converting REF_53

Name: Paths.VADER Function: addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_74

Name: TMP_74 Function: addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_54(uint256) -> previousPrices_9[TMP_74]
INDEX
[i]Type for REF_54

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_75(bool) = REF_54 != 0
[i]Type for TMP_75

Name: TMP_75 Function: addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_76(None) = SOLIDITY_CALL require(bool,string)(TMP_75,LBTWAP::addVaderPair: Vader Uninitialized)
[i]Type for TMP_76

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pair, Num: 1
Globalname: pair
Name: oracle, Num: 1
Globalname: oracle
Name: updatePeriod, Num: 1
Globalname: updatePeriod
End popogation
INTERNAL_CALL, LiquidityBasedTWAP._addVaderPair(IUniswapV2Pair,IAggregatorV3,uint256)(pair_1,oracle_1,updatePeriod_1)
init
end
init
end
init
end


previousPrices_8(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
MODIFIER_CALL, Ownable.onlyOwner()()
REF_53(ILiquidityBasedTWAP.Paths) -> Paths.VADER
TMP_74 = CONVERT REF_53 to uint256
REF_54(uint256) -> previousPrices_9[TMP_74]
TMP_75(bool) = REF_54 != 0
TMP_76(None) = SOLIDITY_CALL require(bool,string)(TMP_75,LBTWAP::addVaderPair: Vader Uninitialized)
INTERNAL_CALL, LiquidityBasedTWAP._addVaderPair(IUniswapV2Pair,IAggregatorV3,uint256)(pair_1,oracle_1,updatePeriod_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: previousPrices Function: addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
previousPrices_8(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Ownable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
REF_53(ILiquidityBasedTWAP.Paths) -> Paths.VADER
MEMBER
init
init
end
init
end
_______________

Name: Paths.VADER Function: addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_53

Name: Paths.VADER Function: addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: VADER
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: VADER Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.VADER Function: addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: VADER Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_74 = CONVERT REF_53 to uint256
Converting REF_53

Name: Paths.VADER Function: addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.VADER Function: addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_74

Name: TMP_74 Function: addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_54(uint256) -> previousPrices_9[TMP_74]
INDEX
[i]Type for REF_54

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_75(bool) = REF_54 != 0
[i]Type for TMP_75

Name: TMP_75 Function: addVaderPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_76(None) = SOLIDITY_CALL require(bool,string)(TMP_75,LBTWAP::addVaderPair: Vader Uninitialized)
[i]Type for TMP_76

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pair, Num: 1
Globalname: pair
Name: oracle, Num: 1
Globalname: oracle
Name: updatePeriod, Num: 1
Globalname: updatePeriod
End popogation
INTERNAL_CALL, LiquidityBasedTWAP._addVaderPair(IUniswapV2Pair,IAggregatorV3,uint256)(pair_1,oracle_1,updatePeriod_1)
init
end
init
end
init
end
State_var: totalLiquidityWeight
State_var: twapData
State_var: usdvPairs
State_var: previousPrices
State_var: vaderPairs
State_var: vader
State_var: oracles
State_var: vaderPool
State_var: maxUpdateWindow
State_var: _owner



_addVaderPair
State_var: totalLiquidityWeight
State_var: twapData
State_var: usdvPairs
State_var: previousPrices
State_var: vaderPairs
State_var: vader
State_var: oracles
State_var: vaderPool
State_var: maxUpdateWindow
State_var: _owner



getUSDVPrice


TUPLE_5(uint256[],uint256) = INTERNAL_CALL, LiquidityBasedTWAP.syncUSDVPrice()()
pastLiquidityWeights_1 (-> [])(uint256[])= UNPACK TUPLE_5 index: 0 
pastTotalLiquidityWeight_1(uint256)= UNPACK TUPLE_5 index: 1 
TMP_110(int256) = 1 (c)+ 1
a_1(int256) := TMP_110(int256)
TMP_111(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateUSDVPrice(uint256[],uint256)(pastLiquidityWeights_1 (-> []),pastTotalLiquidityWeight_1)
RETURN TMP_111


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1 (-> [])
Globalname: pastLiquidityWeights
Name: pastTotalLiquidityWeight, Num: 1
Globalname: pastTotalLiquidityWeight
End popogation
TUPLE_5(uint256[],uint256) = INTERNAL_CALL, LiquidityBasedTWAP.syncUSDVPrice()()
Propogating parameters and globals to SSA variables...
End popogation
Name: usdvPairs, Num: 2
Globalname: usdvPairs
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 18
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: twapData, Num: 17
Globalname: twapData
global...

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
usdvPairs_2(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_18(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_17(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
End popogation
REF_81 -> LENGTH usdvPairs_2
[i]Type for REF_81

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_81(uint256)
asgn
init
end
_______________

Name: REF_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_113 = new uint256[](totalPairs_1)
[i]Type for TMP_113

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1(uint256[]) := TMP_113(uint256)
asgn
init
end
_______________

Name: TMP_113 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastTotalLiquidityWeight, Num: 1
Globalname: pastTotalLiquidityWeight
End popogation
REF_82(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
[i]Type for REF_82

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_114 = CONVERT REF_82 to uint256
Converting REF_82

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_114

Name: TMP_114 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_83(uint256) -> totalLiquidityWeight_18[TMP_114]
INDEX
[i]Type for REF_83

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastTotalLiquidityWeight_1(uint256) := REF_83(uint256)
asgn
init
end
_______________

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: i, Num: 1
Globalname: i
Name: i, Num: 1
Globalname: i
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: i, Num: 1
Globalname: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1', 'pastLiquidityWeights_3'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_totalLiquidityWeight_1(uint256) := ϕ(['_totalLiquidityWeight_0', '_totalLiquidityWeight_2'])
Phi
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_1(uint256) := ϕ(['i_2', 'i_0'])
Phi
[i]Type for i

Name: i Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_115(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: totalPairs Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: totalPairs Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_115

Name: TMP_115 Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: foreignAsset, Num: 1
Globalname: foreignAsset
End popogation
REF_84(IERC20) -> usdvPairs_2[i_1]
INDEX
[i]Type for REF_84

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
foreignAsset_1(IERC20) := REF_84(IERC20)
asgn
init
end
_______________

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignAsset

Name: foreignAsset Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: totalLiquidityWeight, Num: 19
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_91(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
[i]Type for REF_91

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_120 = CONVERT REF_91 to uint256
Converting REF_91

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_120

Name: TMP_120 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_92(uint256) -> totalLiquidityWeight_18[TMP_120]
INDEX
[i]Type for REF_92

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalLiquidityWeight_19(uint256[2]) := ϕ(['totalLiquidityWeight_18'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_92 (->totalLiquidityWeight_19) := _totalLiquidityWeight_1(uint256)
asgn
init
end
_______________

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_92

Name: REF_92 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 1 (-> ['twapData'])
Globalname: pairData
End popogation
TMP_116 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_116

Name: TMP_116 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_85(ILiquidityBasedTWAP.ExchangePair) -> twapData_17[TMP_116]
INDEX
[i]Type for REF_85

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_85(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: timeElapsed, Num: 1
Globalname: timeElapsed
End popogation
REF_86(uint256) -> pairData_1 (-> ['twapData']).lastMeasurement
MEMBER
init
end
init
end
OUT KEY: syncUSDVPrice_pairData_lastMeasurement
OUT KEY: syncUSDVPrice_pairData_lastMeasurement
FTT: None
No field found
[i]Type for REF_86

Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: lastMeasurement
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_117(uint256) = block.timestamp (c)- REF_86
init
end
init
end
init
end
_______________

Name: PIC_42 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_117

Name: TMP_117 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint256) := TMP_117(uint256)
asgn
init
end
_______________

Name: TMP_117 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_87(uint256) -> pairData_1 (-> ['twapData']).updatePeriod
MEMBER
init
end
init
end
OUT KEY: syncUSDVPrice_pairData_updatePeriod
OUT KEY: syncUSDVPrice_pairData_updatePeriod
FTT: None
No field found
[i]Type for REF_87

Name: pairData.updatePeriod Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: updatePeriod
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement
Finance Type: undef
Fieldf: 
Name: updatePeriod Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.updatePeriod Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_118(bool) = timeElapsed_1 < REF_87
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: timeElapsed Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: timeElapsed Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_118

Name: TMP_118 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pastLiquidityEvaluation, Num: 1
Globalname: pastLiquidityEvaluation
End popogation
REF_88(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
OUT KEY: syncUSDVPrice_pairData_pastLiquidityEvaluation
OUT KEY: syncUSDVPrice_pairData_pastLiquidityEvaluation
FTT: None
No field found
[i]Type for REF_88

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
pastLiquidityEvaluation_1(uint256) := REF_88(uint256)
asgn
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityEvaluation

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
End popogation
TMP_119(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._updateUSDVPrice(IERC20,ILiquidityBasedTWAP.ExchangePair,uint256)(foreignAsset_1,pairData_1 (-> ['twapData']),timeElapsed_1)
init
end
init
end
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: foreignAsset Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [lastMeasurement, updatePeriod, pastLiquidityEvaluation], -1, 'u', 'u']

Name: pairData Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: timeElapsed Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: foreignAsset_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: pairData_1 (-> []) Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Phid

Name: timeElapsed_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: vaderPool, Num: 2
Globalname: vaderPool
global...

Name: vaderPool Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 22
Globalname: previousPrices
global...

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
foreignAsset_1(IERC20) := ϕ(['foreignAsset_1'])
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_1 (-> [])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
Phi
[i]Type for pairData

Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
timeElapsed_1(uint256) := ϕ(['timeElapsed_1'])
Phi
[i]Type for timeElapsed

Name: timeElapsed Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPool_2(IVaderPoolV2) := ϕ(['vaderPool_1', 'vaderPool_9', 'vaderPool_0', 'vaderPool_4'])
Phi
[i]Type for vaderPool

Name: vaderPool Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_22(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: reserveNative, Num: 1
Globalname: reserveNative
Name: reserveForeign, Num: 1
Globalname: reserveForeign
End popogation
Name: vaderPool, Num: 3
Globalname: vaderPool
global...

Name: vaderPool Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 23
Globalname: previousPrices
global...

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TUPLE_6(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:vaderPool_2(IVaderPoolV2), function:getReserves, arguments:['foreignAsset_1']  
High Call: getReserves
Running querryfc
Written func info: VaderPoolV2, getReserves
Handling balance function!
u
prev address? u
global assignment: 10
10
Finding type for hlc_0([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10d9c10>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10d9dc0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10d9f70>] ... )
[i]Type for TUPLE_6

Name: TUPLE_6 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPool_3(IVaderPoolV2) := ϕ(['vaderPool_2', 'vaderPool_1', 'vaderPool_9', 'vaderPool_4'])
Phi
[i]Type for vaderPool

Name: vaderPool Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_23(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_22', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveNative_1(uint256)= UNPACK TUPLE_6 index: 0 
Finding type for reserveNative(uint256 ... )
[i]Type for reserveNative

Name: reserveNative Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint256)= UNPACK TUPLE_6 index: 1 
Finding type for reserveForeign(uint256 ... )
[i]Type for reserveForeign

Name: reserveForeign Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: currentMeasurement, Num: 1
Globalname: currentMeasurement
Name: nativeTokenPriceCumulative, Num: 1
Globalname: nativeTokenPriceCumulative
End popogation
Name: vaderPool, Num: 4
Globalname: vaderPool
global...

Name: vaderPool Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 24
Globalname: previousPrices
global...

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TUPLE_7(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:vaderPool_3(IVaderPoolV2), function:cumulativePrices, arguments:['foreignAsset_1']  
High Call: cumulativePrices
Running querryfc
Written func info: VaderPoolV2, cumulativePrices
Handling balance function!
u
prev address? u
Finding type for hlc_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10fd820>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10fd9d0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10fdb80>] ... )
[i]Type for TUPLE_7

Name: TUPLE_7 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPool_4(IVaderPoolV2) := ϕ(['vaderPool_1', 'vaderPool_9', 'vaderPool_3', 'vaderPool_4'])
Phi
[i]Type for vaderPool

Name: vaderPool Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_24(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_23', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nativeTokenPriceCumulative_1(uint256)= UNPACK TUPLE_7 index: 0 
Finding type for nativeTokenPriceCumulative(uint256 ... )
[i]Type for nativeTokenPriceCumulative

Name: nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentMeasurement_1(uint256)= UNPACK TUPLE_7 index: 2 
Finding type for currentMeasurement(uint256 ... )
[i]Type for currentMeasurement

Name: currentMeasurement Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 2 (-> [])
Globalname: pairData
End popogation
Name: pairData, Num: 2 (-> [])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_95(FixedPoint.uq112x112) -> pairData_1 (-> []).nativeTokenPriceAverage
MEMBER
init
end
init
end
OUT KEY: _updateUSDVPrice_pairData_nativeTokenPriceAverage
OUT KEY: _updateUSDVPrice_pairData_nativeTokenPriceAverage
FTT: None
No field found
[i]Type for REF_95

Name: pairData.nativeTokenPriceAverage Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> []), Field: nativeTokenPriceAverage
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceAverage Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceAverage Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
REF_97(uint256) -> pairData_1 (-> []).nativeTokenPriceCumulative
MEMBER
init
end
init
end
OUT KEY: _updateUSDVPrice_pairData_nativeTokenPriceCumulative
OUT KEY: _updateUSDVPrice_pairData_nativeTokenPriceCumulative
FTT: None
No field found
[i]Type for REF_97

Name: pairData.nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> []), Field: nativeTokenPriceCumulative
#################
Member: 
Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_121(uint256) = nativeTokenPriceCumulative_1 - REF_97
init
end
init
end
init
end
_______________

Name: nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_121

Name: TMP_121 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_122(uint256) = TMP_121 / timeElapsed_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_122

Name: TMP_122 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_123 = CONVERT TMP_122 to uint224
Converting TMP_122

Name: TMP_122 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_122 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_123

Name: TMP_123 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_124 = new uq112x112(TMP_123)
[i]Type for TMP_124

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_2 (-> [])(ILiquidityBasedTWAP.ExchangePair) := ϕ(['pairData_1 (-> [])'])
Phi
init
end
_______________

Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
XXXX
REF_95 (->pairData_2 (-> [])) := TMP_124(FixedPoint.uq112x112)
asgn
init
end
_______________

Name: TMP_124 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_95

Name: REF_95 Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> []), Field: nativeTokenPriceAverage
#################
Member: 
Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceAverage Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_95 Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceAverage Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 3 (-> [])
Globalname: pairData
End popogation
Name: pairData, Num: 3 (-> [])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_98(uint256) -> pairData_2 (-> []).nativeTokenPriceCumulative
MEMBER
init
end
init
end
[i]Type for REF_98

Name: pairData.nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> []), Field: nativeTokenPriceCumulative
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
pairData_3 (-> [])(ILiquidityBasedTWAP.ExchangePair) := ϕ(['pairData_2 (-> [])'])
Phi
init
end
_______________

Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
XXXX
REF_98 (->pairData_3 (-> [])) := nativeTokenPriceCumulative_1(uint256)
asgn
init
end
_______________

Name: nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_98

Name: REF_98 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> []), Field: nativeTokenPriceCumulative
#################
Member: 
Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_98 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 4 (-> [])
Globalname: pairData
End popogation
Name: pairData, Num: 4 (-> [])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_99(uint256) -> pairData_3 (-> []).lastMeasurement
MEMBER
init
end
init
end
[i]Type for REF_99

Name: pairData.lastMeasurement Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_3 (-> []), Field: lastMeasurement
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.lastMeasurement Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
pairData_4 (-> [])(ILiquidityBasedTWAP.ExchangePair) := ϕ(['pairData_3 (-> [])'])
Phi
init
end
_______________

Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
XXXX
REF_99 (->pairData_4 (-> [])) := currentMeasurement_1(uint256)
asgn
init
end
_______________

Name: currentMeasurement Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_99

Name: REF_99 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_3 (-> []), Field: lastMeasurement
#################
Member: 
Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_99 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
End popogation
REF_100(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
[i]Type for REF_100

Name: Paths.USDV Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_125 = CONVERT REF_100 to uint256
Converting REF_100

Name: Paths.USDV Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_125

Name: TMP_125 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_101(uint256) -> previousPrices_24[TMP_125]
INDEX
[i]Type for REF_101

Name: previousPrices Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_126(uint256) = reserveNative_1 (c)* REF_101
testing mul...
init
end
init
end

Name: reserveNative Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: previousPrices Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: previousPrices Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_126

Name: TMP_126 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_127 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_127

Name: TMP_127 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_128(uint256) = INTERNAL_CALL, LiquidityBasedTWAP.getChainlinkPrice(address)(TMP_127)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_0([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_128

Name: TMP_128 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_129(uint256) = reserveForeign_1 (c)* TMP_128
testing mul...
init
end
init
end

Name: reserveForeign Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_128 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: TMP_128 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_129

Name: TMP_129 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_130(uint256) = TMP_126 (c)+ TMP_129
init
end
init
end
init
end
_______________

Name: TMP_129 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_130

Name: TMP_130 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentLiquidityEvaluation_1(uint256) := TMP_130(uint256)
asgn
init
end
_______________

Name: TMP_130 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for currentLiquidityEvaluation

Name: currentLiquidityEvaluation Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: foreignAsset_1 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: pairData_1 (-> []) Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Phid

Name: timeElapsed_1 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: vaderPool Function: _updateUSDVPrice
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
foreignAsset_1(IERC20) := ϕ(['foreignAsset_1'])
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_1 (-> [])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
Phi
[i]Type for pairData

Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
timeElapsed_1(uint256) := ϕ(['timeElapsed_1'])
Phi
[i]Type for timeElapsed

Name: timeElapsed Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPool_2(IVaderPoolV2) := ϕ(['vaderPool_1', 'vaderPool_9', 'vaderPool_0', 'vaderPool_4'])
Phi
[i]Type for vaderPool

Name: vaderPool Function: _updateUSDVPrice
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_22(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: reserveNative, Num: 1
Globalname: reserveNative
Name: reserveForeign, Num: 1
Globalname: reserveForeign
End popogation

Name: vaderPool Function: _updateUSDVPrice
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TUPLE_6(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:vaderPool_2(IVaderPoolV2), function:getReserves, arguments:['foreignAsset_1']  
High Call: getReserves
Running querryfc
Written func info: VaderPoolV2, getReserves
Handling balance function!
10
Finding type for hlc_2([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10d9c10>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10d9dc0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10d9f70>] ... )
[i]Type for TUPLE_6

Name: TUPLE_6 Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPool_3(IVaderPoolV2) := ϕ(['vaderPool_2', 'vaderPool_1', 'vaderPool_9', 'vaderPool_4'])
Phi
[i]Type for vaderPool

Name: vaderPool Function: _updateUSDVPrice
Num: -1
Den: -1
Address: 10
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_23(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_22', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveNative_1(uint256)= UNPACK TUPLE_6 index: 0 
Finding type for reserveNative(uint256 ... )
[i]Type for reserveNative

Name: reserveNative Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint256)= UNPACK TUPLE_6 index: 1 
Finding type for reserveForeign(uint256 ... )
[i]Type for reserveForeign

Name: reserveForeign Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: currentMeasurement, Num: 1
Globalname: currentMeasurement
Name: nativeTokenPriceCumulative, Num: 1
Globalname: nativeTokenPriceCumulative
End popogation

Name: vaderPool Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TUPLE_7(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:vaderPool_3(IVaderPoolV2), function:cumulativePrices, arguments:['foreignAsset_1']  
High Call: cumulativePrices
Running querryfc
Written func info: VaderPoolV2, cumulativePrices
Handling balance function!
10
Finding type for hlc_3([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10fd820>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10fd9d0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10fdb80>] ... )
[i]Type for TUPLE_7

Name: TUPLE_7 Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPool_4(IVaderPoolV2) := ϕ(['vaderPool_1', 'vaderPool_9', 'vaderPool_3', 'vaderPool_4'])
Phi
[i]Type for vaderPool

Name: vaderPool Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_24(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_23', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nativeTokenPriceCumulative_1(uint256)= UNPACK TUPLE_7 index: 0 
Finding type for nativeTokenPriceCumulative(uint256 ... )
[i]Type for nativeTokenPriceCumulative

Name: nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentMeasurement_1(uint256)= UNPACK TUPLE_7 index: 2 
Finding type for currentMeasurement(uint256 ... )
[i]Type for currentMeasurement

Name: currentMeasurement Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: nativeTokenPriceCumulative, Num: 1
Globalname: nativeTokenPriceCumulative
Name: pairData, Num: 2 (-> [])
Globalname: pairData
End popogation
Name: pairData, Num: 2 (-> [])
Globalname: pairData

Name: pairData Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
Phid
REF_95(FixedPoint.uq112x112) -> pairData_1 (-> []).nativeTokenPriceAverage
MEMBER
init
end
init
end
OUT KEY: _updateUSDVPrice_pairData_nativeTokenPriceAverage
OUT KEY: _updateUSDVPrice_pairData_nativeTokenPriceAverage
FTT: None
No field found
[i]Type for REF_95

Name: pairData.nativeTokenPriceAverage Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> []), Field: nativeTokenPriceAverage
#################
Member: 
Name: pairData Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceAverage Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceAverage Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceAverage Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_97(uint256) -> pairData_1 (-> []).nativeTokenPriceCumulative
MEMBER
init
end
init
end
[i]Type for REF_97

Name: pairData.nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> []), Field: nativeTokenPriceCumulative
#################
Member: 
Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_121(uint256) = nativeTokenPriceCumulative_1 - REF_97
init
end
init
end
init
end
_______________

Name: pairData.nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_121

Name: TMP_121 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_122(uint256) = TMP_121 / timeElapsed_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_122

Name: TMP_122 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_123 = CONVERT TMP_122 to uint224
Converting TMP_122

Name: TMP_122 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_122 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_123

Name: TMP_123 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_124 = new uq112x112(TMP_123)
[i]Type for TMP_124

Name: TMP_124 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_2 (-> [])(ILiquidityBasedTWAP.ExchangePair) := ϕ(['pairData_1 (-> [])'])
Phi
init
end
_______________

Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
REF_95 (->pairData_2 (-> [])) := TMP_124(FixedPoint.uq112x112)
asgn
init
end
_______________

Name: TMP_124 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_95

Name: REF_95 Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> []), Field: nativeTokenPriceAverage
#################
Member: 
Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceAverage Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_95 Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceAverage Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: nativeTokenPriceCumulative, Num: 1
Globalname: nativeTokenPriceCumulative
Name: pairData, Num: 3 (-> [])
Globalname: pairData
End popogation
Name: pairData, Num: 3 (-> [])
Globalname: pairData

Name: pairData Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
Phid
REF_98(uint256) -> pairData_2 (-> []).nativeTokenPriceCumulative
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_98

Name: pairData.nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> []), Field: nativeTokenPriceCumulative
#################
Member: 
Name: pairData Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_3 (-> [])(ILiquidityBasedTWAP.ExchangePair) := ϕ(['pairData_2 (-> [])'])
Phi
init
end
_______________

Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
REF_98 (->pairData_3 (-> [])) := nativeTokenPriceCumulative_1(uint256)
asgn
init
end
_______________

Name: nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_98

Name: REF_98 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> []), Field: nativeTokenPriceCumulative
#################
Member: 
Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_98 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceCumulative Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: currentMeasurement, Num: 1
Globalname: currentMeasurement
Name: pairData, Num: 4 (-> [])
Globalname: pairData
End popogation
Name: pairData, Num: 4 (-> [])
Globalname: pairData

Name: pairData Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
Phid
REF_99(uint256) -> pairData_3 (-> []).lastMeasurement
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.lastMeasurement Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_99

Name: pairData.lastMeasurement Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_3 (-> []), Field: lastMeasurement
#################
Member: 
Name: pairData Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, lastMeasurement, updatePeriod, pastLiquidityEvaluation, nativeTokenPriceCumulative
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.lastMeasurement Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_4 (-> [])(ILiquidityBasedTWAP.ExchangePair) := ϕ(['pairData_3 (-> [])'])
Phi
init
end
_______________

Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
REF_99 (->pairData_4 (-> [])) := currentMeasurement_1(uint256)
asgn
init
end
_______________

Name: currentMeasurement Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_99

Name: REF_99 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_3 (-> []), Field: lastMeasurement
#################
Member: 
Name: pairData Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceAverage, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_99 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: reserveNative, Num: 1
Globalname: reserveNative
Name: reserveForeign, Num: 1
Globalname: reserveForeign
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
End popogation
REF_100(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
init
end
_______________

Name: Paths.USDV Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_100

Name: Paths.USDV Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_125 = CONVERT REF_100 to uint256
Converting REF_100

Name: Paths.USDV Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_125

Name: TMP_125 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_101(uint256) -> previousPrices_24[TMP_125]
INDEX
[i]Type for REF_101

Name: previousPrices Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_126(uint256) = reserveNative_1 (c)* REF_101
testing mul...
init
end
init
end

Name: reserveNative Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: previousPrices Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: previousPrices Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_126

Name: TMP_126 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_127 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_127

Name: TMP_127 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_128(uint256) = INTERNAL_CALL, LiquidityBasedTWAP.getChainlinkPrice(address)(TMP_127)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_0([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: asset_1 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
Phid

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
asset_1(address) := ϕ(['REF_42', 'TMP_133', 'TMP_127', 'foreignAsset_3', 'TMP_169', 'REF_38'])
Phi
[i]Type for asset

Name: asset Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: asset
Value: u
Fields: 
Finance Type: undef
XXXX
oracles_1(mapping(address => IAggregatorV3)) := ϕ(['oracles_3', 'oracles_1', 'oracles_0', 'oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
REF_14(IAggregatorV3) -> oracles_1[asset_1]
INDEX
[i]Type for REF_14

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracle_1(IAggregatorV3) := REF_14(IAggregatorV3)
asgn
init
end
_______________

Name: oracles Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: price, Num: 1
Globalname: price
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:latestRoundData, arguments:[]  
High Call: latestRoundData
Running querryfc
Written func info: AggregatorV3, latestRoundData
Handling balance function!
u
prev address? u
Finding type for hlc_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b18545e0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b14fefa0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b190>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b148b4f0>] ... )
[i]Type for TUPLE_0

Name: TUPLE_0 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Finding type for roundID(uint80 ... )
[i]Type for roundID

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(int256)= UNPACK TUPLE_0 index: 1 
Finding type for price(int256 ... )
[i]Type for price

Name: price Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Finding type for answeredInRound(uint80 ... )
[i]Type for answeredInRound

Name: answeredInRound Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: roundID, Num: 1
Globalname: roundID
Name: answeredInRound, Num: 1
Globalname: answeredInRound
End popogation
TMP_30(bool) = answeredInRound_1 >= roundID_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: roundID Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: getChainlinkPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LBTWAP::getChainlinkPrice: Stale Chainlink Price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: price, Num: 1
Globalname: price
End popogation
TMP_32(bool) = price_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LBTWAP::getChainlinkPrice: Chainlink Malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34 = CONVERT price_1 to uint256
Converting price_1

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: price Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_34
RETURN
init
end

Name: TMP_34 Function: getChainlinkPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_128

Name: TMP_128 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_129(uint256) = reserveForeign_1 (c)* TMP_128
testing mul...
init
end
init
end

Name: reserveForeign Function: _updateUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_128 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: TMP_128 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_129

Name: TMP_129 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_130(uint256) = TMP_126 (c)+ TMP_129
init
end
init
end
init
end
_______________

Name: TMP_129 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_130

Name: TMP_130 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentLiquidityEvaluation_1(uint256) := TMP_130(uint256)
asgn
init
end
_______________

Name: TMP_130 Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for currentLiquidityEvaluation

Name: currentLiquidityEvaluation Function: _updateUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_119

Name: TMP_119 Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentLiquidityEvaluation_1(uint256) := TMP_119(uint256)
asgn
init
end
_______________

Name: TMP_119 Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for currentLiquidityEvaluation

Name: currentLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityEvaluation, Num: 1
Globalname: pastLiquidityEvaluation
Name: i, Num: 1
Globalname: i
Name: pastLiquidityWeights, Num: 3
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 3
Globalname: pastLiquidityWeights

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_89(uint256) -> pastLiquidityWeights_2[i_1]
INDEX
[i]Type for REF_89

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastLiquidityWeights_3(uint256[]) := ϕ(['pastLiquidityWeights_2'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_89 (->pastLiquidityWeights_3) := pastLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_89

Name: REF_89 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData
Name: twapData, Num: 19
Globalname: twapData
global...

Name: twapData Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_90(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
[i]Type for REF_90

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
[i]Type for pairData

Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
REF_90 (->pairData_2 (-> ['twapData'])) := currentLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: currentLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_90

Name: REF_90 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_90 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_19(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
Name: _totalLiquidityWeight, Num: 2
Globalname: _totalLiquidityWeight
End popogation
_totalLiquidityWeight_2(uint256) = _totalLiquidityWeight_1 (c)+ currentLiquidityEvaluation_1
init
end
init
end
init
end
_______________

Name: currentLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
Name: i, Num: 2
Globalname: i
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
RETURN pastLiquidityWeights_2,pastTotalLiquidityWeight_1
RETURN
init
end

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end

Name: pastTotalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
usdvPairs_2(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_18(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_17(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
End popogation
REF_81 -> LENGTH usdvPairs_2
[i]Type for REF_81

Name: REF_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_81(uint256)
asgn
init
end
_______________

Name: REF_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_113 = new uint256[](totalPairs_1)
[i]Type for TMP_113

Name: TMP_113 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1(uint256[]) := TMP_113(uint256)
asgn
init
end
_______________

Name: TMP_113 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastTotalLiquidityWeight, Num: 1
Globalname: pastTotalLiquidityWeight
End popogation
REF_82(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_82

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_114 = CONVERT REF_82 to uint256
Converting REF_82

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_114

Name: TMP_114 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_83(uint256) -> totalLiquidityWeight_18[TMP_114]
INDEX
[i]Type for REF_83

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastTotalLiquidityWeight_1(uint256) := REF_83(uint256)
asgn
init
end
_______________

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: i, Num: 1
Globalname: i
Name: i, Num: 1
Globalname: i
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: i, Num: 1
Globalname: i

Name: i Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1', 'pastLiquidityWeights_3'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_totalLiquidityWeight_1(uint256) := ϕ(['_totalLiquidityWeight_0', '_totalLiquidityWeight_2'])
Phi
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_1(uint256) := ϕ(['i_2', 'i_0'])
Phi
init
end
_______________

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_115(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_115

Name: TMP_115 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
End popogation
REF_84(IERC20) -> usdvPairs_2[i_1]
INDEX
[i]Type for REF_84

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
foreignAsset_1(IERC20) := REF_84(IERC20)
asgn
init
end
_______________

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignAsset

Name: foreignAsset Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
End popogation

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_91(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_91

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_120 = CONVERT REF_91 to uint256
Converting REF_91

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_120

Name: TMP_120 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_92(uint256) -> totalLiquidityWeight_18[TMP_120]
INDEX
[i]Type for REF_92

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalLiquidityWeight_19(uint256[2]) := ϕ(['totalLiquidityWeight_18'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_92 (->totalLiquidityWeight_19) := _totalLiquidityWeight_1(uint256)
asgn
init
end
_______________

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_92

Name: REF_92 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 1 (-> ['twapData'])
Globalname: pairData
End popogation
TMP_116 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_116

Name: TMP_116 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_85(ILiquidityBasedTWAP.ExchangePair) -> twapData_17[TMP_116]
INDEX
[i]Type for REF_85

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_85(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: timeElapsed, Num: 1
Globalname: timeElapsed
End popogation
REF_86(uint256) -> pairData_1 (-> ['twapData']).lastMeasurement
MEMBER
init
end
init
end
[i]Type for REF_86

Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: lastMeasurement
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117(uint256) = block.timestamp (c)- REF_86
init
end
init
end
init
end
_______________

Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_117

Name: TMP_117 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint256) := TMP_117(uint256)
asgn
init
end
_______________

Name: TMP_117 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_87(uint256) -> pairData_1 (-> ['twapData']).updatePeriod
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_87

Name: pairData.updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: updatePeriod
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_118(bool) = timeElapsed_1 < REF_87
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_118

Name: TMP_118 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pastLiquidityEvaluation, Num: 1
Globalname: pastLiquidityEvaluation
End popogation
REF_88(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
[i]Type for REF_88

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityEvaluation_1(uint256) := REF_88(uint256)
asgn
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityEvaluation

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
End popogation
TMP_119(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._updateUSDVPrice(IERC20,ILiquidityBasedTWAP.ExchangePair,uint256)(foreignAsset_1,pairData_1 (-> ['twapData']),timeElapsed_1)
init
end
init
end
init
end
init
end
_______________

Name: PIC_45 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_119

Name: TMP_119 Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentLiquidityEvaluation_1(uint256) := TMP_119(uint256)
asgn
init
end
_______________

Name: TMP_119 Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for currentLiquidityEvaluation

Name: currentLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 3
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 3
Globalname: pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_89(uint256) -> pastLiquidityWeights_2[i_1]
INDEX
[i]Type for REF_89

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastLiquidityWeights_3(uint256[]) := ϕ(['pastLiquidityWeights_2'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_89 (->pastLiquidityWeights_3) := pastLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_89

Name: REF_89 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData
End popogation
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData

Name: pairData Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Phid

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_90(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_90

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
[i]Type for pairData

Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
REF_90 (->pairData_2 (-> ['twapData'])) := currentLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: currentLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_90

Name: REF_90 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_90 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_19(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
Name: _totalLiquidityWeight, Num: 2
Globalname: _totalLiquidityWeight
End popogation
_totalLiquidityWeight_2(uint256) = _totalLiquidityWeight_1 (c)+ currentLiquidityEvaluation_1
init
end
init
end
init
end
_______________

Name: currentLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 2
Globalname: i
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
RETURN pastLiquidityWeights_2,pastTotalLiquidityWeight_1
RETURN
init
end

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end

Name: pastTotalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
usdvPairs_2(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_18(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_17(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_81 -> LENGTH usdvPairs_2
[i]Type for REF_81

Name: REF_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_81(uint256)
asgn
init
end
_______________

Name: REF_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_113 = new uint256[](totalPairs_1)
[i]Type for TMP_113

Name: TMP_113 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1(uint256[]) := TMP_113(uint256)
asgn
init
end
_______________

Name: TMP_113 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_82(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_82

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_114 = CONVERT REF_82 to uint256
Converting REF_82

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_114

Name: TMP_114 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_83(uint256) -> totalLiquidityWeight_18[TMP_114]
INDEX
[i]Type for REF_83

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastTotalLiquidityWeight_1(uint256) := REF_83(uint256)
asgn
init
end
_______________

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1', 'pastLiquidityWeights_3'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_totalLiquidityWeight_1(uint256) := ϕ(['_totalLiquidityWeight_0', '_totalLiquidityWeight_2'])
Phi
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_1(uint256) := ϕ(['i_2', 'i_0'])
Phi
[i]Type for i

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_115(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_115

Name: TMP_115 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_84(IERC20) -> usdvPairs_2[i_1]
INDEX
[i]Type for REF_84

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
foreignAsset_1(IERC20) := REF_84(IERC20)
asgn
init
end
_______________

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignAsset

Name: foreignAsset Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
End popogation

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_91(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_91

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_120 = CONVERT REF_91 to uint256
Converting REF_91

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_120

Name: TMP_120 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_92(uint256) -> totalLiquidityWeight_18[TMP_120]
INDEX
[i]Type for REF_92

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalLiquidityWeight_19(uint256[2]) := ϕ(['totalLiquidityWeight_18'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_92 (->totalLiquidityWeight_19) := _totalLiquidityWeight_1(uint256)
asgn
init
end
_______________

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_92

Name: REF_92 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_116 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_116

Name: TMP_116 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_85(ILiquidityBasedTWAP.ExchangePair) -> twapData_17[TMP_116]
INDEX
[i]Type for REF_85

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_85(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_86(uint256) -> pairData_1 (-> ['twapData']).lastMeasurement
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_86

Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: lastMeasurement
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117(uint256) = block.timestamp (c)- REF_86
init
end
init
end
init
end
_______________

Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_117

Name: TMP_117 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint256) := TMP_117(uint256)
asgn
init
end
_______________

Name: TMP_117 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_87(uint256) -> pairData_1 (-> ['twapData']).updatePeriod
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_87

Name: pairData.updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: updatePeriod
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_118(bool) = timeElapsed_1 < REF_87
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_118

Name: TMP_118 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_88(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_88

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityEvaluation_1(uint256) := REF_88(uint256)
asgn
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityEvaluation

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
End popogation
TMP_119(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._updateUSDVPrice(IERC20,ILiquidityBasedTWAP.ExchangePair,uint256)(foreignAsset_1,pairData_1 (-> ['twapData']),timeElapsed_1)
init
end
init
end
init
end
init
end
_______________

Name: PIC_45 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_119

Name: TMP_119 Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentLiquidityEvaluation_1(uint256) := TMP_119(uint256)
asgn
init
end
_______________

Name: TMP_119 Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for currentLiquidityEvaluation

Name: currentLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 3
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 3
Globalname: pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_89(uint256) -> pastLiquidityWeights_2[i_1]
INDEX
[i]Type for REF_89

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastLiquidityWeights_3(uint256[]) := ϕ(['pastLiquidityWeights_2'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_89 (->pastLiquidityWeights_3) := pastLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_89

Name: REF_89 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
End popogation

Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Phid

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_90(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_90

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
Phi
[i]Type for pairData

Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
REF_90 (->pairData_2 (-> ['twapData'])) := currentLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: currentLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_90

Name: REF_90 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_90 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_19(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
Name: _totalLiquidityWeight, Num: 2
Globalname: _totalLiquidityWeight
End popogation
_totalLiquidityWeight_2(uint256) = _totalLiquidityWeight_1 (c)+ currentLiquidityEvaluation_1
init
end
init
end
init
end
_______________

Name: currentLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
RETURN pastLiquidityWeights_2,pastTotalLiquidityWeight_1
RETURN
init
end

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end

Name: pastTotalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
usdvPairs_2(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_18(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_17(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_81 -> LENGTH usdvPairs_2
[i]Type for REF_81

Name: REF_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_81(uint256)
asgn
init
end
_______________

Name: REF_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_113 = new uint256[](totalPairs_1)
[i]Type for TMP_113

Name: TMP_113 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1(uint256[]) := TMP_113(uint256)
asgn
init
end
_______________

Name: TMP_113 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_82(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_82

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_114 = CONVERT REF_82 to uint256
Converting REF_82

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_114

Name: TMP_114 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_83(uint256) -> totalLiquidityWeight_18[TMP_114]
INDEX
[i]Type for REF_83

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastTotalLiquidityWeight_1(uint256) := REF_83(uint256)
asgn
init
end
_______________

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1', 'pastLiquidityWeights_3'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_totalLiquidityWeight_1(uint256) := ϕ(['_totalLiquidityWeight_0', '_totalLiquidityWeight_2'])
Phi
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_1(uint256) := ϕ(['i_2', 'i_0'])
Phi
[i]Type for i

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_115(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_115

Name: TMP_115 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_84(IERC20) -> usdvPairs_2[i_1]
INDEX
[i]Type for REF_84

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
foreignAsset_1(IERC20) := REF_84(IERC20)
asgn
init
end
_______________

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignAsset

Name: foreignAsset Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
End popogation

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_91(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_91

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_120 = CONVERT REF_91 to uint256
Converting REF_91

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_120

Name: TMP_120 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_92(uint256) -> totalLiquidityWeight_18[TMP_120]
INDEX
[i]Type for REF_92

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalLiquidityWeight_19(uint256[2]) := ϕ(['totalLiquidityWeight_18'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_92 (->totalLiquidityWeight_19) := _totalLiquidityWeight_1(uint256)
asgn
init
end
_______________

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_92

Name: REF_92 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_116 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_116

Name: TMP_116 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_85(ILiquidityBasedTWAP.ExchangePair) -> twapData_17[TMP_116]
INDEX
[i]Type for REF_85

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_85(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_86(uint256) -> pairData_1 (-> ['twapData']).lastMeasurement
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_86

Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: lastMeasurement
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117(uint256) = block.timestamp (c)- REF_86
init
end
init
end
init
end
_______________

Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_117

Name: TMP_117 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint256) := TMP_117(uint256)
asgn
init
end
_______________

Name: TMP_117 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_87(uint256) -> pairData_1 (-> ['twapData']).updatePeriod
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_87

Name: pairData.updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: updatePeriod
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_118(bool) = timeElapsed_1 < REF_87
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_118

Name: TMP_118 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_88(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_88

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityEvaluation_1(uint256) := REF_88(uint256)
asgn
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityEvaluation

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
End popogation
TMP_119(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._updateUSDVPrice(IERC20,ILiquidityBasedTWAP.ExchangePair,uint256)(foreignAsset_1,pairData_1 (-> ['twapData']),timeElapsed_1)
init
end
init
end
init
end
init
end
_______________

Name: PIC_45 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_119

Name: TMP_119 Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentLiquidityEvaluation_1(uint256) := TMP_119(uint256)
asgn
init
end
_______________

Name: TMP_119 Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for currentLiquidityEvaluation

Name: currentLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 3
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 3
Globalname: pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_89(uint256) -> pastLiquidityWeights_2[i_1]
INDEX
[i]Type for REF_89

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastLiquidityWeights_3(uint256[]) := ϕ(['pastLiquidityWeights_2'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_89 (->pastLiquidityWeights_3) := pastLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_89

Name: REF_89 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
End popogation

Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Phid

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_90(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_90

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
Phi
[i]Type for pairData

Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
REF_90 (->pairData_2 (-> ['twapData'])) := currentLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: currentLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_90

Name: REF_90 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_90 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_19(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
Name: _totalLiquidityWeight, Num: 2
Globalname: _totalLiquidityWeight
End popogation
_totalLiquidityWeight_2(uint256) = _totalLiquidityWeight_1 (c)+ currentLiquidityEvaluation_1
init
end
init
end
init
end
_______________

Name: currentLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
RETURN pastLiquidityWeights_2,pastTotalLiquidityWeight_1
RETURN
init
end

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end

Name: pastTotalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TUPLE_5

Name: TUPLE_5 Function: getUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1 (-> [])(uint256[])= UNPACK TUPLE_5 index: 0 
([], [], 'u', 'u', 'u', -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastTotalLiquidityWeight_1(uint256)= UNPACK TUPLE_5 index: 1 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: getUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: a, Num: 1
Globalname: a
End popogation
TMP_110(int256) = 1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_110

Name: TMP_110 Function: getUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
a_1(int256) := TMP_110(int256)
asgn
init
end
_______________

Name: TMP_110 Function: getUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for a

Name: a Function: getUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1 (-> [])
Globalname: pastLiquidityWeights
End popogation
TMP_111(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateUSDVPrice(uint256[],uint256)(pastLiquidityWeights_1 (-> []),pastTotalLiquidityWeight_1)
init
end
init
end
init
end
_______________

Name: PIC_22 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_111

Name: TMP_111 Function: getUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_111
RETURN
init
end

Name: TMP_111 Function: getUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef


TUPLE_5(uint256[],uint256) = INTERNAL_CALL, LiquidityBasedTWAP.syncUSDVPrice()()
pastLiquidityWeights_1 (-> [])(uint256[])= UNPACK TUPLE_5 index: 0 
pastTotalLiquidityWeight_1(uint256)= UNPACK TUPLE_5 index: 1 
TMP_110(int256) = 1 (c)+ 1
a_1(int256) := TMP_110(int256)
TMP_111(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateUSDVPrice(uint256[],uint256)(pastLiquidityWeights_1 (-> []),pastTotalLiquidityWeight_1)
RETURN TMP_111


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1 (-> [])
Globalname: pastLiquidityWeights
Name: pastTotalLiquidityWeight, Num: 1
Globalname: pastTotalLiquidityWeight
End popogation
TUPLE_5(uint256[],uint256) = INTERNAL_CALL, LiquidityBasedTWAP.syncUSDVPrice()()
[i]Type for TUPLE_5

Name: TUPLE_5 Function: getUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1 (-> [])(uint256[])= UNPACK TUPLE_5 index: 0 
([], [], 'u', 'u', 'u', -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: getUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastTotalLiquidityWeight_1(uint256)= UNPACK TUPLE_5 index: 1 
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: getUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: a, Num: 1
Globalname: a
End popogation
TMP_110(int256) = 1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_110

Name: TMP_110 Function: getUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
a_1(int256) := TMP_110(int256)
asgn
init
end
_______________

Name: TMP_110 Function: getUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for a

Name: a Function: getUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 1 (-> [])
Globalname: pastLiquidityWeights
End popogation
TMP_111(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._calculateUSDVPrice(uint256[],uint256)(pastLiquidityWeights_1 (-> []),pastTotalLiquidityWeight_1)
init
end
init
end
init
end
_______________

Name: PIC_22 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_111

Name: TMP_111 Function: getUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_111
RETURN
init
end

Name: TMP_111 Function: getUSDVPrice
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: totalLiquidityWeight
State_var: twapData
State_var: usdvPairs
State_var: previousPrices
State_var: vaderPairs
State_var: vader
State_var: oracles
State_var: vaderPool
State_var: maxUpdateWindow
State_var: _owner



syncUSDVPrice


usdvPairs_2(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
totalLiquidityWeight_18(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
twapData_17(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
REF_81 -> LENGTH usdvPairs_2
totalPairs_1(uint256) := REF_81(uint256)
TMP_113 = new uint256[](totalPairs_1)
pastLiquidityWeights_1(uint256[]) := TMP_113(uint256)
REF_82(ILiquidityBasedTWAP.Paths) -> Paths.USDV
TMP_114 = CONVERT REF_82 to uint256
REF_83(uint256) -> totalLiquidityWeight_18[TMP_114]
pastTotalLiquidityWeight_1(uint256) := REF_83(uint256)
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1', 'pastLiquidityWeights_3'])
_totalLiquidityWeight_1(uint256) := ϕ(['_totalLiquidityWeight_0', '_totalLiquidityWeight_2'])
i_1(uint256) := ϕ(['i_2', 'i_0'])
TMP_115(bool) = i_1 < totalPairs_1
CONDITION TMP_115
REF_84(IERC20) -> usdvPairs_2[i_1]
foreignAsset_1(IERC20) := REF_84(IERC20)
REF_91(ILiquidityBasedTWAP.Paths) -> Paths.USDV
TMP_120 = CONVERT REF_91 to uint256
REF_92(uint256) -> totalLiquidityWeight_18[TMP_120]
totalLiquidityWeight_19(uint256[2]) := ϕ(['totalLiquidityWeight_18'])
REF_92 (->totalLiquidityWeight_19) := _totalLiquidityWeight_1(uint256)
TMP_116 = CONVERT foreignAsset_1 to address
REF_85(ILiquidityBasedTWAP.ExchangePair) -> twapData_17[TMP_116]
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_85(ILiquidityBasedTWAP.ExchangePair)
RETURN pastLiquidityWeights_2,pastTotalLiquidityWeight_1
REF_86(uint256) -> pairData_1 (-> ['twapData']).lastMeasurement
TMP_117(uint256) = block.timestamp (c)- REF_86
timeElapsed_1(uint256) := TMP_117(uint256)
REF_87(uint256) -> pairData_1 (-> ['twapData']).updatePeriod
TMP_118(bool) = timeElapsed_1 < REF_87
CONDITION TMP_118
REF_88(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
pastLiquidityEvaluation_1(uint256) := REF_88(uint256)
TMP_119(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._updateUSDVPrice(IERC20,ILiquidityBasedTWAP.ExchangePair,uint256)(foreignAsset_1,pairData_1 (-> ['twapData']),timeElapsed_1)
currentLiquidityEvaluation_1(uint256) := TMP_119(uint256)
REF_89(uint256) -> pastLiquidityWeights_2[i_1]
pastLiquidityWeights_3(uint256[]) := ϕ(['pastLiquidityWeights_2'])
REF_89 (->pastLiquidityWeights_3) := pastLiquidityEvaluation_1(uint256)
REF_90(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
REF_90 (->pairData_2 (-> ['twapData'])) := currentLiquidityEvaluation_1(uint256)
twapData_19(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
_totalLiquidityWeight_2(uint256) = _totalLiquidityWeight_1 (c)+ currentLiquidityEvaluation_1
i_2(uint256) = i_1 (c)+ 1


Propogating parameters and globals to SSA variables...
End popogation

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
usdvPairs_2(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_18(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_17(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
End popogation
REF_81 -> LENGTH usdvPairs_2
[i]Type for REF_81

Name: REF_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_81(uint256)
asgn
init
end
_______________

Name: REF_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_113 = new uint256[](totalPairs_1)
[i]Type for TMP_113

Name: TMP_113 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1(uint256[]) := TMP_113(uint256)
asgn
init
end
_______________

Name: TMP_113 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastTotalLiquidityWeight, Num: 1
Globalname: pastTotalLiquidityWeight
End popogation
REF_82(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_82

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_114 = CONVERT REF_82 to uint256
Converting REF_82

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_114

Name: TMP_114 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_83(uint256) -> totalLiquidityWeight_18[TMP_114]
INDEX
[i]Type for REF_83

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastTotalLiquidityWeight_1(uint256) := REF_83(uint256)
asgn
init
end
_______________

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: i, Num: 1
Globalname: i
Name: i, Num: 1
Globalname: i
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: i, Num: 1
Globalname: i

Name: i Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1', 'pastLiquidityWeights_3'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_totalLiquidityWeight_1(uint256) := ϕ(['_totalLiquidityWeight_0', '_totalLiquidityWeight_2'])
Phi
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_1(uint256) := ϕ(['i_2', 'i_0'])
Phi
init
end
_______________

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_115(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_115

Name: TMP_115 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
End popogation
REF_84(IERC20) -> usdvPairs_2[i_1]
INDEX
[i]Type for REF_84

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
foreignAsset_1(IERC20) := REF_84(IERC20)
asgn
init
end
_______________

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignAsset

Name: foreignAsset Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
End popogation

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_91(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_91

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_120 = CONVERT REF_91 to uint256
Converting REF_91

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_120

Name: TMP_120 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_92(uint256) -> totalLiquidityWeight_18[TMP_120]
INDEX
[i]Type for REF_92

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalLiquidityWeight_19(uint256[2]) := ϕ(['totalLiquidityWeight_18'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_92 (->totalLiquidityWeight_19) := _totalLiquidityWeight_1(uint256)
asgn
init
end
_______________

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_92

Name: REF_92 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 1 (-> ['twapData'])
Globalname: pairData
End popogation
TMP_116 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_116

Name: TMP_116 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_85(ILiquidityBasedTWAP.ExchangePair) -> twapData_17[TMP_116]
INDEX
[i]Type for REF_85

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_85(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
RETURN pastLiquidityWeights_2,pastTotalLiquidityWeight_1
RETURN
init
end

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end

Name: pastTotalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
Name: timeElapsed, Num: 1
Globalname: timeElapsed
End popogation
REF_86(uint256) -> pairData_1 (-> ['twapData']).lastMeasurement
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_86

Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: lastMeasurement
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117(uint256) = block.timestamp (c)- REF_86
init
end
init
end
init
end
_______________

Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_117

Name: TMP_117 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint256) := TMP_117(uint256)
asgn
init
end
_______________

Name: TMP_117 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_87(uint256) -> pairData_1 (-> ['twapData']).updatePeriod
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_87

Name: pairData.updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: updatePeriod
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_118(bool) = timeElapsed_1 < REF_87
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_118

Name: TMP_118 Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pastLiquidityEvaluation, Num: 1
Globalname: pastLiquidityEvaluation
End popogation
REF_88(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_88

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityEvaluation_1(uint256) := REF_88(uint256)
asgn
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityEvaluation

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
End popogation
TMP_119(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._updateUSDVPrice(IERC20,ILiquidityBasedTWAP.ExchangePair,uint256)(foreignAsset_1,pairData_1 (-> ['twapData']),timeElapsed_1)
init
end
init
end
init
end
init
end
_______________

Name: PIC_45 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_119

Name: TMP_119 Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentLiquidityEvaluation_1(uint256) := TMP_119(uint256)
asgn
init
end
_______________

Name: TMP_119 Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for currentLiquidityEvaluation

Name: currentLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 3
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 3
Globalname: pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_89(uint256) -> pastLiquidityWeights_2[i_1]
INDEX
[i]Type for REF_89

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastLiquidityWeights_3(uint256[]) := ϕ(['pastLiquidityWeights_2'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_89 (->pastLiquidityWeights_3) := pastLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_89

Name: REF_89 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData
End popogation
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData

Name: pairData Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Phid

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_90(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_90

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
[i]Type for pairData

Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
REF_90 (->pairData_2 (-> ['twapData'])) := currentLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: currentLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_90

Name: REF_90 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_90 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_19(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
Name: _totalLiquidityWeight, Num: 2
Globalname: _totalLiquidityWeight
End popogation
_totalLiquidityWeight_2(uint256) = _totalLiquidityWeight_1 (c)+ currentLiquidityEvaluation_1
init
end
init
end
init
end
_______________

Name: currentLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 2
Globalname: i
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


usdvPairs_2(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
totalLiquidityWeight_18(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
twapData_17(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
REF_81 -> LENGTH usdvPairs_2
totalPairs_1(uint256) := REF_81(uint256)
TMP_113 = new uint256[](totalPairs_1)
pastLiquidityWeights_1(uint256[]) := TMP_113(uint256)
REF_82(ILiquidityBasedTWAP.Paths) -> Paths.USDV
TMP_114 = CONVERT REF_82 to uint256
REF_83(uint256) -> totalLiquidityWeight_18[TMP_114]
pastTotalLiquidityWeight_1(uint256) := REF_83(uint256)
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1', 'pastLiquidityWeights_3'])
_totalLiquidityWeight_1(uint256) := ϕ(['_totalLiquidityWeight_0', '_totalLiquidityWeight_2'])
i_1(uint256) := ϕ(['i_2', 'i_0'])
TMP_115(bool) = i_1 < totalPairs_1
CONDITION TMP_115
REF_84(IERC20) -> usdvPairs_2[i_1]
foreignAsset_1(IERC20) := REF_84(IERC20)
REF_91(ILiquidityBasedTWAP.Paths) -> Paths.USDV
TMP_120 = CONVERT REF_91 to uint256
REF_92(uint256) -> totalLiquidityWeight_18[TMP_120]
totalLiquidityWeight_19(uint256[2]) := ϕ(['totalLiquidityWeight_18'])
REF_92 (->totalLiquidityWeight_19) := _totalLiquidityWeight_1(uint256)
TMP_116 = CONVERT foreignAsset_1 to address
REF_85(ILiquidityBasedTWAP.ExchangePair) -> twapData_17[TMP_116]
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_85(ILiquidityBasedTWAP.ExchangePair)
RETURN pastLiquidityWeights_2,pastTotalLiquidityWeight_1
REF_86(uint256) -> pairData_1 (-> ['twapData']).lastMeasurement
TMP_117(uint256) = block.timestamp (c)- REF_86
timeElapsed_1(uint256) := TMP_117(uint256)
REF_87(uint256) -> pairData_1 (-> ['twapData']).updatePeriod
TMP_118(bool) = timeElapsed_1 < REF_87
CONDITION TMP_118
REF_88(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
pastLiquidityEvaluation_1(uint256) := REF_88(uint256)
TMP_119(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._updateUSDVPrice(IERC20,ILiquidityBasedTWAP.ExchangePair,uint256)(foreignAsset_1,pairData_1 (-> ['twapData']),timeElapsed_1)
currentLiquidityEvaluation_1(uint256) := TMP_119(uint256)
REF_89(uint256) -> pastLiquidityWeights_2[i_1]
pastLiquidityWeights_3(uint256[]) := ϕ(['pastLiquidityWeights_2'])
REF_89 (->pastLiquidityWeights_3) := pastLiquidityEvaluation_1(uint256)
REF_90(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
REF_90 (->pairData_2 (-> ['twapData'])) := currentLiquidityEvaluation_1(uint256)
twapData_19(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
_totalLiquidityWeight_2(uint256) = _totalLiquidityWeight_1 (c)+ currentLiquidityEvaluation_1
i_2(uint256) = i_1 (c)+ 1


Propogating parameters and globals to SSA variables...
End popogation

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
usdvPairs_2(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_18(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_17(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
End popogation
REF_81 -> LENGTH usdvPairs_2
[i]Type for REF_81

Name: REF_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalPairs_1(uint256) := REF_81(uint256)
asgn
init
end
_______________

Name: REF_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for totalPairs

Name: totalPairs Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: pastLiquidityWeights, Num: 1
Globalname: pastLiquidityWeights
End popogation
TMP_113 = new uint256[](totalPairs_1)
[i]Type for TMP_113

Name: TMP_113 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityWeights_1(uint256[]) := TMP_113(uint256)
asgn
init
end
_______________

Name: TMP_113 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastTotalLiquidityWeight, Num: 1
Globalname: pastTotalLiquidityWeight
End popogation
REF_82(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_82

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_114 = CONVERT REF_82 to uint256
Converting REF_82

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_114

Name: TMP_114 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_83(uint256) -> totalLiquidityWeight_18[TMP_114]
INDEX
[i]Type for REF_83

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastTotalLiquidityWeight_1(uint256) := REF_83(uint256)
asgn
init
end
_______________

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastTotalLiquidityWeight

Name: pastTotalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: totalPairs, Num: 1
Globalname: totalPairs
Name: i, Num: 1
Globalname: i
Name: i, Num: 1
Globalname: i
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: i, Num: 1
Globalname: i

Name: i Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
pastLiquidityWeights_2(uint256[]) := ϕ(['pastLiquidityWeights_1', 'pastLiquidityWeights_3'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_totalLiquidityWeight_1(uint256) := ϕ(['_totalLiquidityWeight_0', '_totalLiquidityWeight_2'])
Phi
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_1(uint256) := ϕ(['i_2', 'i_0'])
Phi
init
end
_______________

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_115(bool) = i_1 < totalPairs_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_115

Name: TMP_115 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
End popogation
REF_84(IERC20) -> usdvPairs_2[i_1]
INDEX
[i]Type for REF_84

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
foreignAsset_1(IERC20) := REF_84(IERC20)
asgn
init
end
_______________

Name: usdvPairs Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for foreignAsset

Name: foreignAsset Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
End popogation

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_91(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_91

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_120 = CONVERT REF_91 to uint256
Converting REF_91

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_120

Name: TMP_120 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_92(uint256) -> totalLiquidityWeight_18[TMP_120]
INDEX
[i]Type for REF_92

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalLiquidityWeight_19(uint256[2]) := ϕ(['totalLiquidityWeight_18'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_92 (->totalLiquidityWeight_19) := _totalLiquidityWeight_1(uint256)
asgn
init
end
_______________

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_92

Name: REF_92 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 1 (-> ['twapData'])
Globalname: pairData
End popogation
TMP_116 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_116

Name: TMP_116 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_85(ILiquidityBasedTWAP.ExchangePair) -> twapData_17[TMP_116]
INDEX
[i]Type for REF_85

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_85(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 2
Globalname: pastLiquidityWeights
End popogation
RETURN pastLiquidityWeights_2,pastTotalLiquidityWeight_1
RETURN
init
end

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end

Name: pastTotalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
Name: timeElapsed, Num: 1
Globalname: timeElapsed
End popogation
REF_86(uint256) -> pairData_1 (-> ['twapData']).lastMeasurement
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_86

Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: lastMeasurement
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117(uint256) = block.timestamp (c)- REF_86
init
end
init
end
init
end
_______________

Name: pairData.lastMeasurement Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_117

Name: TMP_117 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint256) := TMP_117(uint256)
asgn
init
end
_______________

Name: TMP_117 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_87(uint256) -> pairData_1 (-> ['twapData']).updatePeriod
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_87

Name: pairData.updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: updatePeriod
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: updatePeriod Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_118(bool) = timeElapsed_1 < REF_87
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_118

Name: TMP_118 Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pastLiquidityEvaluation, Num: 1
Globalname: pastLiquidityEvaluation
End popogation
REF_88(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_88

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pastLiquidityEvaluation_1(uint256) := REF_88(uint256)
asgn
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pastLiquidityEvaluation

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
End popogation
TMP_119(uint256) = INTERNAL_CALL, LiquidityBasedTWAP._updateUSDVPrice(IERC20,ILiquidityBasedTWAP.ExchangePair,uint256)(foreignAsset_1,pairData_1 (-> ['twapData']),timeElapsed_1)
init
end
init
end
init
end
init
end
_______________

Name: PIC_45 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_119

Name: TMP_119 Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentLiquidityEvaluation_1(uint256) := TMP_119(uint256)
asgn
init
end
_______________

Name: TMP_119 Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for currentLiquidityEvaluation

Name: currentLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pastLiquidityWeights, Num: 3
Globalname: pastLiquidityWeights
End popogation
Name: pastLiquidityWeights, Num: 3
Globalname: pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_89(uint256) -> pastLiquidityWeights_2[i_1]
INDEX
[i]Type for REF_89

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pastLiquidityWeights_3(uint256[]) := ϕ(['pastLiquidityWeights_2'])
Phi
[i]Type for pastLiquidityWeights

Name: pastLiquidityWeights Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_89 (->pastLiquidityWeights_3) := pastLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_89

Name: REF_89 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData
End popogation
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData

Name: pairData Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Phid

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_90(uint256) -> pairData_1 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
init
end
_______________

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_90

Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
[i]Type for pairData

Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
XXXX
REF_90 (->pairData_2 (-> ['twapData'])) := currentLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: currentLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_90

Name: REF_90 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, pastLiquidityEvaluation
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_90 Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_19(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _totalLiquidityWeight, Num: 1
Globalname: _totalLiquidityWeight
Name: currentLiquidityEvaluation, Num: 1
Globalname: currentLiquidityEvaluation
Name: _totalLiquidityWeight, Num: 2
Globalname: _totalLiquidityWeight
End popogation
_totalLiquidityWeight_2(uint256) = _totalLiquidityWeight_1 (c)+ currentLiquidityEvaluation_1
init
end
init
end
init
end
_______________

Name: currentLiquidityEvaluation Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for _totalLiquidityWeight

Name: _totalLiquidityWeight Function: syncUSDVPrice
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 2
Globalname: i
End popogation
i_2(uint256) = i_1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
State_var: totalLiquidityWeight
State_var: twapData
State_var: usdvPairs
State_var: previousPrices
State_var: vaderPairs
State_var: vader
State_var: oracles
State_var: vaderPool
State_var: maxUpdateWindow
State_var: _owner



_updateUSDVPrice
State_var: totalLiquidityWeight
State_var: twapData
State_var: usdvPairs
State_var: previousPrices
State_var: vaderPairs
State_var: vader
State_var: oracles
State_var: vaderPool
State_var: maxUpdateWindow
State_var: _owner



_calculateUSDVPrice
State_var: totalLiquidityWeight
State_var: twapData
State_var: usdvPairs
State_var: previousPrices
State_var: vaderPairs
State_var: vader
State_var: oracles
State_var: vaderPool
State_var: maxUpdateWindow
State_var: _owner



setupUSDV
Finding type for foreignAsset(IERC20 ... )
Finding type for oracle(IAggregatorV3 ... )
Finding type for updatePeriod(uint256 ... )
Finding type for usdvPrice(uint256 ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


previousPrices_26(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
MODIFIER_CALL, Ownable.onlyOwner()()
REF_111(ILiquidityBasedTWAP.Paths) -> Paths.USDV
TMP_143 = CONVERT REF_111 to uint256
REF_112(uint256) -> previousPrices_27[TMP_143]
TMP_144(bool) = REF_112 == 0
TMP_145(None) = SOLIDITY_CALL require(bool,string)(TMP_144,LBTWAP::setupUSDV: Already Initialized)
REF_113(ILiquidityBasedTWAP.Paths) -> Paths.USDV
TMP_146 = CONVERT REF_113 to uint256
REF_114(uint256) -> previousPrices_27[TMP_146]
previousPrices_28(uint256[2]) := ϕ(['previousPrices_27'])
REF_114 (->previousPrices_28) := usdvPrice_1(uint256)
INTERNAL_CALL, LiquidityBasedTWAP._addUSDVPair(IERC20,IAggregatorV3,uint256)(foreignAsset_1,oracle_1,updatePeriod_1)


Propogating parameters and globals to SSA variables...
End popogation
Name: previousPrices, Num: 26
Globalname: previousPrices
global...

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
previousPrices_26(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Ownable.onlyOwner()()
Propogating parameters and globals to SSA variables...
Name: previousPrices, Num: 27
Globalname: previousPrices
global...

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_111(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
[i]Type for REF_111

Name: Paths.USDV Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_143 = CONVERT REF_111 to uint256
Converting REF_111

Name: Paths.USDV Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_143

Name: TMP_143 Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_112(uint256) -> previousPrices_27[TMP_143]
INDEX
[i]Type for REF_112

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_144(bool) = REF_112 == 0
[i]Type for TMP_144

Name: TMP_144 Function: setupUSDV
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_145(None) = SOLIDITY_CALL require(bool,string)(TMP_144,LBTWAP::setupUSDV: Already Initialized)
[i]Type for TMP_145

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: usdvPrice, Num: 1
Globalname: usdvPrice
Name: previousPrices, Num: 28
Globalname: previousPrices
global...

Name: previousPrices Function: setupVader
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_113(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
[i]Type for REF_113

Name: Paths.USDV Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_146 = CONVERT REF_113 to uint256
Converting REF_113

Name: Paths.USDV Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_146

Name: TMP_146 Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_114(uint256) -> previousPrices_27[TMP_146]
INDEX
[i]Type for REF_114

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
previousPrices_28(uint256[2]) := ϕ(['previousPrices_27'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_114 (->previousPrices_28) := usdvPrice_1(uint256)
asgn
init
end
_______________

Name: usdvPrice Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_114

Name: REF_114 Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
Name: oracle, Num: 1
Globalname: oracle
Name: updatePeriod, Num: 1
Globalname: updatePeriod
End popogation
INTERNAL_CALL, LiquidityBasedTWAP._addUSDVPair(IERC20,IAggregatorV3,uint256)(foreignAsset_1,oracle_1,updatePeriod_1)
init
end
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: foreignAsset Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: oracle Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: updatePeriod Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: foreignAsset, Num: 1
Globalname: foreignAsset

Name: foreignAsset_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: oracle, Num: 1
Globalname: oracle

Name: oracle_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: updatePeriod, Num: 1
Globalname: updatePeriod

Name: updatePeriod_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: vaderPool, Num: 5
Globalname: vaderPool
global...

Name: vaderPool Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: usdvPairs, Num: 6
Globalname: usdvPairs
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: maxUpdateWindow, Num: 14
Globalname: maxUpdateWindow
global...

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 20
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 31
Globalname: previousPrices
global...

Name: previousPrices Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: twapData, Num: 22
Globalname: twapData
global...

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
foreignAsset_1(IERC20) := ϕ(['foreignAsset_1', 'foreignAsset_1'])
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
oracle_1(IAggregatorV3) := ϕ(['oracle_1', 'oracle_1'])
Phi
[i]Type for oracle

Name: oracle Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
updatePeriod_1(uint256) := ϕ(['updatePeriod_1', 'updatePeriod_1'])
Phi
[i]Type for updatePeriod

Name: updatePeriod Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPool_5(IVaderPoolV2) := ϕ(['vaderPool_1', 'vaderPool_9', 'vaderPool_0', 'vaderPool_4'])
Phi
[i]Type for vaderPool

Name: vaderPool Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
usdvPairs_6(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_14(uint256) := ϕ(['maxUpdateWindow_12', 'maxUpdateWindow_0', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_20(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_31(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_22(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: updatePeriod, Num: 1
Globalname: updatePeriod
End popogation
TMP_154(bool) = updatePeriod_1 != 0
[i]Type for TMP_154

Name: TMP_154 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_155(None) = SOLIDITY_CALL require(bool,string)(TMP_154,LBTWAP::addUSDVPair: Incorrect Update Period)
[i]Type for TMP_155

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation
Name: vaderPool, Num: 6
Globalname: vaderPool
global...

Name: vaderPool Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: usdvPairs, Num: 7
Globalname: usdvPairs
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: maxUpdateWindow, Num: 15
Globalname: maxUpdateWindow
global...

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 21
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 32
Globalname: previousPrices
global...

Name: previousPrices Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: twapData, Num: 23
Globalname: twapData
global...

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_156(uint8) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Written func info: AggregatorV3, decimals
Handling balance function!
u
prev address? u
global assignment: 11
11
[i]Type for TMP_156

Name: TMP_156 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPool_6(IVaderPoolV2) := ϕ(['vaderPool_1', 'vaderPool_5', 'vaderPool_9', 'vaderPool_4'])
Phi
[i]Type for vaderPool

Name: vaderPool Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
usdvPairs_7(IERC20[]) := ϕ(['usdvPairs_6', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_15(uint256) := ϕ(['maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19', 'maxUpdateWindow_14'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_21(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_20', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_32(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_31', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_23(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_22', 'twapData_28'])
Phi
[i]Type for twapData

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_157(bool) = TMP_156 == 8
[i]Type for TMP_157

Name: TMP_157 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_158(None) = SOLIDITY_CALL require(bool,string)(TMP_157,LBTWAP::addUSDVPair: Non-USD Oracle)
[i]Type for TMP_158

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
Name: oracles, Num: 3
Globalname: oracles
global...

Name: oracles Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_159 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_159

Name: TMP_159 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_118(IAggregatorV3) -> oracles_2[TMP_159]
INDEX
[i]Type for REF_118

Name: oracles Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracles_3(mapping(address => IAggregatorV3)) := ϕ(['oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_118 (->oracles_3) := oracle_1(IAggregatorV3)
asgn
init
end
_______________

Name: oracle_1 Function: _addUSDVPair
Num: 
Den: 
Address: 11
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_118

Name: REF_118 Function: _addUSDVPair
Num: -1
Den: -1
Address: 11
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
Name: pairData, Num: 1 (-> ['twapData'])
Globalname: pairData
End popogation
TMP_160 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_160

Name: TMP_160 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_119(ILiquidityBasedTWAP.ExchangePair) -> twapData_23[TMP_160]
INDEX
[i]Type for REF_119

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_119(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData
Name: twapData, Num: 24
Globalname: twapData
global...

Name: twapData Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Name: vaderPool, Num: 7
Globalname: vaderPool
global...

Name: vaderPool Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: usdvPairs, Num: 8
Globalname: usdvPairs
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: maxUpdateWindow, Num: 16
Globalname: maxUpdateWindow
global...

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 22
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 33
Globalname: previousPrices
global...

Name: previousPrices Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_120(uint96) -> pairData_1 (-> ['twapData']).foreignUnit
MEMBER
init
end
init
end
OUT KEY: _addUSDVPair_pairData_foreignUnit
OUT KEY: _addUSDVPair_pairData_foreignUnit
FTT: None
No field found
[i]Type for REF_120

Name: pairData.foreignUnit Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignUnit
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: foreignUnit Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignUnit Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_161 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_161

Name: TMP_161 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_162 = CONVERT TMP_161 to IERC20Metadata
Converting TMP_161

Name: TMP_161 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_161 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ERC20Metadata
[i]Type for TMP_162

Name: TMP_162 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_163(uint8) = HIGH_LEVEL_CALL, dest:TMP_162(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Written func info: ERC20Metadata, decimals
Handling balance function!
u
prev address? u
global assignment: 12
12
[i]Type for TMP_163

Name: TMP_163 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPool_7(IVaderPoolV2) := ϕ(['vaderPool_6', 'vaderPool_1', 'vaderPool_9', 'vaderPool_4'])
Phi
[i]Type for vaderPool

Name: vaderPool Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
usdvPairs_8(IERC20[]) := ϕ(['usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13', 'usdvPairs_7'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_16(uint256) := ϕ(['maxUpdateWindow_15', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_22(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_21', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_33(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_32', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_164 = CONVERT TMP_163 to uint256
Converting TMP_163

Name: TMP_163 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_163 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_164

Name: TMP_164 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_165(uint256) = 10 (c)** TMP_164
init
end
init
end
[i]Type for TMP_165

Name: TMP_165 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_166 = CONVERT TMP_165 to uint96
Converting TMP_165

Name: TMP_165 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_165 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_166

Name: TMP_166 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignUnit
Finance Type: undef
XXXX
REF_120 (->pairData_2 (-> ['twapData'])) := TMP_166(uint96)
asgn
init
end
_______________

Name: TMP_166 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_120

Name: REF_120 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignUnit
#################
Member: 
Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignUnit
Finance Type: undef
Fieldf: 
Name: foreignUnit Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_120 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: foreignUnit Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_24(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: updatePeriod, Num: 1
Globalname: updatePeriod
Name: twapData, Num: 25
Globalname: twapData
global...

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData, Num: 3 (-> ['twapData'])
Globalname: pairData
End popogation
Name: pairData, Num: 3 (-> ['twapData'])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_122(uint256) -> pairData_2 (-> ['twapData']).updatePeriod
MEMBER
init
end
init
end
OUT KEY: _addUSDVPair_pairData_updatePeriod
OUT KEY: _addUSDVPair_pairData_updatePeriod
FTT: None
No field found
[i]Type for REF_122

Name: pairData.updatePeriod Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> ['twapData']), Field: updatePeriod
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: updatePeriod Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.updatePeriod Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
pairData_3 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_2 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignUnit
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: updatePeriod, foreignUnit
Finance Type: undef
XXXX
REF_122 (->pairData_3 (-> ['twapData'])) := updatePeriod_1(uint256)
asgn
init
end
_______________

Name: updatePeriod_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_122

Name: REF_122 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> ['twapData']), Field: updatePeriod
#################
Member: 
Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: updatePeriod, foreignUnit
Finance Type: undef
Fieldf: 
Name: updatePeriod Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_122 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: updatePeriod Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_25(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_3 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: twapData, Num: 26
Globalname: twapData
global...

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData, Num: 4 (-> ['twapData'])
Globalname: pairData
End popogation
Name: pairData, Num: 4 (-> ['twapData'])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_123(uint256) -> pairData_3 (-> ['twapData']).lastMeasurement
MEMBER
init
end
init
end
OUT KEY: _addUSDVPair_pairData_lastMeasurement
OUT KEY: _addUSDVPair_pairData_lastMeasurement
FTT: None
No field found
[i]Type for REF_123

Name: pairData.lastMeasurement Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_3 (-> ['twapData']), Field: lastMeasurement
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.lastMeasurement Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
pairData_4 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_3 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: updatePeriod, foreignUnit
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
XXXX
REF_123 (->pairData_4 (-> ['twapData'])) := block.timestamp(uint256)
asgn
init
_______________

Name: block.timestamp Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_123

Name: REF_123 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_3 (-> ['twapData']), Field: lastMeasurement
#################
Member: 
Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_123 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_26(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_4 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
Name: nativeTokenPriceCumulative, Num: 1
Globalname: nativeTokenPriceCumulative
End popogation
Name: vaderPool, Num: 8
Globalname: vaderPool
global...

Name: vaderPool Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: usdvPairs, Num: 9
Globalname: usdvPairs
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: maxUpdateWindow, Num: 17
Globalname: maxUpdateWindow
global...

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 23
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 34
Globalname: previousPrices
global...

Name: previousPrices Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TUPLE_8(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:vaderPool_7(IVaderPoolV2), function:cumulativePrices, arguments:['foreignAsset_1']  
High Call: cumulativePrices
Running querryfc
Written func info: VaderPoolV2, cumulativePrices
Handling balance function!
u
prev address? u
global assignment: 13
13
Finding type for hlc_0([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10fd820>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10fd9d0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10fdb80>] ... )
[i]Type for TUPLE_8

Name: TUPLE_8 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPool_8(IVaderPoolV2) := ϕ(['vaderPool_1', 'vaderPool_9', 'vaderPool_7', 'vaderPool_4'])
Phi
[i]Type for vaderPool

Name: vaderPool Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
usdvPairs_9(IERC20[]) := ϕ(['usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13', 'usdvPairs_8'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_17(uint256) := ϕ(['maxUpdateWindow_16', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_23(uint256[2]) := ϕ(['totalLiquidityWeight_22', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_34(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_33', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nativeTokenPriceCumulative_1(uint256)= UNPACK TUPLE_8 index: 0 
Finding type for nativeTokenPriceCumulative(uint256 ... )
[i]Type for nativeTokenPriceCumulative

Name: nativeTokenPriceCumulative Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: twapData, Num: 27
Globalname: twapData
global...

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData, Num: 5 (-> ['twapData'])
Globalname: pairData
End popogation
Name: pairData, Num: 5 (-> ['twapData'])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_125(uint256) -> pairData_4 (-> ['twapData']).nativeTokenPriceCumulative
MEMBER
init
end
init
end
OUT KEY: _addUSDVPair_pairData_nativeTokenPriceCumulative
OUT KEY: _addUSDVPair_pairData_nativeTokenPriceCumulative
FTT: None
No field found
[i]Type for REF_125

Name: pairData.nativeTokenPriceCumulative Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_4 (-> ['twapData']), Field: nativeTokenPriceCumulative
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceCumulative Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
pairData_5 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_4 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
XXXX
REF_125 (->pairData_5 (-> ['twapData'])) := nativeTokenPriceCumulative_1(uint256)
asgn
init
end
_______________

Name: nativeTokenPriceCumulative Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_125

Name: REF_125 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_4 (-> ['twapData']), Field: nativeTokenPriceCumulative
#################
Member: 
Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_125 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceCumulative Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_27(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_5 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
Name: reserveNative, Num: 1
Globalname: reserveNative
Name: reserveForeign, Num: 1
Globalname: reserveForeign
End popogation
Name: vaderPool, Num: 9
Globalname: vaderPool
global...

Name: vaderPool Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: usdvPairs, Num: 10
Globalname: usdvPairs
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: maxUpdateWindow, Num: 18
Globalname: maxUpdateWindow
global...

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: totalLiquidityWeight, Num: 24
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: previousPrices, Num: 35
Globalname: previousPrices
global...

Name: previousPrices Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TUPLE_9(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:vaderPool_8(IVaderPoolV2), function:getReserves, arguments:['foreignAsset_1']  
High Call: getReserves
Running querryfc
Written func info: VaderPoolV2, getReserves
Handling balance function!
u
prev address? u
Finding type for hlc_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10d9c10>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10d9dc0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10d9f70>] ... )
[i]Type for TUPLE_9

Name: TUPLE_9 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPool_9(IVaderPoolV2) := ϕ(['vaderPool_1', 'vaderPool_9', 'vaderPool_8', 'vaderPool_4'])
Phi
[i]Type for vaderPool

Name: vaderPool Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
usdvPairs_10(IERC20[]) := ϕ(['usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_9', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_18(uint256) := ϕ(['maxUpdateWindow_17', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_24(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_23', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_35(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_34', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveNative_1(uint256)= UNPACK TUPLE_9 index: 0 
Finding type for reserveNative(uint256 ... )
[i]Type for reserveNative

Name: reserveNative Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint256)= UNPACK TUPLE_9 index: 1 
Finding type for reserveForeign(uint256 ... )
[i]Type for reserveForeign

Name: reserveForeign Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
Name: pairLiquidityEvaluation, Num: 1
Globalname: pairLiquidityEvaluation
End popogation
REF_127(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
[i]Type for REF_127

Name: Paths.USDV Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_167 = CONVERT REF_127 to uint256
Converting REF_127

Name: Paths.USDV Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_167

Name: TMP_167 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_128(uint256) -> previousPrices_35[TMP_167]
INDEX
[i]Type for REF_128

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_168(uint256) = reserveNative_1 (c)* REF_128
testing mul...
init
end
init
end

Name: reserveNative Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_168

Name: TMP_168 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_169 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_169

Name: TMP_169 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_170(uint256) = INTERNAL_CALL, LiquidityBasedTWAP.getChainlinkPrice(address)(TMP_169)
init
end
init
end
_______________

Name: PIC_12 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_170

Name: TMP_170 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_171(uint256) = reserveForeign_1 (c)* TMP_170
testing mul...
init
end
init
end

Name: reserveForeign Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_170 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: TMP_170 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_172(uint256) = TMP_168 (c)+ TMP_171
init
end
init
end
init
end
_______________

Name: TMP_171 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairLiquidityEvaluation_1(uint256) := TMP_172(uint256)
asgn
init
end
_______________

Name: TMP_172 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairLiquidityEvaluation

Name: pairLiquidityEvaluation Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: twapData, Num: 28
Globalname: twapData
global...

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pairData, Num: 6 (-> ['twapData'])
Globalname: pairData
End popogation
Name: pairData, Num: 6 (-> ['twapData'])
Globalname: pairData

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_129(uint256) -> pairData_5 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
OUT KEY: _addUSDVPair_pairData_pastLiquidityEvaluation
OUT KEY: _addUSDVPair_pairData_pastLiquidityEvaluation
FTT: None
No field found
[i]Type for REF_129

Name: pairData.pastLiquidityEvaluation Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_5 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
pairData_6 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_5 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
XXXX
REF_129 (->pairData_6 (-> ['twapData'])) := pairLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: pairLiquidityEvaluation Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_129

Name: REF_129 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_5 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_129 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_28(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_6 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: totalLiquidityWeight, Num: 26
Globalname: totalLiquidityWeight
global...

Name: totalLiquidityWeight Function: syncUSDVPrice
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_130(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
[i]Type for REF_130

Name: Paths.USDV Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_173 = CONVERT REF_130 to uint256
Converting REF_130

Name: Paths.USDV Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_173

Name: TMP_173 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_131(uint256) -> totalLiquidityWeight_25[TMP_173]
INDEX
[i]Type for REF_131

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalLiquidityWeight_26(uint256[2]) := ϕ(['totalLiquidityWeight_25'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_131(-> totalLiquidityWeight_26) = REF_131 (c)+ pairLiquidityEvaluation_1
init
end
init
end
init
end
_______________

Name: pairLiquidityEvaluation Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_131

Name: REF_131 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
Name: usdvPairs, Num: 12
Globalname: usdvPairs
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: usdvPairs, Num: 11
Globalname: usdvPairs
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: usdvPairs, Num: 13
Globalname: usdvPairs
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_133 -> LENGTH usdvPairs_11
[i]Type for REF_133

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_175(uint256) := REF_133(uint256)
asgn
init
end
_______________

Name: REF_133 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for TMP_175

Name: TMP_175 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_176(uint256) = TMP_175 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_176

Name: TMP_176 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
usdvPairs_12(IERC20[]) := ϕ(['usdvPairs_11'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_133 (->usdvPairs_12) := TMP_176(uint256)
asgn
init
end
_______________

Name: TMP_176 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_133

Name: REF_133 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_134(IERC20) -> usdvPairs_12[TMP_175]
INDEX
[i]Type for REF_134

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
usdvPairs_13(IERC20[]) := ϕ(['usdvPairs_12'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_134 (->usdvPairs_13) := foreignAsset_1(IERC20)
asgn
init
end
_______________

Name: foreignAsset_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_134

Name: REF_134 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: updatePeriod, Num: 1
Globalname: updatePeriod
Name: maxUpdateWindow, Num: 19
Globalname: maxUpdateWindow
global...

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_177(bool) = maxUpdateWindow_19 < updatePeriod_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: maxUpdateWindow Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: maxUpdateWindow Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_177

Name: TMP_177 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: maxUpdateWindow, Num: 20
Globalname: maxUpdateWindow
global...

Name: maxUpdateWindow Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
maxUpdateWindow_20(uint256) := updatePeriod_1(uint256)
asgn
init
end
_______________

Name: updatePeriod_1 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: foreignAsset, Num: 1
Globalname: foreignAsset

Name: foreignAsset_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: oracle, Num: 1
Globalname: oracle

Name: oracle_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: updatePeriod, Num: 1
Globalname: updatePeriod

Name: updatePeriod_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: vaderPool Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxUpdateWindow Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
foreignAsset_1(IERC20) := ϕ(['foreignAsset_1', 'foreignAsset_1'])
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
oracle_1(IAggregatorV3) := ϕ(['oracle_1', 'oracle_1'])
Phi
[i]Type for oracle

Name: oracle Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
updatePeriod_1(uint256) := ϕ(['updatePeriod_1', 'updatePeriod_1'])
Phi
[i]Type for updatePeriod

Name: updatePeriod Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPool_5(IVaderPoolV2) := ϕ(['vaderPool_1', 'vaderPool_9', 'vaderPool_0', 'vaderPool_4'])
Phi
[i]Type for vaderPool

Name: vaderPool Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
usdvPairs_6(IERC20[]) := ϕ(['usdvPairs_0', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_14(uint256) := ϕ(['maxUpdateWindow_12', 'maxUpdateWindow_0', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_20(uint256[2]) := ϕ(['totalLiquidityWeight_0', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_31(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_22(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_28', 'twapData_0'])
Phi
[i]Type for twapData

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: updatePeriod, Num: 1
Globalname: updatePeriod
End popogation
TMP_154(bool) = updatePeriod_1 != 0
[i]Type for TMP_154

Name: TMP_154 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_155(None) = SOLIDITY_CALL require(bool,string)(TMP_154,LBTWAP::addUSDVPair: Incorrect Update Period)
[i]Type for TMP_155

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
End popogation

Name: vaderPool Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxUpdateWindow Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_156(uint8) = HIGH_LEVEL_CALL, dest:oracle_1(IAggregatorV3), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Written func info: AggregatorV3, decimals
Handling balance function!
u
prev address? u
[i]Type for TMP_156

Name: TMP_156 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPool_6(IVaderPoolV2) := ϕ(['vaderPool_1', 'vaderPool_5', 'vaderPool_9', 'vaderPool_4'])
Phi
[i]Type for vaderPool

Name: vaderPool Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
usdvPairs_7(IERC20[]) := ϕ(['usdvPairs_6', 'usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_15(uint256) := ϕ(['maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19', 'maxUpdateWindow_14'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_21(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_20', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_32(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_31', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_23(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(['twapData_7', 'twapData_21', 'twapData_2', 'twapData_5', 'twapData_17', 'twapData_19', 'twapData_1', 'twapData_16', 'twapData_3', 'twapData_22', 'twapData_28'])
Phi
[i]Type for twapData

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_157(bool) = TMP_156 == 8
[i]Type for TMP_157

Name: TMP_157 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_158(None) = SOLIDITY_CALL require(bool,string)(TMP_157,LBTWAP::addUSDVPair: Non-USD Oracle)
[i]Type for TMP_158

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
End popogation

Name: oracles Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_159 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_159

Name: TMP_159 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_118(IAggregatorV3) -> oracles_2[TMP_159]
INDEX
[i]Type for REF_118

Name: oracles Function: _addVaderPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
oracles_3(mapping(address => IAggregatorV3)) := ϕ(['oracles_2'])
Phi
[i]Type for oracles

Name: oracles Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_118 (->oracles_3) := oracle_1(IAggregatorV3)
asgn
init
end
_______________

Name: oracle_1 Function: _addUSDVPair
Num: 
Den: 
Address: 11
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_118

Name: REF_118 Function: _addUSDVPair
Num: -1
Den: -1
Address: 11
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
Name: pairData, Num: 1 (-> ['twapData'])
Globalname: pairData
End popogation
TMP_160 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_160

Name: TMP_160 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_119(ILiquidityBasedTWAP.ExchangePair) -> twapData_23[TMP_160]
INDEX
[i]Type for REF_119

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pairData_1 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := REF_119(ILiquidityBasedTWAP.ExchangePair)
asgn
init
end
_______________

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData
End popogation

Name: vaderPool Function: _addUSDVPair
Num: -1
Den: -1
Address: 13
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxUpdateWindow Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: pairData, Num: 2 (-> ['twapData'])
Globalname: pairData

Name: pairData Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: foreignUnit
Finance Type: undef
Phid

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_120(uint96) -> pairData_1 (-> ['twapData']).foreignUnit
MEMBER
init
end
init
end
OUT KEY: _addUSDVPair_pairData_foreignUnit
OUT KEY: _addUSDVPair_pairData_foreignUnit
FTT: None
No field found
[i]Type for REF_120

Name: pairData.foreignUnit Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignUnit
#################
Member: 
Name: pairData Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: foreignUnit
Finance Type: undef
Fieldf: 
Name: foreignUnit Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.foreignUnit Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: foreignUnit Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_161 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_161

Name: TMP_161 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_162 = CONVERT TMP_161 to IERC20Metadata
Converting TMP_161

Name: TMP_161 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_161 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ERC20Metadata
[i]Type for TMP_162

Name: TMP_162 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_163(uint8) = HIGH_LEVEL_CALL, dest:TMP_162(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Written func info: ERC20Metadata, decimals
Handling balance function!
u
prev address? u
[i]Type for TMP_163

Name: TMP_163 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPool_7(IVaderPoolV2) := ϕ(['vaderPool_6', 'vaderPool_1', 'vaderPool_9', 'vaderPool_4'])
Phi
[i]Type for vaderPool

Name: vaderPool Function: _addUSDVPair
Num: -1
Den: -1
Address: 13
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
usdvPairs_8(IERC20[]) := ϕ(['usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13', 'usdvPairs_7'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_16(uint256) := ϕ(['maxUpdateWindow_15', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_22(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_21', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_33(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_32', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_164 = CONVERT TMP_163 to uint256
Converting TMP_163

Name: TMP_163 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_163 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_164

Name: TMP_164 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_165(uint256) = 10 (c)** TMP_164
init
end
init
end
[i]Type for TMP_165

Name: TMP_165 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_166 = CONVERT TMP_165 to uint96
Converting TMP_165

Name: TMP_165 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_165 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_166

Name: TMP_166 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_2 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_1 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignUnit
Finance Type: undef
XXXX
REF_120 (->pairData_2 (-> ['twapData'])) := TMP_166(uint96)
asgn
init
end
_______________

Name: TMP_166 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_120

Name: REF_120 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_1 (-> ['twapData']), Field: foreignUnit
#################
Member: 
Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignUnit
Finance Type: undef
Fieldf: 
Name: foreignUnit Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_120 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: foreignUnit Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_24(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_2 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: updatePeriod, Num: 1
Globalname: updatePeriod
Name: pairData, Num: 3 (-> ['twapData'])
Globalname: pairData
End popogation
Name: pairData, Num: 3 (-> ['twapData'])
Globalname: pairData

Name: pairData Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: updatePeriod, foreignUnit
Finance Type: undef
Phid

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_122(uint256) -> pairData_2 (-> ['twapData']).updatePeriod
MEMBER
init
end
init
end
OUT KEY: _addUSDVPair_pairData_updatePeriod
OUT KEY: _addUSDVPair_pairData_updatePeriod
FTT: None
No field found
[i]Type for REF_122

Name: pairData.updatePeriod Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> ['twapData']), Field: updatePeriod
#################
Member: 
Name: pairData Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: updatePeriod, foreignUnit
Finance Type: undef
Fieldf: 
Name: updatePeriod Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.updatePeriod Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: updatePeriod Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_3 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_2 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: foreignUnit
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: updatePeriod, foreignUnit
Finance Type: undef
XXXX
REF_122 (->pairData_3 (-> ['twapData'])) := updatePeriod_1(uint256)
asgn
init
end
_______________

Name: updatePeriod_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_122

Name: REF_122 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_2 (-> ['twapData']), Field: updatePeriod
#################
Member: 
Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: updatePeriod, foreignUnit
Finance Type: undef
Fieldf: 
Name: updatePeriod Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_122 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: updatePeriod Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_25(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_3 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 4 (-> ['twapData'])
Globalname: pairData
End popogation
Name: pairData, Num: 4 (-> ['twapData'])
Globalname: pairData

Name: pairData Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
Phid

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_123(uint256) -> pairData_3 (-> ['twapData']).lastMeasurement
MEMBER
init
end
init
end
OUT KEY: _addUSDVPair_pairData_lastMeasurement
OUT KEY: _addUSDVPair_pairData_lastMeasurement
FTT: None
No field found
[i]Type for REF_123

Name: pairData.lastMeasurement Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_3 (-> ['twapData']), Field: lastMeasurement
#################
Member: 
Name: pairData Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.lastMeasurement Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_4 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_3 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: updatePeriod, foreignUnit
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
XXXX
REF_123 (->pairData_4 (-> ['twapData'])) := block.timestamp(uint256)
asgn
init
_______________

Name: block.timestamp Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_123

Name: REF_123 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_3 (-> ['twapData']), Field: lastMeasurement
#################
Member: 
Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
Fieldf: 
Name: lastMeasurement Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_123 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lastMeasurement Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_26(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_4 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
Name: nativeTokenPriceCumulative, Num: 1
Globalname: nativeTokenPriceCumulative
End popogation

Name: vaderPool Function: _addUSDVPair
Num: -1
Den: -1
Address: 13
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxUpdateWindow Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TUPLE_8(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:vaderPool_7(IVaderPoolV2), function:cumulativePrices, arguments:['foreignAsset_1']  
High Call: cumulativePrices
Running querryfc
Written func info: VaderPoolV2, cumulativePrices
Handling balance function!
13
Finding type for hlc_2([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10fd820>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10fd9d0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10fdb80>] ... )
[i]Type for TUPLE_8

Name: TUPLE_8 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPool_8(IVaderPoolV2) := ϕ(['vaderPool_1', 'vaderPool_9', 'vaderPool_7', 'vaderPool_4'])
Phi
[i]Type for vaderPool

Name: vaderPool Function: _addUSDVPair
Num: -1
Den: -1
Address: 13
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
usdvPairs_9(IERC20[]) := ϕ(['usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_4', 'usdvPairs_13', 'usdvPairs_8'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_17(uint256) := ϕ(['maxUpdateWindow_16', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_23(uint256[2]) := ϕ(['totalLiquidityWeight_22', 'totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_34(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_33', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nativeTokenPriceCumulative_1(uint256)= UNPACK TUPLE_8 index: 0 
Finding type for nativeTokenPriceCumulative(uint256 ... )
[i]Type for nativeTokenPriceCumulative

Name: nativeTokenPriceCumulative Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: nativeTokenPriceCumulative, Num: 1
Globalname: nativeTokenPriceCumulative
Name: pairData, Num: 5 (-> ['twapData'])
Globalname: pairData
End popogation
Name: pairData, Num: 5 (-> ['twapData'])
Globalname: pairData

Name: pairData Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
Phid

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_125(uint256) -> pairData_4 (-> ['twapData']).nativeTokenPriceCumulative
MEMBER
init
end
init
end
[i]Type for REF_125

Name: pairData.nativeTokenPriceCumulative Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_4 (-> ['twapData']), Field: nativeTokenPriceCumulative
#################
Member: 
Name: pairData Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.nativeTokenPriceCumulative Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceCumulative Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_5 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_4 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
XXXX
REF_125 (->pairData_5 (-> ['twapData'])) := nativeTokenPriceCumulative_1(uint256)
asgn
init
end
_______________

Name: nativeTokenPriceCumulative Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_125

Name: REF_125 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_4 (-> ['twapData']), Field: nativeTokenPriceCumulative
#################
Member: 
Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
Fieldf: 
Name: nativeTokenPriceCumulative Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_125 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: nativeTokenPriceCumulative Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_27(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_5 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
Name: reserveNative, Num: 1
Globalname: reserveNative
Name: reserveForeign, Num: 1
Globalname: reserveForeign
End popogation

Name: vaderPool Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxUpdateWindow Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: totalLiquidityWeight Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TUPLE_9(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:vaderPool_8(IVaderPoolV2), function:getReserves, arguments:['foreignAsset_1']  
High Call: getReserves
Running querryfc
Written func info: VaderPoolV2, getReserves
Handling balance function!
13
Finding type for hlc_3([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10d9c10>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10d9dc0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb2b10d9f70>] ... )
[i]Type for TUPLE_9

Name: TUPLE_9 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
vaderPool_9(IVaderPoolV2) := ϕ(['vaderPool_1', 'vaderPool_9', 'vaderPool_8', 'vaderPool_4'])
Phi
[i]Type for vaderPool

Name: vaderPool Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
usdvPairs_10(IERC20[]) := ϕ(['usdvPairs_3', 'usdvPairs_2', 'usdvPairs_5', 'usdvPairs_1', 'usdvPairs_9', 'usdvPairs_4', 'usdvPairs_13'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxUpdateWindow_18(uint256) := ϕ(['maxUpdateWindow_17', 'maxUpdateWindow_12', 'maxUpdateWindow_13', 'maxUpdateWindow_20', 'maxUpdateWindow_19'])
Phi
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalLiquidityWeight_24(uint256[2]) := ϕ(['totalLiquidityWeight_17', 'totalLiquidityWeight_4', 'totalLiquidityWeight_26', 'totalLiquidityWeight_19', 'totalLiquidityWeight_2', 'totalLiquidityWeight_23', 'totalLiquidityWeight_1'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
previousPrices_35(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_34', 'previousPrices_28', 'previousPrices_7', 'previousPrices_25', 'previousPrices_9', 'previousPrices_30', 'previousPrices_21', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveNative_1(uint256)= UNPACK TUPLE_9 index: 0 
Finding type for reserveNative(uint256 ... )
[i]Type for reserveNative

Name: reserveNative Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserveForeign_1(uint256)= UNPACK TUPLE_9 index: 1 
Finding type for reserveForeign(uint256 ... )
[i]Type for reserveForeign

Name: reserveForeign Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
Name: reserveNative, Num: 1
Globalname: reserveNative
Name: reserveForeign, Num: 1
Globalname: reserveForeign
Name: pairLiquidityEvaluation, Num: 1
Globalname: pairLiquidityEvaluation
End popogation
REF_127(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
init
end
_______________

Name: Paths.USDV Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_127

Name: Paths.USDV Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_167 = CONVERT REF_127 to uint256
Converting REF_127

Name: Paths.USDV Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_167

Name: TMP_167 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_128(uint256) -> previousPrices_35[TMP_167]
INDEX
[i]Type for REF_128

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_168(uint256) = reserveNative_1 (c)* REF_128
testing mul...
init
end
init
end

Name: reserveNative Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: previousPrices Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_168

Name: TMP_168 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_169 = CONVERT foreignAsset_1 to address
Converting foreignAsset_1

Name: foreignAsset_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: foreignAsset_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_169

Name: TMP_169 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_170(uint256) = INTERNAL_CALL, LiquidityBasedTWAP.getChainlinkPrice(address)(TMP_169)
init
end
init
end
_______________

Name: PIC_12 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_170

Name: TMP_170 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_171(uint256) = reserveForeign_1 (c)* TMP_170
testing mul...
init
end
init
end

Name: reserveForeign Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_170 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: TMP_170 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_172(uint256) = TMP_168 (c)+ TMP_171
init
end
init
end
init
end
_______________

Name: TMP_171 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairLiquidityEvaluation_1(uint256) := TMP_172(uint256)
asgn
init
end
_______________

Name: TMP_172 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pairLiquidityEvaluation

Name: pairLiquidityEvaluation Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pairData, Num: 6 (-> ['twapData'])
Globalname: pairData
End popogation
Name: pairData, Num: 6 (-> ['twapData'])
Globalname: pairData

Name: pairData Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
Phid

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_129(uint256) -> pairData_5 (-> ['twapData']).pastLiquidityEvaluation
MEMBER
init
end
init
end
[i]Type for REF_129

Name: pairData.pastLiquidityEvaluation Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_5 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: pairData.pastLiquidityEvaluation Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pairData_6 (-> ['twapData'])(ILiquidityBasedTWAP.ExchangePair) := ϕ(["pairData_5 (-> ['twapData'])"])
Phi
init
end
_______________

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
[i]Type for pairData

Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
XXXX
REF_129 (->pairData_6 (-> ['twapData'])) := pairLiquidityEvaluation_1(uint256)
asgn
init
end
_______________

Name: pairLiquidityEvaluation Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_129

Name: REF_129 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pairData_5 (-> ['twapData']), Field: pastLiquidityEvaluation
#################
Member: 
Name: pairData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: pastLiquidityEvaluation, nativeTokenPriceCumulative, lastMeasurement, updatePeriod, foreignUnit
Finance Type: undef
Fieldf: 
Name: pastLiquidityEvaluation Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_129 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: pastLiquidityEvaluation Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
twapData_28(mapping(address => ILiquidityBasedTWAP.ExchangePair)) := ϕ(["pairData_6 (-> ['twapData'])"])
Phi
[i]Type for twapData

Name: twapData Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: totalLiquidityWeight Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_130(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
init
end
_______________

Name: Paths.USDV Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_130

Name: Paths.USDV Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_173 = CONVERT REF_130 to uint256
Converting REF_130

Name: Paths.USDV Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_173

Name: TMP_173 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_131(uint256) -> totalLiquidityWeight_25[TMP_173]
INDEX
[i]Type for REF_131

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
totalLiquidityWeight_26(uint256[2]) := ϕ(['totalLiquidityWeight_25'])
Phi
[i]Type for totalLiquidityWeight

Name: totalLiquidityWeight Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_131(-> totalLiquidityWeight_26) = REF_131 (c)+ pairLiquidityEvaluation_1
init
end
init
end
init
end
_______________

Name: pairLiquidityEvaluation Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_131

Name: REF_131 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
End popogation

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_133 -> LENGTH usdvPairs_11
[i]Type for REF_133

Name: REF_133 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_175(uint256) := REF_133(uint256)
asgn
init
end
_______________

Name: REF_133 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for TMP_175

Name: TMP_175 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_176(uint256) = TMP_175 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_176

Name: TMP_176 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
usdvPairs_12(IERC20[]) := ϕ(['usdvPairs_11'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_133 (->usdvPairs_12) := TMP_176(uint256)
asgn
init
end
_______________

Name: TMP_176 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_133

Name: REF_133 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_134(IERC20) -> usdvPairs_12[TMP_175]
INDEX
[i]Type for REF_134

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
usdvPairs_13(IERC20[]) := ϕ(['usdvPairs_12'])
Phi
[i]Type for usdvPairs

Name: usdvPairs Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_134 (->usdvPairs_13) := foreignAsset_1(IERC20)
asgn
init
end
_______________

Name: foreignAsset_1 Function: _addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_134

Name: REF_134 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: updatePeriod, Num: 1
Globalname: updatePeriod
End popogation
TMP_177(bool) = maxUpdateWindow_19 < updatePeriod_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: maxUpdateWindow Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: maxUpdateWindow Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_177

Name: TMP_177 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
maxUpdateWindow_20(uint256) := updatePeriod_1(uint256)
asgn
init
end
_______________

Name: updatePeriod_1 Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for maxUpdateWindow

Name: maxUpdateWindow Function: _addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation


previousPrices_26(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
MODIFIER_CALL, Ownable.onlyOwner()()
REF_111(ILiquidityBasedTWAP.Paths) -> Paths.USDV
TMP_143 = CONVERT REF_111 to uint256
REF_112(uint256) -> previousPrices_27[TMP_143]
TMP_144(bool) = REF_112 == 0
TMP_145(None) = SOLIDITY_CALL require(bool,string)(TMP_144,LBTWAP::setupUSDV: Already Initialized)
REF_113(ILiquidityBasedTWAP.Paths) -> Paths.USDV
TMP_146 = CONVERT REF_113 to uint256
REF_114(uint256) -> previousPrices_27[TMP_146]
previousPrices_28(uint256[2]) := ϕ(['previousPrices_27'])
REF_114 (->previousPrices_28) := usdvPrice_1(uint256)
INTERNAL_CALL, LiquidityBasedTWAP._addUSDVPair(IERC20,IAggregatorV3,uint256)(foreignAsset_1,oracle_1,updatePeriod_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: previousPrices Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
previousPrices_26(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Ownable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
REF_111(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
init
end
_______________

Name: Paths.USDV Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_111

Name: Paths.USDV Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_143 = CONVERT REF_111 to uint256
Converting REF_111

Name: Paths.USDV Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_143

Name: TMP_143 Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_112(uint256) -> previousPrices_27[TMP_143]
INDEX
[i]Type for REF_112

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_144(bool) = REF_112 == 0
[i]Type for TMP_144

Name: TMP_144 Function: setupUSDV
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_145(None) = SOLIDITY_CALL require(bool,string)(TMP_144,LBTWAP::setupUSDV: Already Initialized)
[i]Type for TMP_145

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: usdvPrice, Num: 1
Globalname: usdvPrice
End popogation

Name: previousPrices Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_113(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
init
end
_______________

Name: Paths.USDV Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_113

Name: Paths.USDV Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_146 = CONVERT REF_113 to uint256
Converting REF_113

Name: Paths.USDV Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_146

Name: TMP_146 Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_114(uint256) -> previousPrices_27[TMP_146]
INDEX
[i]Type for REF_114

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
previousPrices_28(uint256[2]) := ϕ(['previousPrices_27'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_114 (->previousPrices_28) := usdvPrice_1(uint256)
asgn
init
end
_______________

Name: usdvPrice Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_114

Name: REF_114 Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
Name: oracle, Num: 1
Globalname: oracle
Name: updatePeriod, Num: 1
Globalname: updatePeriod
End popogation
INTERNAL_CALL, LiquidityBasedTWAP._addUSDVPair(IERC20,IAggregatorV3,uint256)(foreignAsset_1,oracle_1,updatePeriod_1)
init
end
init
end
init
end
State_var: totalLiquidityWeight
State_var: twapData
State_var: usdvPairs
State_var: previousPrices
State_var: vaderPairs
State_var: vader
State_var: oracles
State_var: vaderPool
State_var: maxUpdateWindow
State_var: _owner



addUSDVPair
Finding type for foreignAsset(IERC20 ... )
Finding type for oracle(IAggregatorV3 ... )
Finding type for updatePeriod(uint256 ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


previousPrices_29(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
MODIFIER_CALL, Ownable.onlyOwner()()
REF_115(ILiquidityBasedTWAP.Paths) -> Paths.USDV
TMP_149 = CONVERT REF_115 to uint256
REF_116(uint256) -> previousPrices_30[TMP_149]
TMP_150(bool) = REF_116 != 0
TMP_151(None) = SOLIDITY_CALL require(bool,string)(TMP_150,LBTWAP::addUSDVPair: USDV Uninitialized)
INTERNAL_CALL, LiquidityBasedTWAP._addUSDVPair(IERC20,IAggregatorV3,uint256)(foreignAsset_1,oracle_1,updatePeriod_1)


Propogating parameters and globals to SSA variables...
End popogation
Name: previousPrices, Num: 29
Globalname: previousPrices
global...

Name: previousPrices Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
previousPrices_29(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Ownable.onlyOwner()()
Propogating parameters and globals to SSA variables...
Name: previousPrices, Num: 30
Globalname: previousPrices
global...

Name: previousPrices Function: setupUSDV
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_115(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
[i]Type for REF_115

Name: Paths.USDV Function: addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_149 = CONVERT REF_115 to uint256
Converting REF_115

Name: Paths.USDV Function: addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_149

Name: TMP_149 Function: addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_116(uint256) -> previousPrices_30[TMP_149]
INDEX
[i]Type for REF_116

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_150(bool) = REF_116 != 0
[i]Type for TMP_150

Name: TMP_150 Function: addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_151(None) = SOLIDITY_CALL require(bool,string)(TMP_150,LBTWAP::addUSDVPair: USDV Uninitialized)
[i]Type for TMP_151

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
Name: updatePeriod, Num: 1
Globalname: updatePeriod
Name: oracle, Num: 1
Globalname: oracle
End popogation
INTERNAL_CALL, LiquidityBasedTWAP._addUSDVPair(IERC20,IAggregatorV3,uint256)(foreignAsset_1,oracle_1,updatePeriod_1)
init
end
init
end
init
end


previousPrices_29(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
MODIFIER_CALL, Ownable.onlyOwner()()
REF_115(ILiquidityBasedTWAP.Paths) -> Paths.USDV
TMP_149 = CONVERT REF_115 to uint256
REF_116(uint256) -> previousPrices_30[TMP_149]
TMP_150(bool) = REF_116 != 0
TMP_151(None) = SOLIDITY_CALL require(bool,string)(TMP_150,LBTWAP::addUSDVPair: USDV Uninitialized)
INTERNAL_CALL, LiquidityBasedTWAP._addUSDVPair(IERC20,IAggregatorV3,uint256)(foreignAsset_1,oracle_1,updatePeriod_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: previousPrices Function: addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
previousPrices_29(uint256[2]) := ϕ(['previousPrices_4', 'previousPrices_0', 'previousPrices_28', 'previousPrices_9', 'previousPrices_7', 'previousPrices_25', 'previousPrices_21', 'previousPrices_30', 'previousPrices_36'])
Phi
[i]Type for previousPrices

Name: previousPrices Function: addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Ownable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
REF_115(ILiquidityBasedTWAP.Paths) -> Paths.USDV
MEMBER
init
init
end
init
end
_______________

Name: Paths.USDV Function: addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_115

Name: Paths.USDV Function: addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Paths, Field: USDV
#################
Member: 
Name: Paths Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: VADER, USDV
Finance Type: undef
Fieldf: 
Name: USDV Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Paths.USDV Function: addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: USDV Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_149 = CONVERT REF_115 to uint256
Converting REF_115

Name: Paths.USDV Function: addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: Paths.USDV Function: addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_149

Name: TMP_149 Function: addUSDVPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_116(uint256) -> previousPrices_30[TMP_149]
INDEX
[i]Type for REF_116

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_150(bool) = REF_116 != 0
[i]Type for TMP_150

Name: TMP_150 Function: addUSDVPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_151(None) = SOLIDITY_CALL require(bool,string)(TMP_150,LBTWAP::addUSDVPair: USDV Uninitialized)
[i]Type for TMP_151

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: foreignAsset, Num: 1
Globalname: foreignAsset
Name: updatePeriod, Num: 1
Globalname: updatePeriod
Name: oracle, Num: 1
Globalname: oracle
End popogation
INTERNAL_CALL, LiquidityBasedTWAP._addUSDVPair(IERC20,IAggregatorV3,uint256)(foreignAsset_1,oracle_1,updatePeriod_1)
init
end
init
end
init
end
State_var: totalLiquidityWeight
State_var: twapData
State_var: usdvPairs
State_var: previousPrices
State_var: vaderPairs
State_var: vader
State_var: oracles
State_var: vaderPool
State_var: maxUpdateWindow
State_var: _owner



_addUSDVPair
State_var: totalLiquidityWeight
State_var: twapData
State_var: usdvPairs
State_var: previousPrices
State_var: vaderPairs
State_var: vader
State_var: oracles
State_var: vaderPool
State_var: maxUpdateWindow
State_var: _owner
Address: 1, Label: global:vader
Address: 2, Label: global:USDC
Address: 3, Label: global:_owner
Address: -999, Label: constructor:_vader
Address: -998, Label: getChainlinkPrice:asset
Address: 4, Label: getChainlinkPrice:oracle
Address: 5, Label: global:FixedPoint
Address: 6, Label: _updateVaderPrice:pair
Address: 7, Label: global:UniswapV2OracleLibrary
Address: 8, Label: _addVaderPair:oracle_1
Address: 9, Label: _addVaderPair:pair_1
Address: 10, Label: _updateUSDVPrice:vaderPool
Address: 11, Label: _addUSDVPair:oracle_1
Address: 12, Label: _addUSDVPair:TMP_162
Address: 13, Label: _addUSDVPair:vaderPool
Head Addr: 1
    Norm: 18
    Set: {1}
    Fin: NULL
Head Addr: 2
    Norm: 6
    Set: {2}
    Fin: NULL
Head Addr: 3
    Norm: 0
    Set: {3}
    Fin: NULL
Head Addr: -999
    Norm: 18
    Set: {-999}
    Fin: NULL
Head Addr: -998
    Norm: 6
    Set: {-998}
    Fin: NULL
Head Addr: 4
    Norm: u
    Set: {4}
    Fin: NULL
Head Addr: 5
    Norm: u
    Set: {5}
    Fin: NULL
Head Addr: 6
    Norm: u
    Set: {6}
    Fin: NULL
Head Addr: 7
    Norm: u
    Set: {7}
    Fin: NULL
Head Addr: 8
    Norm: u
    Set: {8}
    Fin: NULL
Head Addr: 9
    Norm: u
    Set: {9}
    Fin: NULL
Head Addr: 10
    Norm: u
    Set: {10}
    Fin: NULL
Head Addr: 11
    Norm: u
    Set: {11}
    Fin: NULL
Head Addr: 12
    Norm: u
    Set: {12}
    Fin: NULL
Head Addr: 13
    Norm: u
    Set: {13}
    Fin: NULL
Function count: 35
Executing Group 21
[*] Tested 7 warnings for Vader Protocol p3
Group 21 complete
