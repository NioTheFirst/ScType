Switched global version to 0.8.10
Checking OptimisticLedgerLib
Checking Fixed18Lib
Checking UFixed18Lib
Add to address_to_label {'settleAccount:account': -999}
IN KEY: settleAccount_self_shortfall
State_var: BASE
Finding type for BASE(int256 ... )



creditAccount
State_var: BASE



debitAccount
State_var: BASE



settleAccount
Finding type for self(OptimisticLedger ... )
settleAccount
self
balances
OUT KEY: settleAccount_self_balances
settleAccount
self
total
OUT KEY: settleAccount_self_total
settleAccount
self
shortfall
OUT KEY: settleAccount_self_shortfall
([-1], [-1], ['u'], -1, None)
Finding type for account(address ... )
prev address? u
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
Finding type for amount(Fixed18 ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: [<slither.core.variables.structure_variable.StructureVariable object at 0x7fd7d901e2b0>]
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: account
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


REF_17(mapping(address => UFixed18)) -> self_1 (-> []).balances
REF_18(UFixed18) -> REF_17[account_1]
TMP_4(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.from(UFixed18), arguments:['REF_18'] 
TMP_5(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.add(Fixed18,Fixed18), arguments:['TMP_4', 'amount_1'] 
newBalance_1(Fixed18) := TMP_5(Fixed18)
TMP_6(int256) = 1 (c)+ 1
a_1(int256) := TMP_6(int256)
TMP_7(int256) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.sign(Fixed18), arguments:['newBalance_1'] 
TMP_8(uint256) = 0 (c)- 1
TMP_9(bool) = TMP_7 == TMP_8
CONDITION TMP_9
shortfall_2(UFixed18) := ϕ(['shortfall_0', 'shortfall_1'])
newBalance_3(Fixed18) := ϕ(['newBalance_1', 'newBalance_2'])
REF_25(mapping(address => UFixed18)) -> self_1 (-> []).balances
REF_26(UFixed18) -> REF_25[account_1]
TMP_12(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_3'] 
self_2 (-> [])(OptimisticLedger) := ϕ(['self_1 (-> [])'])
REF_26 (->self_2 (-> [])) := TMP_12(UFixed18)
REF_21(UFixed18) -> self_1 (-> []).shortfall
TMP_10(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_1'] 
TMP_11(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_21', 'TMP_10'] 
shortfall_1(UFixed18) := TMP_11(UFixed18)
REF_28(UFixed18) -> self_2 (-> []).shortfall
REF_29(UFixed18) -> self_2 (-> []).shortfall
TMP_13(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_29', 'shortfall_2'] 
self_3 (-> [])(OptimisticLedger) := ϕ(['self_2 (-> [])'])
REF_28 (->self_3 (-> [])) := TMP_13(UFixed18)
REF_24(Fixed18) -> Fixed18Lib.ZERO
newBalance_2(Fixed18) := REF_24(Fixed18)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: self, Num: 1 (-> [])
Globalname: self
Name: amount, Num: 1
Globalname: amount
Name: newBalance, Num: 1
Globalname: newBalance
End popogation
REF_17(mapping(address => UFixed18)) -> self_1 (-> []).balances
MEMBER
init
end
init
end
No field found
[i]Type for REF_17

Name: self.balances Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: self_1 (-> []), Field: balances
init
end
Finance type key: (-1, -1)
XXXX
REF_18(UFixed18) -> REF_17[account_1]
INDEX
[i]Type for REF_18

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_4(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.from(UFixed18), arguments:['REF_18'] 
Written func info: Fixed18Lib, from
[i]Type for TMP_4

Name: TMP_4 Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_5(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.add(Fixed18,Fixed18), arguments:['TMP_4', 'amount_1'] 
init
end
init
end
init
end
[i]Type for TMP_5

Name: TMP_5 Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newBalance_1(Fixed18) := TMP_5(Fixed18)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newBalance

Name: newBalance Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: a, Num: 1
Globalname: a
End popogation
TMP_6(int256) = 1 (c)+ 1
init
end
init
end
init
end
[i]Type for TMP_6

Name: TMP_6 Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
a_1(int256) := TMP_6(int256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for a

Name: a Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_7(int256) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.sign(Fixed18), arguments:['newBalance_1'] 
Written func info: Fixed18Lib, sign
[i]Type for TMP_7

Name: TMP_7 Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_8(uint256) = 0 (c)- 1
init
end
init
end
init
end
[i]Type for TMP_8

Name: TMP_8 Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
TMP_9(bool) = TMP_7 == TMP_8
[i]Type for TMP_9

Name: TMP_9 Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: shortfall, Num: 2
Globalname: shortfall

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: newBalance, Num: 3
Globalname: newBalance

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
shortfall_2(UFixed18) := ϕ(['shortfall_0', 'shortfall_1'])
Phi
[i]Type for shortfall

Name: shortfall Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newBalance_3(Fixed18) := ϕ(['newBalance_1', 'newBalance_2'])
Phi
init
end
[i]Type for newBalance

Name: newBalance Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: self, Num: 2 (-> [])
Globalname: self
End popogation
Name: self, Num: 2 (-> [])
Globalname: self

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_25(mapping(address => UFixed18)) -> self_1 (-> []).balances
MEMBER
init
end
init
end
[i]Type for REF_25

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: self_1 (-> []), Field: balances
init
end
Finance type key: (-1, -1)
XXXX
REF_26(UFixed18) -> REF_25[account_1]
INDEX
[i]Type for REF_26

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_12(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_3'] 
Written func info: Fixed18Lib, abs
Retvar: ('t', ['1'], ['-1'], 1, "'u'", None)
([-1], [-1, -1], 'u', "'u'", None, -1)
[i]Type for TMP_12

Name: TMP_12 Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
self_2 (-> [])(OptimisticLedger) := ϕ(['self_1 (-> [])'])
Phi
[i]Type for self

Name: self Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balances
Finance Type: undef
XXXX
REF_26 (->self_2 (-> [])) := TMP_12(UFixed18)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_26

Name: REF_26 Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: self, Num: 1 (-> [])
Globalname: self
Name: shortfall, Num: 1
Globalname: shortfall
End popogation
REF_21(UFixed18) -> self_1 (-> []).shortfall
MEMBER
init
end
init
end
[i]Type for REF_21

Name: self.shortfall Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
Root: self_1 (-> []), Field: shortfall
init
end
Finance type key: (-1, -1)
XXXX
TMP_10(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_1'] 
Written func info: Fixed18Lib, abs
Retvar: ('t', ['1'], ['-1'], 1, "'u'", None)
([-1], [-1, -1], 'u', "'u'", None, -1)
[i]Type for TMP_10

Name: TMP_10 Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_11(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_21', 'TMP_10'] 
init
end
init
end
init
end
[i]Type for TMP_11

Name: TMP_11 Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
shortfall_1(UFixed18) := TMP_11(UFixed18)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for shortfall

Name: shortfall Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: self, Num: 2 (-> [])
Globalname: self
Name: shortfall, Num: 2
Globalname: shortfall
Name: self, Num: 3 (-> [])
Globalname: self
End popogation
Name: self, Num: 3 (-> [])
Globalname: self

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_28(UFixed18) -> self_2 (-> []).shortfall
MEMBER
init
end
init
end
OUT KEY: settleAccount_self_shortfall
([-1], [-1], ['u'], -1, None)
([-1], [-1], ['u'], -1, None)
[i]Type for REF_28

Name: self.shortfall Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
Root: self_2 (-> []), Field: shortfall
init
end
Finance type key: (-1, -1)
XXXX
REF_29(UFixed18) -> self_2 (-> []).shortfall
MEMBER
init
end
init
end
[i]Type for REF_29

Name: self.shortfall Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
Root: self_2 (-> []), Field: shortfall
init
end
Finance type key: (-1, -1)
XXXX
TMP_13(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_29', 'shortfall_2'] 
init
end
init
end
init
end
[i]Type for TMP_13

Name: TMP_13 Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
self_3 (-> [])(OptimisticLedger) := ϕ(['self_2 (-> [])'])
Phi
[i]Type for self

Name: self Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shortfall
Finance Type: undef
XXXX
REF_28 (->self_3 (-> [])) := TMP_13(UFixed18)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_28

Name: REF_28 Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: self_2 (-> []), Field: shortfall
init
end
Finance type key: (-1, -1)
XXXX
Propogating parameters and globals to SSA variables...
Name: newBalance, Num: 2
Globalname: newBalance
End popogation
REF_24(Fixed18) -> Fixed18Lib.ZERO
MEMBER
init
init
end
OUT KEY: global_Fixed18Lib_ZERO
OUT KEY: global_Fixed18Lib_ZERO
No field found
[i]Type for REF_24

Name: Fixed18Lib.ZERO Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Fixed18Lib, Field: ZERO
init
end
Finance type key: (-1, -1)
XXXX
newBalance_2(Fixed18) := REF_24(Fixed18)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newBalance

Name: newBalance Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


REF_17(mapping(address => UFixed18)) -> self_1 (-> []).balances
REF_18(UFixed18) -> REF_17[account_1]
TMP_4(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.from(UFixed18), arguments:['REF_18'] 
TMP_5(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.add(Fixed18,Fixed18), arguments:['TMP_4', 'amount_1'] 
newBalance_1(Fixed18) := TMP_5(Fixed18)
TMP_6(int256) = 1 (c)+ 1
a_1(int256) := TMP_6(int256)
TMP_7(int256) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.sign(Fixed18), arguments:['newBalance_1'] 
TMP_8(uint256) = 0 (c)- 1
TMP_9(bool) = TMP_7 == TMP_8
CONDITION TMP_9
shortfall_2(UFixed18) := ϕ(['shortfall_0', 'shortfall_1'])
newBalance_3(Fixed18) := ϕ(['newBalance_1', 'newBalance_2'])
REF_25(mapping(address => UFixed18)) -> self_1 (-> []).balances
REF_26(UFixed18) -> REF_25[account_1]
TMP_12(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_3'] 
self_2 (-> [])(OptimisticLedger) := ϕ(['self_1 (-> [])'])
REF_26 (->self_2 (-> [])) := TMP_12(UFixed18)
REF_21(UFixed18) -> self_1 (-> []).shortfall
TMP_10(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_1'] 
TMP_11(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_21', 'TMP_10'] 
shortfall_1(UFixed18) := TMP_11(UFixed18)
REF_28(UFixed18) -> self_2 (-> []).shortfall
REF_29(UFixed18) -> self_2 (-> []).shortfall
TMP_13(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_29', 'shortfall_2'] 
self_3 (-> [])(OptimisticLedger) := ϕ(['self_2 (-> [])'])
REF_28 (->self_3 (-> [])) := TMP_13(UFixed18)
REF_24(Fixed18) -> Fixed18Lib.ZERO
newBalance_2(Fixed18) := REF_24(Fixed18)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: self, Num: 1 (-> [])
Globalname: self
Name: amount, Num: 1
Globalname: amount
Name: newBalance, Num: 1
Globalname: newBalance
End popogation
REF_17(mapping(address => UFixed18)) -> self_1 (-> []).balances
MEMBER
init
end
init
end
init
end
[i]Type for REF_17

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: self_1 (-> []), Field: balances
init
end
Finance type key: (-1, -1)
XXXX
REF_18(UFixed18) -> REF_17[account_1]
INDEX
[i]Type for REF_18

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_4(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.from(UFixed18), arguments:['REF_18'] 
Written func info: Fixed18Lib, from
[i]Type for TMP_4

Name: TMP_4 Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_5(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.add(Fixed18,Fixed18), arguments:['TMP_4', 'amount_1'] 
init
end
init
end
init
end
[i]Type for TMP_5

Name: TMP_5 Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newBalance_1(Fixed18) := TMP_5(Fixed18)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newBalance

Name: newBalance Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: a, Num: 1
Globalname: a
End popogation
TMP_6(int256) = 1 (c)+ 1
init
end
init
end
init
end
[i]Type for TMP_6

Name: TMP_6 Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
a_1(int256) := TMP_6(int256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for a

Name: a Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: newBalance, Num: 1
Globalname: newBalance
End popogation
TMP_7(int256) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.sign(Fixed18), arguments:['newBalance_1'] 
Written func info: Fixed18Lib, sign
[i]Type for TMP_7

Name: TMP_7 Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_8(uint256) = 0 (c)- 1
init
end
init
end
init
end
[i]Type for TMP_8

Name: TMP_8 Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
TMP_9(bool) = TMP_7 == TMP_8
[i]Type for TMP_9

Name: TMP_9 Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: shortfall, Num: 2
Globalname: shortfall

Name: shortfall Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: newBalance, Num: 3
Globalname: newBalance

Name: newBalance Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
shortfall_2(UFixed18) := ϕ(['shortfall_0', 'shortfall_1'])
Phi
init
end
[i]Type for shortfall

Name: shortfall Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newBalance_3(Fixed18) := ϕ(['newBalance_1', 'newBalance_2'])
Phi
init
end
[i]Type for newBalance

Name: newBalance Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: self, Num: 2 (-> [])
Globalname: self
End popogation
Name: self, Num: 2 (-> [])
Globalname: self

Name: self Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balances, shortfall
Finance Type: undef
Phid
REF_25(mapping(address => UFixed18)) -> self_1 (-> []).balances
MEMBER
init
end
init
end
init
end
[i]Type for REF_25

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: self_1 (-> []), Field: balances
init
end
Finance type key: (-1, -1)
XXXX
REF_26(UFixed18) -> REF_25[account_1]
INDEX
[i]Type for REF_26

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_12(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_3'] 
Written func info: Fixed18Lib, abs
Retvar: ('t', ['1'], ['-1'], 1, "'u'", None)
([-1], [-1, -1], 'u', "'u'", None, -1)
[i]Type for TMP_12

Name: TMP_12 Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
self_2 (-> [])(OptimisticLedger) := ϕ(['self_1 (-> [])'])
Phi
[i]Type for self

Name: self Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balances, shortfall
Finance Type: undef
XXXX
REF_26 (->self_2 (-> [])) := TMP_12(UFixed18)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_26

Name: REF_26 Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: newBalance, Num: 1
Globalname: newBalance
Name: self, Num: 1 (-> [])
Globalname: self
Name: shortfall, Num: 1
Globalname: shortfall
End popogation
REF_21(UFixed18) -> self_1 (-> []).shortfall
MEMBER
init
end
init
end
init
end
[i]Type for REF_21

Name: self.shortfall Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
Root: self_1 (-> []), Field: shortfall
init
end
Finance type key: (-1, -1)
XXXX
TMP_10(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_1'] 
Written func info: Fixed18Lib, abs
Retvar: ('t', ['1'], ['-1'], 1, "'u'", None)
([], [-1], 'u', "'u'", None, -1)
[i]Type for TMP_10

Name: TMP_10 Function: settleAccount
Num: 
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_11(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_21', 'TMP_10'] 
init
end
init
end
init
end
[i]Type for TMP_11

Name: TMP_11 Function: settleAccount
Num: 
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
shortfall_1(UFixed18) := TMP_11(UFixed18)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for shortfall

Name: shortfall Function: settleAccount
Num: 
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: self, Num: 2 (-> [])
Globalname: self
Name: self, Num: 3 (-> [])
Globalname: self
End popogation
Name: self, Num: 3 (-> [])
Globalname: self

Name: self Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shortfall
Finance Type: undef
Phid
REF_28(UFixed18) -> self_2 (-> []).shortfall
MEMBER
init
end
init
end
init
end
[i]Type for REF_28

Name: self.shortfall Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: self_2 (-> []), Field: shortfall
init
end
Finance type key: (-1, -1)
XXXX
REF_29(UFixed18) -> self_2 (-> []).shortfall
MEMBER
init
end
init
end
init
end
[i]Type for REF_29

Name: self.shortfall Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
Root: self_2 (-> []), Field: shortfall
init
end
Finance type key: (-1, -1)
XXXX
TMP_13(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_29', 'shortfall_2'] 
init
end
init
end
init
end
[i]Type for TMP_13

Name: TMP_13 Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
self_3 (-> [])(OptimisticLedger) := ϕ(['self_2 (-> [])'])
Phi
[i]Type for self

Name: self Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shortfall
Finance Type: undef
XXXX
REF_28 (->self_3 (-> [])) := TMP_13(UFixed18)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_28

Name: REF_28 Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: self_2 (-> []), Field: shortfall
init
end
Finance type key: (-1, -1)
XXXX
Propogating parameters and globals to SSA variables...
Name: newBalance, Num: 2
Globalname: newBalance
End popogation
REF_24(Fixed18) -> Fixed18Lib.ZERO
MEMBER
init
init
end
init
end
[i]Type for REF_24

Name: Fixed18Lib.ZERO Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Fixed18Lib, Field: ZERO
init
end
Finance type key: (-1, -1)
XXXX
newBalance_2(Fixed18) := REF_24(Fixed18)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newBalance

Name: newBalance Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


REF_17(mapping(address => UFixed18)) -> self_1 (-> []).balances
REF_18(UFixed18) -> REF_17[account_1]
TMP_4(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.from(UFixed18), arguments:['REF_18'] 
TMP_5(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.add(Fixed18,Fixed18), arguments:['TMP_4', 'amount_1'] 
newBalance_1(Fixed18) := TMP_5(Fixed18)
TMP_6(int256) = 1 (c)+ 1
a_1(int256) := TMP_6(int256)
TMP_7(int256) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.sign(Fixed18), arguments:['newBalance_1'] 
TMP_8(uint256) = 0 (c)- 1
TMP_9(bool) = TMP_7 == TMP_8
CONDITION TMP_9
shortfall_2(UFixed18) := ϕ(['shortfall_0', 'shortfall_1'])
newBalance_3(Fixed18) := ϕ(['newBalance_1', 'newBalance_2'])
REF_25(mapping(address => UFixed18)) -> self_1 (-> []).balances
REF_26(UFixed18) -> REF_25[account_1]
TMP_12(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_3'] 
self_2 (-> [])(OptimisticLedger) := ϕ(['self_1 (-> [])'])
REF_26 (->self_2 (-> [])) := TMP_12(UFixed18)
REF_21(UFixed18) -> self_1 (-> []).shortfall
TMP_10(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_1'] 
TMP_11(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_21', 'TMP_10'] 
shortfall_1(UFixed18) := TMP_11(UFixed18)
REF_28(UFixed18) -> self_2 (-> []).shortfall
REF_29(UFixed18) -> self_2 (-> []).shortfall
TMP_13(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_29', 'shortfall_2'] 
self_3 (-> [])(OptimisticLedger) := ϕ(['self_2 (-> [])'])
REF_28 (->self_3 (-> [])) := TMP_13(UFixed18)
REF_24(Fixed18) -> Fixed18Lib.ZERO
newBalance_2(Fixed18) := REF_24(Fixed18)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: self, Num: 1 (-> [])
Globalname: self
Name: amount, Num: 1
Globalname: amount
Name: newBalance, Num: 1
Globalname: newBalance
End popogation
REF_17(mapping(address => UFixed18)) -> self_1 (-> []).balances
MEMBER
init
end
init
end
init
end
[i]Type for REF_17

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: self_1 (-> []), Field: balances
init
end
Finance type key: (-1, -1)
XXXX
REF_18(UFixed18) -> REF_17[account_1]
INDEX
[i]Type for REF_18

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_4(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.from(UFixed18), arguments:['REF_18'] 
Written func info: Fixed18Lib, from
[i]Type for TMP_4

Name: TMP_4 Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_5(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.add(Fixed18,Fixed18), arguments:['TMP_4', 'amount_1'] 
init
end
init
end
init
end
[i]Type for TMP_5

Name: TMP_5 Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newBalance_1(Fixed18) := TMP_5(Fixed18)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newBalance

Name: newBalance Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_6(int256) = 1 (c)+ 1
init
end
init
end
init
end
[i]Type for TMP_6

Name: TMP_6 Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
a_1(int256) := TMP_6(int256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for a

Name: a Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: newBalance, Num: 1
Globalname: newBalance
End popogation
TMP_7(int256) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.sign(Fixed18), arguments:['newBalance_1'] 
Written func info: Fixed18Lib, sign
[i]Type for TMP_7

Name: TMP_7 Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_8(uint256) = 0 (c)- 1
init
end
init
end
init
end
[i]Type for TMP_8

Name: TMP_8 Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
TMP_9(bool) = TMP_7 == TMP_8
[i]Type for TMP_9

Name: TMP_9 Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: shortfall Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: newBalance Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
shortfall_2(UFixed18) := ϕ(['shortfall_0', 'shortfall_1'])
Phi
[i]Type for shortfall

Name: shortfall Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newBalance_3(Fixed18) := ϕ(['newBalance_1', 'newBalance_2'])
Phi
[i]Type for newBalance

Name: newBalance Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: self, Num: 2 (-> [])
Globalname: self
End popogation
Name: self, Num: 2 (-> [])
Globalname: self

Name: self Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balances, shortfall
Finance Type: undef
Phid
REF_25(mapping(address => UFixed18)) -> self_1 (-> []).balances
MEMBER
init
end
init
end
init
end
[i]Type for REF_25

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: self_1 (-> []), Field: balances
init
end
Finance type key: (-1, -1)
XXXX
REF_26(UFixed18) -> REF_25[account_1]
INDEX
[i]Type for REF_26

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_12(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_3'] 
Written func info: Fixed18Lib, abs
Retvar: ('t', ['1'], ['-1'], 1, "'u'", None)
([-1], [-1, -1], 'u', "'u'", None, -1)
[i]Type for TMP_12

Name: TMP_12 Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
self_2 (-> [])(OptimisticLedger) := ϕ(['self_1 (-> [])'])
Phi
[i]Type for self

Name: self Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balances, shortfall
Finance Type: undef
XXXX
REF_26 (->self_2 (-> [])) := TMP_12(UFixed18)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_26

Name: REF_26 Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: newBalance, Num: 1
Globalname: newBalance
Name: self, Num: 1 (-> [])
Globalname: self
End popogation
REF_21(UFixed18) -> self_1 (-> []).shortfall
MEMBER
init
end
init
end
init
end
[i]Type for REF_21

Name: self.shortfall Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
Root: self_1 (-> []), Field: shortfall
init
end
Finance type key: (-1, -1)
XXXX
TMP_10(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_1'] 
Written func info: Fixed18Lib, abs
Retvar: ('t', ['1'], ['-1'], 1, "'u'", None)
([], [-1], 'u', "'u'", None, -1)
[i]Type for TMP_10

Name: TMP_10 Function: settleAccount
Num: 
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_11(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_21', 'TMP_10'] 
init
end
init
end
init
end
-1
[i]Type for TMP_11

Name: TMP_11 Function: settleAccount
Num: 
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
shortfall_1(UFixed18) := TMP_11(UFixed18)
asgn
init
end
-1
Finance type key: (-1, -1)
[i]Type for shortfall

Name: shortfall Function: settleAccount
Num: 
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: self, Num: 2 (-> [])
Globalname: self
Name: self, Num: 3 (-> [])
Globalname: self
End popogation
Name: self, Num: 3 (-> [])
Globalname: self

Name: self Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shortfall
Finance Type: undef
Phid
REF_28(UFixed18) -> self_2 (-> []).shortfall
MEMBER
init
end
init
end
init
end
[i]Type for REF_28

Name: self.shortfall Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: self_2 (-> []), Field: shortfall
init
end
Finance type key: (-1, -1)
XXXX
REF_29(UFixed18) -> self_2 (-> []).shortfall
MEMBER
init
end
init
end
init
end
[i]Type for REF_29

Name: self.shortfall Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: -1
Fields: 
Finance Type: undef
Root: self_2 (-> []), Field: shortfall
init
end
Finance type key: (-1, -1)
XXXX
TMP_13(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_29', 'shortfall_2'] 
init
end
init
end
init
end
[i]Type for TMP_13

Name: TMP_13 Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
self_3 (-> [])(OptimisticLedger) := ϕ(['self_2 (-> [])'])
Phi
[i]Type for self

Name: self Function: settleAccount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: shortfall
Finance Type: undef
XXXX
REF_28 (->self_3 (-> [])) := TMP_13(UFixed18)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_28

Name: REF_28 Function: settleAccount
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: self_2 (-> []), Field: shortfall
init
end
Finance type key: (-1, -1)
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_24(Fixed18) -> Fixed18Lib.ZERO
MEMBER
init
init
end
init
end
[i]Type for REF_24

Name: Fixed18Lib.ZERO Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Fixed18Lib, Field: ZERO
init
end
Finance type key: (-1, -1)
XXXX
newBalance_2(Fixed18) := REF_24(Fixed18)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newBalance

Name: newBalance Function: settleAccount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
State_var: BASE



debit
State_var: BASE



resolve
State_var: BASE
Address: -999, Label: settleAccount:account
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
Function count: 1
Executing Group 18
[*] Tested 1 warnings for Perennial
Group 18 complete
Testing complete
