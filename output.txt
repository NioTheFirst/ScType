Switched global version to 0.8.4
Checking ConcentratedLiquidityPool
Checking IBentoBoxMinimal
Checking IMasterDeployer
Checking IPool
Checking IPositionManager
Checking ITridentCallee
Checking ITridentRouter
Checking RebaseLibrary
Checking DyDxMath
Checking FullMath
Checking SwapLib
Checking TickMath
Checking Ticks
Checking UnsafeMath
Finance file: ConcentratedLiquidityPool_ftypes.txt
Add to address_to_label {'global:token0': 1}
Add to address_to_label {'global:token0': 1, 'global:token1': 2}
Add to address_to_label {'global:token0': 1, 'global:token1': 2, 'global:barFeeTo': 3}
Add to address_to_label {'global:token0': 1, 'global:token1': 2, 'global:barFeeTo': 3, 'constructor:_token0': -999}
Add to address_to_label {'global:token0': 1, 'global:token1': 2, 'global:barFeeTo': 3, 'constructor:_token0': -999, 'constructor:_token1': -998}
Add to address_to_label {'global:token0': 1, 'global:token1': 2, 'global:barFeeTo': 3, 'constructor:_token0': -999, 'constructor:_token1': -998, 'burn:recipient': -997}
Add to address_to_label {'global:token0': 1, 'global:token1': 2, 'global:barFeeTo': 3, 'constructor:_token0': -999, 'constructor:_token1': -998, 'burn:recipient': -997, 'collect:recipient': -996}
Add to address_to_label {'global:token0': 1, 'global:token1': 2, 'global:barFeeTo': 3, 'constructor:_token0': -999, 'constructor:_token1': -998, 'burn:recipient': -997, 'collect:recipient': -996, 'swap:recipient': -995}
Reading f file...
['[*c]', 'ConcentratedLiquidityPool']
['[sefa]', 'DyDxMath', 'getDy', '1', "{c, -1, -1, 0, 'u', f:0}"]
['[sefa]', 'DyDxMath', 'getDx', '1', "{c, -1, -1, 0, 'u', f:0}"]
['[t]', 'global', 'feeGrowthGlobal0', 'f:10']
['[t]', 'global', 'feeGrowthGlobal1', 'f:10']
['[t]', 'burn', 'amount', 'f: 0']
Finding type for barFee(uint256 ... )
Finding type for feeGrowthGlobal0(uint256 ... )
{'global:token0': 1, 'global:token1': 2, 'global:barFeeTo': 3, 'constructor:_token0': -999, 'constructor:_token1': -998, 'burn:recipient': -997, 'collect:recipient': -996, 'swap:recipient': -995}
(-1, -1, 'u', None, -1, 10)
Finding type for feeGrowthGlobal1(uint256 ... )
{'global:token0': 1, 'global:token1': 2, 'global:barFeeTo': 3, 'constructor:_token0': -999, 'constructor:_token1': -998, 'burn:recipient': -997, 'collect:recipient': -996, 'swap:recipient': -995}
(-1, -1, 'u', None, -1, 10)
Finding type for lastObservation(uint32 ... )
Finding type for liquidity(uint128 ... )
Finding type for nearestTick(int24 ... )
Finding type for price(uint160 ... )
Finding type for secondsPerLiquidity(uint160 ... )
Finding type for swapFee(uint24 ... )
Finding type for ticks(mapping(int24 => Ticks.Tick) ... )
global
ticks
previousTick
OUT KEY: global_ticks_previousTick
global
ticks
nextTick
OUT KEY: global_ticks_nextTick
global
ticks
liquidity
OUT KEY: global_ticks_liquidity
global
ticks
feeGrowthOutside0
OUT KEY: global_ticks_feeGrowthOutside0
global
ticks
feeGrowthOutside1
OUT KEY: global_ticks_feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
OUT KEY: global_ticks_secondsPerLiquidityOutside
Finding type for token0(address ... )
prev address? u
Head Addr: 1
    Norm: 6
    Set: {1}
    Fin: NULL
Finding type for token1(address ... )
prev address? u
Head Addr: 2
    Norm: 18
    Set: {2}
    Fin: NULL
Finding type for reserve0(uint128 ... )
Finding type for reserve1(uint128 ... )
Finding type for bento(IBentoBoxMinimal ... )
Finding type for MAX_TICK(int24 ... )
Finding type for token0ProtocolFee(uint128 ... )
Finding type for token1ProtocolFee(uint128 ... )
Finding type for tickSpacing(uint24 ... )
Finding type for MAX_FEE(uint24 ... )
Finding type for MAX_TICK_LIQUIDITY(uint128 ... )
Finding type for positions(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) ... )
global
positions
liquidity
OUT KEY: global_positions_liquidity
global
positions
feeGrowthInside0Last
OUT KEY: global_positions_feeGrowthInside0Last
global
positions
feeGrowthInside1Last
OUT KEY: global_positions_feeGrowthInside1Last
Finding type for masterDeployer(IMasterDeployer ... )
Finding type for barFeeTo(address ... )
prev address? u
Head Addr: 3
    Norm: 0
    Set: {3}
    Fin: NULL
Finding type for unlocked(uint256 ... )



constructor
Finding type for _deployData(bytes ... )
Finding type for _masterDeployer(IMasterDeployer ... )
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


MAX_FEE_1(uint24) := ϕ(['MAX_FEE_0'])
TUPLE_0(address,address,uint24,uint160,uint24) = SOLIDITY_CALL abi.decode()(_deployData_1(address,address,uint24,uint160,uint24))
_token0_1(address)= UNPACK TUPLE_0 index: 0 
_token1_1(address)= UNPACK TUPLE_0 index: 1 
_swapFee_1(uint24)= UNPACK TUPLE_0 index: 2 
_price_1(uint160)= UNPACK TUPLE_0 index: 3 
_tickSpacing_1(uint24)= UNPACK TUPLE_0 index: 4 
TMP_0 = CONVERT 0 to address
TMP_1(bool) = _token0_1 != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool,string)(TMP_1,ZERO_ADDRESS)
TMP_3 = CONVERT this to address
TMP_4(bool) = _token0_1 != TMP_3
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,INVALID_TOKEN0)
TMP_6 = CONVERT this to address
TMP_7(bool) = _token1_1 != TMP_6
TMP_8(None) = SOLIDITY_CALL require(bool,string)(TMP_7,INVALID_TOKEN1)
TMP_9(bool) = _swapFee_1 <= MAX_FEE_1
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,INVALID_SWAP_FEE)
token0_1(address) := _token0_1(address)
token1_1(address) := _token1_1(address)
swapFee_1(uint24) := _swapFee_1(uint24)
price_1(uint160) := _price_1(uint160)
tickSpacing_1(uint24) := _tickSpacing_1(uint24)
TMP_11(uint128) = LIBRARY_CALL, dest:Ticks, function:Ticks.getMaxLiquidity(uint24), arguments:['_tickSpacing_1'] 
MAX_TICK_LIQUIDITY_1(uint128) := TMP_11(uint128)
REF_2(int24) -> TickMath.MIN_TICK
REF_3(Ticks.Tick) -> ticks_0[REF_2]
REF_5(int24) -> TickMath.MIN_TICK
REF_6(int24) -> TickMath.MAX_TICK
TMP_12 = CONVERT 0 to uint128
TMP_13 = new Tick(REF_5,REF_6,TMP_12,0,0,0)
ticks_1(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_0'])
REF_3 (->ticks_1) := TMP_13(Ticks.Tick)
REF_7(int24) -> TickMath.MAX_TICK
REF_8(Ticks.Tick) -> ticks_1[REF_7]
REF_10(int24) -> TickMath.MIN_TICK
REF_11(int24) -> TickMath.MAX_TICK
TMP_14 = CONVERT 0 to uint128
TMP_15 = new Tick(REF_10,REF_11,TMP_14,0,0,0)
ticks_2(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_1'])
REF_8 (->ticks_2) := TMP_15(Ticks.Tick)
REF_12(int24) -> TickMath.MIN_TICK
nearestTick_1(int24) := REF_12(int24)
TMP_16(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:bento, arguments:[]  
TMP_17 = CONVERT TMP_16 to IBentoBoxMinimal
bento_1(IBentoBoxMinimal) := TMP_17(IBentoBoxMinimal)
TMP_18(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFeeTo, arguments:[]  
barFeeTo_1(address) := TMP_18(address)
TMP_19(uint256) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFee, arguments:[]  
barFee_1(uint256) := TMP_19(uint256)
masterDeployer_1(IMasterDeployer) := _masterDeployer_1(IMasterDeployer)
unlocked_1(uint256) := 1(uint256)


Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
MAX_FEE_1
MAX_FEE
Name: MAX_FEE, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
MAX_FEE_1(uint24) := ϕ(['MAX_FEE_0'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_deployData_1
_deployData_1
_deployData
p.norm: u
Name: _deployData, Num: 1

Name: _deployData_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_tickSpacing_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_tickSpacing_1
_tickSpacing
Name: _tickSpacing, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token1_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token1_1
_token1
Name: _token1, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_price_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_price_1
_price
Name: _price, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token0_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token0_1
_token0
Name: _token0, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_swapFee_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_swapFee_1
_swapFee
Name: _swapFee, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
TUPLE_0(address,address,uint24,uint160,uint24) = SOLIDITY_CALL abi.decode()(_deployData_1(address,address,uint24,uint160,uint24))
[i]Type for TUPLE_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_token0_1(address)= UNPACK TUPLE_0 index: 0 
Finding type for _token0(address ... )
prev address? u
Head Addr: -999
    Norm: 6
    Set: {-999}
    Fin: NULL
[i]Type for _token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -999
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_token1_1(address)= UNPACK TUPLE_0 index: 1 
Finding type for _token1(address ... )
prev address? u
Head Addr: -998
    Norm: 18
    Set: {-998}
    Fin: NULL
[i]Type for _token1

Name: _token1 Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_swapFee_1(uint24)= UNPACK TUPLE_0 index: 2 
Finding type for _swapFee(uint24 ... )
[i]Type for _swapFee

Name: _swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_price_1(uint160)= UNPACK TUPLE_0 index: 3 
Finding type for _price(uint160 ... )
[i]Type for _price

Name: _price Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_tickSpacing_1(uint24)= UNPACK TUPLE_0 index: 4 
Finding type for _tickSpacing(uint24 ... )
[i]Type for _tickSpacing

Name: _tickSpacing Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_token0_1
_token0_1
_token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -999
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_0 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_0

Name: TMP_0 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_1(bool) = _token0_1 != TMP_0
[i]Type for TMP_1

Name: TMP_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_2(None) = SOLIDITY_CALL require(bool,string)(TMP_1,ZERO_ADDRESS)
[i]Type for TMP_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_token0_1
_token0_1
_token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -999
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_3 = CONVERT this to address
Converting this
new address made for this
prev address? u
global assignment: 4
4
4
[i]Type for TMP_3

Name: TMP_3 Function: constructor
Num: -1
Den: -1
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_4(bool) = _token0_1 != TMP_3
[i]Type for TMP_4

Name: TMP_4 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,INVALID_TOKEN0)
[i]Type for TMP_5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_token1_1
_token1_1
_token1

Name: _token1 Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_6 = CONVERT this to address
Converting this
4
[i]Type for TMP_6

Name: TMP_6 Function: constructor
Num: -1
Den: -1
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_7(bool) = _token1_1 != TMP_6
[i]Type for TMP_7

Name: TMP_7 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_8(None) = SOLIDITY_CALL require(bool,string)(TMP_7,INVALID_TOKEN1)
[i]Type for TMP_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
MAX_FEE_1
MAX_FEE_1
MAX_FEE

Name: MAX_FEE Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_swapFee_1
_swapFee_1
_swapFee

Name: _swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_9(bool) = _swapFee_1 <= MAX_FEE_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_9

Name: TMP_9 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,INVALID_SWAP_FEE)
[i]Type for TMP_10

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_token0_1
_token0_1
_token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -999
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_1
token0
Name: token0, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
token0_1(address) := _token0_1(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for token0

Name: token0 Function: constructor
Num: -1
Den: -1
Address: -999
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token0
 To type: None
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_token1_1
_token1_1
_token1

Name: _token1 Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_1
token1
Name: token1, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
token1_1(address) := _token1_1(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for token1

Name: token1 Function: constructor
Num: -1
Den: -1
Address: -998
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token1
 To type: None
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_swapFee_1
_swapFee_1
_swapFee

Name: _swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_1
swapFee
Name: swapFee, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
swapFee_1(uint24) := _swapFee_1(uint24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for swapFee

Name: swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied swapFee
 To type: None

Name: swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_price_1
_price_1
_price

Name: _price Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_1
price
Name: price, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
price_1(uint160) := _price_1(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for price

Name: price Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied price
 To type: None

Name: price Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_tickSpacing_1
_tickSpacing_1
_tickSpacing

Name: _tickSpacing Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tickSpacing_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tickSpacing_1
tickSpacing
Name: tickSpacing, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
tickSpacing_1(uint24) := _tickSpacing_1(uint24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for tickSpacing

Name: tickSpacing Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied tickSpacing
 To type: None

Name: tickSpacing Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_tickSpacing_1
_tickSpacing_1
_tickSpacing

Name: _tickSpacing Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_TICK_LIQUIDITY_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_TICK_LIQUIDITY_1
MAX_TICK_LIQUIDITY
Name: MAX_TICK_LIQUIDITY, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_11(uint128) = LIBRARY_CALL, dest:Ticks, function:Ticks.getMaxLiquidity(uint24), arguments:['_tickSpacing_1'] 
Written func info: Ticks, getMaxLiquidity
[i]Type for TMP_11

Name: TMP_11 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_TICK_LIQUIDITY_1(uint128) := TMP_11(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied MAX_TICK_LIQUIDITY
 To type: None

Name: MAX_TICK_LIQUIDITY Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_1
ticks
Name: ticks, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
ticks_1
ticks

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_2(int24) -> TickMath.MIN_TICK
MEMBER
init
init
end

Name: TickMath Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Typing member
OUT KEY: global_TickMath_MIN_TICK
OUT KEY: global_TickMath_MIN_TICK
No field found
[i]Type for REF_2

Name: TickMath.MIN_TICK Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MIN_TICK
init
end
Finance type key: (-1, -1)
XXXX
REF_3(Ticks.Tick) -> ticks_0[REF_2]
INDEX
[i]Type for REF_3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_5(int24) -> TickMath.MIN_TICK
MEMBER
init
init
end

Name: TickMath Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: MIN_TICK
Finance Type: undef
Typing member

Name: MIN_TICK Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_5

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MIN_TICK
F: MIN_TICK
init
end
Finance type key: (-1, -1)

Name: MIN_TICK Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_6(int24) -> TickMath.MAX_TICK
MEMBER
init
init
end

Name: TickMath Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: MIN_TICK
Finance Type: undef
Typing member
OUT KEY: global_TickMath_MAX_TICK
OUT KEY: global_TickMath_MAX_TICK
No field found
[i]Type for REF_6

Name: TickMath.MAX_TICK Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MAX_TICK
F: MIN_TICK
init
end
Finance type key: (-1, -1)
XXXX
TMP_12 = CONVERT 0 to uint128
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_12

Name: TMP_12 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_13 = new Tick(REF_5,REF_6,TMP_12,0,0,0)
[i]Type for TMP_13

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_1(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_0'])
Phi
[i]Type for ticks

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_3 (->ticks_1) := TMP_13(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_3

Name: REF_3 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied ticks
 To type: None

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_2
ticks
Name: ticks, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
ticks_2
ticks

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_7(int24) -> TickMath.MAX_TICK
MEMBER
init
init
end

Name: TickMath Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: MIN_TICK, MAX_TICK
Finance Type: undef
Typing member

Name: MAX_TICK Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_7

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MAX_TICK
F: MIN_TICK
F: MAX_TICK
init
end
Finance type key: (-1, -1)

Name: MAX_TICK Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_8(Ticks.Tick) -> ticks_1[REF_7]
INDEX
[i]Type for REF_8

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_10(int24) -> TickMath.MIN_TICK
MEMBER
init
init
end

Name: TickMath Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: MIN_TICK, MAX_TICK
Finance Type: undef
Typing member

Name: MIN_TICK Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_10

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MIN_TICK
F: MIN_TICK
init
end
Finance type key: (-1, -1)

Name: MIN_TICK Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_11(int24) -> TickMath.MAX_TICK
MEMBER
init
init
end

Name: TickMath Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: MIN_TICK, MAX_TICK
Finance Type: undef
Typing member

Name: MAX_TICK Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_11

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MAX_TICK
F: MIN_TICK
F: MAX_TICK
init
end
Finance type key: (-1, -1)

Name: MAX_TICK Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_14 = CONVERT 0 to uint128
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_14

Name: TMP_14 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_15 = new Tick(REF_10,REF_11,TMP_14,0,0,0)
[i]Type for TMP_15

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_2(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_1'])
Phi
[i]Type for ticks

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_8 (->ticks_2) := TMP_15(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_8

Name: REF_8 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied ticks
 To type: None

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_1
nearestTick
Name: nearestTick, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_12(int24) -> TickMath.MIN_TICK
MEMBER
init
init
end

Name: TickMath Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: MIN_TICK, MAX_TICK
Finance Type: undef
Typing member

Name: MIN_TICK Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_12

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MIN_TICK
F: MIN_TICK
init
end
Finance type key: (-1, -1)

Name: MIN_TICK Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_1(int24) := REF_12(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for nearestTick

Name: nearestTick Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied nearestTick
 To type: None

Name: nearestTick Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_masterDeployer_1
_masterDeployer_1
_masterDeployer
p.norm: u
Name: _masterDeployer, Num: 1

Name: _masterDeployer_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_1
bento
Name: bento, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_16(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:bento, arguments:[]  
High Call: bento
Running querryfc
Written func info: MasterDeployer, bento
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_16

Name: TMP_16 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_17 = CONVERT TMP_16 to IBentoBoxMinimal
Converting TMP_16

Name: TMP_16 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
BentoBoxMinimal
[i]Type for TMP_17

Name: TMP_17 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
bento_1(IBentoBoxMinimal) := TMP_17(IBentoBoxMinimal)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bento

Name: bento Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied bento
 To type: None

Name: bento Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_masterDeployer_1
_masterDeployer_1
_masterDeployer
p.norm: u
Name: _masterDeployer, Num: 1

Name: _masterDeployer_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_1
barFeeTo
Name: barFeeTo, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_18(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFeeTo, arguments:[]  
High Call: barFeeTo
Running querryfc
Written func info: MasterDeployer, barFeeTo
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_18

Name: TMP_18 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_1(address) := TMP_18(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for barFeeTo

Name: barFeeTo Function: constructor
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
Copied barFeeTo
 To type: None
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_masterDeployer_1
_masterDeployer_1
_masterDeployer
p.norm: u
Name: _masterDeployer, Num: 1

Name: _masterDeployer_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFee_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFee_1
barFee
Name: barFee, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_19(uint256) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFee, arguments:[]  
High Call: barFee
Running querryfc
Written func info: MasterDeployer, barFee
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_19

Name: TMP_19 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_1(uint256) := TMP_19(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for barFee

Name: barFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied barFee
 To type: None

Name: barFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_masterDeployer_1
_masterDeployer_1
_masterDeployer
p.norm: u
Name: _masterDeployer, Num: 1

Name: _masterDeployer_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
masterDeployer_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
masterDeployer_1
masterDeployer
Name: masterDeployer, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
masterDeployer_1(IMasterDeployer) := _masterDeployer_1(IMasterDeployer)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for masterDeployer

Name: masterDeployer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied masterDeployer
 To type: None

Name: masterDeployer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unlocked_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unlocked_1
unlocked
Name: unlocked, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
unlocked_1(uint256) := 1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for unlocked

Name: unlocked Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Copied unlocked
 To type: None

Name: unlocked Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef


MAX_FEE_1(uint24) := ϕ(['MAX_FEE_0'])
TUPLE_0(address,address,uint24,uint160,uint24) = SOLIDITY_CALL abi.decode()(_deployData_1(address,address,uint24,uint160,uint24))
_token0_1(address)= UNPACK TUPLE_0 index: 0 
_token1_1(address)= UNPACK TUPLE_0 index: 1 
_swapFee_1(uint24)= UNPACK TUPLE_0 index: 2 
_price_1(uint160)= UNPACK TUPLE_0 index: 3 
_tickSpacing_1(uint24)= UNPACK TUPLE_0 index: 4 
TMP_0 = CONVERT 0 to address
TMP_1(bool) = _token0_1 != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool,string)(TMP_1,ZERO_ADDRESS)
TMP_3 = CONVERT this to address
TMP_4(bool) = _token0_1 != TMP_3
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,INVALID_TOKEN0)
TMP_6 = CONVERT this to address
TMP_7(bool) = _token1_1 != TMP_6
TMP_8(None) = SOLIDITY_CALL require(bool,string)(TMP_7,INVALID_TOKEN1)
TMP_9(bool) = _swapFee_1 <= MAX_FEE_1
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,INVALID_SWAP_FEE)
token0_1(address) := _token0_1(address)
token1_1(address) := _token1_1(address)
swapFee_1(uint24) := _swapFee_1(uint24)
price_1(uint160) := _price_1(uint160)
tickSpacing_1(uint24) := _tickSpacing_1(uint24)
TMP_11(uint128) = LIBRARY_CALL, dest:Ticks, function:Ticks.getMaxLiquidity(uint24), arguments:['_tickSpacing_1'] 
MAX_TICK_LIQUIDITY_1(uint128) := TMP_11(uint128)
REF_2(int24) -> TickMath.MIN_TICK
REF_3(Ticks.Tick) -> ticks_0[REF_2]
REF_5(int24) -> TickMath.MIN_TICK
REF_6(int24) -> TickMath.MAX_TICK
TMP_12 = CONVERT 0 to uint128
TMP_13 = new Tick(REF_5,REF_6,TMP_12,0,0,0)
ticks_1(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_0'])
REF_3 (->ticks_1) := TMP_13(Ticks.Tick)
REF_7(int24) -> TickMath.MAX_TICK
REF_8(Ticks.Tick) -> ticks_1[REF_7]
REF_10(int24) -> TickMath.MIN_TICK
REF_11(int24) -> TickMath.MAX_TICK
TMP_14 = CONVERT 0 to uint128
TMP_15 = new Tick(REF_10,REF_11,TMP_14,0,0,0)
ticks_2(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_1'])
REF_8 (->ticks_2) := TMP_15(Ticks.Tick)
REF_12(int24) -> TickMath.MIN_TICK
nearestTick_1(int24) := REF_12(int24)
TMP_16(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:bento, arguments:[]  
TMP_17 = CONVERT TMP_16 to IBentoBoxMinimal
bento_1(IBentoBoxMinimal) := TMP_17(IBentoBoxMinimal)
TMP_18(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFeeTo, arguments:[]  
barFeeTo_1(address) := TMP_18(address)
TMP_19(uint256) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFee, arguments:[]  
barFee_1(uint256) := TMP_19(uint256)
masterDeployer_1(IMasterDeployer) := _masterDeployer_1(IMasterDeployer)
unlocked_1(uint256) := 1(uint256)


Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
MAX_FEE_1
MAX_FEE

Name: MAX_FEE Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
MAX_FEE_1(uint24) := ϕ(['MAX_FEE_0'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_deployData_1
_deployData_1
_deployData
p.norm: u
Name: _deployData, Num: 1

Name: _deployData_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_tickSpacing_1

Name: _tickSpacing Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_tickSpacing_1
_tickSpacing
Name: _tickSpacing, Num: 1

Name: _tickSpacing Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token1_1

Name: _token1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token1_1
_token1
Name: _token1, Num: 1

Name: _token1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_price_1

Name: _price Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_price_1
_price
Name: _price, Num: 1

Name: _price Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token0_1

Name: _token0 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token0_1
_token0
Name: _token0, Num: 1

Name: _token0 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_swapFee_1

Name: _swapFee Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_swapFee_1
_swapFee
Name: _swapFee, Num: 1

Name: _swapFee Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
TUPLE_0(address,address,uint24,uint160,uint24) = SOLIDITY_CALL abi.decode()(_deployData_1(address,address,uint24,uint160,uint24))
[i]Type for TUPLE_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_token0_1(address)= UNPACK TUPLE_0 index: 0 
Finding type for _token0(address ... )
prev address? u
Head Addr: -999
    Norm: 6
    Set: {-999}
    Fin: NULL
[i]Type for _token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -999
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_token1_1(address)= UNPACK TUPLE_0 index: 1 
Finding type for _token1(address ... )
prev address? u
Head Addr: -998
    Norm: 18
    Set: {-998}
    Fin: NULL
[i]Type for _token1

Name: _token1 Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_swapFee_1(uint24)= UNPACK TUPLE_0 index: 2 
Finding type for _swapFee(uint24 ... )
[i]Type for _swapFee

Name: _swapFee Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_price_1(uint160)= UNPACK TUPLE_0 index: 3 
Finding type for _price(uint160 ... )
[i]Type for _price

Name: _price Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_tickSpacing_1(uint24)= UNPACK TUPLE_0 index: 4 
Finding type for _tickSpacing(uint24 ... )
[i]Type for _tickSpacing

Name: _tickSpacing Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_token0_1
_token0_1
_token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -999
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_0 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_0

Name: TMP_0 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_1(bool) = _token0_1 != TMP_0
[i]Type for TMP_1

Name: TMP_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_2(None) = SOLIDITY_CALL require(bool,string)(TMP_1,ZERO_ADDRESS)
[i]Type for TMP_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_token0_1
_token0_1
_token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -999
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_3 = CONVERT this to address
Converting this
4
[i]Type for TMP_3

Name: TMP_3 Function: constructor
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_4(bool) = _token0_1 != TMP_3
[i]Type for TMP_4

Name: TMP_4 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,INVALID_TOKEN0)
[i]Type for TMP_5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_token1_1
_token1_1
_token1

Name: _token1 Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_6 = CONVERT this to address
Converting this
4
[i]Type for TMP_6

Name: TMP_6 Function: constructor
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_7(bool) = _token1_1 != TMP_6
[i]Type for TMP_7

Name: TMP_7 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_8(None) = SOLIDITY_CALL require(bool,string)(TMP_7,INVALID_TOKEN1)
[i]Type for TMP_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
MAX_FEE_1
MAX_FEE_1
MAX_FEE

Name: MAX_FEE Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_swapFee_1
_swapFee_1
_swapFee
Name: _swapFee, Num: 1

Name: _swapFee Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_9(bool) = _swapFee_1 <= MAX_FEE_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_9

Name: TMP_9 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,INVALID_SWAP_FEE)
[i]Type for TMP_10

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_token0_1
_token0_1
_token0

Name: _token0 Function: constructor
Num: 
Den: 
Address: -999
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_1

Name: token0 Function: constructor
Num: -1
Den: -1
Address: -999
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
token0_1
token0

Name: token0 Function: constructor
Num: -1
Den: -1
Address: -999
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
token0_1(address) := _token0_1(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for token0

Name: token0 Function: constructor
Num: -1
Den: -1
Address: -999
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token0
 To type: None
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_token1_1
_token1_1
_token1

Name: _token1 Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_1

Name: token1 Function: constructor
Num: -1
Den: -1
Address: -998
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
token1_1
token1

Name: token1 Function: constructor
Num: -1
Den: -1
Address: -998
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
token1_1(address) := _token1_1(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for token1

Name: token1 Function: constructor
Num: -1
Den: -1
Address: -998
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token1
 To type: None
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_swapFee_1
_swapFee_1
_swapFee

Name: _swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_1

Name: swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_1
swapFee

Name: swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
swapFee_1(uint24) := _swapFee_1(uint24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for swapFee

Name: swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied swapFee
 To type: None

Name: swapFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_price_1
_price_1
_price
Name: _price, Num: 1

Name: _price Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_1

Name: price Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_1
price

Name: price Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
price_1(uint160) := _price_1(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for price

Name: price Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied price
 To type: None

Name: price Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_tickSpacing_1
_tickSpacing_1
_tickSpacing
Name: _tickSpacing, Num: 1

Name: _tickSpacing Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tickSpacing_1

Name: tickSpacing Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tickSpacing_1
tickSpacing

Name: tickSpacing Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
tickSpacing_1(uint24) := _tickSpacing_1(uint24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for tickSpacing

Name: tickSpacing Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied tickSpacing
 To type: None

Name: tickSpacing Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_tickSpacing_1
_tickSpacing_1
_tickSpacing
Name: _tickSpacing, Num: 1

Name: _tickSpacing Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_TICK_LIQUIDITY_1

Name: MAX_TICK_LIQUIDITY Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_TICK_LIQUIDITY_1
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_11(uint128) = LIBRARY_CALL, dest:Ticks, function:Ticks.getMaxLiquidity(uint24), arguments:['_tickSpacing_1'] 
Written func info: Ticks, getMaxLiquidity
[i]Type for TMP_11

Name: TMP_11 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_TICK_LIQUIDITY_1(uint128) := TMP_11(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied MAX_TICK_LIQUIDITY
 To type: None

Name: MAX_TICK_LIQUIDITY Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_1

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_1
ticks

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
ticks_1
ticks

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_2(int24) -> TickMath.MIN_TICK
MEMBER
init
init
end

Name: TickMath Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: MIN_TICK, MAX_TICK
Finance Type: undef
Typing member
init
end
[i]Type for REF_2

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MIN_TICK
F: MIN_TICK
init
end
Finance type key: (-1, -1)

Name: MIN_TICK Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_3(Ticks.Tick) -> ticks_0[REF_2]
INDEX
[i]Type for REF_3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_5(int24) -> TickMath.MIN_TICK
MEMBER
init
init
end

Name: TickMath Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: MIN_TICK, MAX_TICK
Finance Type: undef
Typing member
init
end
[i]Type for REF_5

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MIN_TICK
F: MIN_TICK
init
end
Finance type key: (-1, -1)

Name: MIN_TICK Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_6(int24) -> TickMath.MAX_TICK
MEMBER
init
init
end

Name: TickMath Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: MIN_TICK, MAX_TICK
Finance Type: undef
Typing member
init
end
[i]Type for REF_6

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MAX_TICK
F: MIN_TICK
F: MAX_TICK
init
end
Finance type key: (-1, -1)

Name: MAX_TICK Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_12 = CONVERT 0 to uint128
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_12

Name: TMP_12 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_13 = new Tick(REF_5,REF_6,TMP_12,0,0,0)
[i]Type for TMP_13

Name: TMP_13 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_1(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_0'])
Phi
[i]Type for ticks

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_3 (->ticks_1) := TMP_13(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_3

Name: REF_3 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied ticks
 To type: None

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_2

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_2
ticks

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
ticks_2
ticks

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_7(int24) -> TickMath.MAX_TICK
MEMBER
init
init
end

Name: TickMath Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: MIN_TICK, MAX_TICK
Finance Type: undef
Typing member
init
end
[i]Type for REF_7

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MAX_TICK
F: MIN_TICK
F: MAX_TICK
init
end
Finance type key: (-1, -1)

Name: MAX_TICK Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_8(Ticks.Tick) -> ticks_1[REF_7]
INDEX
[i]Type for REF_8

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_10(int24) -> TickMath.MIN_TICK
MEMBER
init
init
end

Name: TickMath Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: MIN_TICK, MAX_TICK
Finance Type: undef
Typing member
init
end
[i]Type for REF_10

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MIN_TICK
F: MIN_TICK
init
end
Finance type key: (-1, -1)

Name: MIN_TICK Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_11(int24) -> TickMath.MAX_TICK
MEMBER
init
init
end

Name: TickMath Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: MIN_TICK, MAX_TICK
Finance Type: undef
Typing member
init
end
[i]Type for REF_11

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MAX_TICK
F: MIN_TICK
F: MAX_TICK
init
end
Finance type key: (-1, -1)

Name: MAX_TICK Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_14 = CONVERT 0 to uint128
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_14

Name: TMP_14 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_15 = new Tick(REF_10,REF_11,TMP_14,0,0,0)
[i]Type for TMP_15

Name: TMP_15 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_2(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_1'])
Phi
[i]Type for ticks

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_8 (->ticks_2) := TMP_15(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_8

Name: REF_8 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied ticks
 To type: None

Name: ticks Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_1

Name: nearestTick Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_1
nearestTick

Name: nearestTick Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_12(int24) -> TickMath.MIN_TICK
MEMBER
init
init
end

Name: TickMath Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: MIN_TICK, MAX_TICK
Finance Type: undef
Typing member
init
end
[i]Type for REF_12

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: TickMath, Field: MIN_TICK
F: MIN_TICK
init
end
Finance type key: (-1, -1)

Name: MIN_TICK Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_1(int24) := REF_12(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for nearestTick

Name: nearestTick Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied nearestTick
 To type: None

Name: nearestTick Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_masterDeployer_1
_masterDeployer_1
_masterDeployer
p.norm: u
Name: _masterDeployer, Num: 1

Name: _masterDeployer_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_1

Name: bento Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bento_1
bento

Name: bento Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_16(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:bento, arguments:[]  
High Call: bento
Running querryfc
Written func info: MasterDeployer, bento
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_16

Name: TMP_16 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_17 = CONVERT TMP_16 to IBentoBoxMinimal
Converting TMP_16

Name: TMP_16 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
BentoBoxMinimal
[i]Type for TMP_17

Name: TMP_17 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: BentoBoxMinimal
Value: u
Fields: 
Finance Type: undef
XXXX
bento_1(IBentoBoxMinimal) := TMP_17(IBentoBoxMinimal)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bento

Name: bento Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied bento
 To type: None

Name: bento Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_masterDeployer_1
_masterDeployer_1
_masterDeployer
p.norm: u
Name: _masterDeployer, Num: 1

Name: _masterDeployer_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_1

Name: barFeeTo Function: constructor
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
barFeeTo_1
barFeeTo

Name: barFeeTo Function: constructor
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_18(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFeeTo, arguments:[]  
High Call: barFeeTo
Running querryfc
Written func info: MasterDeployer, barFeeTo
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_18

Name: TMP_18 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_1(address) := TMP_18(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for barFeeTo

Name: barFeeTo Function: constructor
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
Copied barFeeTo
 To type: None
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_masterDeployer_1
_masterDeployer_1
_masterDeployer
p.norm: u
Name: _masterDeployer, Num: 1

Name: _masterDeployer_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFee_1

Name: barFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFee_1
barFee

Name: barFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_19(uint256) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFee, arguments:[]  
High Call: barFee
Running querryfc
Written func info: MasterDeployer, barFee
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_19

Name: TMP_19 Function: constructor
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_1(uint256) := TMP_19(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for barFee

Name: barFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied barFee
 To type: None

Name: barFee Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_masterDeployer_1
_masterDeployer_1
_masterDeployer
p.norm: u
Name: _masterDeployer, Num: 1

Name: _masterDeployer_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
masterDeployer_1

Name: masterDeployer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
masterDeployer_1
masterDeployer

Name: masterDeployer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
masterDeployer_1(IMasterDeployer) := _masterDeployer_1(IMasterDeployer)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for masterDeployer

Name: masterDeployer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied masterDeployer
 To type: None

Name: masterDeployer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _deployData Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _masterDeployer Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unlocked_1

Name: unlocked Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
unlocked_1
unlocked

Name: unlocked Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
weee
unlocked_1(uint256) := 1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for unlocked

Name: unlocked Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Copied unlocked
 To type: None

Name: unlocked Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef



mint
Finding type for data(bytes ... )
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


MAX_TICK_LIQUIDITY_2(uint128) := ϕ(['MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_3'])
token0_2(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
token1_2(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
liquidity_1(uint128) := ϕ(['liquidity_0', 'liquidity_5', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9', 'liquidity_4', 'liquidity_3'])
secondsPerLiquidity_1(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
feeGrowthGlobal0_1(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
feeGrowthGlobal1_1(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
reserve0_1(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
reserve1_1(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
price_2(uint160) := ϕ(['price_8', 'price_3', 'price_1', 'price_5', 'price_0'])
nearestTick_2(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
ticks_3(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
TMP_20(ConcentratedLiquidityPool.MintParams) = SOLIDITY_CALL abi.decode()(data_1,MintParams)
mintParams_1(ConcentratedLiquidityPool.MintParams) := TMP_20(ConcentratedLiquidityPool.MintParams)
REF_18(int24) -> mintParams_1.lower
TMP_21(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_18'] 
TMP_22 = CONVERT TMP_21 to uint256
priceLower_1(uint256) := TMP_22(uint256)
REF_20(int24) -> mintParams_1.upper
TMP_23(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_20'] 
TMP_24 = CONVERT TMP_23 to uint256
priceUpper_1(uint256) := TMP_24(uint256)
TMP_25 = CONVERT price_3 to uint256
currentPrice_1(uint256) := TMP_25(uint256)
REF_22(uint256) -> mintParams_1.amount1Desired
REF_23(uint256) -> mintParams_1.amount0Desired
TMP_26(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getLiquidityForAmounts(uint256,uint256,uint256,uint256,uint256), arguments:['priceLower_1', 'priceUpper_1', 'currentPrice_1', 'REF_22', 'REF_23'] 
_liquidity_1(uint256) := TMP_26(uint256)
TMP_27(bool) = _liquidity_1 <= MAX_TICK_LIQUIDITY_3
TMP_28(None) = SOLIDITY_CALL require(bool,string)(TMP_27,LIQUIDITY_OVERFLOW)
REF_24(address) -> mintParams_1.positionOwner
REF_25(int24) -> mintParams_1.lower
REF_26(int24) -> mintParams_1.upper
TMP_29 = CONVERT _liquidity_1 to uint128
TMP_30 = CONVERT TMP_29 to int128
TUPLE_1(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(REF_24,REF_25,REF_26,TMP_30)
amount0fees_1(uint256)= UNPACK TUPLE_1 index: 0 
amount1fees_1(uint256)= UNPACK TUPLE_1 index: 1 
TMP_31(bool) = amount0fees_1 > 0
CONDITION TMP_31
REF_27(address) -> mintParams_1.positionOwner
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_4,amount0fees_1,REF_27,False)
TMP_33 = CONVERT amount0fees_1 to uint128
reserve0_5(uint128) = reserve0_4 (c)- TMP_33
TMP_34(bool) = amount1fees_1 > 0
CONDITION TMP_34
REF_28(address) -> mintParams_1.positionOwner
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_5,amount1fees_1,REF_28,False)
TMP_36 = CONVERT amount1fees_1 to uint128
reserve1_6(uint128) = reserve1_5 (c)- TMP_36
TMP_37(bool) = priceLower_1 < currentPrice_1
TMP_38(bool) = currentPrice_1 < priceUpper_1
TMP_39(bool) = TMP_37 && TMP_38
CONDITION TMP_39
TMP_40 = CONVERT _liquidity_1 to uint128
liquidity_6(uint128) = liquidity_5 (c)+ TMP_40
REF_29(int24) -> mintParams_1.lower
REF_30(int24) -> mintParams_1.upper
INTERNAL_CALL, ConcentratedLiquidityPool._ensureTickSpacing(int24,int24)(REF_29,REF_30)
REF_32(int24) -> mintParams_1.lowerOld
REF_33(int24) -> mintParams_1.lower
REF_34(int24) -> mintParams_1.upperOld
REF_35(int24) -> mintParams_1.upper
TMP_42 = CONVERT _liquidity_1 to uint128
TMP_43 = CONVERT currentPrice_1 to uint160
TMP_44(int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.insert(mapping(int24 => Ticks.Tick),uint256,uint256,uint160,int24,int24,int24,int24,uint128,int24,uint160), arguments:['ticks_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal1_6', 'secondsPerLiquidity_6', 'REF_32', 'REF_33', 'REF_34', 'REF_35', 'TMP_42', 'nearestTick_7', 'TMP_43'] 
nearestTick_8(int24) := TMP_44(int24)
TUPLE_2(uint128,uint128) = INTERNAL_CALL, ConcentratedLiquidityPool._getAmountsForLiquidity(uint256,uint256,uint256,uint256)(priceLower_1,priceUpper_1,currentPrice_1,_liquidity_1)
amount0Actual_1(uint128)= UNPACK TUPLE_2 index: 0 
amount1Actual_1(uint128)= UNPACK TUPLE_2 index: 1 
TMP_46 = new ITridentRouter.TokenInput[](2)
callbackData_1(ITridentRouter.TokenInput[]) := TMP_46(ITridentRouter.TokenInput)
REF_36(ITridentRouter.TokenInput) -> callbackData_1[0]
REF_38(bool) -> mintParams_1.token0native
TMP_47 = new TokenInput(token0_8,REF_38,amount0Actual_1)
callbackData_2(ITridentRouter.TokenInput[]) := ϕ(['callbackData_1'])
REF_36 (->callbackData_2) := TMP_47(ITridentRouter.TokenInput)
REF_39(ITridentRouter.TokenInput) -> callbackData_2[1]
REF_41(bool) -> mintParams_1.token1native
TMP_48 = new TokenInput(token1_8,REF_41,amount1Actual_1)
callbackData_3(ITridentRouter.TokenInput[]) := ϕ(['callbackData_2'])
REF_39 (->callbackData_3) := TMP_48(ITridentRouter.TokenInput)
TMP_49 = CONVERT msg.sender to ITridentCallee
TMP_50(bytes) = SOLIDITY_CALL abi.encode()(callbackData_3)
HIGH_LEVEL_CALL, dest:TMP_49(ITridentCallee), function:tridentMintCallback, arguments:['TMP_50']  
token0_9(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_8', 'token0_9', 'token0_27'])
token1_9(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_8', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
reserve0_9(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_8', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_30'])
reserve1_9(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_9', 'reserve1_8', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
TMP_52(bool) = amount0Actual_1 != 0
CONDITION TMP_52
TMP_53(uint128) = amount0Actual_1 (c)+ reserve0_9
TMP_54(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_9)
TMP_55(bool) = TMP_53 <= TMP_54
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,TOKEN0_MISSING)
reserve0_11(uint128) = reserve0_10 (c)+ amount0Actual_1
TMP_57(bool) = amount1Actual_1 != 0
CONDITION TMP_57
TMP_58(uint128) = amount1Actual_1 (c)+ reserve1_10
TMP_59(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_10)
TMP_60(bool) = TMP_58 <= TMP_59
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,TOKEN1_MISSING)
reserve1_12(uint128) = reserve1_11 (c)+ amount1Actual_1
REF_44(int24) -> mintParams_1.lower
REF_45(int24) -> mintParams_1.upper
TUPLE_3(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(REF_44,REF_45)
feeGrowth0_1(uint256)= UNPACK TUPLE_3 index: 0 
feeGrowth1_1(uint256)= UNPACK TUPLE_3 index: 1 
REF_46(address) -> mintParams_1.positionRecipient
TMP_62 = CONVERT 0 to address
TMP_63(bool) = REF_46 != TMP_62
CONDITION TMP_63
REF_52(address) -> mintParams_1.positionOwner
REF_53(address) -> mintParams_1.positionRecipient
Emit Mint(REF_52,amount0Actual_1,amount1Actual_1,REF_53)
REF_47(address) -> mintParams_1.positionOwner
TMP_64 = CONVERT REF_47 to IPositionManager
REF_49(address) -> mintParams_1.positionRecipient
REF_50(int24) -> mintParams_1.lower
REF_51(int24) -> mintParams_1.upper
TMP_65 = CONVERT _liquidity_1 to uint128
TMP_66(uint256) = HIGH_LEVEL_CALL, dest:TMP_64(IPositionManager), function:positionMintCallback, arguments:['REF_49', 'REF_50', 'REF_51', 'TMP_65', 'feeGrowth0_1', 'feeGrowth1_1']  


Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
MAX_TICK_LIQUIDITY_2
MAX_TICK_LIQUIDITY
Name: MAX_TICK_LIQUIDITY, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_2
token0
Name: token0, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_2
token1
Name: token1, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
liquidity_1
liquidity
Name: liquidity, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
secondsPerLiquidity_1
secondsPerLiquidity
Name: secondsPerLiquidity, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_1
feeGrowthGlobal0
Name: feeGrowthGlobal0, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_1
feeGrowthGlobal1
Name: feeGrowthGlobal1, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve0_1
reserve0
Name: reserve0, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_1
reserve1
Name: reserve1, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
price_2
price
Name: price, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_2
nearestTick
Name: nearestTick, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_3
ticks
Name: ticks, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
MAX_TICK_LIQUIDITY_2(uint128) := ϕ(['MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_3'])
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_2(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: mint
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_2(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: mint
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_1(uint128) := ϕ(['liquidity_0', 'liquidity_5', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9', 'liquidity_4', 'liquidity_3'])
Phi
[i]Type for liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsPerLiquidity_1(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_1(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_1(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_1(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
Phi
[i]Type for reserve0

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_1(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
Phi
[i]Type for reserve1

Name: reserve1 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_2(uint160) := ϕ(['price_8', 'price_3', 'price_1', 'price_5', 'price_0'])
Phi
[i]Type for price

Name: price Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_2(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_3(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
unlocked_2
unlocked
Name: unlocked, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
weee
unlocked_2(uint256) := ϕ(['unlocked_1', 'unlocked_0', 'unlocked_4'])
Phi
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
unlocked_2
unlocked_2
unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_243(bool) = unlocked_2 == 1
[i]Type for TMP_243

Name: TMP_243 Function: lock
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244(None) = SOLIDITY_CALL require(bool,string)(TMP_243,LOCKED)
[i]Type for TMP_244

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
unlocked_3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unlocked_3
unlocked
Name: unlocked, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
weee
unlocked_3(uint256) := 2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Copied unlocked
 To type: None

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
unlocked_4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unlocked_4
unlocked
Name: unlocked, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
End popogation
weee
unlocked_4(uint256) := 1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Copied unlocked
 To type: None

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
unlocked_2
unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
weee
unlocked_2(uint256) := ϕ(['unlocked_1', 'unlocked_0', 'unlocked_4'])
Phi
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
unlocked_2
unlocked_2
unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_243(bool) = unlocked_2 == 1
[i]Type for TMP_243

Name: TMP_243 Function: lock
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244(None) = SOLIDITY_CALL require(bool,string)(TMP_243,LOCKED)
[i]Type for TMP_244

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
unlocked_3

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
unlocked_3
unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
End popogation
weee
unlocked_3(uint256) := 2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Copied unlocked
 To type: None

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
unlocked_4

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
unlocked_4
unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
weee
unlocked_4(uint256) := 1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Copied unlocked
 To type: None

Name: unlocked Function: lock
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
data_1
data_1
data
p.norm: u
Name: data, Num: 1

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
mintParams_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_20(ConcentratedLiquidityPool.MintParams) = SOLIDITY_CALL abi.decode()(data_1,MintParams)
[i]Type for TMP_20

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
mintParams_1(ConcentratedLiquidityPool.MintParams) := TMP_20(ConcentratedLiquidityPool.MintParams)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for mintParams

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower
Name: priceLower, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_18(int24) -> mintParams_1.lower
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Typing member
OUT KEY: mint_mintParams_lower
OUT KEY: mint_mintParams_lower
No field found
[i]Type for REF_18

Name: mintParams.lower Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: lower
init
end
Finance type key: (-1, -1)
XXXX
TMP_21(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_18'] 
Written func info: TickMath, getSqrtRatioAtTick
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_21

Name: TMP_21 Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22 = CONVERT TMP_21 to uint256
Converting TMP_21

Name: TMP_21 Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_22

Name: TMP_22 Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceLower_1(uint256) := TMP_22(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for priceLower

Name: priceLower Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower
Finance Type: undef
priceUpper_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceUpper_1
priceUpper
Name: priceUpper, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_20(int24) -> mintParams_1.upper
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower
Finance Type: undef
Typing member
OUT KEY: mint_mintParams_upper
OUT KEY: mint_mintParams_upper
No field found
[i]Type for REF_20

Name: mintParams.upper Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: upper
F: lower
init
end
Finance type key: (-1, -1)
XXXX
TMP_23(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_20'] 
Written func info: TickMath, getSqrtRatioAtTick
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_23

Name: TMP_23 Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_24 = CONVERT TMP_23 to uint256
Converting TMP_23

Name: TMP_23 Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_24

Name: TMP_24 Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceUpper_1(uint256) := TMP_24(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for priceUpper

Name: priceUpper Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
price_3
price_3
price
Name: price, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice
Name: currentPrice, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_25 = CONVERT price_3 to uint256
Converting price_3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_25

Name: TMP_25 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentPrice_1(uint256) := TMP_25(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentPrice

Name: currentPrice Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_liquidity_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_liquidity_1
_liquidity
Name: _liquidity, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_22(uint256) -> mintParams_1.amount1Desired
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper
Finance Type: undef
Typing member
OUT KEY: mint_mintParams_amount1Desired
OUT KEY: mint_mintParams_amount1Desired
No field found
[i]Type for REF_22

Name: mintParams.amount1Desired Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: amount1Desired
F: lower
F: upper
init
end
Finance type key: (-1, -1)
XXXX
REF_23(uint256) -> mintParams_1.amount0Desired
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired
Finance Type: undef
Typing member
OUT KEY: mint_mintParams_amount0Desired
OUT KEY: mint_mintParams_amount0Desired
No field found
[i]Type for REF_23

Name: mintParams.amount0Desired Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: amount0Desired
F: lower
F: upper
F: amount1Desired
init
end
Finance type key: (-1, -1)
XXXX
TMP_26(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getLiquidityForAmounts(uint256,uint256,uint256,uint256,uint256), arguments:['priceLower_1', 'priceUpper_1', 'currentPrice_1', 'REF_22', 'REF_23'] 
Written func info: DyDxMath, getLiquidityForAmounts
[i]Type for TMP_26

Name: TMP_26 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_liquidity_1(uint256) := TMP_26(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _liquidity

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_liquidity_1
_liquidity_1
_liquidity

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_TICK_LIQUIDITY_3
MAX_TICK_LIQUIDITY_3
MAX_TICK_LIQUIDITY
Name: MAX_TICK_LIQUIDITY, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_27(bool) = _liquidity_1 <= MAX_TICK_LIQUIDITY_3
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_27

Name: TMP_27 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_28(None) = SOLIDITY_CALL require(bool,string)(TMP_27,LIQUIDITY_OVERFLOW)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired
Finance Type: undef
_liquidity_1
_liquidity_1
_liquidity

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1
amount1fees
Name: amount1fees, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0fees_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0fees_1
amount0fees
Name: amount0fees, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
weee
REF_24(address) -> mintParams_1.positionOwner
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired
Finance Type: undef
Typing member
OUT KEY: mint_mintParams_positionOwner
OUT KEY: mint_mintParams_positionOwner
No field found
[i]Type for REF_24

Name: mintParams.positionOwner Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: positionOwner
F: lower
F: upper
F: amount1Desired
F: amount0Desired
init
end
Finance type key: (-1, -1)
XXXX
REF_25(int24) -> mintParams_1.lower
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner
Finance Type: undef
Typing member

Name: lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_25

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: lower
F: lower
init
end
Finance type key: (-1, -1)

Name: lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_26(int24) -> mintParams_1.upper
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner
Finance Type: undef
Typing member

Name: upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_26

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: upper
F: lower
F: upper
init
end
Finance type key: (-1, -1)

Name: upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_29 = CONVERT _liquidity_1 to uint128
Converting _liquidity_1

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_29

Name: TMP_29 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_30 = CONVERT TMP_29 to int128
Converting TMP_29

Name: TMP_29 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_30

Name: TMP_30 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_1(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(REF_24,REF_25,REF_26,TMP_30)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
owner_1
owner
p.norm: u

Name: owner_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
weee
lower_1
lower
p.norm: u

Name: lower_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upper_1
upper
p.norm: u

Name: upper_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
amount_1
amount
p.norm: u

Name: amount_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
MAX_TICK_LIQUIDITY_4
MAX_TICK_LIQUIDITY
Name: MAX_TICK_LIQUIDITY, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
positions_1
positions
Name: positions, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
owner_1(address) := ϕ(['msg.sender', 'REF_24'])
Phi
[i]Type for owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
XXXX
lower_1(int24) := ϕ(['lower_1', 'lower_1', 'REF_25'])
Phi
[i]Type for lower

Name: lower Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upper_1(int24) := ϕ(['upper_1', 'REF_26', 'upper_1'])
Phi
[i]Type for upper

Name: upper Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(int128) := ϕ(['TMP_79', 'TMP_30'])
Phi
[i]Type for amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_TICK_LIQUIDITY_4(uint128) := ϕ(['MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_3'])
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_1(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(['positions_0', 'positions_5'])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
owner_1
owner_1
owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
positions_1
positions_1
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1
lower_1
lower

Name: lower Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper

Name: upper Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])
position
Name: position, Num: 1 (-> ['positions'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_144(mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) -> positions_1[owner_1]
INDEX
[i]Type for REF_144

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_145(mapping(int24 => ConcentratedLiquidityPool.Position)) -> REF_144[lower_1]
INDEX
[i]Type for REF_145

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_146(ConcentratedLiquidityPool.Position) -> REF_145[upper_1]
INDEX
[i]Type for REF_146

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
position_1 (-> ['positions'])(ConcentratedLiquidityPool.Position) := REF_146(ConcentratedLiquidityPool.Position)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1
lower_1
lower

Name: lower Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper

Name: upper Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1
growth0current
Name: growth0current, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1
growth1current
Name: growth1current, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TUPLE_12(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(lower_1,upper_1)
init
end
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
lowerTick_1
lowerTick
p.norm: u

Name: lowerTick_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upperTick_1
upperTick
p.norm: u

Name: upperTick_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_10
feeGrowthGlobal0
Name: feeGrowthGlobal0, Num: 10

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_10
feeGrowthGlobal1
Name: feeGrowthGlobal1, Num: 10

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_18
nearestTick
Name: nearestTick, Num: 18

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_16
ticks
Name: ticks, Num: 16

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Phi
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_18
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick
Name: currentTick, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_18(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])
lower
Name: lower, Num: 1 (-> ['ticks'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
INDEX
[i]Type for REF_165

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upperTick_1
upperTick_1
upperTick

Name: upperTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])
upper
Name: upper, Num: 1 (-> ['ticks'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
INDEX
[i]Type for REF_166

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal0_10
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1
_feeGrowthGlobal0
Name: _feeGrowthGlobal0, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal1_10
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1
Name: _feeGrowthGlobal1, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_224(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_1
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Typing member
OUT KEY: rangeFeeGrowth_lower_feeGrowthOutside0
OUT KEY: rangeFeeGrowth_lower_feeGrowthOutside0
No field found
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
init
end
Finance type key: (-1, -1)
XXXX
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0
Finance Type: undef
Typing member
OUT KEY: rangeFeeGrowth_lower_feeGrowthOutside1
OUT KEY: rangeFeeGrowth_lower_feeGrowthOutside1
No field found
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)
XXXX
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_2
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_2(uint256) := REF_167(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthBelow0_3
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow1_3
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Phi
init
end
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
Phi
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow1_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_2
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_2(uint256) := REF_168(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick

Name: upperTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_227(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_1
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Typing member
OUT KEY: rangeFeeGrowth_upper_feeGrowthOutside0
OUT KEY: rangeFeeGrowth_upper_feeGrowthOutside0
No field found
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
init
end
Finance type key: (-1, -1)
XXXX
feeGrowthAbove0_1(uint256) := REF_171(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0
Finance Type: undef
feeGrowthAbove0_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_2
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0
Finance Type: undef
Typing member

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0
Finance Type: undef
feeGrowthAbove1_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_1
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0
Finance Type: undef
Typing member
OUT KEY: rangeFeeGrowth_upper_feeGrowthOutside1
OUT KEY: rangeFeeGrowth_upper_feeGrowthOutside1
No field found
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)
XXXX
feeGrowthAbove1_1(uint256) := REF_172(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthAbove0_3
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove1_3
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Phi
init
end
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Phi
init
end
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_3
feeGrowthBelow0_3
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_3
feeGrowthAbove0_3
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1
feeGrowthInside0
Name: feeGrowthInside0, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside0_1(uint256) := TMP_231(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthBelow1_3
feeGrowthBelow1_3
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 3

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_3
feeGrowthAbove1_3
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1
Name: feeGrowthInside1, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside1_1(uint256) := TMP_233(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthInside0_1
feeGrowthInside0_1
feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1_1
feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN feeGrowthInside0_1,feeGrowthInside1_1
init
end
init
end

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
lowerTick_1
lowerTick
p.norm: u

Name: lowerTick_1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upperTick_1
upperTick
p.norm: u

Name: upperTick_1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Phi
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_18
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick
Name: currentTick, Num: 1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_18(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
lower_1 (-> ['ticks'])
lower
Name: lower, Num: 1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
INDEX
[i]Type for REF_165

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upperTick_1
upperTick_1
upperTick

Name: upperTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
upper_1 (-> ['ticks'])
upper
Name: upper, Num: 1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
INDEX
[i]Type for REF_166

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal0_10
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1
_feeGrowthGlobal0
Name: _feeGrowthGlobal0, Num: 1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal1_10
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1
Name: _feeGrowthGlobal1, Num: 1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_224(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_1
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_2
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_2(uint256) := REF_167(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthBelow0_3
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 3

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow1_3
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 3

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Phi
init
end
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
Phi
init
end
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow1_2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_2
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_2(uint256) := REF_168(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick

Name: upperTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_227(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_1
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_1(uint256) := REF_171(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_2
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove1_1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_1
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_1(uint256) := REF_172(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthAbove0_3
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 3

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove1_3
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 3

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Phi
init
end
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Phi
init
end
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_3
feeGrowthBelow0_3
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_3
feeGrowthAbove0_3
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1
feeGrowthInside0
Name: feeGrowthInside0, Num: 1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside0_1(uint256) := TMP_231(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthBelow1_3
feeGrowthBelow1_3
feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_3
feeGrowthAbove1_3
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1
Name: feeGrowthInside1, Num: 1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside1_1(uint256) := TMP_233(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthInside0_1
feeGrowthInside0_1
feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1_1
feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN feeGrowthInside0_1,feeGrowthInside1_1
init
end
init
end

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upperTick_1
upperTick

Name: upperTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Phi
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_18
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_18(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
INDEX
[i]Type for REF_165

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upperTick_1
upperTick_1
upperTick

Name: upperTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
INDEX
[i]Type for REF_166

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal0_10
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal1_10
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_224(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_1
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1
feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_2
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_2(uint256) := REF_167(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthBelow0_3
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow1_3
feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Phi
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
Phi
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow1_2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_2
feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_2(uint256) := REF_168(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick

Name: upperTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_227(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_1
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_1(uint256) := REF_171(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_2
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove1_1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_1
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_1(uint256) := REF_172(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthAbove0_3
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove1_3
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Phi
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Phi
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_3
feeGrowthBelow0_3
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_3
feeGrowthAbove0_3
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1
feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside0_1(uint256) := TMP_231(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthBelow1_3
feeGrowthBelow1_3
feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_3
feeGrowthAbove1_3
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside1_1(uint256) := TMP_233(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthInside0_1
feeGrowthInside0_1
feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1_1
feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN feeGrowthInside0_1,feeGrowthInside1_1
init
end
init
end
[i]Type for TUPLE_12

Name: TUPLE_12 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth0current_1(uint256)= UNPACK TUPLE_12 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth1current_1(uint256)= UNPACK TUPLE_12 index: 1 
([-1], [-1], 'u', None, -1)
[i]Type for growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0fees_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0fees_1
amount0fees
Name: amount0fees, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_148(uint256) -> position_1 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Typing member
OUT KEY: _updatePosition_position_feeGrowthInside0Last
OUT KEY: _updatePosition_position_feeGrowthInside0Last
No field found
[i]Type for REF_148

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)
XXXX
TMP_202(uint256) = growth0current_1 (c)- REF_148
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_202

Name: TMP_202 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_149(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last
Finance Type: undef
Typing member
OUT KEY: _updatePosition_position_liquidity
OUT KEY: _updatePosition_position_liquidity
No field found
[i]Type for REF_149

Name: position.liquidity Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)
XXXX
TMP_203(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_202', 'REF_149', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_203

Name: TMP_203 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount0fees_1(uint256) := TMP_203(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity
Finance Type: undef
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1
amount1fees
Name: amount1fees, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_151(uint256) -> position_1 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity
Finance Type: undef
Typing member
OUT KEY: _updatePosition_position_feeGrowthInside1Last
OUT KEY: _updatePosition_position_feeGrowthInside1Last
No field found
[i]Type for REF_151

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)
XXXX
TMP_204(uint256) = growth1current_1 (c)- REF_151
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_204

Name: TMP_204 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_152(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_152

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_204', 'REF_152', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_205

Name: TMP_205 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount1fees_1(uint256) := TMP_205(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_206(bool) = amount_1 < 0
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
[i]Type for TMP_206

Name: TMP_206 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
position_3 (-> ['positions'])
position
Name: position, Num: 3 (-> ['positions'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
position_3 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_2 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_209(bool) = amount_1 > 0
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
[i]Type for TMP_209

Name: TMP_209 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
position_5 (-> ['positions'])
position
Name: position, Num: 5 (-> ['positions'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
position_5 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_4 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
position_4 (-> ['positions'])
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_4 (-> ['positions'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_3
positions
Name: positions, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
positions_3
positions

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_154(uint128) -> position_3 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Typing member
OUT KEY: _updatePosition_position_liquidity
OUT KEY: _updatePosition_position_liquidity
No field found
[i]Type for REF_154

Name: position.liquidity Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_3 (-> ['positions']), Field: liquidity
init
end
Finance type key: (-1, -1)
XXXX
TMP_210 = CONVERT amount_1 to uint128
Converting amount_1

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_210

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_4 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_3 (-> ['positions'])"])
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: liquidity
Finance Type: undef
XXXX
REF_154(-> position_4 (-> ['positions'])) = REF_154 (c)+ TMP_210

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for REF_154

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_3 (-> ['positions']), Field: liquidity
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_3(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_4 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_2 (-> ['positions'])
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_2
positions
Name: positions, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_2 (-> ['positions'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
positions_2
positions

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_153(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_153

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
init
end
Finance type key: (-1, -1)
XXXX
TMP_207(int128) = 0 (c)- amount_1
SUB1
init
end
init
end
A: 0 B: u
lnorm: 0 rnorm: u
SUB

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:0 rval:u
[i]Type for TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208 = CONVERT TMP_207 to uint128
Converting TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_208

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_2 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_153(-> position_2 (-> ['positions'])) = REF_153 (c)- TMP_208
SUB1
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
SUB

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for REF_153

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_2(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_2 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
position_5 (-> ['positions'])
position_5 (-> ['positions'])
position
Name: position, Num: 5 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY
Name: MAX_TICK_LIQUIDITY, Num: 5

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_155(uint128) -> position_5 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Typing member
OUT KEY: _updatePosition_position_liquidity
OUT KEY: _updatePosition_position_liquidity
No field found
[i]Type for REF_155

Name: position.liquidity Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: liquidity
init
end
Finance type key: (-1, -1)
XXXX
TMP_211(bool) = REF_155 < MAX_TICK_LIQUIDITY_5
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_211

Name: TMP_211 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,MAX_TICK_LIQUIDITY)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_6 (-> ['positions'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_4
positions
Name: positions, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
positions_4
positions

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_156(uint256) -> position_5 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: liquidity
Finance Type: undef
Typing member
OUT KEY: _updatePosition_position_feeGrowthInside0Last
OUT KEY: _updatePosition_position_feeGrowthInside0Last
No field found
[i]Type for REF_156

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)
XXXX
position_6 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_5 (-> ['positions'])"])
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity
Finance Type: undef
XXXX
REF_156 (->position_6 (-> ['positions'])) := growth0current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_156

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_4(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_6 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_7 (-> ['positions'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_5
positions
Name: positions, Num: 5

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
positions_5
positions

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_157(uint256) -> position_6 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity
Finance Type: undef
Typing member
OUT KEY: _updatePosition_position_feeGrowthInside1Last
OUT KEY: _updatePosition_position_feeGrowthInside1Last
No field found
[i]Type for REF_157

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)
XXXX
position_7 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_6 (-> ['positions'])"])
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside1Last, feeGrowthInside0Last, liquidity
Finance Type: undef
XXXX
REF_157 (->position_7 (-> ['positions'])) := growth1current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_157

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_5(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_7 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
RETURN amount0fees_1,amount1fees_1
init
end
init
end

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
owner_1
owner
p.norm: u

Name: owner_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
weee
lower_1
lower
p.norm: u

Name: lower_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upper_1
upper
p.norm: u

Name: upper_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
amount_1
amount
p.norm: u

Name: amount_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
MAX_TICK_LIQUIDITY_4
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
positions_1
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
owner_1(address) := ϕ(['msg.sender', 'REF_24'])
Phi
[i]Type for owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
XXXX
lower_1(int24) := ϕ(['lower_1', 'lower_1', 'REF_25'])
Phi
[i]Type for lower

Name: lower Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upper_1(int24) := ϕ(['upper_1', 'REF_26', 'upper_1'])
Phi
[i]Type for upper

Name: upper Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(int128) := ϕ(['TMP_79', 'TMP_30'])
Phi
[i]Type for amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_TICK_LIQUIDITY_4(uint128) := ϕ(['MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_3'])
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_1(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(['positions_0', 'positions_5'])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
owner_1
owner_1
owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
positions_1
positions_1
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1
lower_1
lower

Name: lower Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper

Name: upper Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_1 (-> ['positions'])
position
Name: position, Num: 1 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_144(mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) -> positions_1[owner_1]
INDEX
[i]Type for REF_144

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_145(mapping(int24 => ConcentratedLiquidityPool.Position)) -> REF_144[lower_1]
INDEX
[i]Type for REF_145

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_146(ConcentratedLiquidityPool.Position) -> REF_145[upper_1]
INDEX
[i]Type for REF_146

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
position_1 (-> ['positions'])(ConcentratedLiquidityPool.Position) := REF_146(ConcentratedLiquidityPool.Position)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1
lower_1
lower

Name: lower Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper

Name: upper Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1

Name: growth0current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1
growth0current
Name: growth0current, Num: 1

Name: growth0current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1

Name: growth1current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1
growth1current
Name: growth1current, Num: 1

Name: growth1current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TUPLE_12(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(lower_1,upper_1)
init
end
init
end
[i]Type for TUPLE_12

Name: TUPLE_12 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth0current_1(uint256)= UNPACK TUPLE_12 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth1current_1(uint256)= UNPACK TUPLE_12 index: 1 
([-1], [-1], 'u', None, -1)
[i]Type for growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
amount0fees_1

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount0fees_1
amount0fees
Name: amount0fees, Num: 1

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_148(uint256) -> position_1 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_148

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_202(uint256) = growth0current_1 (c)- REF_148
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_202

Name: TMP_202 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_149(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_149

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_203(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_202', 'REF_149', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_203

Name: TMP_203 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount0fees_1(uint256) := TMP_203(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount1fees_1
amount1fees
Name: amount1fees, Num: 1

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_151(uint256) -> position_1 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_151

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = growth1current_1 (c)- REF_151
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_204

Name: TMP_204 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_152(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_152

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_204', 'REF_152', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_205

Name: TMP_205 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount1fees_1(uint256) := TMP_205(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_206(bool) = amount_1 < 0
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
[i]Type for TMP_206

Name: TMP_206 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
position_3 (-> ['positions'])
position
Name: position, Num: 3 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
position_3 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_2 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_209(bool) = amount_1 > 0
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
[i]Type for TMP_209

Name: TMP_209 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
position_5 (-> ['positions'])
position
Name: position, Num: 5 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: liquidity
Finance Type: undef
weee
position_5 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_4 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: liquidity
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
position_4 (-> ['positions'])
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: liquidity
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: liquidity
Finance Type: undef
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: liquidity
Finance Type: undef
positions_3

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_3
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: liquidity
Finance Type: undef
weee
weee
positions_3
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_154(uint128) -> position_3 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_154

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_3 (-> ['positions']), Field: liquidity
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210 = CONVERT amount_1 to uint128
Converting amount_1

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_210

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_4 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_3 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_154(-> position_4 (-> ['positions'])) = REF_154 (c)+ TMP_210

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for REF_154

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_3 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_3(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_4 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_2 (-> ['positions'])
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_2

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_2
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
End popogation
weee
weee
weee
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_2
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_153(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_153

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(int128) = 0 (c)- amount_1
SUB1
init
end
init
end
A: 0 B: u
lnorm: 0 rnorm: u
SUB

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:0 rval:u
[i]Type for TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208 = CONVERT TMP_207 to uint128
Converting TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_208

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_2 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_153(-> position_2 (-> ['positions'])) = REF_153 (c)- TMP_208
SUB1
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
SUB

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for REF_153

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_2(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_2 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
position_5 (-> ['positions'])
position_5 (-> ['positions'])
position
Name: position, Num: 5 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: liquidity
Finance Type: undef
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_155(uint128) -> position_5 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: liquidity
Finance Type: undef
Typing member
init
end
[i]Type for REF_155

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: liquidity
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = REF_155 < MAX_TICK_LIQUIDITY_5
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_211

Name: TMP_211 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,MAX_TICK_LIQUIDITY)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity
Finance Type: undef
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity
Finance Type: undef
positions_4

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_4
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity
Finance Type: undef
weee
weee
positions_4
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_156(uint256) -> position_5 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: liquidity
Finance Type: undef
Typing member
[i]Type for REF_156

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_6 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_5 (-> ['positions'])"])
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity
Finance Type: undef
XXXX
REF_156 (->position_6 (-> ['positions'])) := growth0current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_156

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_4(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_6 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside1Last, feeGrowthInside0Last, liquidity
Finance Type: undef
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside1Last, feeGrowthInside0Last, liquidity
Finance Type: undef
positions_5

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_5
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside1Last, feeGrowthInside0Last, liquidity
Finance Type: undef
weee
weee
positions_5
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_157(uint256) -> position_6 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity
Finance Type: undef
Typing member
[i]Type for REF_157

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_7 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_6 (-> ['positions'])"])
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside1Last, feeGrowthInside0Last, liquidity
Finance Type: undef
XXXX
REF_157 (->position_7 (-> ['positions'])) := growth1current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_157

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_5(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_7 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
RETURN amount0fees_1,amount1fees_1
init
end
init
end
[i]Type for TUPLE_1

Name: TUPLE_1 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0fees_1(uint256)= UNPACK TUPLE_1 index: 0 
([-1], [-1], "'u'", None, -1)
[i]Type for amount0fees

Name: amount0fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1fees_1(uint256)= UNPACK TUPLE_1 index: 1 
([-1], [-1], "'u'", None, -1)
[i]Type for amount1fees

Name: amount1fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_31(bool) = amount0fees_1 > 0
init
end
init
end
A: 'u' B: 0
x
y
A: 'u' B: 0
<class 'str'>
<class 'int'>
lnorm: 'u' rnorm: 0
[i]Type for TMP_31

Name: TMP_31 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
token0_4
token0_4
token0
Name: token0, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner
Finance Type: undef
End popogation
weee
weee
REF_27(address) -> mintParams_1.positionOwner
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner
Finance Type: undef
Typing member

Name: positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_27

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: positionOwner
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
init
end
Finance type key: (-1, -1)

Name: positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_4,amount0fees_1,REF_27,False)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', 'token0', [], -1, 1, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], "'u'", None, [], -1, -1, 'u']

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: 'u'

Name: shares_1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: 0

Name: unwrapBento_1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento
Name: bento, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento
Name: bento, Num: 5

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento
Name: bento, Num: 6

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: -1
Den: -1
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: 'u'

Name: shares_1 Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: 0

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve0_4
reserve0_4
reserve0
Name: reserve0, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_5
reserve0
Name: reserve0, Num: 5

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_33 = CONVERT amount0fees_1 to uint128
Converting amount0fees_1

Name: amount0fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_33

Name: TMP_33 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_5(uint128) = reserve0_4 (c)- TMP_33
SUB1
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
SUB

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_33 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve0

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_34(bool) = amount1fees_1 > 0
init
end
init
end
A: 'u' B: 0
x
y
A: 'u' B: 0
<class 'str'>
<class 'int'>
lnorm: 'u' rnorm: 0
[i]Type for TMP_34

Name: TMP_34 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner
Finance Type: undef
token1_5
token1_5
token1
Name: token1, Num: 5

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_28(address) -> mintParams_1.positionOwner
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner
Finance Type: undef
Typing member

Name: positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_28

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: positionOwner
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
init
end
Finance type key: (-1, -1)

Name: positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_5,amount1fees_1,REF_28,False)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', 'token1', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], "'u'", None, [], -1, -1, 'u']

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: 'u'

Name: shares_1 Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: 0

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: 'u'

Name: shares_1 Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: 0

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_5
reserve1_5
reserve1
Name: reserve1, Num: 5

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_6

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_6
reserve1
Name: reserve1, Num: 6

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_36 = CONVERT amount1fees_1 to uint128
Converting amount1fees_1

Name: amount1fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_36

Name: TMP_36 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_6(uint128) = reserve1_5 (c)- TMP_36
SUB1
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
SUB

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_36 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve1

Name: reserve1 Function: mint
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_37(bool) = priceLower_1 < currentPrice_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_37

Name: TMP_37 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_38(bool) = currentPrice_1 < priceUpper_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_38

Name: TMP_38 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_39(bool) = TMP_37 && TMP_38
[i]Type for TMP_39

Name: TMP_39 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidity_5
liquidity_5
liquidity
Name: liquidity, Num: 5

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_liquidity_1
_liquidity_1
_liquidity

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_6

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_6
liquidity
Name: liquidity, Num: 6

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_40 = CONVERT _liquidity_1 to uint128
Converting _liquidity_1

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_40

Name: TMP_40 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_6(uint128) = liquidity_5 (c)+ TMP_40

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_40 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied liquidity
 To type: None

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner
Finance Type: undef
End popogation
weee
weee
weee
REF_29(int24) -> mintParams_1.lower
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner
Finance Type: undef
Typing member

Name: lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_29

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: lower
F: lower
init
end
Finance type key: (-1, -1)

Name: lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_30(int24) -> mintParams_1.upper
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner
Finance Type: undef
Typing member

Name: upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_30

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: upper
F: lower
F: upper
init
end
Finance type key: (-1, -1)

Name: upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ConcentratedLiquidityPool._ensureTickSpacing(int24,int24)(REF_29,REF_30)
init
end
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
lower_1
lower
p.norm: u

Name: lower_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upper_1
upper
p.norm: u

Name: upper_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
tickSpacing_2
tickSpacing
Name: tickSpacing, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lower_1(int24) := ϕ(['REF_29'])
Phi
[i]Type for lower

Name: lower Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upper_1(int24) := ϕ(['REF_30'])
Phi
[i]Type for upper

Name: upper Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tickSpacing_2(uint24) := ϕ(['tickSpacing_0', 'tickSpacing_1'])
Phi
[i]Type for tickSpacing

Name: tickSpacing Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
tickSpacing_2
tickSpacing_2
tickSpacing

Name: tickSpacing Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1
lower_1
lower

Name: lower Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_162 = CONVERT tickSpacing_2 to int24
Converting tickSpacing_2

Name: tickSpacing Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_162

Name: TMP_162 Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_163(int24) = lower_1 (c)% TMP_162
[i]Type for TMP_163

Name: TMP_163 Function: _ensureTickSpacing
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_164(bool) = TMP_163 == 0
[i]Type for TMP_164

Name: TMP_164 Function: _ensureTickSpacing
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_165(None) = SOLIDITY_CALL require(bool,string)(TMP_164,INVALID_TICK)
[i]Type for TMP_165

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
tickSpacing_2
tickSpacing_2
tickSpacing

Name: tickSpacing Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1
lower_1
lower

Name: lower Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
TMP_166 = CONVERT tickSpacing_2 to int24
Converting tickSpacing_2

Name: tickSpacing Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_166

Name: TMP_166 Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_167(int24) = lower_1 (c)/ TMP_166
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_167

Name: TMP_167 Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_168(int24) = TMP_167 (c)% 2
[i]Type for TMP_168

Name: TMP_168 Function: _ensureTickSpacing
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_169(bool) = TMP_168 == 0
[i]Type for TMP_169

Name: TMP_169 Function: _ensureTickSpacing
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_170(None) = SOLIDITY_CALL require(bool,string)(TMP_169,LOWER_EVEN)
[i]Type for TMP_170

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1
upper_1
upper

Name: upper Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tickSpacing_2
tickSpacing_2
tickSpacing

Name: tickSpacing Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_171 = CONVERT tickSpacing_2 to int24
Converting tickSpacing_2

Name: tickSpacing Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_171

Name: TMP_171 Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_172(int24) = upper_1 (c)% TMP_171
[i]Type for TMP_172

Name: TMP_172 Function: _ensureTickSpacing
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_173(bool) = TMP_172 == 0
[i]Type for TMP_173

Name: TMP_173 Function: _ensureTickSpacing
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_174(None) = SOLIDITY_CALL require(bool,string)(TMP_173,INVALID_TICK)
[i]Type for TMP_174

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1
upper_1
upper

Name: upper Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tickSpacing_2
tickSpacing_2
tickSpacing

Name: tickSpacing Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
TMP_175 = CONVERT tickSpacing_2 to int24
Converting tickSpacing_2

Name: tickSpacing Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_175

Name: TMP_175 Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_176(int24) = upper_1 (c)/ TMP_175
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_176

Name: TMP_176 Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_177(int24) = TMP_176 (c)% 2
[i]Type for TMP_177

Name: TMP_177 Function: _ensureTickSpacing
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_178(bool) = TMP_177 != 0
[i]Type for TMP_178

Name: TMP_178 Function: _ensureTickSpacing
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_179(None) = SOLIDITY_CALL require(bool,string)(TMP_178,UPPER_ODD)
[i]Type for TMP_179

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
lower_1
lower
p.norm: u

Name: lower_1 Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upper_1
upper
p.norm: u

Name: upper_1 Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
tickSpacing_2
tickSpacing

Name: tickSpacing Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lower_1(int24) := ϕ(['REF_29'])
Phi
[i]Type for lower

Name: lower Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upper_1(int24) := ϕ(['REF_30'])
Phi
[i]Type for upper

Name: upper Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tickSpacing_2(uint24) := ϕ(['tickSpacing_0', 'tickSpacing_1'])
Phi
[i]Type for tickSpacing

Name: tickSpacing Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
tickSpacing_2
tickSpacing_2
tickSpacing

Name: tickSpacing Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1
lower_1
lower

Name: lower Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_162 = CONVERT tickSpacing_2 to int24
Converting tickSpacing_2

Name: tickSpacing Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_162

Name: TMP_162 Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_163(int24) = lower_1 (c)% TMP_162
[i]Type for TMP_163

Name: TMP_163 Function: _ensureTickSpacing
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_164(bool) = TMP_163 == 0
[i]Type for TMP_164

Name: TMP_164 Function: _ensureTickSpacing
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_165(None) = SOLIDITY_CALL require(bool,string)(TMP_164,INVALID_TICK)
[i]Type for TMP_165

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
tickSpacing_2
tickSpacing_2
tickSpacing

Name: tickSpacing Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1
lower_1
lower

Name: lower Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
TMP_166 = CONVERT tickSpacing_2 to int24
Converting tickSpacing_2

Name: tickSpacing Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_166

Name: TMP_166 Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_167(int24) = lower_1 (c)/ TMP_166
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_167

Name: TMP_167 Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_168(int24) = TMP_167 (c)% 2
[i]Type for TMP_168

Name: TMP_168 Function: _ensureTickSpacing
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_169(bool) = TMP_168 == 0
[i]Type for TMP_169

Name: TMP_169 Function: _ensureTickSpacing
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_170(None) = SOLIDITY_CALL require(bool,string)(TMP_169,LOWER_EVEN)
[i]Type for TMP_170

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1
upper_1
upper

Name: upper Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tickSpacing_2
tickSpacing_2
tickSpacing

Name: tickSpacing Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_171 = CONVERT tickSpacing_2 to int24
Converting tickSpacing_2

Name: tickSpacing Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_171

Name: TMP_171 Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_172(int24) = upper_1 (c)% TMP_171
[i]Type for TMP_172

Name: TMP_172 Function: _ensureTickSpacing
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_173(bool) = TMP_172 == 0
[i]Type for TMP_173

Name: TMP_173 Function: _ensureTickSpacing
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_174(None) = SOLIDITY_CALL require(bool,string)(TMP_173,INVALID_TICK)
[i]Type for TMP_174

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1
upper_1
upper

Name: upper Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tickSpacing_2
tickSpacing_2
tickSpacing

Name: tickSpacing Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
TMP_175 = CONVERT tickSpacing_2 to int24
Converting tickSpacing_2

Name: tickSpacing Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_175

Name: TMP_175 Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_176(int24) = upper_1 (c)/ TMP_175
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_176

Name: TMP_176 Function: _ensureTickSpacing
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_177(int24) = TMP_176 (c)% 2
[i]Type for TMP_177

Name: TMP_177 Function: _ensureTickSpacing
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_178(bool) = TMP_177 != 0
[i]Type for TMP_178

Name: TMP_178 Function: _ensureTickSpacing
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_179(None) = SOLIDITY_CALL require(bool,string)(TMP_178,UPPER_ODD)
[i]Type for TMP_179

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_7
nearestTick_7
nearestTick
Name: nearestTick, Num: 7

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsPerLiquidity_6
secondsPerLiquidity_6
secondsPerLiquidity
Name: secondsPerLiquidity, Num: 6

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal1_6
feeGrowthGlobal1_6
feeGrowthGlobal1
Name: feeGrowthGlobal1, Num: 6

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_8
ticks_8
ticks
Name: ticks, Num: 8

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal0_6
feeGrowthGlobal0_6
feeGrowthGlobal0
Name: feeGrowthGlobal0, Num: 6

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_liquidity_1
_liquidity_1
_liquidity

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_8
nearestTick
Name: nearestTick, Num: 8

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
weee
REF_32(int24) -> mintParams_1.lowerOld
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner
Finance Type: undef
Typing member
OUT KEY: mint_mintParams_lowerOld
OUT KEY: mint_mintParams_lowerOld
No field found
[i]Type for REF_32

Name: mintParams.lowerOld Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: lowerOld
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
init
end
Finance type key: (-1, -1)
XXXX
REF_33(int24) -> mintParams_1.lower
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld
Finance Type: undef
Typing member

Name: lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_33

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: lower
F: lower
init
end
Finance type key: (-1, -1)

Name: lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_34(int24) -> mintParams_1.upperOld
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld
Finance Type: undef
Typing member
OUT KEY: mint_mintParams_upperOld
OUT KEY: mint_mintParams_upperOld
No field found
[i]Type for REF_34

Name: mintParams.upperOld Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: upperOld
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
F: lowerOld
init
end
Finance type key: (-1, -1)
XXXX
REF_35(int24) -> mintParams_1.upper
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld
Finance Type: undef
Typing member

Name: upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_35

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: upper
F: lower
F: upper
init
end
Finance type key: (-1, -1)

Name: upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_42 = CONVERT _liquidity_1 to uint128
Converting _liquidity_1

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_42

Name: TMP_42 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_43 = CONVERT currentPrice_1 to uint160
Converting currentPrice_1

Name: currentPrice Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_43

Name: TMP_43 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_44(int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.insert(mapping(int24 => Ticks.Tick),uint256,uint256,uint160,int24,int24,int24,int24,uint128,int24,uint160), arguments:['ticks_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal1_6', 'secondsPerLiquidity_6', 'REF_32', 'REF_33', 'REF_34', 'REF_35', 'TMP_42', 'nearestTick_7', 'TMP_43'] 
Written func info: Ticks, insert
[i]Type for TMP_44

Name: TMP_44 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_8(int24) := TMP_44(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for nearestTick

Name: nearestTick Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied nearestTick
 To type: None

Name: nearestTick Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_liquidity_1
_liquidity_1
_liquidity

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1Actual_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1Actual_1
amount1Actual
Name: amount1Actual, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0Actual_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0Actual_1
amount0Actual
Name: amount0Actual, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TUPLE_2(uint128,uint128) = INTERNAL_CALL, ConcentratedLiquidityPool._getAmountsForLiquidity(uint256,uint256,uint256,uint256)(priceLower_1,priceUpper_1,currentPrice_1,_liquidity_1)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', None, [], -1, None, 'u']

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, None, 'u']

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
priceLower_1
priceLower
p.norm: u

Name: priceLower_1 Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
priceUpper_1
priceUpper
p.norm: u

Name: priceUpper_1 Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
currentPrice_1
currentPrice
p.norm: u

Name: currentPrice_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
liquidityAmount_1
liquidityAmount
p.norm: u

Name: liquidityAmount_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
priceLower_1(uint256) := ϕ(['priceLower_1', 'TMP_74'])
Phi
[i]Type for priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceUpper_1(uint256) := ϕ(['priceUpper_1', 'TMP_75'])
Phi
[i]Type for priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentPrice_1(uint256) := ϕ(['TMP_76', 'currentPrice_1'])
Phi
[i]Type for currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidityAmount_1(uint256) := ϕ(['TMP_77', '_liquidity_1'])
Phi
[i]Type for liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_180(bool) = priceUpper_1 <= currentPrice_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_180

Name: TMP_180 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_183(bool) = currentPrice_1 <= priceLower_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_183

Name: TMP_183 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_2
token0amount
Name: token0amount, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_184(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_184

Name: TMP_184 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_185 = CONVERT TMP_184 to uint128
Converting TMP_184

Name: TMP_184 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_185

Name: TMP_185 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token0amount_2(uint128) := TMP_185(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token0amount_3
token0amount
Name: token0amount, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1amount_2
token1amount
Name: token1amount, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0amount_3(uint128) := ϕ(['token0amount_2', 'token0amount_1'])
Phi
init
end
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1amount_2(uint128) := ϕ(['token1amount_1', 'token1amount_0'])
Phi
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1amount_3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1amount_3
token1amount
Name: token1amount, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_181(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_181

Name: TMP_181 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_182 = CONVERT TMP_181 to uint128
Converting TMP_181

Name: TMP_181 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_182

Name: TMP_182 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token1amount_3(uint128) := TMP_182(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_1
token0amount
Name: token0amount, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_186(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'currentPrice_1', 'priceUpper_1', 'True'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_186

Name: TMP_186 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_187 = CONVERT TMP_186 to uint128
Converting TMP_186

Name: TMP_186 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_187

Name: TMP_187 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token0amount_1(uint128) := TMP_187(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token1amount_4
token1amount
Name: token1amount, Num: 4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1amount_4(uint128) := ϕ(['token1amount_3', 'token1amount_0'])
Phi
init
end
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1amount_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1amount_1
token1amount
Name: token1amount, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_188(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'currentPrice_1', 'True'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_188

Name: TMP_188 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_189 = CONVERT TMP_188 to uint128
Converting TMP_188

Name: TMP_188 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_189

Name: TMP_189 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token1amount_1(uint128) := TMP_189(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
token1amount_4
token1amount_4
token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_0
token0amount_0
token0amount
Name: token0amount, Num: 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN token0amount_0,token1amount_4
init
end
init
end

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
priceLower_1
priceLower
p.norm: u

Name: priceLower_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
priceUpper_1
priceUpper
p.norm: u

Name: priceUpper_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
currentPrice_1
currentPrice
p.norm: u

Name: currentPrice_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
liquidityAmount_1
liquidityAmount
p.norm: u

Name: liquidityAmount_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
priceLower_1(uint256) := ϕ(['priceLower_1', 'TMP_74'])
Phi
[i]Type for priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceUpper_1(uint256) := ϕ(['priceUpper_1', 'TMP_75'])
Phi
[i]Type for priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentPrice_1(uint256) := ϕ(['TMP_76', 'currentPrice_1'])
Phi
[i]Type for currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidityAmount_1(uint256) := ϕ(['TMP_77', '_liquidity_1'])
Phi
[i]Type for liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_180(bool) = priceUpper_1 <= currentPrice_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_180

Name: TMP_180 Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_183(bool) = currentPrice_1 <= priceLower_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_183

Name: TMP_183 Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_2

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token0amount_2
token0amount
Name: token0amount, Num: 2

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_184(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_184

Name: TMP_184 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_185 = CONVERT TMP_184 to uint128
Converting TMP_184

Name: TMP_184 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_185

Name: TMP_185 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token0amount_2(uint128) := TMP_185(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token0amount_3
token0amount
Name: token0amount, Num: 3

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1amount_2
token1amount
Name: token1amount, Num: 2

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0amount_3(uint128) := ϕ(['token0amount_2', 'token0amount_1'])
Phi
init
end
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1amount_2(uint128) := ϕ(['token1amount_1', 'token1amount_0'])
Phi
init
end
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1amount_3

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token1amount_3
token1amount
Name: token1amount, Num: 3

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_181(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_181

Name: TMP_181 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_182 = CONVERT TMP_181 to uint128
Converting TMP_181

Name: TMP_181 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_182

Name: TMP_182 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token1amount_3(uint128) := TMP_182(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_1

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token0amount_1
token0amount
Name: token0amount, Num: 1

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_186(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'currentPrice_1', 'priceUpper_1', 'True'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_186

Name: TMP_186 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_187 = CONVERT TMP_186 to uint128
Converting TMP_186

Name: TMP_186 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_187

Name: TMP_187 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token0amount_1(uint128) := TMP_187(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token1amount_4
token1amount
Name: token1amount, Num: 4

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1amount_4(uint128) := ϕ(['token1amount_3', 'token1amount_0'])
Phi
init
end
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1amount_1

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token1amount_1
token1amount
Name: token1amount, Num: 1

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_188(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'currentPrice_1', 'True'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_188

Name: TMP_188 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_189 = CONVERT TMP_188 to uint128
Converting TMP_188

Name: TMP_188 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_189

Name: TMP_189 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token1amount_1(uint128) := TMP_189(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
token1amount_4
token1amount_4
token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_0
token0amount_0
token0amount
Name: token0amount, Num: 0

Name: token0amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN token0amount_0,token1amount_4
init
end
init
end
[i]Type for TUPLE_2

Name: TUPLE_2 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0Actual_1(uint128)= UNPACK TUPLE_2 index: 0 
([], [], 'u', None, -1)
[i]Type for amount0Actual

Name: amount0Actual Function: mint
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1Actual_1(uint128)= UNPACK TUPLE_2 index: 1 
([-1], [-1], 'u', None, -1)
[i]Type for amount1Actual

Name: amount1Actual Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
callbackData_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
callbackData_1
callbackData
Name: callbackData, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_46 = new ITridentRouter.TokenInput[](2)
[i]Type for TMP_46

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
callbackData_1(ITridentRouter.TokenInput[]) := TMP_46(ITridentRouter.TokenInput)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for callbackData

Name: callbackData Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld
Finance Type: undef
amount0Actual_1
amount0Actual_1
amount0Actual

Name: amount0Actual Function: mint
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_8
token0_8
token0
Name: token0, Num: 8

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
callbackData_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
callbackData_2
callbackData
Name: callbackData, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
callbackData_2
callbackData
Name: callbackData, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_36(ITridentRouter.TokenInput) -> callbackData_1[0]
INDEX
[i]Type for REF_36

Name: callbackData Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_38(bool) -> mintParams_1.token0native
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld
Finance Type: undef
Typing member
OUT KEY: mint_mintParams_token0native
OUT KEY: mint_mintParams_token0native
No field found
[i]Type for REF_38

Name: mintParams.token0native Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: token0native
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
F: lowerOld
F: upperOld
init
end
Finance type key: (-1, -1)
XXXX
TMP_47 = new TokenInput(token0_8,REF_38,amount0Actual_1)
[i]Type for TMP_47

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
callbackData_2(ITridentRouter.TokenInput[]) := ϕ(['callbackData_1'])
Phi
[i]Type for callbackData

Name: callbackData Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_36 (->callbackData_2) := TMP_47(ITridentRouter.TokenInput)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_36

Name: REF_36 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1Actual_1
amount1Actual_1
amount1Actual

Name: amount1Actual Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native
Finance Type: undef
token1_8
token1_8
token1
Name: token1, Num: 8

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
callbackData_3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
callbackData_3
callbackData
Name: callbackData, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
callbackData_3
callbackData
Name: callbackData, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_39(ITridentRouter.TokenInput) -> callbackData_2[1]
INDEX
[i]Type for REF_39

Name: callbackData Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_41(bool) -> mintParams_1.token1native
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native
Finance Type: undef
Typing member
OUT KEY: mint_mintParams_token1native
OUT KEY: mint_mintParams_token1native
No field found
[i]Type for REF_41

Name: mintParams.token1native Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: token1native
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
F: lowerOld
F: upperOld
F: token0native
init
end
Finance type key: (-1, -1)
XXXX
TMP_48 = new TokenInput(token1_8,REF_41,amount1Actual_1)
[i]Type for TMP_48

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
callbackData_3(ITridentRouter.TokenInput[]) := ϕ(['callbackData_2'])
Phi
[i]Type for callbackData

Name: callbackData Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_39 (->callbackData_3) := TMP_48(ITridentRouter.TokenInput)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_39

Name: REF_39 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
callbackData_3
callbackData_3
callbackData
Name: callbackData, Num: 3

Name: callbackData Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
token0_9
token0
Name: token0, Num: 9

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_9
token1
Name: token1, Num: 9

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
reserve0_9
reserve0
Name: reserve0, Num: 9

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_9
reserve1
Name: reserve1, Num: 9

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_49 = CONVERT msg.sender to ITridentCallee
Converting msg.sender
new address made for msg.sender
prev address? u
global assignment: 5
5
5
[i]Type for TMP_49

Name: TMP_49 Function: mint
Num: -1
Den: -1
Address: 5
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_50(bytes) = SOLIDITY_CALL abi.encode()(callbackData_3)
[i]Type for TMP_50

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:TMP_49(ITridentCallee), function:tridentMintCallback, arguments:['TMP_50']  
High Call: tridentMintCallback
token0_9(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_8', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: mint
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_9(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_8', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: mint
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_9(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_8', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_30'])
Phi
[i]Type for reserve0

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_9(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_9', 'reserve1_8', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
Phi
[i]Type for reserve1

Name: reserve1 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0Actual_1
amount0Actual_1
amount0Actual

Name: amount0Actual Function: mint
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_52(bool) = amount0Actual_1 != 0
[i]Type for TMP_52

Name: TMP_52 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
token0_9
token0_9
token0

Name: token0 Function: mint
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
reserve0_9
reserve0_9
reserve0

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0Actual_1
amount0Actual_1
amount0Actual

Name: amount0Actual Function: mint
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_53(uint128) = amount0Actual_1 (c)+ reserve0_9

Name: amount0Actual Function: mint
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_53

Name: TMP_53 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_9)
init
end
[[-1], [-1], 'u', 'token0', [], -1, 1, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
bento_2
bento
Name: bento, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_9', 'token1_26', 'token0_24', 'token1_10'])
Phi
[i]Type for token

Name: token Function: _balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_2
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
balance_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance_1
balance
Name: balance, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_3
bento
Name: bento, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_213 = CONVERT this to address
Converting this
4
[i]Type for TMP_213

Name: TMP_213 Function: _balance
Num: -1
Den: -1
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
High Call: balanceOf
Running querryfc
Written func info: BentoBoxMinimal, balanceOf
Retvar: ('t', ['1'], ['-1'], "'u'", "'u'", None)
([-1, 1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_214

Name: TMP_214 Function: _balance
Num: 1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
bento_3(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_2', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_214(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: _balance
Num: 1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_9', 'token1_26', 'token0_24', 'token1_10'])
Phi
[i]Type for token

Name: token Function: _balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_2
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _balance
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
balance_1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balance_1
balance
Name: balance, Num: 1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_3
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_213 = CONVERT this to address
Converting this
4
[i]Type for TMP_213

Name: TMP_213 Function: _balance
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
High Call: balanceOf
Running querryfc
Written func info: BentoBoxMinimal, balanceOf
Retvar: ('t', ['1'], ['-1'], "'u'", "'u'", None)
([-1, 1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_214

Name: TMP_214 Function: _balance
Num: 1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
bento_3(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_2', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_214(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: _balance
Num: 1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_54

Name: TMP_54 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_55(bool) = TMP_53 <= TMP_54
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_55

Name: TMP_55 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,TOKEN0_MISSING)
[i]Type for TMP_56

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve0_10
reserve0_10
reserve0
Name: reserve0, Num: 10

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0Actual_1
amount0Actual_1
amount0Actual

Name: amount0Actual Function: mint
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_11

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_11
reserve0
Name: reserve0, Num: 11

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve0_11(uint128) = reserve0_10 (c)+ amount0Actual_1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount0Actual Function: mint
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for reserve0

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1Actual_1
amount1Actual_1
amount1Actual

Name: amount1Actual Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_57(bool) = amount1Actual_1 != 0
[i]Type for TMP_57

Name: TMP_57 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1Actual_1
amount1Actual_1
amount1Actual

Name: amount1Actual Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_10
reserve1_10
reserve1
Name: reserve1, Num: 10

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_10
token1_10
token1
Name: token1, Num: 10

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_58(uint128) = amount1Actual_1 (c)+ reserve1_10

Name: amount1Actual Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_58

Name: TMP_58 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_59(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_10)
init
end
[[-1], [-1], 'u', 'token1', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_9', 'token1_26', 'token0_24', 'token1_10'])
Phi
[i]Type for token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_2
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance_1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balance_1
balance
Name: balance, Num: 1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_3
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_213 = CONVERT this to address
Converting this
4
[i]Type for TMP_213

Name: TMP_213 Function: _balance
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
High Call: balanceOf
Running querryfc
Written func info: BentoBoxMinimal, balanceOf
Retvar: ('t', ['1'], ['-1'], "'u'", "'u'", None)
([-1, 2], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_214

Name: TMP_214 Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
bento_3(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_2', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_214(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_9', 'token1_26', 'token0_24', 'token1_10'])
Phi
[i]Type for token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_2
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance_1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balance_1
balance
Name: balance, Num: 1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_3
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_213 = CONVERT this to address
Converting this
4
[i]Type for TMP_213

Name: TMP_213 Function: _balance
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
High Call: balanceOf
Running querryfc
Written func info: BentoBoxMinimal, balanceOf
Retvar: ('t', ['1'], ['-1'], "'u'", "'u'", None)
([-1, 2], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_214

Name: TMP_214 Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
bento_3(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_2', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_214(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_59

Name: TMP_59 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_60(bool) = TMP_58 <= TMP_59
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_60

Name: TMP_60 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,TOKEN1_MISSING)
[i]Type for TMP_61

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1Actual_1
amount1Actual_1
amount1Actual

Name: amount1Actual Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_11
reserve1_11
reserve1
Name: reserve1, Num: 11

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_12

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_12
reserve1
Name: reserve1, Num: 12

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve1_12(uint128) = reserve1_11 (c)+ amount1Actual_1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount1Actual Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for reserve1

Name: reserve1 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native
Finance Type: undef
feeGrowth1_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowth1_1
feeGrowth1
Name: feeGrowth1, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowth0_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowth0_1
feeGrowth0
Name: feeGrowth0, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_44(int24) -> mintParams_1.lower
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native
Finance Type: undef
Typing member

Name: lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_44

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: lower
F: lower
init
end
Finance type key: (-1, -1)

Name: lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_45(int24) -> mintParams_1.upper
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native
Finance Type: undef
Typing member

Name: upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_45

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: upper
F: lower
F: upper
init
end
Finance type key: (-1, -1)

Name: upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_3(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(REF_44,REF_45)
init
end
init
end
[i]Type for TUPLE_3

Name: TUPLE_3 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowth0_1(uint256)= UNPACK TUPLE_3 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for feeGrowth0

Name: feeGrowth0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowth1_1(uint256)= UNPACK TUPLE_3 index: 1 
([-1], [-1], 'u', None, -1)
[i]Type for feeGrowth1

Name: feeGrowth1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_46(address) -> mintParams_1.positionRecipient
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native
Finance Type: undef
Typing member
OUT KEY: mint_mintParams_positionRecipient
OUT KEY: mint_mintParams_positionRecipient
No field found
[i]Type for REF_46

Name: mintParams.positionRecipient Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: positionRecipient
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
F: lowerOld
F: upperOld
F: token0native
F: token1native
init
end
Finance type key: (-1, -1)
XXXX
TMP_62 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_62

Name: TMP_62 Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_63(bool) = REF_46 != TMP_62
[i]Type for TMP_63

Name: TMP_63 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1Actual_1
amount1Actual_1
amount1Actual

Name: amount1Actual Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
amount0Actual_1
amount0Actual_1
amount0Actual

Name: amount0Actual Function: mint
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_52(address) -> mintParams_1.positionOwner
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member

Name: positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_52

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: positionOwner
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
init
end
Finance type key: (-1, -1)

Name: positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_53(address) -> mintParams_1.positionRecipient
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member

Name: positionRecipient Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_53

Name: mintParams.positionRecipient Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: positionRecipient
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
F: lowerOld
F: upperOld
F: token0native
F: token1native
F: positionRecipient
init
end
Finance type key: (-1, -1)

Name: positionRecipient Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowth1_1
feeGrowth1_1
feeGrowth1

Name: feeGrowth1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
_liquidity_1
_liquidity_1
_liquidity

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowth0_1
feeGrowth0_1
feeGrowth0

Name: feeGrowth0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
REF_47(address) -> mintParams_1.positionOwner
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member

Name: positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_47

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: positionOwner
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
init
end
Finance type key: (-1, -1)

Name: positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_64 = CONVERT REF_47 to IPositionManager
Converting REF_47

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
PositionManager
[i]Type for TMP_64

Name: TMP_64 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: PositionManager
Value: u
Fields: 
Finance Type: undef
XXXX
REF_49(address) -> mintParams_1.positionRecipient
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member

Name: positionRecipient Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_49

Name: mintParams.positionRecipient Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: positionRecipient
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
F: lowerOld
F: upperOld
F: token0native
F: token1native
F: positionRecipient
init
end
Finance type key: (-1, -1)

Name: positionRecipient Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_50(int24) -> mintParams_1.lower
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member

Name: lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_50

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: lower
F: lower
init
end
Finance type key: (-1, -1)

Name: lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_51(int24) -> mintParams_1.upper
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member

Name: upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_51

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: upper
F: lower
F: upper
init
end
Finance type key: (-1, -1)

Name: upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_65 = CONVERT _liquidity_1 to uint128
Converting _liquidity_1

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_65

Name: TMP_65 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_66(uint256) = HIGH_LEVEL_CALL, dest:TMP_64(IPositionManager), function:positionMintCallback, arguments:['REF_49', 'REF_50', 'REF_51', 'TMP_65', 'feeGrowth0_1', 'feeGrowth1_1']  
High Call: positionMintCallback
Running querryfc
Written func info: PositionManager, positionMintCallback
[i]Type for TMP_66

Name: TMP_66 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


MAX_TICK_LIQUIDITY_2(uint128) := ϕ(['MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_3'])
token0_2(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
token1_2(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
liquidity_1(uint128) := ϕ(['liquidity_0', 'liquidity_5', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9', 'liquidity_4', 'liquidity_3'])
secondsPerLiquidity_1(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
feeGrowthGlobal0_1(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
feeGrowthGlobal1_1(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
reserve0_1(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
reserve1_1(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
price_2(uint160) := ϕ(['price_8', 'price_3', 'price_1', 'price_5', 'price_0'])
nearestTick_2(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
ticks_3(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
TMP_20(ConcentratedLiquidityPool.MintParams) = SOLIDITY_CALL abi.decode()(data_1,MintParams)
mintParams_1(ConcentratedLiquidityPool.MintParams) := TMP_20(ConcentratedLiquidityPool.MintParams)
REF_18(int24) -> mintParams_1.lower
TMP_21(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_18'] 
TMP_22 = CONVERT TMP_21 to uint256
priceLower_1(uint256) := TMP_22(uint256)
REF_20(int24) -> mintParams_1.upper
TMP_23(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_20'] 
TMP_24 = CONVERT TMP_23 to uint256
priceUpper_1(uint256) := TMP_24(uint256)
TMP_25 = CONVERT price_3 to uint256
currentPrice_1(uint256) := TMP_25(uint256)
REF_22(uint256) -> mintParams_1.amount1Desired
REF_23(uint256) -> mintParams_1.amount0Desired
TMP_26(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getLiquidityForAmounts(uint256,uint256,uint256,uint256,uint256), arguments:['priceLower_1', 'priceUpper_1', 'currentPrice_1', 'REF_22', 'REF_23'] 
_liquidity_1(uint256) := TMP_26(uint256)
TMP_27(bool) = _liquidity_1 <= MAX_TICK_LIQUIDITY_3
TMP_28(None) = SOLIDITY_CALL require(bool,string)(TMP_27,LIQUIDITY_OVERFLOW)
REF_24(address) -> mintParams_1.positionOwner
REF_25(int24) -> mintParams_1.lower
REF_26(int24) -> mintParams_1.upper
TMP_29 = CONVERT _liquidity_1 to uint128
TMP_30 = CONVERT TMP_29 to int128
TUPLE_1(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(REF_24,REF_25,REF_26,TMP_30)
amount0fees_1(uint256)= UNPACK TUPLE_1 index: 0 
amount1fees_1(uint256)= UNPACK TUPLE_1 index: 1 
TMP_31(bool) = amount0fees_1 > 0
CONDITION TMP_31
REF_27(address) -> mintParams_1.positionOwner
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_4,amount0fees_1,REF_27,False)
TMP_33 = CONVERT amount0fees_1 to uint128
reserve0_5(uint128) = reserve0_4 (c)- TMP_33
TMP_34(bool) = amount1fees_1 > 0
CONDITION TMP_34
REF_28(address) -> mintParams_1.positionOwner
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_5,amount1fees_1,REF_28,False)
TMP_36 = CONVERT amount1fees_1 to uint128
reserve1_6(uint128) = reserve1_5 (c)- TMP_36
TMP_37(bool) = priceLower_1 < currentPrice_1
TMP_38(bool) = currentPrice_1 < priceUpper_1
TMP_39(bool) = TMP_37 && TMP_38
CONDITION TMP_39
TMP_40 = CONVERT _liquidity_1 to uint128
liquidity_6(uint128) = liquidity_5 (c)+ TMP_40
REF_29(int24) -> mintParams_1.lower
REF_30(int24) -> mintParams_1.upper
INTERNAL_CALL, ConcentratedLiquidityPool._ensureTickSpacing(int24,int24)(REF_29,REF_30)
REF_32(int24) -> mintParams_1.lowerOld
REF_33(int24) -> mintParams_1.lower
REF_34(int24) -> mintParams_1.upperOld
REF_35(int24) -> mintParams_1.upper
TMP_42 = CONVERT _liquidity_1 to uint128
TMP_43 = CONVERT currentPrice_1 to uint160
TMP_44(int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.insert(mapping(int24 => Ticks.Tick),uint256,uint256,uint160,int24,int24,int24,int24,uint128,int24,uint160), arguments:['ticks_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal1_6', 'secondsPerLiquidity_6', 'REF_32', 'REF_33', 'REF_34', 'REF_35', 'TMP_42', 'nearestTick_7', 'TMP_43'] 
nearestTick_8(int24) := TMP_44(int24)
TUPLE_2(uint128,uint128) = INTERNAL_CALL, ConcentratedLiquidityPool._getAmountsForLiquidity(uint256,uint256,uint256,uint256)(priceLower_1,priceUpper_1,currentPrice_1,_liquidity_1)
amount0Actual_1(uint128)= UNPACK TUPLE_2 index: 0 
amount1Actual_1(uint128)= UNPACK TUPLE_2 index: 1 
TMP_46 = new ITridentRouter.TokenInput[](2)
callbackData_1(ITridentRouter.TokenInput[]) := TMP_46(ITridentRouter.TokenInput)
REF_36(ITridentRouter.TokenInput) -> callbackData_1[0]
REF_38(bool) -> mintParams_1.token0native
TMP_47 = new TokenInput(token0_8,REF_38,amount0Actual_1)
callbackData_2(ITridentRouter.TokenInput[]) := ϕ(['callbackData_1'])
REF_36 (->callbackData_2) := TMP_47(ITridentRouter.TokenInput)
REF_39(ITridentRouter.TokenInput) -> callbackData_2[1]
REF_41(bool) -> mintParams_1.token1native
TMP_48 = new TokenInput(token1_8,REF_41,amount1Actual_1)
callbackData_3(ITridentRouter.TokenInput[]) := ϕ(['callbackData_2'])
REF_39 (->callbackData_3) := TMP_48(ITridentRouter.TokenInput)
TMP_49 = CONVERT msg.sender to ITridentCallee
TMP_50(bytes) = SOLIDITY_CALL abi.encode()(callbackData_3)
HIGH_LEVEL_CALL, dest:TMP_49(ITridentCallee), function:tridentMintCallback, arguments:['TMP_50']  
token0_9(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_8', 'token0_9', 'token0_27'])
token1_9(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_8', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
reserve0_9(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_8', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_30'])
reserve1_9(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_9', 'reserve1_8', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
TMP_52(bool) = amount0Actual_1 != 0
CONDITION TMP_52
TMP_53(uint128) = amount0Actual_1 (c)+ reserve0_9
TMP_54(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_9)
TMP_55(bool) = TMP_53 <= TMP_54
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,TOKEN0_MISSING)
reserve0_11(uint128) = reserve0_10 (c)+ amount0Actual_1
TMP_57(bool) = amount1Actual_1 != 0
CONDITION TMP_57
TMP_58(uint128) = amount1Actual_1 (c)+ reserve1_10
TMP_59(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_10)
TMP_60(bool) = TMP_58 <= TMP_59
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,TOKEN1_MISSING)
reserve1_12(uint128) = reserve1_11 (c)+ amount1Actual_1
REF_44(int24) -> mintParams_1.lower
REF_45(int24) -> mintParams_1.upper
TUPLE_3(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(REF_44,REF_45)
feeGrowth0_1(uint256)= UNPACK TUPLE_3 index: 0 
feeGrowth1_1(uint256)= UNPACK TUPLE_3 index: 1 
REF_46(address) -> mintParams_1.positionRecipient
TMP_62 = CONVERT 0 to address
TMP_63(bool) = REF_46 != TMP_62
CONDITION TMP_63
REF_52(address) -> mintParams_1.positionOwner
REF_53(address) -> mintParams_1.positionRecipient
Emit Mint(REF_52,amount0Actual_1,amount1Actual_1,REF_53)
REF_47(address) -> mintParams_1.positionOwner
TMP_64 = CONVERT REF_47 to IPositionManager
REF_49(address) -> mintParams_1.positionRecipient
REF_50(int24) -> mintParams_1.lower
REF_51(int24) -> mintParams_1.upper
TMP_65 = CONVERT _liquidity_1 to uint128
TMP_66(uint256) = HIGH_LEVEL_CALL, dest:TMP_64(IPositionManager), function:positionMintCallback, arguments:['REF_49', 'REF_50', 'REF_51', 'TMP_65', 'feeGrowth0_1', 'feeGrowth1_1']  


Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
MAX_TICK_LIQUIDITY_2
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_2
token0

Name: token0 Function: mint
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_2
token1

Name: token1 Function: mint
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
liquidity_1
liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
secondsPerLiquidity_1
secondsPerLiquidity

Name: secondsPerLiquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_1
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_1
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve0_1
reserve0

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_1
reserve1

Name: reserve1 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
price_2
price

Name: price Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_2
nearestTick

Name: nearestTick Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_3
ticks

Name: ticks Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
MAX_TICK_LIQUIDITY_2(uint128) := ϕ(['MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_3'])
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_2(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: mint
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_2(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: mint
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_1(uint128) := ϕ(['liquidity_0', 'liquidity_5', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9', 'liquidity_4', 'liquidity_3'])
Phi
[i]Type for liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsPerLiquidity_1(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_1(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_1(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_1(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
Phi
[i]Type for reserve0

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_1(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
Phi
[i]Type for reserve1

Name: reserve1 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_2(uint160) := ϕ(['price_8', 'price_3', 'price_1', 'price_5', 'price_0'])
Phi
[i]Type for price

Name: price Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_2(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_3(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
data_1
data_1
data
p.norm: u
Name: data, Num: 1

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
mintParams_1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
End popogation
weee
weee
TMP_20(ConcentratedLiquidityPool.MintParams) = SOLIDITY_CALL abi.decode()(data_1,MintParams)
[i]Type for TMP_20

Name: TMP_20 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
mintParams_1(ConcentratedLiquidityPool.MintParams) := TMP_20(ConcentratedLiquidityPool.MintParams)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for mintParams

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
priceLower_1

Name: priceLower Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower
Name: priceLower, Num: 1

Name: priceLower Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_18(int24) -> mintParams_1.lower
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_18

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: lower
F: lower
init
end
Finance type key: (-1, -1)

Name: lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_21(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_18'] 
Written func info: TickMath, getSqrtRatioAtTick
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_21

Name: TMP_21 Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22 = CONVERT TMP_21 to uint256
Converting TMP_21

Name: TMP_21 Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_22

Name: TMP_22 Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceLower_1(uint256) := TMP_22(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for priceLower

Name: priceLower Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
priceUpper_1

Name: priceUpper Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceUpper_1
priceUpper
Name: priceUpper, Num: 1

Name: priceUpper Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_20(int24) -> mintParams_1.upper
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_20

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: upper
F: lower
F: upper
init
end
Finance type key: (-1, -1)

Name: upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_23(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_20'] 
Written func info: TickMath, getSqrtRatioAtTick
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_23

Name: TMP_23 Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_24 = CONVERT TMP_23 to uint256
Converting TMP_23

Name: TMP_23 Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_24

Name: TMP_24 Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceUpper_1(uint256) := TMP_24(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for priceUpper

Name: priceUpper Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
price_3
price_3
price

Name: price Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1

Name: currentPrice Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice
Name: currentPrice, Num: 1

Name: currentPrice Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_25 = CONVERT price_3 to uint256
Converting price_3

Name: price Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_25

Name: TMP_25 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentPrice_1(uint256) := TMP_25(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentPrice

Name: currentPrice Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_liquidity_1

Name: _liquidity Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_liquidity_1
_liquidity
Name: _liquidity, Num: 1

Name: _liquidity Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_22(uint256) -> mintParams_1.amount1Desired
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_22

Name: mintParams.amount1Desired Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: amount1Desired
F: lower
F: upper
F: amount1Desired
init
end
Finance type key: (-1, -1)

Name: amount1Desired Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_23(uint256) -> mintParams_1.amount0Desired
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_23

Name: mintParams.amount0Desired Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: amount0Desired
F: lower
F: upper
F: amount1Desired
F: amount0Desired
init
end
Finance type key: (-1, -1)

Name: amount0Desired Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_26(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getLiquidityForAmounts(uint256,uint256,uint256,uint256,uint256), arguments:['priceLower_1', 'priceUpper_1', 'currentPrice_1', 'REF_22', 'REF_23'] 
Written func info: DyDxMath, getLiquidityForAmounts
[i]Type for TMP_26

Name: TMP_26 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_liquidity_1(uint256) := TMP_26(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _liquidity

Name: _liquidity Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_liquidity_1
_liquidity_1
_liquidity
Name: _liquidity, Num: 1

Name: _liquidity Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MAX_TICK_LIQUIDITY_3
MAX_TICK_LIQUIDITY_3
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_27(bool) = _liquidity_1 <= MAX_TICK_LIQUIDITY_3
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_27

Name: TMP_27 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_28(None) = SOLIDITY_CALL require(bool,string)(TMP_27,LIQUIDITY_OVERFLOW)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
_liquidity_1
_liquidity_1
_liquidity

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1

Name: amount1fees Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1
amount1fees
Name: amount1fees, Num: 1

Name: amount1fees Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0fees_1

Name: amount0fees Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0fees_1
amount0fees
Name: amount0fees, Num: 1

Name: amount0fees Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
weee
REF_24(address) -> mintParams_1.positionOwner
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_24

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: positionOwner
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
init
end
Finance type key: (-1, -1)

Name: positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_25(int24) -> mintParams_1.lower
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_25

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: lower
F: lower
init
end
Finance type key: (-1, -1)

Name: lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_26(int24) -> mintParams_1.upper
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_26

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: upper
F: lower
F: upper
init
end
Finance type key: (-1, -1)

Name: upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_29 = CONVERT _liquidity_1 to uint128
Converting _liquidity_1

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_29

Name: TMP_29 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_30 = CONVERT TMP_29 to int128
Converting TMP_29

Name: TMP_29 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_30

Name: TMP_30 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_1(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(REF_24,REF_25,REF_26,TMP_30)
init
end
init
end
init
end
init
end
[i]Type for TUPLE_1

Name: TUPLE_1 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0fees_1(uint256)= UNPACK TUPLE_1 index: 0 
([-1], [-1], "'u'", None, -1)
[i]Type for amount0fees

Name: amount0fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1fees_1(uint256)= UNPACK TUPLE_1 index: 1 
([-1], [-1], "'u'", None, -1)
[i]Type for amount1fees

Name: amount1fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_31(bool) = amount0fees_1 > 0
init
end
init
end
A: 'u' B: 0
x
y
A: 'u' B: 0
<class 'str'>
<class 'int'>
lnorm: 'u' rnorm: 0
[i]Type for TMP_31

Name: TMP_31 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
token0_4
token0_4
token0

Name: token0 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
End popogation
weee
weee
REF_27(address) -> mintParams_1.positionOwner
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_27

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: positionOwner
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
init
end
Finance type key: (-1, -1)

Name: positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_4,amount0fees_1,REF_27,False)
init
end
init
end
init
end
init
end
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve0_4
reserve0_4
reserve0

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_5

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_5
reserve0

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_33 = CONVERT amount0fees_1 to uint128
Converting amount0fees_1

Name: amount0fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_33

Name: TMP_33 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_5(uint128) = reserve0_4 (c)- TMP_33
SUB1
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
SUB

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_33 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve0

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_34(bool) = amount1fees_1 > 0
init
end
init
end
A: 'u' B: 0
x
y
A: 'u' B: 0
<class 'str'>
<class 'int'>
lnorm: 'u' rnorm: 0
[i]Type for TMP_34

Name: TMP_34 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
token1_5
token1_5
token1

Name: token1 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_28(address) -> mintParams_1.positionOwner
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_28

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: positionOwner
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
init
end
Finance type key: (-1, -1)

Name: positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_5,amount1fees_1,REF_28,False)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', 'token1', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], "'u'", None, [], -1, -1, 'u']

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: 'u'

Name: shares_1 Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: 0

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: 'u'

Name: shares_1 Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: 0

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_5
reserve1_5
reserve1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_6

Name: reserve1 Function: mint
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_6
reserve1

Name: reserve1 Function: mint
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_36 = CONVERT amount1fees_1 to uint128
Converting amount1fees_1

Name: amount1fees Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_36

Name: TMP_36 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_6(uint128) = reserve1_5 (c)- TMP_36
SUB1
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
SUB

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_36 Function: mint
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve1

Name: reserve1 Function: mint
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_37(bool) = priceLower_1 < currentPrice_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_37

Name: TMP_37 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_38(bool) = currentPrice_1 < priceUpper_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_38

Name: TMP_38 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_39(bool) = TMP_37 && TMP_38
[i]Type for TMP_39

Name: TMP_39 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidity_5
liquidity_5
liquidity

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_liquidity_1
_liquidity_1
_liquidity

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_6

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_6
liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_40 = CONVERT _liquidity_1 to uint128
Converting _liquidity_1

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_40

Name: TMP_40 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_6(uint128) = liquidity_5 (c)+ TMP_40

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_40 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied liquidity
 To type: None

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
End popogation
weee
weee
weee
REF_29(int24) -> mintParams_1.lower
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_29

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: lower
F: lower
init
end
Finance type key: (-1, -1)

Name: lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_30(int24) -> mintParams_1.upper
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_30

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: upper
F: lower
F: upper
init
end
Finance type key: (-1, -1)

Name: upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ConcentratedLiquidityPool._ensureTickSpacing(int24,int24)(REF_29,REF_30)
init
end
init
end
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_7
nearestTick_7
nearestTick

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsPerLiquidity_6
secondsPerLiquidity_6
secondsPerLiquidity

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal1_6
feeGrowthGlobal1_6
feeGrowthGlobal1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_8
ticks_8
ticks

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal0_6
feeGrowthGlobal0_6
feeGrowthGlobal0

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_liquidity_1
_liquidity_1
_liquidity

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_8

Name: nearestTick Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_8
nearestTick

Name: nearestTick Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
weee
REF_32(int24) -> mintParams_1.lowerOld
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_32

Name: mintParams.lowerOld Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: lowerOld
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
F: lowerOld
init
end
Finance type key: (-1, -1)

Name: lowerOld Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_33(int24) -> mintParams_1.lower
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_33

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: lower
F: lower
init
end
Finance type key: (-1, -1)

Name: lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_34(int24) -> mintParams_1.upperOld
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_34

Name: mintParams.upperOld Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: upperOld
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
F: lowerOld
F: upperOld
init
end
Finance type key: (-1, -1)

Name: upperOld Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_35(int24) -> mintParams_1.upper
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_35

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: upper
F: lower
F: upper
init
end
Finance type key: (-1, -1)

Name: upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_42 = CONVERT _liquidity_1 to uint128
Converting _liquidity_1

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_42

Name: TMP_42 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_43 = CONVERT currentPrice_1 to uint160
Converting currentPrice_1

Name: currentPrice Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_43

Name: TMP_43 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_44(int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.insert(mapping(int24 => Ticks.Tick),uint256,uint256,uint160,int24,int24,int24,int24,uint128,int24,uint160), arguments:['ticks_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal1_6', 'secondsPerLiquidity_6', 'REF_32', 'REF_33', 'REF_34', 'REF_35', 'TMP_42', 'nearestTick_7', 'TMP_43'] 
Written func info: Ticks, insert
[i]Type for TMP_44

Name: TMP_44 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_8(int24) := TMP_44(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for nearestTick

Name: nearestTick Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied nearestTick
 To type: None

Name: nearestTick Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: mint
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_liquidity_1
_liquidity_1
_liquidity

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1Actual_1

Name: amount1Actual Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1Actual_1
amount1Actual
Name: amount1Actual, Num: 1

Name: amount1Actual Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0Actual_1

Name: amount0Actual Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0Actual_1
amount0Actual
Name: amount0Actual, Num: 1

Name: amount0Actual Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TUPLE_2(uint128,uint128) = INTERNAL_CALL, ConcentratedLiquidityPool._getAmountsForLiquidity(uint256,uint256,uint256,uint256)(priceLower_1,priceUpper_1,currentPrice_1,_liquidity_1)
init
end
init
end
init
end
init
end
[i]Type for TUPLE_2

Name: TUPLE_2 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0Actual_1(uint128)= UNPACK TUPLE_2 index: 0 
([], [], 'u', None, -1)
[i]Type for amount0Actual

Name: amount0Actual Function: mint
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1Actual_1(uint128)= UNPACK TUPLE_2 index: 1 
([-1], [-1], 'u', None, -1)
[i]Type for amount1Actual

Name: amount1Actual Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
callbackData_1

Name: callbackData Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
callbackData_1
callbackData
Name: callbackData, Num: 1

Name: callbackData Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_46 = new ITridentRouter.TokenInput[](2)
[i]Type for TMP_46

Name: TMP_46 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
callbackData_1(ITridentRouter.TokenInput[]) := TMP_46(ITridentRouter.TokenInput)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for callbackData

Name: callbackData Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
amount0Actual_1
amount0Actual_1
amount0Actual

Name: amount0Actual Function: mint
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_8
token0_8
token0

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
callbackData_2

Name: callbackData Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
callbackData_2
callbackData
Name: callbackData, Num: 2

Name: callbackData Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
callbackData_2
callbackData
Name: callbackData, Num: 2

Name: callbackData Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_36(ITridentRouter.TokenInput) -> callbackData_1[0]
INDEX
[i]Type for REF_36

Name: callbackData Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_38(bool) -> mintParams_1.token0native
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_38

Name: mintParams.token0native Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: token0native
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
F: lowerOld
F: upperOld
F: token0native
init
end
Finance type key: (-1, -1)

Name: token0native Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_47 = new TokenInput(token0_8,REF_38,amount0Actual_1)
[i]Type for TMP_47

Name: TMP_47 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
callbackData_2(ITridentRouter.TokenInput[]) := ϕ(['callbackData_1'])
Phi
[i]Type for callbackData

Name: callbackData Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_36 (->callbackData_2) := TMP_47(ITridentRouter.TokenInput)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_36

Name: REF_36 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1Actual_1
amount1Actual_1
amount1Actual

Name: amount1Actual Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
token1_8
token1_8
token1

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
callbackData_3

Name: callbackData Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
callbackData_3
callbackData
Name: callbackData, Num: 3

Name: callbackData Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
callbackData_3
callbackData
Name: callbackData, Num: 3

Name: callbackData Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_39(ITridentRouter.TokenInput) -> callbackData_2[1]
INDEX
[i]Type for REF_39

Name: callbackData Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_41(bool) -> mintParams_1.token1native
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_41

Name: mintParams.token1native Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: token1native
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
F: lowerOld
F: upperOld
F: token0native
F: token1native
init
end
Finance type key: (-1, -1)

Name: token1native Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_48 = new TokenInput(token1_8,REF_41,amount1Actual_1)
[i]Type for TMP_48

Name: TMP_48 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
callbackData_3(ITridentRouter.TokenInput[]) := ϕ(['callbackData_2'])
Phi
[i]Type for callbackData

Name: callbackData Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_39 (->callbackData_3) := TMP_48(ITridentRouter.TokenInput)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_39

Name: REF_39 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
callbackData_3
callbackData_3
callbackData
Name: callbackData, Num: 3

Name: callbackData Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
token0_9
token0

Name: token0 Function: mint
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_9
token1

Name: token1 Function: mint
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
reserve0_9
reserve0

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_9
reserve1

Name: reserve1 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_49 = CONVERT msg.sender to ITridentCallee
Converting msg.sender
5
[i]Type for TMP_49

Name: TMP_49 Function: mint
Num: 
Den: 
Address: 5
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_50(bytes) = SOLIDITY_CALL abi.encode()(callbackData_3)
[i]Type for TMP_50

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:TMP_49(ITridentCallee), function:tridentMintCallback, arguments:['TMP_50']  
High Call: tridentMintCallback
token0_9(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_8', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: mint
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_9(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_8', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: mint
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_9(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_8', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_30'])
Phi
[i]Type for reserve0

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_9(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_9', 'reserve1_8', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
Phi
[i]Type for reserve1

Name: reserve1 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0Actual_1
amount0Actual_1
amount0Actual

Name: amount0Actual Function: mint
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_52(bool) = amount0Actual_1 != 0
[i]Type for TMP_52

Name: TMP_52 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
token0_9
token0_9
token0

Name: token0 Function: mint
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
reserve0_9
reserve0_9
reserve0

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0Actual_1
amount0Actual_1
amount0Actual

Name: amount0Actual Function: mint
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_53(uint128) = amount0Actual_1 (c)+ reserve0_9

Name: amount0Actual Function: mint
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_53

Name: TMP_53 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_54(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_9)
init
end
init
end
[i]Type for TMP_54

Name: TMP_54 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_55(bool) = TMP_53 <= TMP_54
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_55

Name: TMP_55 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,TOKEN0_MISSING)
[i]Type for TMP_56

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve0_10
reserve0_10
reserve0

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0Actual_1
amount0Actual_1
amount0Actual

Name: amount0Actual Function: mint
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_11

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_11
reserve0

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve0_11(uint128) = reserve0_10 (c)+ amount0Actual_1

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount0Actual Function: mint
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for reserve0

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1Actual_1
amount1Actual_1
amount1Actual

Name: amount1Actual Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_57(bool) = amount1Actual_1 != 0
[i]Type for TMP_57

Name: TMP_57 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1Actual_1
amount1Actual_1
amount1Actual

Name: amount1Actual Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_10
reserve1_10
reserve1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_10
token1_10
token1

Name: token1 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_58(uint128) = amount1Actual_1 (c)+ reserve1_10

Name: amount1Actual Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_58

Name: TMP_58 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_59(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_10)
init
end
[[-1], [-1], 'u', 'token1', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_9', 'token1_26', 'token0_24', 'token1_10'])
Phi
[i]Type for token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_2
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance_1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balance_1
balance
Name: balance, Num: 1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_3
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_213 = CONVERT this to address
Converting this
4
[i]Type for TMP_213

Name: TMP_213 Function: _balance
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
High Call: balanceOf
Running querryfc
Written func info: BentoBoxMinimal, balanceOf
Retvar: ('t', ['1'], ['-1'], "'u'", "'u'", None)
([-1, 2], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_214

Name: TMP_214 Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
bento_3(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_2', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_214(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_9', 'token1_26', 'token0_24', 'token1_10'])
Phi
[i]Type for token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_2
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance_1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balance_1
balance
Name: balance, Num: 1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_3
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_213 = CONVERT this to address
Converting this
4
[i]Type for TMP_213

Name: TMP_213 Function: _balance
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
High Call: balanceOf
Running querryfc
Written func info: BentoBoxMinimal, balanceOf
Retvar: ('t', ['1'], ['-1'], "'u'", "'u'", None)
([-1, 2], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_214

Name: TMP_214 Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
bento_3(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_2', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_214(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_59

Name: TMP_59 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_60(bool) = TMP_58 <= TMP_59
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_60

Name: TMP_60 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,TOKEN1_MISSING)
[i]Type for TMP_61

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1Actual_1
amount1Actual_1
amount1Actual

Name: amount1Actual Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_11
reserve1_11
reserve1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_12

Name: reserve1 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_12
reserve1

Name: reserve1 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve1_12(uint128) = reserve1_11 (c)+ amount1Actual_1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount1Actual Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for reserve1

Name: reserve1 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
feeGrowth1_1

Name: feeGrowth1 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowth1_1
feeGrowth1
Name: feeGrowth1, Num: 1

Name: feeGrowth1 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowth0_1

Name: feeGrowth0 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowth0_1
feeGrowth0
Name: feeGrowth0, Num: 1

Name: feeGrowth0 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_44(int24) -> mintParams_1.lower
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_44

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: lower
F: lower
init
end
Finance type key: (-1, -1)

Name: lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_45(int24) -> mintParams_1.upper
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_45

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: upper
F: lower
F: upper
init
end
Finance type key: (-1, -1)

Name: upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_3(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(REF_44,REF_45)
init
end
init
end
[i]Type for TUPLE_3

Name: TUPLE_3 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowth0_1(uint256)= UNPACK TUPLE_3 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for feeGrowth0

Name: feeGrowth0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowth1_1(uint256)= UNPACK TUPLE_3 index: 1 
([-1], [-1], 'u', None, -1)
[i]Type for feeGrowth1

Name: feeGrowth1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_46(address) -> mintParams_1.positionRecipient
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_46

Name: mintParams.positionRecipient Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: positionRecipient
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
F: lowerOld
F: upperOld
F: token0native
F: token1native
F: positionRecipient
init
end
Finance type key: (-1, -1)

Name: positionRecipient Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_62 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_62

Name: TMP_62 Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_63(bool) = REF_46 != TMP_62
[i]Type for TMP_63

Name: TMP_63 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1Actual_1
amount1Actual_1
amount1Actual

Name: amount1Actual Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
amount0Actual_1
amount0Actual_1
amount0Actual

Name: amount0Actual Function: mint
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_52(address) -> mintParams_1.positionOwner
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_52

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: positionOwner
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
init
end
Finance type key: (-1, -1)

Name: positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_53(address) -> mintParams_1.positionRecipient
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_53

Name: mintParams.positionRecipient Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: positionRecipient
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
F: lowerOld
F: upperOld
F: token0native
F: token1native
F: positionRecipient
init
end
Finance type key: (-1, -1)

Name: positionRecipient Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowth1_1
feeGrowth1_1
feeGrowth1

Name: feeGrowth1 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
mintParams_1
mintParams_1
mintParams
Name: mintParams, Num: 1

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
_liquidity_1
_liquidity_1
_liquidity

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowth0_1
feeGrowth0_1
feeGrowth0

Name: feeGrowth0 Function: mint
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
REF_47(address) -> mintParams_1.positionOwner
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_47

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: positionOwner
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
init
end
Finance type key: (-1, -1)

Name: positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_64 = CONVERT REF_47 to IPositionManager
Converting REF_47

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
PositionManager
[i]Type for TMP_64

Name: TMP_64 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: PositionManager
Value: u
Fields: 
Finance Type: undef
XXXX
REF_49(address) -> mintParams_1.positionRecipient
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_49

Name: mintParams.positionRecipient Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: positionRecipient
F: lower
F: upper
F: amount1Desired
F: amount0Desired
F: positionOwner
F: lowerOld
F: upperOld
F: token0native
F: token1native
F: positionRecipient
init
end
Finance type key: (-1, -1)

Name: positionRecipient Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_50(int24) -> mintParams_1.lower
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_50

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: lower
F: lower
init
end
Finance type key: (-1, -1)

Name: lower Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_51(int24) -> mintParams_1.upper
MEMBER
init
end
init
end

Name: mintParams Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Typing member
init
end
[i]Type for REF_51

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: mintParams_1, Field: upper
F: lower
F: upper
init
end
Finance type key: (-1, -1)

Name: upper Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_65 = CONVERT _liquidity_1 to uint128
Converting _liquidity_1

Name: _liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_65

Name: TMP_65 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_66(uint256) = HIGH_LEVEL_CALL, dest:TMP_64(IPositionManager), function:positionMintCallback, arguments:['REF_49', 'REF_50', 'REF_51', 'TMP_65', 'feeGrowth0_1', 'feeGrowth1_1']  
High Call: positionMintCallback
Running querryfc
Written func info: PositionManager, positionMintCallback
[i]Type for TMP_66

Name: TMP_66 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX



burn
Finding type for data(bytes ... )
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


token0_11(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
token1_12(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
liquidity_7(uint128) := ϕ(['liquidity_0', 'liquidity_5', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9', 'liquidity_4', 'liquidity_3'])
reserve0_12(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
reserve1_13(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
price_4(uint160) := ϕ(['price_8', 'price_3', 'price_1', 'price_5', 'price_0'])
nearestTick_9(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
ticks_9(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
TUPLE_4(int24,int24,uint128,address,bool) = SOLIDITY_CALL abi.decode()(data_1(int24,int24,uint128,address,bool))
lower_1(int24)= UNPACK TUPLE_4 index: 0 
upper_1(int24)= UNPACK TUPLE_4 index: 1 
amount_1(uint128)= UNPACK TUPLE_4 index: 2 
recipient_1(address)= UNPACK TUPLE_4 index: 3 
unwrapBento_1(bool)= UNPACK TUPLE_4 index: 4 
TMP_69(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['lower_1'] 
priceLower_1(uint160) := TMP_69(uint160)
TMP_70(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['upper_1'] 
priceUpper_1(uint160) := TMP_70(uint160)
currentPrice_1(uint160) := price_5(uint160)
TMP_71(bool) = priceLower_1 < currentPrice_1
TMP_72(bool) = currentPrice_1 < priceUpper_1
TMP_73(bool) = TMP_71 && TMP_72
CONDITION TMP_73
liquidity_9(uint128) = liquidity_8 (c)- amount_1
TMP_74 = CONVERT priceLower_1 to uint256
TMP_75 = CONVERT priceUpper_1 to uint256
TMP_76 = CONVERT currentPrice_1 to uint256
TMP_77 = CONVERT amount_1 to uint256
TUPLE_5(uint128,uint128) = INTERNAL_CALL, ConcentratedLiquidityPool._getAmountsForLiquidity(uint256,uint256,uint256,uint256)(TMP_74,TMP_75,TMP_76,TMP_77)
amount0_1(uint256)= UNPACK TUPLE_5 index: 0 
amount1_1(uint256)= UNPACK TUPLE_5 index: 1 
TMP_78 = CONVERT amount_1 to int128
TMP_79(int128) = 0 (c)- TMP_78
TUPLE_6(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(msg.sender,lower_1,upper_1,TMP_79)
amount0fees_1(uint256)= UNPACK TUPLE_6 index: 0 
amount1fees_1(uint256)= UNPACK TUPLE_6 index: 1 
amount0_2(uint256) = amount0_1 + amount0fees_1
amount1_2(uint256) = amount1_1 + amount1fees_1
TMP_81 = new IPool.TokenAmount[](2)
withdrawnAmounts_1(IPool.TokenAmount[]) := TMP_81(IPool.TokenAmount)
REF_57(IPool.TokenAmount) -> withdrawnAmounts_1[0]
TMP_82 = new TokenAmount(token0_14,amount0_2)
withdrawnAmounts_2(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_1'])
REF_57 (->withdrawnAmounts_2) := TMP_82(IPool.TokenAmount)
REF_58(IPool.TokenAmount) -> withdrawnAmounts_2[1]
TMP_83 = new TokenAmount(token1_15,amount1_2)
withdrawnAmounts_3(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_2'])
REF_58 (->withdrawnAmounts_3) := TMP_83(IPool.TokenAmount)
TMP_84 = CONVERT amount0fees_1 to uint128
reserve0_16(uint128) = reserve0_15 - TMP_84
TMP_85 = CONVERT amount1fees_1 to uint128
reserve1_17(uint128) = reserve1_16 - TMP_85
INTERNAL_CALL, ConcentratedLiquidityPool._transferBothTokens(address,uint256,uint256,bool)(recipient_1,amount0_2,amount1_2,unwrapBento_1)
TMP_87(int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.remove(mapping(int24 => Ticks.Tick),int24,int24,uint128,int24), arguments:['ticks_13', 'lower_1', 'upper_1', 'amount_1', 'nearestTick_13'] 
nearestTick_14(int24) := TMP_87(int24)
Emit Burn(msg.sender,amount0_2,amount1_2,recipient_1)


Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token0_11
token0
Name: token0, Num: 11

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_12
token1
Name: token1, Num: 12

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
liquidity_7
liquidity
Name: liquidity, Num: 7

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve0_12
reserve0
Name: reserve0, Num: 12

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_13
reserve1
Name: reserve1, Num: 13

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
price_4
price
Name: price, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_9
nearestTick
Name: nearestTick, Num: 9

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_9
ticks
Name: ticks, Num: 9

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_11(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: burn
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_12(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: burn
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_7(uint128) := ϕ(['liquidity_0', 'liquidity_5', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9', 'liquidity_4', 'liquidity_3'])
Phi
[i]Type for liquidity

Name: liquidity Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_12(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
Phi
[i]Type for reserve0

Name: reserve0 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_13(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
Phi
[i]Type for reserve1

Name: reserve1 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_4(uint160) := ϕ(['price_8', 'price_3', 'price_1', 'price_5', 'price_0'])
Phi
[i]Type for price

Name: price Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_9(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_9(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
data_1
data_1
data
p.norm: u
Name: data, Num: 1

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient
Name: recipient, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1
lower
Name: lower, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1
amount
Name: amount, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
Name: unwrapBento, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper
Name: upper, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
TUPLE_4(int24,int24,uint128,address,bool) = SOLIDITY_CALL abi.decode()(data_1(int24,int24,uint128,address,bool))
[i]Type for TUPLE_4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lower_1(int24)= UNPACK TUPLE_4 index: 0 
Finding type for lower(int24 ... )
[i]Type for lower

Name: lower Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upper_1(int24)= UNPACK TUPLE_4 index: 1 
Finding type for upper(int24 ... )
[i]Type for upper

Name: upper Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint128)= UNPACK TUPLE_4 index: 2 
Finding type for amount(uint128 ... )
{'global:token0': 1, 'global:token1': 2, 'global:barFeeTo': 3, 'constructor:_token0': -999, 'constructor:_token1': -998, 'burn:recipient': -997, 'collect:recipient': -996, 'swap:recipient': -995, 'constructor:TMP_3': 4, 'global:this': 4, 'mint:TMP_49': 5, 'global:msg.sender': 5}
(-1, -1, 'u', None, -1, 0)
[i]Type for amount

Name: amount Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
recipient_1(address)= UNPACK TUPLE_4 index: 3 
Finding type for recipient(address ... )
prev address? u
Head Addr: -997
    Norm: 0
    Set: {-997}
    Fin: NULL
[i]Type for recipient

Name: recipient Function: burn
Num: 
Den: 
Address: -997
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool)= UNPACK TUPLE_4 index: 4 
Finding type for unwrapBento(bool ... )
[i]Type for unwrapBento

Name: unwrapBento Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1
lower_1
lower

Name: lower Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower
Name: priceLower, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_69(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['lower_1'] 
Written func info: TickMath, getSqrtRatioAtTick
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_69

Name: TMP_69 Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceLower_1(uint160) := TMP_69(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for priceLower

Name: priceLower Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1
upper_1
upper

Name: upper Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceUpper_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceUpper_1
priceUpper
Name: priceUpper, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_70(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['upper_1'] 
Written func info: TickMath, getSqrtRatioAtTick
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_70

Name: TMP_70 Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceUpper_1(uint160) := TMP_70(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for priceUpper

Name: priceUpper Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
price_5
price_5
price
Name: price, Num: 5

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice
Name: currentPrice, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentPrice_1(uint160) := price_5(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentPrice

Name: currentPrice Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_71(bool) = priceLower_1 < currentPrice_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_71

Name: TMP_71 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_72(bool) = currentPrice_1 < priceUpper_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_72

Name: TMP_72 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_73(bool) = TMP_71 && TMP_72
[i]Type for TMP_73

Name: TMP_73 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidity_8
liquidity_8
liquidity
Name: liquidity, Num: 8

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
liquidity_9

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_9
liquidity
Name: liquidity, Num: 9

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
liquidity_9(uint128) = liquidity_8 (c)- amount_1
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:u rval:u
[i]Type for liquidity

Name: liquidity Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied liquidity
 To type: None

Name: liquidity Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
amount0_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0
Name: amount0, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1
Name: amount1, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
TMP_74 = CONVERT priceLower_1 to uint256
Converting priceLower_1

Name: priceLower Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_74

Name: TMP_74 Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75 = CONVERT priceUpper_1 to uint256
Converting priceUpper_1

Name: priceUpper Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_75

Name: TMP_75 Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_76 = CONVERT currentPrice_1 to uint256
Converting currentPrice_1

Name: currentPrice Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_76

Name: TMP_76 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_77 = CONVERT amount_1 to uint256
Converting amount_1

Name: amount Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_77

Name: TMP_77 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TUPLE_5(uint128,uint128) = INTERNAL_CALL, ConcentratedLiquidityPool._getAmountsForLiquidity(uint256,uint256,uint256,uint256)(TMP_74,TMP_75,TMP_76,TMP_77)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', None, [], -1, None, 'u']

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, None, 'u']

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
priceLower_1
priceLower
p.norm: u

Name: priceLower_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
priceUpper_1
priceUpper
p.norm: u

Name: priceUpper_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
currentPrice_1
currentPrice
p.norm: u

Name: currentPrice_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
liquidityAmount_1
liquidityAmount
p.norm: u

Name: liquidityAmount_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
priceLower_1(uint256) := ϕ(['priceLower_1', 'TMP_74'])
Phi
[i]Type for priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceUpper_1(uint256) := ϕ(['priceUpper_1', 'TMP_75'])
Phi
[i]Type for priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentPrice_1(uint256) := ϕ(['TMP_76', 'currentPrice_1'])
Phi
[i]Type for currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidityAmount_1(uint256) := ϕ(['TMP_77', '_liquidity_1'])
Phi
[i]Type for liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_180(bool) = priceUpper_1 <= currentPrice_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_180

Name: TMP_180 Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_183(bool) = currentPrice_1 <= priceLower_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_183

Name: TMP_183 Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_2

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token0amount_2
token0amount
Name: token0amount, Num: 2

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_184(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_184

Name: TMP_184 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_185 = CONVERT TMP_184 to uint128
Converting TMP_184

Name: TMP_184 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_185

Name: TMP_185 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token0amount_2(uint128) := TMP_185(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
token0amount_3
token0amount
Name: token0amount, Num: 3

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1amount_2
token1amount
Name: token1amount, Num: 2

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0amount_3(uint128) := ϕ(['token0amount_2', 'token0amount_1'])
Phi
init
end
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1amount_2(uint128) := ϕ(['token1amount_1', 'token1amount_0'])
Phi
init
end
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1amount_3

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token1amount_3
token1amount
Name: token1amount, Num: 3

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_181(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_181

Name: TMP_181 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_182 = CONVERT TMP_181 to uint128
Converting TMP_181

Name: TMP_181 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_182

Name: TMP_182 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token1amount_3(uint128) := TMP_182(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_1

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token0amount_1
token0amount
Name: token0amount, Num: 1

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_186(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'currentPrice_1', 'priceUpper_1', 'True'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_186

Name: TMP_186 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_187 = CONVERT TMP_186 to uint128
Converting TMP_186

Name: TMP_186 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_187

Name: TMP_187 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token0amount_1(uint128) := TMP_187(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
token1amount_4
token1amount
Name: token1amount, Num: 4

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1amount_4(uint128) := ϕ(['token1amount_3', 'token1amount_0'])
Phi
init
end
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1amount_1

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token1amount_1
token1amount
Name: token1amount, Num: 1

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_188(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'currentPrice_1', 'True'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_188

Name: TMP_188 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_189 = CONVERT TMP_188 to uint128
Converting TMP_188

Name: TMP_188 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_189

Name: TMP_189 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token1amount_1(uint128) := TMP_189(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
token1amount_4
token1amount_4
token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_0
token0amount_0
token0amount
Name: token0amount, Num: 0

Name: token0amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN token0amount_0,token1amount_4
init
end
init
end

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
priceLower_1
priceLower
p.norm: u

Name: priceLower_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
priceUpper_1
priceUpper
p.norm: u

Name: priceUpper_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
currentPrice_1
currentPrice
p.norm: u

Name: currentPrice_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
liquidityAmount_1
liquidityAmount
p.norm: u

Name: liquidityAmount_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
priceLower_1(uint256) := ϕ(['priceLower_1', 'TMP_74'])
Phi
[i]Type for priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceUpper_1(uint256) := ϕ(['priceUpper_1', 'TMP_75'])
Phi
[i]Type for priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentPrice_1(uint256) := ϕ(['TMP_76', 'currentPrice_1'])
Phi
[i]Type for currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidityAmount_1(uint256) := ϕ(['TMP_77', '_liquidity_1'])
Phi
[i]Type for liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_180(bool) = priceUpper_1 <= currentPrice_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_180

Name: TMP_180 Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_183(bool) = currentPrice_1 <= priceLower_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_183

Name: TMP_183 Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_2

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token0amount_2
token0amount
Name: token0amount, Num: 2

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_184(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_184

Name: TMP_184 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_185 = CONVERT TMP_184 to uint128
Converting TMP_184

Name: TMP_184 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_185

Name: TMP_185 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token0amount_2(uint128) := TMP_185(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
token0amount_3
token0amount
Name: token0amount, Num: 3

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1amount_2
token1amount
Name: token1amount, Num: 2

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0amount_3(uint128) := ϕ(['token0amount_2', 'token0amount_1'])
Phi
init
end
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1amount_2(uint128) := ϕ(['token1amount_1', 'token1amount_0'])
Phi
init
end
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1amount_3

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token1amount_3
token1amount
Name: token1amount, Num: 3

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_181(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_181

Name: TMP_181 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_182 = CONVERT TMP_181 to uint128
Converting TMP_181

Name: TMP_181 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_182

Name: TMP_182 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token1amount_3(uint128) := TMP_182(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_1

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token0amount_1
token0amount
Name: token0amount, Num: 1

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_186(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'currentPrice_1', 'priceUpper_1', 'True'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_186

Name: TMP_186 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_187 = CONVERT TMP_186 to uint128
Converting TMP_186

Name: TMP_186 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_187

Name: TMP_187 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token0amount_1(uint128) := TMP_187(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
token1amount_4
token1amount
Name: token1amount, Num: 4

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1amount_4(uint128) := ϕ(['token1amount_3', 'token1amount_0'])
Phi
init
end
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1amount_1

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token1amount_1
token1amount
Name: token1amount, Num: 1

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_188(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'currentPrice_1', 'True'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_188

Name: TMP_188 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_189 = CONVERT TMP_188 to uint128
Converting TMP_188

Name: TMP_188 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_189

Name: TMP_189 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token1amount_1(uint128) := TMP_189(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
token1amount_4
token1amount_4
token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_0
token0amount_0
token0amount
Name: token0amount, Num: 0

Name: token0amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN token0amount_0,token1amount_4
init
end
init
end
[i]Type for TUPLE_5

Name: TUPLE_5 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0_1(uint256)= UNPACK TUPLE_5 index: 0 
([], [], 'u', None, -1)
[i]Type for amount0

Name: amount0 Function: burn
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1_1(uint256)= UNPACK TUPLE_5 index: 1 
([-1], [-1], 'u', None, -1)
[i]Type for amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1
lower_1
lower

Name: lower Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper

Name: upper Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
amount0fees_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0fees_1
amount0fees
Name: amount0fees, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1
amount1fees
Name: amount1fees, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
TMP_78 = CONVERT amount_1 to int128
Converting amount_1

Name: amount Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_78

Name: TMP_78 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_79(int128) = 0 (c)- TMP_78
SUB1
init
end
init
end
A: 0 B: u
lnorm: 0 rnorm: u
SUB

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_78 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:0 rval:u
[i]Type for TMP_79

Name: TMP_79 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TUPLE_6(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(msg.sender,lower_1,upper_1,TMP_79)
init
init
end
init
end
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], 0, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
owner_1
owner
p.norm: u

Name: owner_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
weee
lower_1
lower
p.norm: u

Name: lower_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upper_1
upper
p.norm: u

Name: upper_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
amount_1
amount
p.norm: 0

Name: amount_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
MAX_TICK_LIQUIDITY_4
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
positions_1
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
owner_1(address) := ϕ(['msg.sender', 'REF_24'])
Phi
[i]Type for owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
XXXX
lower_1(int24) := ϕ(['lower_1', 'lower_1', 'REF_25'])
Phi
[i]Type for lower

Name: lower Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upper_1(int24) := ϕ(['upper_1', 'REF_26', 'upper_1'])
Phi
[i]Type for upper

Name: upper Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(int128) := ϕ(['TMP_79', 'TMP_30'])
Phi
[i]Type for amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
MAX_TICK_LIQUIDITY_4(uint128) := ϕ(['MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_3'])
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_1(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(['positions_0', 'positions_5'])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
owner_1
owner_1
owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
positions_1
positions_1
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1
lower_1
lower

Name: lower Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper

Name: upper Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_1 (-> ['positions'])
position
Name: position, Num: 1 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_144(mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) -> positions_1[owner_1]
INDEX
[i]Type for REF_144

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_145(mapping(int24 => ConcentratedLiquidityPool.Position)) -> REF_144[lower_1]
INDEX
[i]Type for REF_145

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_146(ConcentratedLiquidityPool.Position) -> REF_145[upper_1]
INDEX
[i]Type for REF_146

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
position_1 (-> ['positions'])(ConcentratedLiquidityPool.Position) := REF_146(ConcentratedLiquidityPool.Position)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
lower_1
lower_1
lower

Name: lower Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper

Name: upper Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1

Name: growth0current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1
growth0current
Name: growth0current, Num: 1

Name: growth0current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1

Name: growth1current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1
growth1current
Name: growth1current, Num: 1

Name: growth1current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TUPLE_12(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(lower_1,upper_1)
init
end
init
end
[i]Type for TUPLE_12

Name: TUPLE_12 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth0current_1(uint256)= UNPACK TUPLE_12 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth1current_1(uint256)= UNPACK TUPLE_12 index: 1 
([-1], [-1], 'u', None, -1)
[i]Type for growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
amount0fees_1

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount0fees_1
amount0fees
Name: amount0fees, Num: 1

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_148(uint256) -> position_1 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_148

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_202(uint256) = growth0current_1 (c)- REF_148
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_202

Name: TMP_202 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_149(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_149

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_203(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_202', 'REF_149', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_203

Name: TMP_203 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount0fees_1(uint256) := TMP_203(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount1fees_1
amount1fees
Name: amount1fees, Num: 1

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_151(uint256) -> position_1 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_151

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = growth1current_1 (c)- REF_151
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_204

Name: TMP_204 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_152(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_152

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_204', 'REF_152', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_205

Name: TMP_205 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount1fees_1(uint256) := TMP_205(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_206(bool) = amount_1 < 0
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
[i]Type for TMP_206

Name: TMP_206 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
position_3 (-> ['positions'])
position
Name: position, Num: 3 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
position_3 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_2 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_209(bool) = amount_1 > 0
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
[i]Type for TMP_209

Name: TMP_209 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
position_5 (-> ['positions'])
position
Name: position, Num: 5 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: liquidity
Finance Type: undef
weee
position_5 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_4 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
position_4 (-> ['positions'])
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
position_4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_3

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_3
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_3
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_154(uint128) -> position_3 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_154

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_3 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_210 = CONVERT amount_1 to uint128
Converting amount_1

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_210

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
position_4 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_3 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_154(-> position_4 (-> ['positions'])) = REF_154 (c)+ TMP_210

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
init
end
lval:u rval:u
[i]Type for REF_154

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_3 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
positions_3(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_4 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
position_2 (-> ['positions'])
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_2

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_2
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
End popogation
weee
weee
weee
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_2
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_153(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_153

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(int128) = 0 (c)- amount_1
SUB1
init
end
init
end
A: 0 B: 0
lnorm: 0 rnorm: 0
SUB

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:0 rval:u
[i]Type for TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_208 = CONVERT TMP_207 to uint128
Converting TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_208

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
position_2 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_153(-> position_2 (-> ['positions'])) = REF_153 (c)- TMP_208
SUB1
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
SUB

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:u rval:u
[i]Type for REF_153

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
positions_2(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_2 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
position_5 (-> ['positions'])
position_5 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_155(uint128) -> position_5 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_155

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = REF_155 < MAX_TICK_LIQUIDITY_5
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_211

Name: TMP_211 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,MAX_TICK_LIQUIDITY)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity
Finance Type: undef
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity
Finance Type: undef
positions_4

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_4
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity
Finance Type: undef
weee
weee
positions_4
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_156(uint256) -> position_5 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_156

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_6 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_5 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_156 (->position_6 (-> ['positions'])) := growth0current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_156

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_4(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_6 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside1Last, feeGrowthInside0Last, liquidity
Finance Type: undef
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside1Last, feeGrowthInside0Last, liquidity
Finance Type: undef
positions_5

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_5
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside1Last, feeGrowthInside0Last, liquidity
Finance Type: undef
weee
weee
positions_5
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_157(uint256) -> position_6 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_157

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_7 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_6 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_157 (->position_7 (-> ['positions'])) := growth1current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_157

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_5(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_7 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
RETURN amount0fees_1,amount1fees_1
init
end
init
end

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
owner_1
owner
p.norm: u

Name: owner_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
weee
lower_1
lower
p.norm: u

Name: lower_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upper_1
upper
p.norm: u

Name: upper_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
amount_1
amount
p.norm: 0

Name: amount_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
MAX_TICK_LIQUIDITY_4
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
positions_1
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
owner_1(address) := ϕ(['msg.sender', 'REF_24'])
Phi
[i]Type for owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
XXXX
lower_1(int24) := ϕ(['lower_1', 'lower_1', 'REF_25'])
Phi
[i]Type for lower

Name: lower Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upper_1(int24) := ϕ(['upper_1', 'REF_26', 'upper_1'])
Phi
[i]Type for upper

Name: upper Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(int128) := ϕ(['TMP_79', 'TMP_30'])
Phi
[i]Type for amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
MAX_TICK_LIQUIDITY_4(uint128) := ϕ(['MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_3'])
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_1(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(['positions_0', 'positions_5'])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
owner_1
owner_1
owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
positions_1
positions_1
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1
lower_1
lower

Name: lower Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper

Name: upper Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_1 (-> ['positions'])
position
Name: position, Num: 1 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_144(mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) -> positions_1[owner_1]
INDEX
[i]Type for REF_144

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_145(mapping(int24 => ConcentratedLiquidityPool.Position)) -> REF_144[lower_1]
INDEX
[i]Type for REF_145

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_146(ConcentratedLiquidityPool.Position) -> REF_145[upper_1]
INDEX
[i]Type for REF_146

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
position_1 (-> ['positions'])(ConcentratedLiquidityPool.Position) := REF_146(ConcentratedLiquidityPool.Position)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
lower_1
lower_1
lower

Name: lower Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper

Name: upper Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1

Name: growth0current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1
growth0current
Name: growth0current, Num: 1

Name: growth0current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1

Name: growth1current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1
growth1current
Name: growth1current, Num: 1

Name: growth1current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TUPLE_12(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(lower_1,upper_1)
init
end
init
end
[i]Type for TUPLE_12

Name: TUPLE_12 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth0current_1(uint256)= UNPACK TUPLE_12 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth1current_1(uint256)= UNPACK TUPLE_12 index: 1 
([-1], [-1], 'u', None, -1)
[i]Type for growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
amount0fees_1

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount0fees_1
amount0fees
Name: amount0fees, Num: 1

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_148(uint256) -> position_1 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_148

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_202(uint256) = growth0current_1 (c)- REF_148
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_202

Name: TMP_202 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_149(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_149

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_203(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_202', 'REF_149', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_203

Name: TMP_203 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount0fees_1(uint256) := TMP_203(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount1fees_1
amount1fees
Name: amount1fees, Num: 1

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_151(uint256) -> position_1 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_151

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = growth1current_1 (c)- REF_151
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_204

Name: TMP_204 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_152(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_152

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_204', 'REF_152', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_205

Name: TMP_205 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount1fees_1(uint256) := TMP_205(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_206(bool) = amount_1 < 0
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
[i]Type for TMP_206

Name: TMP_206 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
position_3 (-> ['positions'])
position
Name: position, Num: 3 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
position_3 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_2 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_209(bool) = amount_1 > 0
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
[i]Type for TMP_209

Name: TMP_209 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
position_5 (-> ['positions'])
position
Name: position, Num: 5 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
position_5 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_4 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
position_4 (-> ['positions'])
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
position_4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_3

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_3
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_3
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_154(uint128) -> position_3 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_154

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_3 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_210 = CONVERT amount_1 to uint128
Converting amount_1

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_210

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
position_4 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_3 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_154(-> position_4 (-> ['positions'])) = REF_154 (c)+ TMP_210

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
Finance type key: (0, 0)
init
end
lval:u rval:u
[i]Type for REF_154

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_3 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
positions_3(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_4 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
position_2 (-> ['positions'])
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_2

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_2
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
End popogation
weee
weee
weee
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_2
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_153(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_153

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_207(int128) = 0 (c)- amount_1
SUB1
init
end
init
end
A: 0 B: 0
lnorm: 0 rnorm: 0
SUB

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:0 rval:u
[i]Type for TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_208 = CONVERT TMP_207 to uint128
Converting TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_208

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
position_2 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_153(-> position_2 (-> ['positions'])) = REF_153 (c)- TMP_208
SUB1
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
Finance type key: (0, 0)
SUB

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:u rval:u
[i]Type for REF_153

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
positions_2(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_2 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
position_5 (-> ['positions'])
position_5 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_155(uint128) -> position_5 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_155

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = REF_155 < MAX_TICK_LIQUIDITY_5
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_211

Name: TMP_211 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,MAX_TICK_LIQUIDITY)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_4

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_4
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_4
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_156(uint256) -> position_5 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_156

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_6 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_5 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_156 (->position_6 (-> ['positions'])) := growth0current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_156

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_4(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_6 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_5

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_5
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_5
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_157(uint256) -> position_6 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_157

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_7 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_6 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_157 (->position_7 (-> ['positions'])) := growth1current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_157

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_5(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_7 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
RETURN amount0fees_1,amount1fees_1
init
end
init
end
[i]Type for TUPLE_6

Name: TUPLE_6 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0fees_1(uint256)= UNPACK TUPLE_6 index: 0 
([-1], [-1], "'u'", None, -1)
[i]Type for amount0fees

Name: amount0fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1fees_1(uint256)= UNPACK TUPLE_6 index: 1 
([-1], [-1], "'u'", None, -1)
[i]Type for amount1fees

Name: amount1fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: burn
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_2
amount0
Name: amount0, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
amount0_2(uint256) = amount0_1 + amount0fees_1

Name: amount0 Function: burn
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount0fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
init
end
lval:u rval:u
[i]Type for amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1_1
amount1_1
amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_2
amount1
Name: amount1, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
amount1_2(uint256) = amount1_1 + amount1fees_1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount1fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
init
end
lval:u rval:u
[i]Type for amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
withdrawnAmounts_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
withdrawnAmounts_1
withdrawnAmounts
Name: withdrawnAmounts, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_81 = new IPool.TokenAmount[](2)
[i]Type for TMP_81

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
withdrawnAmounts_1(IPool.TokenAmount[]) := TMP_81(IPool.TokenAmount)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
token0_14
token0_14
token0
Name: token0, Num: 14

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount0_2
amount0_2
amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
withdrawnAmounts_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
withdrawnAmounts_2
withdrawnAmounts
Name: withdrawnAmounts, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
withdrawnAmounts_2
withdrawnAmounts
Name: withdrawnAmounts, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_57(IPool.TokenAmount) -> withdrawnAmounts_1[0]
INDEX
[i]Type for REF_57

Name: withdrawnAmounts Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_82 = new TokenAmount(token0_14,amount0_2)
[i]Type for TMP_82

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
withdrawnAmounts_2(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_1'])
Phi
[i]Type for withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_57 (->withdrawnAmounts_2) := TMP_82(IPool.TokenAmount)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_57

Name: REF_57 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1_2
amount1_2
amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
token1_15
token1_15
token1
Name: token1, Num: 15

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
withdrawnAmounts_3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
withdrawnAmounts_3
withdrawnAmounts
Name: withdrawnAmounts, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
withdrawnAmounts_3
withdrawnAmounts
Name: withdrawnAmounts, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_58(IPool.TokenAmount) -> withdrawnAmounts_2[1]
INDEX
[i]Type for REF_58

Name: withdrawnAmounts Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_83 = new TokenAmount(token1_15,amount1_2)
[i]Type for TMP_83

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
withdrawnAmounts_3(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_2'])
Phi
[i]Type for withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_58 (->withdrawnAmounts_3) := TMP_83(IPool.TokenAmount)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_58

Name: REF_58 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_15
reserve0_15
reserve0
Name: reserve0, Num: 15

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_16

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_16
reserve0
Name: reserve0, Num: 16

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_84 = CONVERT amount0fees_1 to uint128
Converting amount0fees_1

Name: amount0fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_84

Name: TMP_84 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_16(uint128) = reserve0_15 - TMP_84
SUB1
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
SUB

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_84 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve0

Name: reserve0 Function: burn
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve1_16
reserve1_16
reserve1
Name: reserve1, Num: 16

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_17
reserve1
Name: reserve1, Num: 17

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_85 = CONVERT amount1fees_1 to uint128
Converting amount1fees_1

Name: amount1fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_85

Name: TMP_85 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_17(uint128) = reserve1_16 - TMP_85
SUB1
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
SUB

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_85 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve1

Name: reserve1 Function: burn
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
recipient_1
recipient_1
recipient

Name: recipient Function: burn
Num: 
Den: 
Address: -997
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_2
amount1_2
amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_2
amount0_2
amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
INTERNAL_CALL, ConcentratedLiquidityPool._transferBothTokens(address,uint256,uint256,bool)(recipient_1,amount0_2,amount1_2,unwrapBento_1)
init
end
init
end
init
end
init
end
[[], [], 'u', None, [], -1, -997, 'u']

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], "'u'", None, [], -1, -1, 'u']

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], "'u'", None, [], -1, -1, 'u']

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
to_1
to
p.norm: u

Name: to_1 Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
shares0_1
shares0
p.norm: 'u'

Name: shares0_1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
shares1_1
shares1
p.norm: 'u'

Name: shares1_1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u

Name: unwrapBento_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_7
bento
Name: bento, Num: 7

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_26
token0
Name: token0, Num: 26

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_28
token1
Name: token1, Num: 28

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
to_1(address) := ϕ(['recipient_1', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
shares0_1(uint256) := ϕ(['amount0fees_1', 'amount0_2'])
Phi
[i]Type for shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
shares1_1(uint256) := ϕ(['amount1_2', 'amount1fees_1'])
Phi
[i]Type for shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_26(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_28(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token0_26
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
shares0_1
shares0_1
shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_10
bento
Name: bento, Num: 10

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_28
token0
Name: token0, Num: 28

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_31
token1
Name: token1, Num: 31

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_218 = CONVERT this to address
Converting this
4
[i]Type for TMP_218

Name: TMP_218 Function: _transferBothTokens
Num: -1
Den: -1
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_14(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:withdraw, arguments:['token0_26', 'TMP_218', 'to_1', '0', 'shares0_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_14

Name: TUPLE_14 Function: _transferBothTokens
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_10(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_28(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_31(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
shares1_1
shares1_1
shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_10
bento_10
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_31
token1_31
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_11
bento
Name: bento, Num: 11

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1_32
token1
Name: token1, Num: 32

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_219 = CONVERT this to address
Converting this
4
[i]Type for TMP_219

Name: TMP_219 Function: _transferBothTokens
Num: -1
Den: -1
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_15(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_10(IBentoBoxMinimal), function:withdraw, arguments:['token1_31', 'TMP_219', 'to_1', '0', 'shares1_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_15

Name: TUPLE_15 Function: _transferBothTokens
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_11(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_10', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1_32(address) := ϕ(['token1_31', 'token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token0_26
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
shares0_1
shares0_1
shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_8
bento
Name: bento, Num: 8

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_27
token0
Name: token0, Num: 27

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_29
token1
Name: token1, Num: 29

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_220 = CONVERT this to address
Converting this
4
[i]Type for TMP_220

Name: TMP_220 Function: _transferBothTokens
Num: -1
Den: -1
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:transfer, arguments:['token0_26', 'TMP_220', 'to_1', 'shares0_1']  
High Call: transfer
bento_8(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_7', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_27(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_26', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_29(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_28', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
bento_8
bento_8
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_29
token1_29
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
shares1_1
shares1_1
shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_9
bento
Name: bento, Num: 9

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1_30
token1
Name: token1, Num: 30

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_222 = CONVERT this to address
Converting this
4
[i]Type for TMP_222

Name: TMP_222 Function: _transferBothTokens
Num: -1
Den: -1
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_8(IBentoBoxMinimal), function:transfer, arguments:['token1_29', 'TMP_222', 'to_1', 'shares1_1']  
High Call: transfer
bento_9(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_8', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1_30(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_29', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
to_1
to
p.norm: u

Name: to_1 Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
shares0_1
shares0
p.norm: 'u'

Name: shares0_1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
shares1_1
shares1
p.norm: 'u'

Name: shares1_1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u

Name: unwrapBento_1 Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_28
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
to_1(address) := ϕ(['recipient_1', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
shares0_1(uint256) := ϕ(['amount0fees_1', 'amount0_2'])
Phi
[i]Type for shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
shares1_1(uint256) := ϕ(['amount1_2', 'amount1fees_1'])
Phi
[i]Type for shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_26(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_28(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token0_26
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
shares0_1
shares0_1
shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_10
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_28
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_31
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_218 = CONVERT this to address
Converting this
4
[i]Type for TMP_218

Name: TMP_218 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_14(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:withdraw, arguments:['token0_26', 'TMP_218', 'to_1', '0', 'shares0_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_14

Name: TUPLE_14 Function: _transferBothTokens
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_10(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_28(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_31(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
shares1_1
shares1_1
shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_10
bento_10
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_31
token1_31
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_11
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1_32
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_219 = CONVERT this to address
Converting this
4
[i]Type for TMP_219

Name: TMP_219 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_15(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_10(IBentoBoxMinimal), function:withdraw, arguments:['token1_31', 'TMP_219', 'to_1', '0', 'shares1_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_15

Name: TUPLE_15 Function: _transferBothTokens
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_11(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_10', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1_32(address) := ϕ(['token1_31', 'token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token0_26
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
shares0_1
shares0_1
shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_8
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_27
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_29
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_220 = CONVERT this to address
Converting this
4
[i]Type for TMP_220

Name: TMP_220 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:transfer, arguments:['token0_26', 'TMP_220', 'to_1', 'shares0_1']  
High Call: transfer
bento_8(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_7', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_27(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_26', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_29(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_28', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
bento_8
bento_8
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_29
token1_29
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
shares1_1
shares1_1
shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_9
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1_30
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_222 = CONVERT this to address
Converting this
4
[i]Type for TMP_222

Name: TMP_222 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_8(IBentoBoxMinimal), function:transfer, arguments:['token1_29', 'TMP_222', 'to_1', 'shares1_1']  
High Call: transfer
bento_9(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_8', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1_30(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_29', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_13
ticks_13
ticks
Name: ticks, Num: 13

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1
lower_1
lower

Name: lower Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
nearestTick_13
nearestTick_13
nearestTick
Name: nearestTick, Num: 13

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper

Name: upper Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_14

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_14
nearestTick
Name: nearestTick, Num: 14

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_87(int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.remove(mapping(int24 => Ticks.Tick),int24,int24,uint128,int24), arguments:['ticks_13', 'lower_1', 'upper_1', 'amount_1', 'nearestTick_13'] 
Written func info: Ticks, remove
[i]Type for TMP_87

Name: TMP_87 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_14(int24) := TMP_87(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for nearestTick

Name: nearestTick Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied nearestTick
 To type: None

Name: nearestTick Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
recipient_1
recipient_1
recipient

Name: recipient Function: burn
Num: 
Den: 
Address: -997
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_2
amount1_2
amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_2
amount0_2
amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee


token0_11(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
token1_12(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
liquidity_7(uint128) := ϕ(['liquidity_0', 'liquidity_5', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9', 'liquidity_4', 'liquidity_3'])
reserve0_12(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
reserve1_13(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
price_4(uint160) := ϕ(['price_8', 'price_3', 'price_1', 'price_5', 'price_0'])
nearestTick_9(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
ticks_9(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
TUPLE_4(int24,int24,uint128,address,bool) = SOLIDITY_CALL abi.decode()(data_1(int24,int24,uint128,address,bool))
lower_1(int24)= UNPACK TUPLE_4 index: 0 
upper_1(int24)= UNPACK TUPLE_4 index: 1 
amount_1(uint128)= UNPACK TUPLE_4 index: 2 
recipient_1(address)= UNPACK TUPLE_4 index: 3 
unwrapBento_1(bool)= UNPACK TUPLE_4 index: 4 
TMP_69(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['lower_1'] 
priceLower_1(uint160) := TMP_69(uint160)
TMP_70(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['upper_1'] 
priceUpper_1(uint160) := TMP_70(uint160)
currentPrice_1(uint160) := price_5(uint160)
TMP_71(bool) = priceLower_1 < currentPrice_1
TMP_72(bool) = currentPrice_1 < priceUpper_1
TMP_73(bool) = TMP_71 && TMP_72
CONDITION TMP_73
liquidity_9(uint128) = liquidity_8 (c)- amount_1
TMP_74 = CONVERT priceLower_1 to uint256
TMP_75 = CONVERT priceUpper_1 to uint256
TMP_76 = CONVERT currentPrice_1 to uint256
TMP_77 = CONVERT amount_1 to uint256
TUPLE_5(uint128,uint128) = INTERNAL_CALL, ConcentratedLiquidityPool._getAmountsForLiquidity(uint256,uint256,uint256,uint256)(TMP_74,TMP_75,TMP_76,TMP_77)
amount0_1(uint256)= UNPACK TUPLE_5 index: 0 
amount1_1(uint256)= UNPACK TUPLE_5 index: 1 
TMP_78 = CONVERT amount_1 to int128
TMP_79(int128) = 0 (c)- TMP_78
TUPLE_6(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(msg.sender,lower_1,upper_1,TMP_79)
amount0fees_1(uint256)= UNPACK TUPLE_6 index: 0 
amount1fees_1(uint256)= UNPACK TUPLE_6 index: 1 
amount0_2(uint256) = amount0_1 + amount0fees_1
amount1_2(uint256) = amount1_1 + amount1fees_1
TMP_81 = new IPool.TokenAmount[](2)
withdrawnAmounts_1(IPool.TokenAmount[]) := TMP_81(IPool.TokenAmount)
REF_57(IPool.TokenAmount) -> withdrawnAmounts_1[0]
TMP_82 = new TokenAmount(token0_14,amount0_2)
withdrawnAmounts_2(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_1'])
REF_57 (->withdrawnAmounts_2) := TMP_82(IPool.TokenAmount)
REF_58(IPool.TokenAmount) -> withdrawnAmounts_2[1]
TMP_83 = new TokenAmount(token1_15,amount1_2)
withdrawnAmounts_3(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_2'])
REF_58 (->withdrawnAmounts_3) := TMP_83(IPool.TokenAmount)
TMP_84 = CONVERT amount0fees_1 to uint128
reserve0_16(uint128) = reserve0_15 - TMP_84
TMP_85 = CONVERT amount1fees_1 to uint128
reserve1_17(uint128) = reserve1_16 - TMP_85
INTERNAL_CALL, ConcentratedLiquidityPool._transferBothTokens(address,uint256,uint256,bool)(recipient_1,amount0_2,amount1_2,unwrapBento_1)
TMP_87(int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.remove(mapping(int24 => Ticks.Tick),int24,int24,uint128,int24), arguments:['ticks_13', 'lower_1', 'upper_1', 'amount_1', 'nearestTick_13'] 
nearestTick_14(int24) := TMP_87(int24)
Emit Burn(msg.sender,amount0_2,amount1_2,recipient_1)


Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token0_11
token0

Name: token0 Function: burn
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_12
token1

Name: token1 Function: burn
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
liquidity_7
liquidity

Name: liquidity Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve0_12
reserve0

Name: reserve0 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_13
reserve1

Name: reserve1 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
price_4
price

Name: price Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_9
nearestTick

Name: nearestTick Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_9
ticks

Name: ticks Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_11(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: burn
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_12(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: burn
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_7(uint128) := ϕ(['liquidity_0', 'liquidity_5', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9', 'liquidity_4', 'liquidity_3'])
Phi
[i]Type for liquidity

Name: liquidity Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_12(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
Phi
[i]Type for reserve0

Name: reserve0 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_13(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
Phi
[i]Type for reserve1

Name: reserve1 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_4(uint160) := ϕ(['price_8', 'price_3', 'price_1', 'price_5', 'price_0'])
Phi
[i]Type for price

Name: price Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_9(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_9(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
data_1
data_1
data
p.norm: u
Name: data, Num: 1

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1

Name: recipient Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient
Name: recipient, Num: 1

Name: recipient Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1

Name: lower Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1
lower
Name: lower, Num: 1

Name: lower Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1

Name: amount Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
amount_1
amount
Name: amount, Num: 1

Name: amount Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
unwrapBento_1

Name: unwrapBento Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
Name: unwrapBento, Num: 1

Name: unwrapBento Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1

Name: upper Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper
Name: upper, Num: 1

Name: upper Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
TUPLE_4(int24,int24,uint128,address,bool) = SOLIDITY_CALL abi.decode()(data_1(int24,int24,uint128,address,bool))
[i]Type for TUPLE_4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lower_1(int24)= UNPACK TUPLE_4 index: 0 
Finding type for lower(int24 ... )
[i]Type for lower

Name: lower Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upper_1(int24)= UNPACK TUPLE_4 index: 1 
Finding type for upper(int24 ... )
[i]Type for upper

Name: upper Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint128)= UNPACK TUPLE_4 index: 2 
Finding type for amount(uint128 ... )
{'global:token0': 1, 'global:token1': 2, 'global:barFeeTo': 3, 'constructor:_token0': -999, 'constructor:_token1': -998, 'burn:recipient': -997, 'collect:recipient': -996, 'swap:recipient': -995, 'constructor:TMP_3': 4, 'global:this': 4, 'mint:TMP_49': 5, 'global:msg.sender': 5}
(-1, -1, 'u', None, -1, 0)
[i]Type for amount

Name: amount Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
recipient_1(address)= UNPACK TUPLE_4 index: 3 
Finding type for recipient(address ... )
prev address? u
Head Addr: -997
    Norm: 0
    Set: {-997}
    Fin: NULL
[i]Type for recipient

Name: recipient Function: burn
Num: 
Den: 
Address: -997
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool)= UNPACK TUPLE_4 index: 4 
Finding type for unwrapBento(bool ... )
[i]Type for unwrapBento

Name: unwrapBento Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1
lower_1
lower
Name: lower, Num: 1

Name: lower Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1

Name: priceLower Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower
Name: priceLower, Num: 1

Name: priceLower Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_69(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['lower_1'] 
Written func info: TickMath, getSqrtRatioAtTick
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_69

Name: TMP_69 Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceLower_1(uint160) := TMP_69(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for priceLower

Name: priceLower Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1
upper_1
upper
Name: upper, Num: 1

Name: upper Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceUpper_1

Name: priceUpper Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceUpper_1
priceUpper
Name: priceUpper, Num: 1

Name: priceUpper Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_70(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['upper_1'] 
Written func info: TickMath, getSqrtRatioAtTick
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_70

Name: TMP_70 Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceUpper_1(uint160) := TMP_70(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for priceUpper

Name: priceUpper Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
price_5
price_5
price

Name: price Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1

Name: currentPrice Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice
Name: currentPrice, Num: 1

Name: currentPrice Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentPrice_1(uint160) := price_5(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentPrice

Name: currentPrice Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_71(bool) = priceLower_1 < currentPrice_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_71

Name: TMP_71 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_72(bool) = currentPrice_1 < priceUpper_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_72

Name: TMP_72 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_73(bool) = TMP_71 && TMP_72
[i]Type for TMP_73

Name: TMP_73 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidity_8
liquidity_8
liquidity

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
liquidity_9

Name: liquidity Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
liquidity_9
liquidity

Name: liquidity Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
liquidity_9(uint128) = liquidity_8 (c)- amount_1
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:u rval:u
[i]Type for liquidity

Name: liquidity Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Copied liquidity
 To type: None

Name: liquidity Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
amount0_1

Name: amount0 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0
Name: amount0, Num: 1

Name: amount0 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1

Name: amount1 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1
Name: amount1, Num: 1

Name: amount1 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
TMP_74 = CONVERT priceLower_1 to uint256
Converting priceLower_1

Name: priceLower Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_74

Name: TMP_74 Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75 = CONVERT priceUpper_1 to uint256
Converting priceUpper_1

Name: priceUpper Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_75

Name: TMP_75 Function: burn
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_76 = CONVERT currentPrice_1 to uint256
Converting currentPrice_1

Name: currentPrice Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_76

Name: TMP_76 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_77 = CONVERT amount_1 to uint256
Converting amount_1

Name: amount Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_77

Name: TMP_77 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TUPLE_5(uint128,uint128) = INTERNAL_CALL, ConcentratedLiquidityPool._getAmountsForLiquidity(uint256,uint256,uint256,uint256)(TMP_74,TMP_75,TMP_76,TMP_77)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', None, [], -1, None, 'u']

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, None, 'u']

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
priceLower_1
priceLower
p.norm: u

Name: priceLower_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
priceUpper_1
priceUpper
p.norm: u

Name: priceUpper_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
currentPrice_1
currentPrice
p.norm: u

Name: currentPrice_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
liquidityAmount_1
liquidityAmount
p.norm: u

Name: liquidityAmount_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
priceLower_1(uint256) := ϕ(['priceLower_1', 'TMP_74'])
Phi
[i]Type for priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceUpper_1(uint256) := ϕ(['priceUpper_1', 'TMP_75'])
Phi
[i]Type for priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentPrice_1(uint256) := ϕ(['TMP_76', 'currentPrice_1'])
Phi
[i]Type for currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidityAmount_1(uint256) := ϕ(['TMP_77', '_liquidity_1'])
Phi
[i]Type for liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_180(bool) = priceUpper_1 <= currentPrice_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_180

Name: TMP_180 Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_183(bool) = currentPrice_1 <= priceLower_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_183

Name: TMP_183 Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_2

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token0amount_2
token0amount
Name: token0amount, Num: 2

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_184(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_184

Name: TMP_184 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_185 = CONVERT TMP_184 to uint128
Converting TMP_184

Name: TMP_184 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_185

Name: TMP_185 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token0amount_2(uint128) := TMP_185(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
token0amount_3
token0amount
Name: token0amount, Num: 3

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1amount_2
token1amount
Name: token1amount, Num: 2

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0amount_3(uint128) := ϕ(['token0amount_2', 'token0amount_1'])
Phi
init
end
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1amount_2(uint128) := ϕ(['token1amount_1', 'token1amount_0'])
Phi
init
end
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1amount_3

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token1amount_3
token1amount
Name: token1amount, Num: 3

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_181(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_181

Name: TMP_181 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_182 = CONVERT TMP_181 to uint128
Converting TMP_181

Name: TMP_181 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_182

Name: TMP_182 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token1amount_3(uint128) := TMP_182(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_1

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token0amount_1
token0amount
Name: token0amount, Num: 1

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_186(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'currentPrice_1', 'priceUpper_1', 'True'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_186

Name: TMP_186 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_187 = CONVERT TMP_186 to uint128
Converting TMP_186

Name: TMP_186 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_187

Name: TMP_187 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token0amount_1(uint128) := TMP_187(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
token1amount_4
token1amount
Name: token1amount, Num: 4

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1amount_4(uint128) := ϕ(['token1amount_3', 'token1amount_0'])
Phi
init
end
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1amount_1

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token1amount_1
token1amount
Name: token1amount, Num: 1

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_188(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'currentPrice_1', 'True'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_188

Name: TMP_188 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_189 = CONVERT TMP_188 to uint128
Converting TMP_188

Name: TMP_188 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_189

Name: TMP_189 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token1amount_1(uint128) := TMP_189(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
token1amount_4
token1amount_4
token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_0
token0amount_0
token0amount
Name: token0amount, Num: 0

Name: token0amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN token0amount_0,token1amount_4
init
end
init
end

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
priceLower_1
priceLower
p.norm: u

Name: priceLower_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
priceUpper_1
priceUpper
p.norm: u

Name: priceUpper_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
currentPrice_1
currentPrice
p.norm: u

Name: currentPrice_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
liquidityAmount_1
liquidityAmount
p.norm: u

Name: liquidityAmount_1 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
priceLower_1(uint256) := ϕ(['priceLower_1', 'TMP_74'])
Phi
[i]Type for priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
priceUpper_1(uint256) := ϕ(['priceUpper_1', 'TMP_75'])
Phi
[i]Type for priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
currentPrice_1(uint256) := ϕ(['TMP_76', 'currentPrice_1'])
Phi
[i]Type for currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidityAmount_1(uint256) := ϕ(['TMP_77', '_liquidity_1'])
Phi
[i]Type for liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_180(bool) = priceUpper_1 <= currentPrice_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_180

Name: TMP_180 Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_183(bool) = currentPrice_1 <= priceLower_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_183

Name: TMP_183 Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_2

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token0amount_2
token0amount
Name: token0amount, Num: 2

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_184(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_184

Name: TMP_184 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_185 = CONVERT TMP_184 to uint128
Converting TMP_184

Name: TMP_184 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_185

Name: TMP_185 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token0amount_2(uint128) := TMP_185(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
token0amount_3
token0amount
Name: token0amount, Num: 3

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1amount_2
token1amount
Name: token1amount, Num: 2

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0amount_3(uint128) := ϕ(['token0amount_2', 'token0amount_1'])
Phi
init
end
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1amount_2(uint128) := ϕ(['token1amount_1', 'token1amount_0'])
Phi
init
end
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1amount_3

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token1amount_3
token1amount
Name: token1amount, Num: 3

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_181(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_181

Name: TMP_181 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_182 = CONVERT TMP_181 to uint128
Converting TMP_181

Name: TMP_181 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_182

Name: TMP_182 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token1amount_3(uint128) := TMP_182(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
priceUpper_1
priceUpper_1
priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_1

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token0amount_1
token0amount
Name: token0amount, Num: 1

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_186(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'currentPrice_1', 'priceUpper_1', 'True'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_186

Name: TMP_186 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_187 = CONVERT TMP_186 to uint128
Converting TMP_186

Name: TMP_186 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_187

Name: TMP_187 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token0amount_1(uint128) := TMP_187(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
token1amount_4
token1amount
Name: token1amount, Num: 4

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1amount_4(uint128) := ϕ(['token1amount_3', 'token1amount_0'])
Phi
init
end
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
liquidityAmount_1
liquidityAmount_1
liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
currentPrice_1
currentPrice_1
currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
priceLower_1
priceLower_1
priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1amount_1

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
token1amount_1
token1amount
Name: token1amount, Num: 1

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_188(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'currentPrice_1', 'True'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_188

Name: TMP_188 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_189 = CONVERT TMP_188 to uint128
Converting TMP_188

Name: TMP_188 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_189

Name: TMP_189 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token1amount_1(uint128) := TMP_189(uint128)
asgn
init
end
Finance type key: (0, -1)
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: priceLower Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: priceUpper Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: liquidityAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
token1amount_4
token1amount_4
token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0amount_0
token0amount_0
token0amount
Name: token0amount, Num: 0

Name: token0amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN token0amount_0,token1amount_4
init
end
init
end
[i]Type for TUPLE_5

Name: TUPLE_5 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0_1(uint256)= UNPACK TUPLE_5 index: 0 
([], [], 'u', None, -1)
[i]Type for amount0

Name: amount0 Function: burn
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1_1(uint256)= UNPACK TUPLE_5 index: 1 
([-1], [-1], 'u', None, -1)
[i]Type for amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1
lower_1
lower
Name: lower, Num: 1

Name: lower Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper
Name: upper, Num: 1

Name: upper Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
amount0fees_1

Name: amount0fees Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0fees_1
amount0fees
Name: amount0fees, Num: 1

Name: amount0fees Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1

Name: amount1fees Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1
amount1fees
Name: amount1fees, Num: 1

Name: amount1fees Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
TMP_78 = CONVERT amount_1 to int128
Converting amount_1

Name: amount Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_78

Name: TMP_78 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_79(int128) = 0 (c)- TMP_78
SUB1
init
end
init
end
A: 0 B: u
lnorm: 0 rnorm: u
SUB

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_78 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:0 rval:u
[i]Type for TMP_79

Name: TMP_79 Function: burn
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TUPLE_6(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(msg.sender,lower_1,upper_1,TMP_79)
init
init
end
init
end
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], 0, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
owner_1
owner
p.norm: u

Name: owner_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
weee
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
amount_1
amount
p.norm: 0

Name: amount_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
MAX_TICK_LIQUIDITY_4
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
positions_1
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
owner_1(address) := ϕ(['msg.sender', 'REF_24'])
Phi
[i]Type for owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
XXXX
lower_1(int24) := ϕ(['lower_1', 'lower_1', 'REF_25'])
Phi
[i]Type for lower

Name: lower Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upper_1(int24) := ϕ(['upper_1', 'REF_26', 'upper_1'])
Phi
[i]Type for upper

Name: upper Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(int128) := ϕ(['TMP_79', 'TMP_30'])
Phi
[i]Type for amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
MAX_TICK_LIQUIDITY_4(uint128) := ϕ(['MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_3'])
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_1(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(['positions_0', 'positions_5'])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
owner_1
owner_1
owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
positions_1
positions_1
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_1 (-> ['positions'])
position
Name: position, Num: 1 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_144(mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) -> positions_1[owner_1]
INDEX
[i]Type for REF_144

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_145(mapping(int24 => ConcentratedLiquidityPool.Position)) -> REF_144[lower_1]
INDEX
[i]Type for REF_145

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_146(ConcentratedLiquidityPool.Position) -> REF_145[upper_1]
INDEX
[i]Type for REF_146

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
position_1 (-> ['positions'])(ConcentratedLiquidityPool.Position) := REF_146(ConcentratedLiquidityPool.Position)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
lower_1
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1

Name: growth0current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1
growth0current
Name: growth0current, Num: 1

Name: growth0current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1

Name: growth1current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1
growth1current
Name: growth1current, Num: 1

Name: growth1current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TUPLE_12(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(lower_1,upper_1)
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
lowerTick_1
lowerTick
p.norm: u
Name: lowerTick, Num: 1

Name: lowerTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Phi
init
end
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_18
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick
Name: currentTick, Num: 1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_18(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
lower_1 (-> ['ticks'])
lower
Name: lower, Num: 1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
INDEX
[i]Type for REF_165

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
upper_1 (-> ['ticks'])
upper
Name: upper, Num: 1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
INDEX
[i]Type for REF_166

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal0_10
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1
_feeGrowthGlobal0
Name: _feeGrowthGlobal0, Num: 1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal1_10
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1
Name: _feeGrowthGlobal1, Num: 1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_224(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_1
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_2
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_2(uint256) := REF_167(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthBelow0_3
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 3

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow1_3
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 3

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Phi
init
end
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
Phi
init
end
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow1_2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_2
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_2(uint256) := REF_168(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_227(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_1
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_1(uint256) := REF_171(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_2
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove1_1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_1
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_1(uint256) := REF_172(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthAbove0_3
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 3

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove1_3
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 3

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Phi
init
end
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Phi
init
end
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_3
feeGrowthBelow0_3
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_3
feeGrowthAbove0_3
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1
feeGrowthInside0
Name: feeGrowthInside0, Num: 1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside0_1(uint256) := TMP_231(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthBelow1_3
feeGrowthBelow1_3
feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_3
feeGrowthAbove1_3
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1
Name: feeGrowthInside1, Num: 1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside1_1(uint256) := TMP_233(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthInside0_1
feeGrowthInside0_1
feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1_1
feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN feeGrowthInside0_1,feeGrowthInside1_1
init
end
init
end

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
lowerTick_1
lowerTick
p.norm: u
Name: lowerTick, Num: 1

Name: lowerTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Phi
init
end
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_18
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick
Name: currentTick, Num: 1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_18(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
lower_1 (-> ['ticks'])
lower
Name: lower, Num: 1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
INDEX
[i]Type for REF_165

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
upper_1 (-> ['ticks'])
upper
Name: upper, Num: 1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
INDEX
[i]Type for REF_166

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal0_10
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1
_feeGrowthGlobal0
Name: _feeGrowthGlobal0, Num: 1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal1_10
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1
Name: _feeGrowthGlobal1, Num: 1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_224(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_1
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_2
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_2(uint256) := REF_167(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthBelow0_3
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 3

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow1_3
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 3

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Phi
init
end
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
Phi
init
end
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow1_2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_2
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_2(uint256) := REF_168(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_227(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_1
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_1(uint256) := REF_171(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_2
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove1_1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_1
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_1(uint256) := REF_172(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthAbove0_3
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 3

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove1_3
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 3

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Phi
init
end
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Phi
init
end
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_3
feeGrowthBelow0_3
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_3
feeGrowthAbove0_3
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1
feeGrowthInside0
Name: feeGrowthInside0, Num: 1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside0_1(uint256) := TMP_231(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthBelow1_3
feeGrowthBelow1_3
feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_3
feeGrowthAbove1_3
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1
Name: feeGrowthInside1, Num: 1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside1_1(uint256) := TMP_233(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthInside0_1
feeGrowthInside0_1
feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1_1
feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN feeGrowthInside0_1,feeGrowthInside1_1
init
end
init
end
[i]Type for TUPLE_12

Name: TUPLE_12 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth0current_1(uint256)= UNPACK TUPLE_12 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth1current_1(uint256)= UNPACK TUPLE_12 index: 1 
([-1], [-1], 'u', None, -1)
[i]Type for growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
amount0fees_1

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount0fees_1
amount0fees
Name: amount0fees, Num: 1

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_148(uint256) -> position_1 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_148

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_202(uint256) = growth0current_1 (c)- REF_148
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_202

Name: TMP_202 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_149(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_149

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_203(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_202', 'REF_149', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_203

Name: TMP_203 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount0fees_1(uint256) := TMP_203(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount1fees_1
amount1fees
Name: amount1fees, Num: 1

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_151(uint256) -> position_1 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_151

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = growth1current_1 (c)- REF_151
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_204

Name: TMP_204 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_152(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_152

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_204', 'REF_152', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_205

Name: TMP_205 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount1fees_1(uint256) := TMP_205(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_206(bool) = amount_1 < 0
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
[i]Type for TMP_206

Name: TMP_206 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
position_3 (-> ['positions'])
position
Name: position, Num: 3 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
position_3 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_2 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_209(bool) = amount_1 > 0
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
[i]Type for TMP_209

Name: TMP_209 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
position_5 (-> ['positions'])
position
Name: position, Num: 5 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
position_5 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_4 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
position_4 (-> ['positions'])
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
position_4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_3

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_3
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_3
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_154(uint128) -> position_3 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_154

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_3 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_210 = CONVERT amount_1 to uint128
Converting amount_1

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_210

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
position_4 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_3 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_154(-> position_4 (-> ['positions'])) = REF_154 (c)+ TMP_210

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
Finance type key: (0, 0)
init
end
lval:u rval:u
[i]Type for REF_154

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_3 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
positions_3(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_4 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
position_2 (-> ['positions'])
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_2

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_2
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
End popogation
weee
weee
weee
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_2
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_153(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_153

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_207(int128) = 0 (c)- amount_1
SUB1
init
end
init
end
A: 0 B: 0
lnorm: 0 rnorm: 0
SUB

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:0 rval:u
[i]Type for TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_208 = CONVERT TMP_207 to uint128
Converting TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_208

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
position_2 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_153(-> position_2 (-> ['positions'])) = REF_153 (c)- TMP_208
SUB1
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
Finance type key: (0, 0)
SUB

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:u rval:u
[i]Type for REF_153

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
positions_2(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_2 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
position_5 (-> ['positions'])
position_5 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_155(uint128) -> position_5 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_155

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = REF_155 < MAX_TICK_LIQUIDITY_5
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_211

Name: TMP_211 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,MAX_TICK_LIQUIDITY)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_4

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_4
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_4
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_156(uint256) -> position_5 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_156

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_6 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_5 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_156 (->position_6 (-> ['positions'])) := growth0current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_156

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_4(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_6 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_5

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_5
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_5
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_157(uint256) -> position_6 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_157

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_7 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_6 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_157 (->position_7 (-> ['positions'])) := growth1current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_157

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_5(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_7 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
RETURN amount0fees_1,amount1fees_1
init
end
init
end

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
owner_1
owner
p.norm: u

Name: owner_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
weee
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
amount_1
amount
p.norm: 0

Name: amount_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
MAX_TICK_LIQUIDITY_4
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
positions_1
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
owner_1(address) := ϕ(['msg.sender', 'REF_24'])
Phi
[i]Type for owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
XXXX
lower_1(int24) := ϕ(['lower_1', 'lower_1', 'REF_25'])
Phi
[i]Type for lower

Name: lower Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upper_1(int24) := ϕ(['upper_1', 'REF_26', 'upper_1'])
Phi
[i]Type for upper

Name: upper Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(int128) := ϕ(['TMP_79', 'TMP_30'])
Phi
[i]Type for amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
MAX_TICK_LIQUIDITY_4(uint128) := ϕ(['MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_3'])
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_1(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(['positions_0', 'positions_5'])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
owner_1
owner_1
owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
positions_1
positions_1
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_1 (-> ['positions'])
position
Name: position, Num: 1 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_144(mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) -> positions_1[owner_1]
INDEX
[i]Type for REF_144

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_145(mapping(int24 => ConcentratedLiquidityPool.Position)) -> REF_144[lower_1]
INDEX
[i]Type for REF_145

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_146(ConcentratedLiquidityPool.Position) -> REF_145[upper_1]
INDEX
[i]Type for REF_146

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
position_1 (-> ['positions'])(ConcentratedLiquidityPool.Position) := REF_146(ConcentratedLiquidityPool.Position)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
lower_1
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1

Name: growth0current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1
growth0current
Name: growth0current, Num: 1

Name: growth0current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1

Name: growth1current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1
growth1current
Name: growth1current, Num: 1

Name: growth1current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TUPLE_12(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(lower_1,upper_1)
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
lowerTick_1
lowerTick
p.norm: u
Name: lowerTick, Num: 1

Name: lowerTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Phi
init
end
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_18
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick
Name: currentTick, Num: 1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_18(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
lower_1 (-> ['ticks'])
lower
Name: lower, Num: 1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
INDEX
[i]Type for REF_165

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
upper_1 (-> ['ticks'])
upper
Name: upper, Num: 1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
INDEX
[i]Type for REF_166

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal0_10
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1
_feeGrowthGlobal0
Name: _feeGrowthGlobal0, Num: 1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal1_10
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1
Name: _feeGrowthGlobal1, Num: 1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_224(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_1
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_2
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_2(uint256) := REF_167(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthBelow0_3
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 3

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow1_3
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 3

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Phi
init
end
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
Phi
init
end
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow1_2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_2
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_2(uint256) := REF_168(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_227(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_1
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_1(uint256) := REF_171(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_2
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove1_1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_1
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_1(uint256) := REF_172(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthAbove0_3
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 3

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove1_3
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 3

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Phi
init
end
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Phi
init
end
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_3
feeGrowthBelow0_3
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_3
feeGrowthAbove0_3
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1
feeGrowthInside0
Name: feeGrowthInside0, Num: 1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside0_1(uint256) := TMP_231(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthBelow1_3
feeGrowthBelow1_3
feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_3
feeGrowthAbove1_3
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1
Name: feeGrowthInside1, Num: 1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside1_1(uint256) := TMP_233(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthInside0_1
feeGrowthInside0_1
feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1_1
feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN feeGrowthInside0_1,feeGrowthInside1_1
init
end
init
end

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
lowerTick_1
lowerTick
p.norm: u
Name: lowerTick, Num: 1

Name: lowerTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Phi
init
end
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_18
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick
Name: currentTick, Num: 1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_18(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
lower_1 (-> ['ticks'])
lower
Name: lower, Num: 1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
INDEX
[i]Type for REF_165

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
upper_1 (-> ['ticks'])
upper
Name: upper, Num: 1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
INDEX
[i]Type for REF_166

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal0_10
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1
_feeGrowthGlobal0
Name: _feeGrowthGlobal0, Num: 1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal1_10
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1
Name: _feeGrowthGlobal1, Num: 1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_224(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_1
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_2
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_2(uint256) := REF_167(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthBelow0_3
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 3

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow1_3
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 3

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Phi
init
end
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
Phi
init
end
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow1_2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_2
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_2(uint256) := REF_168(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_227(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_1
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_1(uint256) := REF_171(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_2
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove1_1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_1
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_1(uint256) := REF_172(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthAbove0_3
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 3

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove1_3
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 3

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Phi
init
end
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Phi
init
end
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_3
feeGrowthBelow0_3
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_3
feeGrowthAbove0_3
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1
feeGrowthInside0
Name: feeGrowthInside0, Num: 1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside0_1(uint256) := TMP_231(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthBelow1_3
feeGrowthBelow1_3
feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_3
feeGrowthAbove1_3
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1
Name: feeGrowthInside1, Num: 1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside1_1(uint256) := TMP_233(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthInside0_1
feeGrowthInside0_1
feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1_1
feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN feeGrowthInside0_1,feeGrowthInside1_1
init
end
init
end
[i]Type for TUPLE_12

Name: TUPLE_12 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth0current_1(uint256)= UNPACK TUPLE_12 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth1current_1(uint256)= UNPACK TUPLE_12 index: 1 
([-1], [-1], 'u', None, -1)
[i]Type for growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
amount0fees_1

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount0fees_1
amount0fees
Name: amount0fees, Num: 1

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_148(uint256) -> position_1 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_148

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_202(uint256) = growth0current_1 (c)- REF_148
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_202

Name: TMP_202 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_149(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_149

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_203(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_202', 'REF_149', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_203

Name: TMP_203 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount0fees_1(uint256) := TMP_203(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount1fees_1
amount1fees
Name: amount1fees, Num: 1

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_151(uint256) -> position_1 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_151

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = growth1current_1 (c)- REF_151
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_204

Name: TMP_204 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_152(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_152

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_204', 'REF_152', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_205

Name: TMP_205 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount1fees_1(uint256) := TMP_205(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_206(bool) = amount_1 < 0
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
[i]Type for TMP_206

Name: TMP_206 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
position_3 (-> ['positions'])
position
Name: position, Num: 3 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
position_3 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_2 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_209(bool) = amount_1 > 0
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
[i]Type for TMP_209

Name: TMP_209 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
position_5 (-> ['positions'])
position
Name: position, Num: 5 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
position_5 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_4 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
position_4 (-> ['positions'])
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
position_4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_3

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_3
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_3
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_154(uint128) -> position_3 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_154

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_3 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_210 = CONVERT amount_1 to uint128
Converting amount_1

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_210

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
position_4 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_3 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_154(-> position_4 (-> ['positions'])) = REF_154 (c)+ TMP_210

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
Finance type key: (0, 0)
init
end
lval:u rval:u
[i]Type for REF_154

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_3 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
positions_3(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_4 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
position_2 (-> ['positions'])
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_2

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_2
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
End popogation
weee
weee
weee
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_2
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_153(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_153

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_207(int128) = 0 (c)- amount_1
SUB1
init
end
init
end
A: 0 B: 0
lnorm: 0 rnorm: 0
SUB

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:0 rval:u
[i]Type for TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_208 = CONVERT TMP_207 to uint128
Converting TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
[i]Type for TMP_208

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
position_2 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_153(-> position_2 (-> ['positions'])) = REF_153 (c)- TMP_208
SUB1
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
Finance type key: (0, 0)
SUB

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:u rval:u
[i]Type for REF_153

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
positions_2(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_2 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
position_5 (-> ['positions'])
position_5 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_155(uint128) -> position_5 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_155

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = REF_155 < MAX_TICK_LIQUIDITY_5
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_211

Name: TMP_211 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,MAX_TICK_LIQUIDITY)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_4

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_4
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_4
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_156(uint256) -> position_5 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_156

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_6 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_5 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_156 (->position_6 (-> ['positions'])) := growth0current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_156

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_4(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_6 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_5

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_5
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_5
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_157(uint256) -> position_6 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_157

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_7 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_6 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_157 (->position_7 (-> ['positions'])) := growth1current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_157

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_5(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_7 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
RETURN amount0fees_1,amount1fees_1
init
end
init
end
[i]Type for TUPLE_6

Name: TUPLE_6 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0fees_1(uint256)= UNPACK TUPLE_6 index: 0 
([-1], [-1], "'u'", None, -1)
[i]Type for amount0fees

Name: amount0fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1fees_1(uint256)= UNPACK TUPLE_6 index: 1 
([-1], [-1], "'u'", None, -1)
[i]Type for amount1fees

Name: amount1fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: burn
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_2

Name: amount0 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_2
amount0
Name: amount0, Num: 2

Name: amount0 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
amount0_2(uint256) = amount0_1 + amount0fees_1

Name: amount0 Function: burn
Num: 
Den: 
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount0fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
init
end
lval:u rval:u
[i]Type for amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1_1
amount1_1
amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_2

Name: amount1 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_2
amount1
Name: amount1, Num: 2

Name: amount1 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
amount1_2(uint256) = amount1_1 + amount1fees_1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount1fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
init
end
lval:u rval:u
[i]Type for amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
withdrawnAmounts_1

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
withdrawnAmounts_1
withdrawnAmounts
Name: withdrawnAmounts, Num: 1

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_81 = new IPool.TokenAmount[](2)
[i]Type for TMP_81

Name: TMP_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
withdrawnAmounts_1(IPool.TokenAmount[]) := TMP_81(IPool.TokenAmount)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
token0_14
token0_14
token0

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
amount0_2
amount0_2
amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
withdrawnAmounts_2

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
withdrawnAmounts_2
withdrawnAmounts
Name: withdrawnAmounts, Num: 2

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
withdrawnAmounts_2
withdrawnAmounts
Name: withdrawnAmounts, Num: 2

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_57(IPool.TokenAmount) -> withdrawnAmounts_1[0]
INDEX
[i]Type for REF_57

Name: withdrawnAmounts Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_82 = new TokenAmount(token0_14,amount0_2)
[i]Type for TMP_82

Name: TMP_82 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
withdrawnAmounts_2(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_1'])
Phi
[i]Type for withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_57 (->withdrawnAmounts_2) := TMP_82(IPool.TokenAmount)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_57

Name: REF_57 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1_2
amount1_2
amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
token1_15
token1_15
token1

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
withdrawnAmounts_3

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
withdrawnAmounts_3
withdrawnAmounts
Name: withdrawnAmounts, Num: 3

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
withdrawnAmounts_3
withdrawnAmounts
Name: withdrawnAmounts, Num: 3

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_58(IPool.TokenAmount) -> withdrawnAmounts_2[1]
INDEX
[i]Type for REF_58

Name: withdrawnAmounts Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_83 = new TokenAmount(token1_15,amount1_2)
[i]Type for TMP_83

Name: TMP_83 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
withdrawnAmounts_3(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_2'])
Phi
[i]Type for withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_58 (->withdrawnAmounts_3) := TMP_83(IPool.TokenAmount)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_58

Name: REF_58 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_15
reserve0_15
reserve0

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_16

Name: reserve0 Function: burn
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_16
reserve0

Name: reserve0 Function: burn
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_84 = CONVERT amount0fees_1 to uint128
Converting amount0fees_1

Name: amount0fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_84

Name: TMP_84 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_16(uint128) = reserve0_15 - TMP_84
SUB1
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
SUB

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_84 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve0

Name: reserve0 Function: burn
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve1_16
reserve1_16
reserve1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_17

Name: reserve1 Function: burn
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_17
reserve1

Name: reserve1 Function: burn
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_85 = CONVERT amount1fees_1 to uint128
Converting amount1fees_1

Name: amount1fees Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_85

Name: TMP_85 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_17(uint128) = reserve1_16 - TMP_85
SUB1
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
SUB

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_85 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve1

Name: reserve1 Function: burn
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
recipient_1
recipient_1
recipient

Name: recipient Function: burn
Num: 
Den: 
Address: -997
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_2
amount1_2
amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento
Name: unwrapBento, Num: 1

Name: unwrapBento Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_2
amount0_2
amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
INTERNAL_CALL, ConcentratedLiquidityPool._transferBothTokens(address,uint256,uint256,bool)(recipient_1,amount0_2,amount1_2,unwrapBento_1)
init
end
init
end
init
end
init
end
[[], [], 'u', None, [], -1, -997, 'u']

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], "'u'", None, [], -1, -1, 'u']

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], "'u'", None, [], -1, -1, 'u']

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
to_1
to
p.norm: u

Name: to_1 Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
shares0_1
shares0
p.norm: 'u'

Name: shares0_1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
shares1_1
shares1
p.norm: 'u'

Name: shares1_1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transferBothTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_28
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
to_1(address) := ϕ(['recipient_1', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
shares0_1(uint256) := ϕ(['amount0fees_1', 'amount0_2'])
Phi
[i]Type for shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
shares1_1(uint256) := ϕ(['amount1_2', 'amount1fees_1'])
Phi
[i]Type for shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transferBothTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_26(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_28(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transferBothTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token0_26
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
shares0_1
shares0_1
shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_10
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_28
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_31
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_218 = CONVERT this to address
Converting this
4
[i]Type for TMP_218

Name: TMP_218 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_14(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:withdraw, arguments:['token0_26', 'TMP_218', 'to_1', '0', 'shares0_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_14

Name: TUPLE_14 Function: _transferBothTokens
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_10(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_28(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_31(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
shares1_1
shares1_1
shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_10
bento_10
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_31
token1_31
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_11
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1_32
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_219 = CONVERT this to address
Converting this
4
[i]Type for TMP_219

Name: TMP_219 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_15(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_10(IBentoBoxMinimal), function:withdraw, arguments:['token1_31', 'TMP_219', 'to_1', '0', 'shares1_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_15

Name: TUPLE_15 Function: _transferBothTokens
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_11(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_10', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1_32(address) := ϕ(['token1_31', 'token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token0_26
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
shares0_1
shares0_1
shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_8
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_27
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_29
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_220 = CONVERT this to address
Converting this
4
[i]Type for TMP_220

Name: TMP_220 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:transfer, arguments:['token0_26', 'TMP_220', 'to_1', 'shares0_1']  
High Call: transfer
bento_8(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_7', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_27(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_26', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_29(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_28', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
bento_8
bento_8
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_29
token1_29
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
shares1_1
shares1_1
shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_9
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1_30
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_222 = CONVERT this to address
Converting this
4
[i]Type for TMP_222

Name: TMP_222 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_8(IBentoBoxMinimal), function:transfer, arguments:['token1_29', 'TMP_222', 'to_1', 'shares1_1']  
High Call: transfer
bento_9(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_8', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1_30(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_29', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
to_1
to
p.norm: u

Name: to_1 Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
shares0_1
shares0
p.norm: 'u'

Name: shares0_1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
shares1_1
shares1
p.norm: 'u'

Name: shares1_1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transferBothTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_28
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
to_1(address) := ϕ(['recipient_1', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
shares0_1(uint256) := ϕ(['amount0fees_1', 'amount0_2'])
Phi
[i]Type for shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
shares1_1(uint256) := ϕ(['amount1_2', 'amount1fees_1'])
Phi
[i]Type for shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transferBothTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_26(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_28(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transferBothTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token0_26
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
shares0_1
shares0_1
shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_10
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_28
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_31
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_218 = CONVERT this to address
Converting this
4
[i]Type for TMP_218

Name: TMP_218 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_14(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:withdraw, arguments:['token0_26', 'TMP_218', 'to_1', '0', 'shares0_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_14

Name: TUPLE_14 Function: _transferBothTokens
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_10(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_28(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_31(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
shares1_1
shares1_1
shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_10
bento_10
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_31
token1_31
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_11
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1_32
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_219 = CONVERT this to address
Converting this
4
[i]Type for TMP_219

Name: TMP_219 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_15(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_10(IBentoBoxMinimal), function:withdraw, arguments:['token1_31', 'TMP_219', 'to_1', '0', 'shares1_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_15

Name: TUPLE_15 Function: _transferBothTokens
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_11(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_10', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1_32(address) := ϕ(['token1_31', 'token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token0_26
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
shares0_1
shares0_1
shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_8
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_27
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_29
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_220 = CONVERT this to address
Converting this
4
[i]Type for TMP_220

Name: TMP_220 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:transfer, arguments:['token0_26', 'TMP_220', 'to_1', 'shares0_1']  
High Call: transfer
bento_8(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_7', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_27(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_26', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_29(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_28', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
bento_8
bento_8
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_29
token1_29
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
shares1_1
shares1_1
shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_9
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1_30
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_222 = CONVERT this to address
Converting this
4
[i]Type for TMP_222

Name: TMP_222 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_8(IBentoBoxMinimal), function:transfer, arguments:['token1_29', 'TMP_222', 'to_1', 'shares1_1']  
High Call: transfer
bento_9(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_8', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1_30(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_29', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_13
ticks_13
ticks

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1
lower_1
lower
Name: lower, Num: 1

Name: lower Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
nearestTick_13
nearestTick_13
nearestTick

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper
Name: upper, Num: 1

Name: upper Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_14

Name: nearestTick Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_14
nearestTick

Name: nearestTick Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_87(int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.remove(mapping(int24 => Ticks.Tick),int24,int24,uint128,int24), arguments:['ticks_13', 'lower_1', 'upper_1', 'amount_1', 'nearestTick_13'] 
Written func info: Ticks, remove
[i]Type for TMP_87

Name: TMP_87 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_14(int24) := TMP_87(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for nearestTick

Name: nearestTick Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied nearestTick
 To type: None

Name: nearestTick Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
recipient_1
recipient_1
recipient

Name: recipient Function: burn
Num: 
Den: 
Address: -997
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_2
amount1_2
amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_2
amount0_2
amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee



burnSingle
Finding type for (bytes ... )
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


TMP_90(None) = SOLIDITY_CALL revert()()


Rembmered parameters?

Name:  Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name:  Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
TMP_90(None) = SOLIDITY_CALL revert()()
[i]Type for TMP_90

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


TMP_90(None) = SOLIDITY_CALL revert()()


Rembmered parameters?

Name:  Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name:  Function: burnSingle
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
TMP_90(None) = SOLIDITY_CALL revert()()
[i]Type for TMP_90

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX



collect
Finding type for lower(int24 ... )
Finding type for upper(int24 ... )
Finding type for recipient(address ... )
prev address? u
Head Addr: -996
    Norm: 0
    Set: {-996}
    Fin: NULL
Finding type for unwrapBento(bool ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: recipient
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


reserve0_17(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
reserve1_18(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
TUPLE_7(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(msg.sender,lower_1,upper_1,0)
amount0fees_1(uint256)= UNPACK TUPLE_7 index: 0 
amount1fees_1(uint256)= UNPACK TUPLE_7 index: 1 
INTERNAL_CALL, ConcentratedLiquidityPool._transferBothTokens(address,uint256,uint256,bool)(recipient_1,amount0fees_1,amount1fees_1,unwrapBento_1)
TMP_92 = CONVERT amount0fees_1 to uint128
reserve0_21(uint128) = reserve0_20 (c)- TMP_92
TMP_93 = CONVERT amount1fees_1 to uint128
reserve1_22(uint128) = reserve1_21 (c)- TMP_93
Emit Collect(msg.sender,amount0fees_1,amount1fees_1)


Rembmered parameters?

Name: lower Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: collect
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
reserve0_17
reserve0
Name: reserve0, Num: 17

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_18
reserve1
Name: reserve1, Num: 18

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve0_17(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
Phi
[i]Type for reserve0

Name: reserve0 Function: collect
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_18(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
Phi
[i]Type for reserve1

Name: reserve1 Function: collect
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lower Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: collect
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Rembmered parameters?

Name: lower Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: collect
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0fees_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0fees_1
amount0fees
Name: amount0fees, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1
amount1fees
Name: amount1fees, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TUPLE_7(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(msg.sender,lower_1,upper_1,0)
init
init
end
init
end
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
owner_1
owner
p.norm: u

Name: owner_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
weee
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
amount_1
amount
p.norm: 0

Name: amount_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
MAX_TICK_LIQUIDITY_4
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
positions_1
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
owner_1(address) := ϕ(['msg.sender', 'REF_24'])
Phi
[i]Type for owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
XXXX
lower_1(int24) := ϕ(['lower_1', 'lower_1', 'REF_25'])
Phi
[i]Type for lower

Name: lower Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upper_1(int24) := ϕ(['upper_1', 'REF_26', 'upper_1'])
Phi
[i]Type for upper

Name: upper Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(int128) := ϕ(['TMP_79', 'TMP_30'])
Phi
[i]Type for amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_TICK_LIQUIDITY_4(uint128) := ϕ(['MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_3'])
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_1(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(['positions_0', 'positions_5'])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
owner_1
owner_1
owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
positions_1
positions_1
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_1 (-> ['positions'])
position
Name: position, Num: 1 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_144(mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) -> positions_1[owner_1]
INDEX
[i]Type for REF_144

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_145(mapping(int24 => ConcentratedLiquidityPool.Position)) -> REF_144[lower_1]
INDEX
[i]Type for REF_145

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_146(ConcentratedLiquidityPool.Position) -> REF_145[upper_1]
INDEX
[i]Type for REF_146

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
position_1 (-> ['positions'])(ConcentratedLiquidityPool.Position) := REF_146(ConcentratedLiquidityPool.Position)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1

Name: growth0current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1
growth0current
Name: growth0current, Num: 1

Name: growth0current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1

Name: growth1current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1
growth1current
Name: growth1current, Num: 1

Name: growth1current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TUPLE_12(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(lower_1,upper_1)
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
lowerTick_1
lowerTick
p.norm: u
Name: lowerTick, Num: 1

Name: lowerTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Phi
init
end
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_18
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick
Name: currentTick, Num: 1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_18(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
lower_1 (-> ['ticks'])
lower
Name: lower, Num: 1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
INDEX
[i]Type for REF_165

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
upper_1 (-> ['ticks'])
upper
Name: upper, Num: 1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
INDEX
[i]Type for REF_166

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal0_10
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1
_feeGrowthGlobal0
Name: _feeGrowthGlobal0, Num: 1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal1_10
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1
Name: _feeGrowthGlobal1, Num: 1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_224(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_1
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_2
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_2(uint256) := REF_167(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthBelow0_3
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 3

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow1_3
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 3

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Phi
init
end
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
Phi
init
end
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow1_2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_2
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_2(uint256) := REF_168(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_227(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_1
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_1(uint256) := REF_171(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_2
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove1_1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_1
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_1(uint256) := REF_172(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthAbove0_3
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 3

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove1_3
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 3

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Phi
init
end
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Phi
init
end
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_3
feeGrowthBelow0_3
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_3
feeGrowthAbove0_3
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1
feeGrowthInside0
Name: feeGrowthInside0, Num: 1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside0_1(uint256) := TMP_231(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthBelow1_3
feeGrowthBelow1_3
feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_3
feeGrowthAbove1_3
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1
Name: feeGrowthInside1, Num: 1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside1_1(uint256) := TMP_233(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthInside0_1
feeGrowthInside0_1
feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1_1
feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN feeGrowthInside0_1,feeGrowthInside1_1
init
end
init
end

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
lowerTick_1
lowerTick
p.norm: u
Name: lowerTick, Num: 1

Name: lowerTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Phi
init
end
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_18
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick
Name: currentTick, Num: 1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_18(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
lower_1 (-> ['ticks'])
lower
Name: lower, Num: 1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
INDEX
[i]Type for REF_165

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
upper_1 (-> ['ticks'])
upper
Name: upper, Num: 1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
INDEX
[i]Type for REF_166

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal0_10
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1
_feeGrowthGlobal0
Name: _feeGrowthGlobal0, Num: 1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal1_10
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1
Name: _feeGrowthGlobal1, Num: 1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_224(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_1
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_2
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_2(uint256) := REF_167(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthBelow0_3
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 3

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow1_3
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 3

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Phi
init
end
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
Phi
init
end
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow1_2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_2
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_2(uint256) := REF_168(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_227(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_1
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_1(uint256) := REF_171(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_2
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove1_1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_1
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_1(uint256) := REF_172(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthAbove0_3
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 3

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove1_3
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 3

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Phi
init
end
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Phi
init
end
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_3
feeGrowthBelow0_3
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_3
feeGrowthAbove0_3
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1
feeGrowthInside0
Name: feeGrowthInside0, Num: 1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside0_1(uint256) := TMP_231(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthBelow1_3
feeGrowthBelow1_3
feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_3
feeGrowthAbove1_3
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1
Name: feeGrowthInside1, Num: 1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside1_1(uint256) := TMP_233(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthInside0_1
feeGrowthInside0_1
feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1_1
feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN feeGrowthInside0_1,feeGrowthInside1_1
init
end
init
end
[i]Type for TUPLE_12

Name: TUPLE_12 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth0current_1(uint256)= UNPACK TUPLE_12 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth1current_1(uint256)= UNPACK TUPLE_12 index: 1 
([-1], [-1], 'u', None, -1)
[i]Type for growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
amount0fees_1

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount0fees_1
amount0fees
Name: amount0fees, Num: 1

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_148(uint256) -> position_1 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_148

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_202(uint256) = growth0current_1 (c)- REF_148
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_202

Name: TMP_202 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_149(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_149

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_203(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_202', 'REF_149', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_203

Name: TMP_203 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount0fees_1(uint256) := TMP_203(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount1fees_1
amount1fees
Name: amount1fees, Num: 1

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_151(uint256) -> position_1 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_151

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = growth1current_1 (c)- REF_151
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_204

Name: TMP_204 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_152(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_152

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_204', 'REF_152', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_205

Name: TMP_205 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount1fees_1(uint256) := TMP_205(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_206(bool) = amount_1 < 0
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
[i]Type for TMP_206

Name: TMP_206 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
position_3 (-> ['positions'])
position
Name: position, Num: 3 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
position_3 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_2 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_209(bool) = amount_1 > 0
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
[i]Type for TMP_209

Name: TMP_209 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
position_5 (-> ['positions'])
position
Name: position, Num: 5 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
position_5 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_4 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
position_4 (-> ['positions'])
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
position_4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_3

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_3
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_3
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_154(uint128) -> position_3 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_154

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_3 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_210 = CONVERT amount_1 to uint128
Converting amount_1

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_210

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_4 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_3 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_154(-> position_4 (-> ['positions'])) = REF_154 (c)+ TMP_210

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
init
end
lval:u rval:u
[i]Type for REF_154

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_3 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
positions_3(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_4 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
position_2 (-> ['positions'])
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_2

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_2
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
End popogation
weee
weee
weee
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_2
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_153(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_153

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_207(int128) = 0 (c)- amount_1
SUB1
init
end
init
end
A: 0 B: 0
lnorm: 0 rnorm: 0
SUB

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:0 rval:u
[i]Type for TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208 = CONVERT TMP_207 to uint128
Converting TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_208

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_2 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_153(-> position_2 (-> ['positions'])) = REF_153 (c)- TMP_208
SUB1
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
SUB

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for REF_153

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
positions_2(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_2 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
position_5 (-> ['positions'])
position_5 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_155(uint128) -> position_5 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_155

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = REF_155 < MAX_TICK_LIQUIDITY_5
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_211

Name: TMP_211 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,MAX_TICK_LIQUIDITY)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_4

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_4
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_4
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_156(uint256) -> position_5 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_156

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_6 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_5 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_156 (->position_6 (-> ['positions'])) := growth0current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_156

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_4(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_6 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_5

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_5
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_5
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_157(uint256) -> position_6 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_157

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_7 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_6 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_157 (->position_7 (-> ['positions'])) := growth1current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_157

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_5(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_7 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
RETURN amount0fees_1,amount1fees_1
init
end
init
end

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
owner_1
owner
p.norm: u

Name: owner_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
weee
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
amount_1
amount
p.norm: 0

Name: amount_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
MAX_TICK_LIQUIDITY_4
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
positions_1
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
owner_1(address) := ϕ(['msg.sender', 'REF_24'])
Phi
[i]Type for owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
XXXX
lower_1(int24) := ϕ(['lower_1', 'lower_1', 'REF_25'])
Phi
[i]Type for lower

Name: lower Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upper_1(int24) := ϕ(['upper_1', 'REF_26', 'upper_1'])
Phi
[i]Type for upper

Name: upper Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(int128) := ϕ(['TMP_79', 'TMP_30'])
Phi
[i]Type for amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_TICK_LIQUIDITY_4(uint128) := ϕ(['MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_3'])
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_1(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(['positions_0', 'positions_5'])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
owner_1
owner_1
owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
positions_1
positions_1
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_1 (-> ['positions'])
position
Name: position, Num: 1 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_144(mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) -> positions_1[owner_1]
INDEX
[i]Type for REF_144

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_145(mapping(int24 => ConcentratedLiquidityPool.Position)) -> REF_144[lower_1]
INDEX
[i]Type for REF_145

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_146(ConcentratedLiquidityPool.Position) -> REF_145[upper_1]
INDEX
[i]Type for REF_146

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
position_1 (-> ['positions'])(ConcentratedLiquidityPool.Position) := REF_146(ConcentratedLiquidityPool.Position)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1

Name: growth0current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1
growth0current
Name: growth0current, Num: 1

Name: growth0current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1

Name: growth1current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1
growth1current
Name: growth1current, Num: 1

Name: growth1current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TUPLE_12(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(lower_1,upper_1)
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
lowerTick_1
lowerTick
p.norm: u
Name: lowerTick, Num: 1

Name: lowerTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Phi
init
end
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_18
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick
Name: currentTick, Num: 1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_18(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
lower_1 (-> ['ticks'])
lower
Name: lower, Num: 1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
INDEX
[i]Type for REF_165

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
upper_1 (-> ['ticks'])
upper
Name: upper, Num: 1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
INDEX
[i]Type for REF_166

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal0_10
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1
_feeGrowthGlobal0
Name: _feeGrowthGlobal0, Num: 1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal1_10
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1
Name: _feeGrowthGlobal1, Num: 1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_224(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_1
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_2
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_2(uint256) := REF_167(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthBelow0_3
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 3

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow1_3
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 3

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Phi
init
end
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
Phi
init
end
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow1_2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_2
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_2(uint256) := REF_168(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_227(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_1
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_1(uint256) := REF_171(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_2
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove1_1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_1
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_1(uint256) := REF_172(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthAbove0_3
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 3

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove1_3
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 3

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Phi
init
end
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Phi
init
end
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_3
feeGrowthBelow0_3
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_3
feeGrowthAbove0_3
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1
feeGrowthInside0
Name: feeGrowthInside0, Num: 1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside0_1(uint256) := TMP_231(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthBelow1_3
feeGrowthBelow1_3
feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_3
feeGrowthAbove1_3
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1
Name: feeGrowthInside1, Num: 1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside1_1(uint256) := TMP_233(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthInside0_1
feeGrowthInside0_1
feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1_1
feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN feeGrowthInside0_1,feeGrowthInside1_1
init
end
init
end

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
lowerTick_1
lowerTick
p.norm: u
Name: lowerTick, Num: 1

Name: lowerTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Phi
init
end
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_18
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick
Name: currentTick, Num: 1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_18(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
lower_1 (-> ['ticks'])
lower
Name: lower, Num: 1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
INDEX
[i]Type for REF_165

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
upper_1 (-> ['ticks'])
upper
Name: upper, Num: 1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
INDEX
[i]Type for REF_166

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal0_10
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1
_feeGrowthGlobal0
Name: _feeGrowthGlobal0, Num: 1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal1_10
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1
Name: _feeGrowthGlobal1, Num: 1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_224(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_1
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_2
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_2(uint256) := REF_167(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthBelow0_3
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 3

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow1_3
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 3

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Phi
init
end
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
Phi
init
end
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow1_2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_2
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_2(uint256) := REF_168(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_227(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_1
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_1(uint256) := REF_171(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_2
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove1_1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_1
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_1(uint256) := REF_172(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthAbove0_3
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 3

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove1_3
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 3

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Phi
init
end
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Phi
init
end
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_3
feeGrowthBelow0_3
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_3
feeGrowthAbove0_3
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1
feeGrowthInside0
Name: feeGrowthInside0, Num: 1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside0_1(uint256) := TMP_231(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthBelow1_3
feeGrowthBelow1_3
feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_3
feeGrowthAbove1_3
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1
Name: feeGrowthInside1, Num: 1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside1_1(uint256) := TMP_233(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthInside0_1
feeGrowthInside0_1
feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1_1
feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN feeGrowthInside0_1,feeGrowthInside1_1
init
end
init
end
[i]Type for TUPLE_12

Name: TUPLE_12 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth0current_1(uint256)= UNPACK TUPLE_12 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth1current_1(uint256)= UNPACK TUPLE_12 index: 1 
([-1], [-1], 'u', None, -1)
[i]Type for growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
amount0fees_1

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount0fees_1
amount0fees
Name: amount0fees, Num: 1

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_148(uint256) -> position_1 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_148

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_202(uint256) = growth0current_1 (c)- REF_148
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_202

Name: TMP_202 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_149(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_149

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_203(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_202', 'REF_149', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_203

Name: TMP_203 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount0fees_1(uint256) := TMP_203(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount1fees_1
amount1fees
Name: amount1fees, Num: 1

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_151(uint256) -> position_1 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_151

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = growth1current_1 (c)- REF_151
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_204

Name: TMP_204 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_152(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_152

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_204', 'REF_152', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_205

Name: TMP_205 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount1fees_1(uint256) := TMP_205(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_206(bool) = amount_1 < 0
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
[i]Type for TMP_206

Name: TMP_206 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
position_3 (-> ['positions'])
position
Name: position, Num: 3 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
position_3 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_2 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_209(bool) = amount_1 > 0
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
[i]Type for TMP_209

Name: TMP_209 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
position_5 (-> ['positions'])
position
Name: position, Num: 5 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
position_5 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_4 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
position_4 (-> ['positions'])
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
position_4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_3

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_3
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_3
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_154(uint128) -> position_3 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_154

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_3 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_210 = CONVERT amount_1 to uint128
Converting amount_1

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_210

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_4 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_3 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_154(-> position_4 (-> ['positions'])) = REF_154 (c)+ TMP_210

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
init
end
lval:u rval:u
[i]Type for REF_154

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_3 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
positions_3(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_4 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
position_2 (-> ['positions'])
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_2

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_2
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
End popogation
weee
weee
weee
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_2
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_153(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_153

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_207(int128) = 0 (c)- amount_1
SUB1
init
end
init
end
A: 0 B: 0
lnorm: 0 rnorm: 0
SUB

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:0 rval:u
[i]Type for TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208 = CONVERT TMP_207 to uint128
Converting TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_208

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_2 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_153(-> position_2 (-> ['positions'])) = REF_153 (c)- TMP_208
SUB1
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
SUB

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for REF_153

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
positions_2(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_2 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
position_5 (-> ['positions'])
position_5 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_155(uint128) -> position_5 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_155

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = REF_155 < MAX_TICK_LIQUIDITY_5
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_211

Name: TMP_211 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,MAX_TICK_LIQUIDITY)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_4

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_4
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_4
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_156(uint256) -> position_5 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_156

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_6 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_5 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_156 (->position_6 (-> ['positions'])) := growth0current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_156

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_4(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_6 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_5

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_5
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_5
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_157(uint256) -> position_6 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_157

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_7 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_6 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_157 (->position_7 (-> ['positions'])) := growth1current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_157

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_5(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_7 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
RETURN amount0fees_1,amount1fees_1
init
end
init
end
[i]Type for TUPLE_7

Name: TUPLE_7 Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0fees_1(uint256)= UNPACK TUPLE_7 index: 0 
([-1], [-1], "'u'", None, -1)
[i]Type for amount0fees

Name: amount0fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1fees_1(uint256)= UNPACK TUPLE_7 index: 1 
([-1], [-1], "'u'", None, -1)
[i]Type for amount1fees

Name: amount1fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lower Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: collect
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient
p.norm: u

Name: recipient_1 Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
End popogation
weee
INTERNAL_CALL, ConcentratedLiquidityPool._transferBothTokens(address,uint256,uint256,bool)(recipient_1,amount0fees_1,amount1fees_1,unwrapBento_1)
init
end
init
end
init
end
init
end
[[], [], 'u', 'recipient', [], -1, -996, 'u']

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], "'u'", None, [], -1, -1, 'u']

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], "'u'", None, [], -1, -1, 'u']

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
to_1
to
p.norm: u

Name: to_1 Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
weee
shares0_1
shares0
p.norm: 'u'

Name: shares0_1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
shares1_1
shares1
p.norm: 'u'

Name: shares1_1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transferBothTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_28
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
to_1(address) := ϕ(['recipient_1', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
shares0_1(uint256) := ϕ(['amount0fees_1', 'amount0_2'])
Phi
[i]Type for shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
shares1_1(uint256) := ϕ(['amount1_2', 'amount1fees_1'])
Phi
[i]Type for shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transferBothTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_26(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_28(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transferBothTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
token0_26
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
shares0_1
shares0_1
shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_10
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_28
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_31
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_218 = CONVERT this to address
Converting this
4
[i]Type for TMP_218

Name: TMP_218 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_14(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:withdraw, arguments:['token0_26', 'TMP_218', 'to_1', '0', 'shares0_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_14

Name: TUPLE_14 Function: _transferBothTokens
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_10(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_28(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_31(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
shares1_1
shares1_1
shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_10
bento_10
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_31
token1_31
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_11
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1_32
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_219 = CONVERT this to address
Converting this
4
[i]Type for TMP_219

Name: TMP_219 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_15(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_10(IBentoBoxMinimal), function:withdraw, arguments:['token1_31', 'TMP_219', 'to_1', '0', 'shares1_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_15

Name: TUPLE_15 Function: _transferBothTokens
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_11(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_10', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1_32(address) := ϕ(['token1_31', 'token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
token0_26
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
shares0_1
shares0_1
shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_8
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_27
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_29
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_220 = CONVERT this to address
Converting this
4
[i]Type for TMP_220

Name: TMP_220 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:transfer, arguments:['token0_26', 'TMP_220', 'to_1', 'shares0_1']  
High Call: transfer
bento_8(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_7', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_27(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_26', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_29(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_28', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
bento_8
bento_8
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_29
token1_29
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
shares1_1
shares1_1
shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_9
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1_30
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_222 = CONVERT this to address
Converting this
4
[i]Type for TMP_222

Name: TMP_222 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_8(IBentoBoxMinimal), function:transfer, arguments:['token1_29', 'TMP_222', 'to_1', 'shares1_1']  
High Call: transfer
bento_9(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_8', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1_30(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_29', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
to_1
to
p.norm: u

Name: to_1 Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
weee
shares0_1
shares0
p.norm: 'u'

Name: shares0_1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
shares1_1
shares1
p.norm: 'u'

Name: shares1_1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transferBothTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_28
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
to_1(address) := ϕ(['recipient_1', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
shares0_1(uint256) := ϕ(['amount0fees_1', 'amount0_2'])
Phi
[i]Type for shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
shares1_1(uint256) := ϕ(['amount1_2', 'amount1fees_1'])
Phi
[i]Type for shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transferBothTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_26(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_28(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transferBothTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
token0_26
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
shares0_1
shares0_1
shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_10
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_28
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_31
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_218 = CONVERT this to address
Converting this
4
[i]Type for TMP_218

Name: TMP_218 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_14(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:withdraw, arguments:['token0_26', 'TMP_218', 'to_1', '0', 'shares0_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_14

Name: TUPLE_14 Function: _transferBothTokens
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_10(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_28(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_31(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
shares1_1
shares1_1
shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_10
bento_10
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_31
token1_31
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_11
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1_32
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_219 = CONVERT this to address
Converting this
4
[i]Type for TMP_219

Name: TMP_219 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_15(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_10(IBentoBoxMinimal), function:withdraw, arguments:['token1_31', 'TMP_219', 'to_1', '0', 'shares1_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_15

Name: TUPLE_15 Function: _transferBothTokens
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_11(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_10', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1_32(address) := ϕ(['token1_31', 'token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
token0_26
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
shares0_1
shares0_1
shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_8
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_27
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_29
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_220 = CONVERT this to address
Converting this
4
[i]Type for TMP_220

Name: TMP_220 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:transfer, arguments:['token0_26', 'TMP_220', 'to_1', 'shares0_1']  
High Call: transfer
bento_8(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_7', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_27(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_26', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_29(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_28', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
bento_8
bento_8
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_29
token1_29
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
shares1_1
shares1_1
shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_9
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1_30
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_222 = CONVERT this to address
Converting this
4
[i]Type for TMP_222

Name: TMP_222 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_8(IBentoBoxMinimal), function:transfer, arguments:['token1_29', 'TMP_222', 'to_1', 'shares1_1']  
High Call: transfer
bento_9(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_8', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1_30(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_29', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lower Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: collect
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_20
reserve0_20
reserve0
Name: reserve0, Num: 20

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_21

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_21
reserve0
Name: reserve0, Num: 21

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_92 = CONVERT amount0fees_1 to uint128
Converting amount0fees_1

Name: amount0fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_92

Name: TMP_92 Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_21(uint128) = reserve0_20 (c)- TMP_92
SUB1
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
SUB

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_92 Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve0

Name: reserve0 Function: collect
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: collect
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lower Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: collect
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve1_21
reserve1_21
reserve1
Name: reserve1, Num: 21

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_22
reserve1
Name: reserve1, Num: 22

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_93 = CONVERT amount1fees_1 to uint128
Converting amount1fees_1

Name: amount1fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_93

Name: TMP_93 Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_22(uint128) = reserve1_21 (c)- TMP_93
SUB1
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
SUB

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_93 Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve1

Name: reserve1 Function: collect
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: collect
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lower Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: collect
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee


reserve0_17(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
reserve1_18(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
TUPLE_7(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(msg.sender,lower_1,upper_1,0)
amount0fees_1(uint256)= UNPACK TUPLE_7 index: 0 
amount1fees_1(uint256)= UNPACK TUPLE_7 index: 1 
INTERNAL_CALL, ConcentratedLiquidityPool._transferBothTokens(address,uint256,uint256,bool)(recipient_1,amount0fees_1,amount1fees_1,unwrapBento_1)
TMP_92 = CONVERT amount0fees_1 to uint128
reserve0_21(uint128) = reserve0_20 (c)- TMP_92
TMP_93 = CONVERT amount1fees_1 to uint128
reserve1_22(uint128) = reserve1_21 (c)- TMP_93
Emit Collect(msg.sender,amount0fees_1,amount1fees_1)


Rembmered parameters?

Name: lower Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: collect
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
reserve0_17
reserve0

Name: reserve0 Function: collect
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_18
reserve1

Name: reserve1 Function: collect
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve0_17(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
Phi
[i]Type for reserve0

Name: reserve0 Function: collect
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_18(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
Phi
[i]Type for reserve1

Name: reserve1 Function: collect
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lower Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: collect
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Rembmered parameters?

Name: lower Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: collect
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0fees_1

Name: amount0fees Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0fees_1
amount0fees
Name: amount0fees, Num: 1

Name: amount0fees Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1

Name: amount1fees Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1
amount1fees
Name: amount1fees, Num: 1

Name: amount1fees Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TUPLE_7(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(msg.sender,lower_1,upper_1,0)
init
init
end
init
end
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
owner_1
owner
p.norm: u

Name: owner_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
weee
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
amount_1
amount
p.norm: 0

Name: amount_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
MAX_TICK_LIQUIDITY_4
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
positions_1
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
owner_1(address) := ϕ(['msg.sender', 'REF_24'])
Phi
[i]Type for owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
XXXX
lower_1(int24) := ϕ(['lower_1', 'lower_1', 'REF_25'])
Phi
[i]Type for lower

Name: lower Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upper_1(int24) := ϕ(['upper_1', 'REF_26', 'upper_1'])
Phi
[i]Type for upper

Name: upper Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(int128) := ϕ(['TMP_79', 'TMP_30'])
Phi
[i]Type for amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_TICK_LIQUIDITY_4(uint128) := ϕ(['MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_3'])
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_1(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(['positions_0', 'positions_5'])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
owner_1
owner_1
owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
positions_1
positions_1
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_1 (-> ['positions'])
position
Name: position, Num: 1 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_144(mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) -> positions_1[owner_1]
INDEX
[i]Type for REF_144

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_145(mapping(int24 => ConcentratedLiquidityPool.Position)) -> REF_144[lower_1]
INDEX
[i]Type for REF_145

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_146(ConcentratedLiquidityPool.Position) -> REF_145[upper_1]
INDEX
[i]Type for REF_146

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
position_1 (-> ['positions'])(ConcentratedLiquidityPool.Position) := REF_146(ConcentratedLiquidityPool.Position)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1

Name: growth0current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1
growth0current
Name: growth0current, Num: 1

Name: growth0current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1

Name: growth1current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1
growth1current
Name: growth1current, Num: 1

Name: growth1current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TUPLE_12(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(lower_1,upper_1)
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
lowerTick_1
lowerTick
p.norm: u
Name: lowerTick, Num: 1

Name: lowerTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Phi
init
end
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_18
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick
Name: currentTick, Num: 1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_18(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
lower_1 (-> ['ticks'])
lower
Name: lower, Num: 1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
INDEX
[i]Type for REF_165

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
upper_1 (-> ['ticks'])
upper
Name: upper, Num: 1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
INDEX
[i]Type for REF_166

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal0_10
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1
_feeGrowthGlobal0
Name: _feeGrowthGlobal0, Num: 1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal1_10
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1
Name: _feeGrowthGlobal1, Num: 1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_224(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_1
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_2
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_2(uint256) := REF_167(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthBelow0_3
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 3

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow1_3
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 3

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Phi
init
end
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
Phi
init
end
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow1_2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_2
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_2(uint256) := REF_168(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_227(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_1
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_1(uint256) := REF_171(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_2
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove1_1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_1
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_1(uint256) := REF_172(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthAbove0_3
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 3

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove1_3
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 3

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Phi
init
end
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Phi
init
end
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_3
feeGrowthBelow0_3
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_3
feeGrowthAbove0_3
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1
feeGrowthInside0
Name: feeGrowthInside0, Num: 1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside0_1(uint256) := TMP_231(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthBelow1_3
feeGrowthBelow1_3
feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_3
feeGrowthAbove1_3
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1
Name: feeGrowthInside1, Num: 1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside1_1(uint256) := TMP_233(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthInside0_1
feeGrowthInside0_1
feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1_1
feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN feeGrowthInside0_1,feeGrowthInside1_1
init
end
init
end

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
lowerTick_1
lowerTick
p.norm: u
Name: lowerTick, Num: 1

Name: lowerTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Phi
init
end
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_18
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick
Name: currentTick, Num: 1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_18(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
lower_1 (-> ['ticks'])
lower
Name: lower, Num: 1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
INDEX
[i]Type for REF_165

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
upper_1 (-> ['ticks'])
upper
Name: upper, Num: 1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
INDEX
[i]Type for REF_166

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal0_10
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1
_feeGrowthGlobal0
Name: _feeGrowthGlobal0, Num: 1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal1_10
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1
Name: _feeGrowthGlobal1, Num: 1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_224(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_1
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_2
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_2(uint256) := REF_167(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthBelow0_3
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 3

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow1_3
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 3

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Phi
init
end
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
Phi
init
end
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow1_2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_2
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_2(uint256) := REF_168(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_227(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_1
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_1(uint256) := REF_171(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_2
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove1_1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_1
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_1(uint256) := REF_172(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthAbove0_3
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 3

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove1_3
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 3

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Phi
init
end
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Phi
init
end
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_3
feeGrowthBelow0_3
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_3
feeGrowthAbove0_3
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1
feeGrowthInside0
Name: feeGrowthInside0, Num: 1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside0_1(uint256) := TMP_231(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthBelow1_3
feeGrowthBelow1_3
feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_3
feeGrowthAbove1_3
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1
Name: feeGrowthInside1, Num: 1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside1_1(uint256) := TMP_233(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthInside0_1
feeGrowthInside0_1
feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1_1
feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN feeGrowthInside0_1,feeGrowthInside1_1
init
end
init
end
[i]Type for TUPLE_12

Name: TUPLE_12 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth0current_1(uint256)= UNPACK TUPLE_12 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth1current_1(uint256)= UNPACK TUPLE_12 index: 1 
([-1], [-1], 'u', None, -1)
[i]Type for growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
amount0fees_1

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount0fees_1
amount0fees
Name: amount0fees, Num: 1

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_148(uint256) -> position_1 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_148

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_202(uint256) = growth0current_1 (c)- REF_148
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_202

Name: TMP_202 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_149(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_149

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_203(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_202', 'REF_149', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_203

Name: TMP_203 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount0fees_1(uint256) := TMP_203(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount1fees_1
amount1fees
Name: amount1fees, Num: 1

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_151(uint256) -> position_1 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_151

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = growth1current_1 (c)- REF_151
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_204

Name: TMP_204 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_152(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_152

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_204', 'REF_152', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_205

Name: TMP_205 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount1fees_1(uint256) := TMP_205(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_206(bool) = amount_1 < 0
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
[i]Type for TMP_206

Name: TMP_206 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
position_3 (-> ['positions'])
position
Name: position, Num: 3 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
position_3 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_2 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_209(bool) = amount_1 > 0
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
[i]Type for TMP_209

Name: TMP_209 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
position_5 (-> ['positions'])
position
Name: position, Num: 5 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
position_5 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_4 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
position_4 (-> ['positions'])
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
position_4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_3

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_3
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_3
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_154(uint128) -> position_3 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_154

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_3 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_210 = CONVERT amount_1 to uint128
Converting amount_1

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_210

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_4 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_3 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_154(-> position_4 (-> ['positions'])) = REF_154 (c)+ TMP_210

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
init
end
lval:u rval:u
[i]Type for REF_154

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_3 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
positions_3(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_4 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
position_2 (-> ['positions'])
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_2

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_2
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
End popogation
weee
weee
weee
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_2
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_153(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_153

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_207(int128) = 0 (c)- amount_1
SUB1
init
end
init
end
A: 0 B: 0
lnorm: 0 rnorm: 0
SUB

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:0 rval:u
[i]Type for TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208 = CONVERT TMP_207 to uint128
Converting TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_208

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_2 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_153(-> position_2 (-> ['positions'])) = REF_153 (c)- TMP_208
SUB1
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
SUB

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for REF_153

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
positions_2(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_2 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
position_5 (-> ['positions'])
position_5 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_155(uint128) -> position_5 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_155

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = REF_155 < MAX_TICK_LIQUIDITY_5
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_211

Name: TMP_211 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,MAX_TICK_LIQUIDITY)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_4

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_4
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_4
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_156(uint256) -> position_5 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_156

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_6 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_5 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_156 (->position_6 (-> ['positions'])) := growth0current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_156

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_4(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_6 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_5

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_5
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_5
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_157(uint256) -> position_6 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_157

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_7 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_6 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_157 (->position_7 (-> ['positions'])) := growth1current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_157

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_5(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_7 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
RETURN amount0fees_1,amount1fees_1
init
end
init
end

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
owner_1
owner
p.norm: u

Name: owner_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
weee
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
amount_1
amount
p.norm: 0

Name: amount_1 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
MAX_TICK_LIQUIDITY_4
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
positions_1
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
owner_1(address) := ϕ(['msg.sender', 'REF_24'])
Phi
[i]Type for owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
XXXX
lower_1(int24) := ϕ(['lower_1', 'lower_1', 'REF_25'])
Phi
[i]Type for lower

Name: lower Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upper_1(int24) := ϕ(['upper_1', 'REF_26', 'upper_1'])
Phi
[i]Type for upper

Name: upper Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(int128) := ϕ(['TMP_79', 'TMP_30'])
Phi
[i]Type for amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_TICK_LIQUIDITY_4(uint128) := ϕ(['MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_3'])
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_1(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(['positions_0', 'positions_5'])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
owner_1
owner_1
owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
positions_1
positions_1
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_1 (-> ['positions'])
position
Name: position, Num: 1 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_144(mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) -> positions_1[owner_1]
INDEX
[i]Type for REF_144

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_145(mapping(int24 => ConcentratedLiquidityPool.Position)) -> REF_144[lower_1]
INDEX
[i]Type for REF_145

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_146(ConcentratedLiquidityPool.Position) -> REF_145[upper_1]
INDEX
[i]Type for REF_146

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
position_1 (-> ['positions'])(ConcentratedLiquidityPool.Position) := REF_146(ConcentratedLiquidityPool.Position)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1
lower_1
lower
p.norm: u
Name: lower, Num: 1

Name: lower_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1
upper_1
upper
p.norm: u
Name: upper, Num: 1

Name: upper_1 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1

Name: growth0current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth0current_1
growth0current
Name: growth0current, Num: 1

Name: growth0current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1

Name: growth1current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
growth1current_1
growth1current
Name: growth1current, Num: 1

Name: growth1current Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TUPLE_12(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(lower_1,upper_1)
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
lowerTick_1
lowerTick
p.norm: u
Name: lowerTick, Num: 1

Name: lowerTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Phi
init
end
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_18
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick
Name: currentTick, Num: 1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_18(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
lower_1 (-> ['ticks'])
lower
Name: lower, Num: 1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
INDEX
[i]Type for REF_165

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
upper_1 (-> ['ticks'])
upper
Name: upper, Num: 1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
INDEX
[i]Type for REF_166

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal0_10
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1
_feeGrowthGlobal0
Name: _feeGrowthGlobal0, Num: 1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal1_10
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1
Name: _feeGrowthGlobal1, Num: 1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_224(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_1
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_2
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_2(uint256) := REF_167(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthBelow0_3
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 3

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow1_3
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 3

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Phi
init
end
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
Phi
init
end
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow1_2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_2
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_2(uint256) := REF_168(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_227(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_1
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_1(uint256) := REF_171(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_2
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove1_1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_1
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_1(uint256) := REF_172(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthAbove0_3
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 3

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove1_3
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 3

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Phi
init
end
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Phi
init
end
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_3
feeGrowthBelow0_3
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_3
feeGrowthAbove0_3
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1
feeGrowthInside0
Name: feeGrowthInside0, Num: 1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside0_1(uint256) := TMP_231(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthBelow1_3
feeGrowthBelow1_3
feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_3
feeGrowthAbove1_3
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1
Name: feeGrowthInside1, Num: 1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside1_1(uint256) := TMP_233(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthInside0_1
feeGrowthInside0_1
feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1_1
feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN feeGrowthInside0_1,feeGrowthInside1_1
init
end
init
end

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
lowerTick_1
lowerTick
p.norm: u
Name: lowerTick, Num: 1

Name: lowerTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Phi
init
end
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_18
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick
Name: currentTick, Num: 1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_18(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
lower_1 (-> ['ticks'])
lower
Name: lower, Num: 1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
INDEX
[i]Type for REF_165

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
upper_1 (-> ['ticks'])
upper
Name: upper, Num: 1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
INDEX
[i]Type for REF_166

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal0_10
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1
_feeGrowthGlobal0
Name: _feeGrowthGlobal0, Num: 1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal1_10
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1
Name: _feeGrowthGlobal1, Num: 1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_224(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_1
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_2
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_2(uint256) := REF_167(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthBelow0_3
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 3

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow1_3
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 3

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Phi
init
end
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
Phi
init
end
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow1_2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_2
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_2(uint256) := REF_168(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_227(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_1
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_1(uint256) := REF_171(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_2
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove1_1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_1
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_1(uint256) := REF_172(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthAbove0_3
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 3

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove1_3
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 3

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Phi
init
end
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Phi
init
end
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_3
feeGrowthBelow0_3
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_3
feeGrowthAbove0_3
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1
feeGrowthInside0
Name: feeGrowthInside0, Num: 1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside0_1(uint256) := TMP_231(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthBelow1_3
feeGrowthBelow1_3
feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_3
feeGrowthAbove1_3
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1
Name: feeGrowthInside1, Num: 1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside1_1(uint256) := TMP_233(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthInside0_1
feeGrowthInside0_1
feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1_1
feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN feeGrowthInside0_1,feeGrowthInside1_1
init
end
init
end
[i]Type for TUPLE_12

Name: TUPLE_12 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth0current_1(uint256)= UNPACK TUPLE_12 index: 0 
([-1], [-1], 'u', None, -1)
[i]Type for growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
growth1current_1(uint256)= UNPACK TUPLE_12 index: 1 
([-1], [-1], 'u', None, -1)
[i]Type for growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
amount0fees_1

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount0fees_1
amount0fees
Name: amount0fees, Num: 1

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_148(uint256) -> position_1 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_148

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_202(uint256) = growth0current_1 (c)- REF_148
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_202

Name: TMP_202 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_149(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_149

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_203(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_202', 'REF_149', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_203

Name: TMP_203 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount0fees_1(uint256) := TMP_203(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
position_1 (-> ['positions'])
position_1 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount1fees_1
amount1fees
Name: amount1fees, Num: 1

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
REF_151(uint256) -> position_1 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_151

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = growth1current_1 (c)- REF_151
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_204

Name: TMP_204 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_152(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_152

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_204', 'REF_152', '340282366920938463463374607431768211456'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_205

Name: TMP_205 Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
amount1fees_1(uint256) := TMP_205(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_206(bool) = amount_1 < 0
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
[i]Type for TMP_206

Name: TMP_206 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
position_3 (-> ['positions'])
position
Name: position, Num: 3 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
position_3 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_2 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_209(bool) = amount_1 > 0
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
[i]Type for TMP_209

Name: TMP_209 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
position_5 (-> ['positions'])
position
Name: position, Num: 5 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
position_5 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_4 (-> ['positions'])", "position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
position_4 (-> ['positions'])
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
position_4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_3

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_3
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
position_4 (-> ['positions'])
position
Name: position, Num: 4 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_3
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_154(uint128) -> position_3 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_154

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_3 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_210 = CONVERT amount_1 to uint128
Converting amount_1

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_210

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_4 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_3 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_154(-> position_4 (-> ['positions'])) = REF_154 (c)+ TMP_210

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
init
end
lval:u rval:u
[i]Type for REF_154

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_3 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
positions_3(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_4 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
position_2 (-> ['positions'])
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_2

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_2
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
End popogation
weee
weee
weee
position_2 (-> ['positions'])
position
Name: position, Num: 2 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_2
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_153(uint128) -> position_1 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_153

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_207(int128) = 0 (c)- amount_1
SUB1
init
end
init
end
A: 0 B: 0
lnorm: 0 rnorm: 0
SUB

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:0 rval:u
[i]Type for TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208 = CONVERT TMP_207 to uint128
Converting TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_208

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_2 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_153(-> position_2 (-> ['positions'])) = REF_153 (c)- TMP_208
SUB1
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
SUB

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for REF_153

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: position_1 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (0, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
positions_2(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_2 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
position_5 (-> ['positions'])
position_5 (-> ['positions'])
position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY_5
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_155(uint128) -> position_5 (-> ['positions']).liquidity
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_155

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: liquidity
F: feeGrowthInside0Last
F: liquidity
init
end
Finance type key: (-1, -1)

Name: liquidity Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = REF_155 < MAX_TICK_LIQUIDITY_5
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_211

Name: TMP_211 Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,MAX_TICK_LIQUIDITY)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
growth0current_1
growth0current_1
growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_4

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_4
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_6 (-> ['positions'])
position
Name: position, Num: 6 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_4
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_156(uint256) -> position_5 (-> ['positions']).feeGrowthInside0Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_156

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_6 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_5 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_156 (->position_6 (-> ['positions'])) := growth0current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_156

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_5 (-> ['positions']), Field: feeGrowthInside0Last
F: feeGrowthInside0Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_4(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_6 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
growth1current_1
growth1current_1
growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
position_7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
positions_5

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_5
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
position_7 (-> ['positions'])
position
Name: position, Num: 7 (-> ['positions'])

Name: position Function: _updatePosition
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
weee
weee
positions_5
positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
REF_157(uint256) -> position_6 (-> ['positions']).feeGrowthInside1Last
MEMBER
init
end
init
end

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
Typing member
init
end
[i]Type for REF_157

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
position_7 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_6 (-> ['positions'])"])
Phi
init
end
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthInside0Last, liquidity, feeGrowthInside1Last
Finance Type: undef
XXXX
REF_157 (->position_7 (-> ['positions'])) := growth1current_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_157

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: position_6 (-> ['positions']), Field: feeGrowthInside1Last
F: feeGrowthInside0Last
F: liquidity
F: feeGrowthInside1Last
init
end
Finance type key: (-1, -1)

Name: feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
positions_5(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_7 (-> ['positions'])"])
Phi
[i]Type for positions

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied positions
 To type: None

Name: positions Function: _updatePosition
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: owner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: lower Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
RETURN amount0fees_1,amount1fees_1
init
end
init
end
[i]Type for TUPLE_7

Name: TUPLE_7 Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0fees_1(uint256)= UNPACK TUPLE_7 index: 0 
([-1], [-1], "'u'", None, -1)
[i]Type for amount0fees

Name: amount0fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1fees_1(uint256)= UNPACK TUPLE_7 index: 1 
([-1], [-1], "'u'", None, -1)
[i]Type for amount1fees

Name: amount1fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lower Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: collect
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
End popogation
weee
INTERNAL_CALL, ConcentratedLiquidityPool._transferBothTokens(address,uint256,uint256,bool)(recipient_1,amount0fees_1,amount1fees_1,unwrapBento_1)
init
end
init
end
init
end
init
end
[[], [], 'u', 'recipient', [], -1, -996, 'u']

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], "'u'", None, [], -1, -1, 'u']

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], "'u'", None, [], -1, -1, 'u']

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
to_1
to
p.norm: u

Name: to_1 Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
weee
shares0_1
shares0
p.norm: 'u'

Name: shares0_1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
shares1_1
shares1
p.norm: 'u'

Name: shares1_1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transferBothTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_28
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
to_1(address) := ϕ(['recipient_1', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
shares0_1(uint256) := ϕ(['amount0fees_1', 'amount0_2'])
Phi
[i]Type for shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
shares1_1(uint256) := ϕ(['amount1_2', 'amount1fees_1'])
Phi
[i]Type for shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transferBothTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_26(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_28(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transferBothTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
token0_26
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
shares0_1
shares0_1
shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_10
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_28
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_31
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_218 = CONVERT this to address
Converting this
4
[i]Type for TMP_218

Name: TMP_218 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_14(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:withdraw, arguments:['token0_26', 'TMP_218', 'to_1', '0', 'shares0_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_14

Name: TUPLE_14 Function: _transferBothTokens
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_10(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_28(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_31(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
shares1_1
shares1_1
shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_10
bento_10
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_31
token1_31
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_11
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1_32
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_219 = CONVERT this to address
Converting this
4
[i]Type for TMP_219

Name: TMP_219 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_15(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_10(IBentoBoxMinimal), function:withdraw, arguments:['token1_31', 'TMP_219', 'to_1', '0', 'shares1_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_15

Name: TUPLE_15 Function: _transferBothTokens
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_11(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_10', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1_32(address) := ϕ(['token1_31', 'token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
token0_26
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
shares0_1
shares0_1
shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_8
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_27
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_29
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_220 = CONVERT this to address
Converting this
4
[i]Type for TMP_220

Name: TMP_220 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:transfer, arguments:['token0_26', 'TMP_220', 'to_1', 'shares0_1']  
High Call: transfer
bento_8(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_7', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_27(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_26', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_29(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_28', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
bento_8
bento_8
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_29
token1_29
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
shares1_1
shares1_1
shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_9
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1_30
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_222 = CONVERT this to address
Converting this
4
[i]Type for TMP_222

Name: TMP_222 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_8(IBentoBoxMinimal), function:transfer, arguments:['token1_29', 'TMP_222', 'to_1', 'shares1_1']  
High Call: transfer
bento_9(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_8', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1_30(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_29', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
to_1
to
p.norm: u

Name: to_1 Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
weee
shares0_1
shares0
p.norm: 'u'

Name: shares0_1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
shares1_1
shares1
p.norm: 'u'

Name: shares1_1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transferBothTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_28
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
to_1(address) := ϕ(['recipient_1', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
shares0_1(uint256) := ϕ(['amount0fees_1', 'amount0_2'])
Phi
[i]Type for shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
shares1_1(uint256) := ϕ(['amount1_2', 'amount1fees_1'])
Phi
[i]Type for shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transferBothTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_7(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_26(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_28(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transferBothTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
token0_26
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
shares0_1
shares0_1
shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_10
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_28
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_31
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_218 = CONVERT this to address
Converting this
4
[i]Type for TMP_218

Name: TMP_218 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_14(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:withdraw, arguments:['token0_26', 'TMP_218', 'to_1', '0', 'shares0_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_14

Name: TUPLE_14 Function: _transferBothTokens
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_10(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_28(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_31(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
shares1_1
shares1_1
shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_10
bento_10
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_31
token1_31
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_11
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1_32
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_219 = CONVERT this to address
Converting this
4
[i]Type for TMP_219

Name: TMP_219 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_15(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_10(IBentoBoxMinimal), function:withdraw, arguments:['token1_31', 'TMP_219', 'to_1', '0', 'shares1_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_15

Name: TUPLE_15 Function: _transferBothTokens
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_11(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_10', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1_32(address) := ϕ(['token1_31', 'token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
token0_26
token0_26
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
shares0_1
shares0_1
shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
bento_7
bento_7
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_8
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_27
token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_29
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_220 = CONVERT this to address
Converting this
4
[i]Type for TMP_220

Name: TMP_220 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:transfer, arguments:['token0_26', 'TMP_220', 'to_1', 'shares0_1']  
High Call: transfer
bento_8(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_7', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_27(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_26', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _transferBothTokens
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_29(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_28', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
to_1
to_1
to

Name: to Function: _transferBothTokens
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
bento_8
bento_8
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_29
token1_29
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
shares1_1
shares1_1
shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_9
bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1_30
token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_222 = CONVERT this to address
Converting this
4
[i]Type for TMP_222

Name: TMP_222 Function: _transferBothTokens
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_8(IBentoBoxMinimal), function:transfer, arguments:['token1_29', 'TMP_222', 'to_1', 'shares1_1']  
High Call: transfer
bento_9(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_8', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transferBothTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1_30(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_29', 'token1_32', 'token1_23', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _transferBothTokens
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: to Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: shares0 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: shares1 Function: None
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lower Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: collect
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_20
reserve0_20
reserve0

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_21

Name: reserve0 Function: collect
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_21
reserve0

Name: reserve0 Function: collect
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_92 = CONVERT amount0fees_1 to uint128
Converting amount0fees_1

Name: amount0fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_92

Name: TMP_92 Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_21(uint128) = reserve0_20 (c)- TMP_92
SUB1
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
SUB

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_92 Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve0

Name: reserve0 Function: collect
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: collect
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lower Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: collect
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve1_21
reserve1_21
reserve1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_22

Name: reserve1 Function: collect
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_22
reserve1

Name: reserve1 Function: collect
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_93 = CONVERT amount1fees_1 to uint128
Converting amount1fees_1

Name: amount1fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_93

Name: TMP_93 Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_22(uint128) = reserve1_21 (c)- TMP_93
SUB1
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
SUB

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_93 Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve1

Name: reserve1 Function: collect
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: collect
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: lower Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: collect
Num: 
Den: 
Address: -996
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: collect
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount0fees_1
amount0fees_1
amount0fees

Name: amount0fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
amount1fees_1
amount1fees_1
amount1fees

Name: amount1fees Function: collect
Num: -1
Den: -1
Address: -1
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee



swap
Finding type for data(bytes ... )
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


swapFee_2(uint24) := ϕ(['swapFee_0', 'swapFee_1', 'swapFee_3'])
token0_15(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
token1_16(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
liquidity_10(uint128) := ϕ(['liquidity_0', 'liquidity_5', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9', 'liquidity_4', 'liquidity_3'])
secondsPerLiquidity_7(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
lastObservation_1(uint32) := ϕ(['lastObservation_2', 'lastObservation_0', 'lastObservation_3'])
feeGrowthGlobal0_7(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
feeGrowthGlobal1_7(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
barFee_2(uint256) := ϕ(['barFee_1', 'barFee_0', 'barFee_4', 'barFee_3'])
price_6(uint160) := ϕ(['price_8', 'price_3', 'price_1', 'price_5', 'price_0'])
nearestTick_15(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
ticks_14(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
TUPLE_8(bool,uint256,address,bool) = SOLIDITY_CALL abi.decode()(data_1(bool,uint256,address,bool))
zeroForOne_1(bool)= UNPACK TUPLE_8 index: 0 
inAmount_1(uint256)= UNPACK TUPLE_8 index: 1 
recipient_1(address)= UNPACK TUPLE_8 index: 2 
unwrapBento_1(bool)= UNPACK TUPLE_8 index: 3 
CONDITION zeroForOne_1
TMP_149 = CONVERT price_7 to uint256
TMP_150 = CONVERT liquidity_11 to uint256
REF_133(Ticks.Tick) -> ticks_15[nearestTick_16]
REF_134(int24) -> REF_133.nextTick
TMP_151 = new SwapCache(0,0,0,feeGrowthGlobal0_8,TMP_149,TMP_150,inAmount_1,REF_134)
cache_1(ConcentratedLiquidityPool.SwapCache) := TMP_151(ConcentratedLiquidityPool.SwapCache)
TMP_146 = CONVERT price_7 to uint256
TMP_147 = CONVERT liquidity_11 to uint256
TMP_148 = new SwapCache(0,0,0,feeGrowthGlobal1_8,TMP_146,TMP_147,inAmount_1,nearestTick_16)
cache_2(ConcentratedLiquidityPool.SwapCache) := TMP_148(ConcentratedLiquidityPool.SwapCache)
cache_3(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_1', 'cache_2'])
timestamp_1(uint256) := block.timestamp(uint256)
TMP_96 = CONVERT lastObservation_2 to uint256
TMP_97(uint256) = timestamp_1 (c)- TMP_96
diff_1(uint256) := TMP_97(uint256)
TMP_98(bool) = diff_1 > 0
TMP_99(bool) = liquidity_11 > 0
TMP_100(bool) = TMP_98 && TMP_99
CONDITION TMP_100
TMP_101 = CONVERT timestamp_1 to uint32
lastObservation_3(uint32) := TMP_101(uint32)
TMP_102(uint256) = diff_1 << 128
TMP_103(uint256) = TMP_102 (c)/ liquidity_11
TMP_104 = CONVERT TMP_103 to uint160
secondsPerLiquidity_9(uint160) = secondsPerLiquidity_8 (c)+ TMP_104
amountOut_1(uint256) := ϕ(['amountOut_0', 'amountOut_2'])
cache_4(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_0', 'cache_14'])
REF_61(uint256) -> cache_4.input
TMP_105(bool) = REF_61 != 0
CONDITION TMP_105
REF_129(uint256) -> cache_4.currentPrice
TMP_134 = CONVERT REF_129 to uint160
price_8(uint160) := TMP_134(uint160)
REF_63(int24) -> cache_4.nextTickToCross
TMP_106(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_63'] 
TMP_107 = CONVERT TMP_106 to uint256
nextTickPrice_1(uint256) := TMP_107(uint256)
CONDITION zeroForOne_1
REF_136(int24) -> cache_4.nextTickToCross
REF_137(Ticks.Tick) -> ticks_15[REF_136]
REF_138(int24) -> REF_137.previousTick
newNearestTick_2(int24) := REF_138(int24)
output_1(uint256) := 0(uint256)
REF_135(int24) -> cache_4.nextTickToCross
newNearestTick_1(int24) := REF_135(int24)
cross_1(bool) := False(bool)
newNearestTick_3(int24) := ϕ(['newNearestTick_1', 'newNearestTick_2'])
TMP_135(bool) = nearestTick_16 != newNearestTick_3
CONDITION TMP_135
CONDITION zeroForOne_1
nearestTick_17(int24) := newNearestTick_3(int24)
REF_65(uint256) -> cache_4.currentLiquidity
REF_66(uint256) -> cache_4.currentPrice
TMP_108(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_65', 'nextTickPrice_1', 'REF_66', 'False'] 
maxDx_1(uint256) := TMP_108(uint256)
REF_88(uint256) -> cache_4.currentLiquidity
REF_89(uint256) -> cache_4.currentPrice
TMP_125(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_88', 'REF_89', 'nextTickPrice_1', 'False'] 
maxDy_1(uint256) := TMP_125(uint256)
REF_90(uint256) -> cache_4.input
TMP_126(bool) = REF_90 <= maxDy_1
CONDITION TMP_126
REF_91(uint256) -> cache_4.currentPrice
REF_93(uint256) -> cache_4.input
REF_94(uint256) -> cache_4.currentLiquidity
TMP_127(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['REF_93', '79228162514264337593543950336', 'REF_94'] 
TMP_128(uint256) = REF_91 (c)+ TMP_127
newPrice_scope_0_1(uint256) := TMP_128(uint256)
REF_130(uint256) -> cache_4.currentLiquidity
TMP_136 = CONVERT REF_130 to uint128
liquidity_12(uint128) := TMP_136(uint128)
REF_101(uint256) -> cache_4.currentLiquidity
REF_102(uint256) -> cache_4.currentPrice
TMP_130(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_101', 'REF_102', 'nextTickPrice_1', 'False'] 
output_6(uint256) := TMP_130(uint256)
REF_67(uint256) -> cache_4.input
TMP_109(bool) = REF_67 <= maxDx_1
CONDITION TMP_109
REF_103(uint256) -> cache_4.currentPrice
cache_12(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
REF_103 (->cache_12) := nextTickPrice_1(uint256)
REF_68(uint256) -> cache_4.currentLiquidity
TMP_110(uint256) = REF_68 << 96
liquidityPadded_1(uint256) := TMP_110(uint256)
REF_96(uint256) -> cache_4.currentLiquidity
REF_97(uint256) -> cache_4.currentPrice
TMP_129(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_96', 'REF_97', 'newPrice_scope_0_1', 'False'] 
output_5(uint256) := TMP_129(uint256)
REF_83(uint256) -> cache_4.currentLiquidity
REF_84(uint256) -> cache_4.currentPrice
TMP_124(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_83', 'nextTickPrice_1', 'REF_84', 'False'] 
output_3(uint256) := TMP_124(uint256)
cross_4(bool) := True(bool)
REF_98(uint256) -> cache_4.currentPrice
cache_10(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
REF_98 (->cache_10) := newPrice_scope_0_1(uint256)
REF_85(uint256) -> cache_4.currentPrice
cache_7(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
REF_85 (->cache_7) := nextTickPrice_1(uint256)
REF_70(uint256) -> cache_4.currentPrice
REF_71(uint256) -> cache_4.currentPrice
REF_72(uint256) -> cache_4.input
TMP_111(uint256) = REF_71 (c)* REF_72
TMP_112(uint256) = liquidityPadded_1 (c)+ TMP_111
TMP_113(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDivRoundingUp(uint256,uint256,uint256), arguments:['liquidityPadded_1', 'REF_70', 'TMP_112'] 
TMP_114 = CONVERT TMP_113 to uint256
newPrice_1(uint256) := TMP_114(uint256)
TMP_137 = CONVERT inAmount_1 to uint128
INTERNAL_CALL, ConcentratedLiquidityPool._updateReserves(bool,uint128,uint256)(zeroForOne_1,TMP_137,amountOut_1)
token0_17(address) := ϕ(['token0_25'])
token1_18(address) := ϕ(['token1_27'])
REF_104(uint256) -> cache_12.input
cache_13(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_12'])
REF_104(-> cache_13) = REF_104 (c)- maxDy_1
REF_99(uint256) -> cache_10.input
cache_11(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_10'])
REF_99 (->cache_11) := 0(uint256)
cross_2(bool) := True(bool)
TMP_115(bool) = nextTickPrice_1 <= newPrice_1
REF_73(uint256) -> cache_4.currentPrice
TMP_116(bool) = newPrice_1 < REF_73
TMP_117(bool) = TMP_115 && TMP_116
TMP_118 = ! TMP_117 
CONDITION TMP_118
REF_86(uint256) -> cache_7.input
cache_8(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_7'])
REF_86(-> cache_8) = REF_86 (c)- maxDx_1
REF_131(uint256) -> cache_4.feeGrowthGlobal
REF_132(uint256) -> cache_4.protocolFee
TMP_139 = CONVERT REF_132 to uint128
INTERNAL_CALL, ConcentratedLiquidityPool._updateFees(bool,uint256,uint128)(zeroForOne_1,REF_131,TMP_139)
cache_14(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_13', 'cache_11'])
output_7(uint256) := ϕ(['output_6', 'output_5'])
cross_5(bool) := ϕ(['cross_1', 'cross_4'])
CONDITION zeroForOne_1
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_19,amountOut_1,recipient_1,unwrapBento_1)
newPrice_3(uint256) := ϕ(['newPrice_2', 'newPrice_1'])
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_18,amountOut_1,recipient_1,unwrapBento_1)
REF_75(uint256) -> cache_4.currentPrice
TMP_119(uint256) = liquidityPadded_1 (c)/ REF_75
REF_76(uint256) -> cache_4.input
TMP_120(uint256) = TMP_119 (c)+ REF_76
TMP_121(uint256) = LIBRARY_CALL, dest:UnsafeMath, function:UnsafeMath.divRoundingUp(uint256,uint256), arguments:['liquidityPadded_1', 'TMP_120'] 
TMP_122 = CONVERT TMP_121 to uint160
newPrice_2(uint256) := TMP_122(uint160)
cache_9(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_6', 'cache_0', 'cache_8'])
output_4(uint256) := ϕ(['output_3', 'output_1', 'output_2'])
cross_3(bool) := ϕ(['cross_2', 'cross_1'])
Emit Swap(recipient_1,token0_19,token1_20,inAmount_1,amountOut_1)
Emit Swap(recipient_1,token1_21,token0_20,inAmount_1,amountOut_1)
REF_78(uint256) -> cache_4.currentLiquidity
REF_79(uint256) -> cache_4.currentPrice
TMP_123(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_78', 'newPrice_3', 'REF_79', 'False'] 
output_2(uint256) := TMP_123(uint256)
REF_105(uint256) -> cache_14.totalFeeAmount
REF_106(uint256) -> cache_14.protocolFee
REF_107(uint256) -> cache_14.feeGrowthGlobal
REF_109(uint256) -> cache_14.currentLiquidity
REF_110(uint256) -> cache_14.totalFeeAmount
REF_111(uint256) -> cache_14.protocolFee
REF_112(uint256) -> cache_14.feeGrowthGlobal
TUPLE_9(uint256,uint256,uint256,uint256) = LIBRARY_CALL, dest:SwapLib, function:SwapLib.handleFees(uint256,uint24,uint256,uint256,uint256,uint256,uint256,uint256), arguments:['output_7', 'swapFee_3', 'barFee_3', 'REF_109', 'REF_110', 'amountOut_1', 'REF_111', 'REF_112'] 
REF_105(uint256)= UNPACK TUPLE_9 index: 0 
amountOut_2(uint256)= UNPACK TUPLE_9 index: 1 
REF_106(uint256)= UNPACK TUPLE_9 index: 2 
REF_107(uint256)= UNPACK TUPLE_9 index: 3 
REF_80(uint256) -> cache_4.currentPrice
cache_5(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
REF_80 (->cache_5) := newPrice_3(uint256)
REF_81(uint256) -> cache_5.input
cache_6(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_5'])
REF_81 (->cache_6) := 0(uint256)
CONDITION cross_5
cache_17(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14', 'cache_14'])
REF_113(uint256) -> cache_14.currentLiquidity
REF_114(int24) -> cache_14.nextTickToCross
REF_116(int24) -> cache_14.nextTickToCross
REF_117(uint256) -> cache_14.currentLiquidity
REF_118(uint256) -> cache_14.feeGrowthGlobal
TUPLE_10(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_116', 'secondsPerLiquidity_9', 'REF_117', 'REF_118', 'zeroForOne_1'] 
REF_113(uint256)= UNPACK TUPLE_10 index: 0 
REF_114(int24)= UNPACK TUPLE_10 index: 1 
REF_119(uint256) -> cache_14.currentLiquidity
TMP_131(bool) = REF_119 == 0
CONDITION TMP_131
cache_16(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14', 'cache_15'])
REF_120(uint256) -> cache_14.currentPrice
REF_122(int24) -> cache_14.nextTickToCross
TMP_132(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_122'] 
TMP_133 = CONVERT TMP_132 to uint256
cache_15(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14'])
REF_120 (->cache_15) := TMP_133(uint256)
REF_123(uint256) -> cache_15.currentLiquidity
REF_124(int24) -> cache_15.nextTickToCross
REF_126(int24) -> cache_15.nextTickToCross
REF_127(uint256) -> cache_15.currentLiquidity
REF_128(uint256) -> cache_15.feeGrowthGlobal
TUPLE_11(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_126', 'secondsPerLiquidity_9', 'REF_127', 'REF_128', 'zeroForOne_1'] 
REF_123(uint256)= UNPACK TUPLE_11 index: 0 
REF_124(int24)= UNPACK TUPLE_11 index: 1 


Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
swapFee_2
swapFee
Name: swapFee, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_15
token0
Name: token0, Num: 15

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_16
token1
Name: token1, Num: 16

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
liquidity_10
liquidity
Name: liquidity, Num: 10

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
secondsPerLiquidity_7
secondsPerLiquidity
Name: secondsPerLiquidity, Num: 7

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lastObservation_1
lastObservation
Name: lastObservation, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_7
feeGrowthGlobal0
Name: feeGrowthGlobal0, Num: 7

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_7
feeGrowthGlobal1
Name: feeGrowthGlobal1, Num: 7

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
barFee_2
barFee
Name: barFee, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
price_6
price
Name: price, Num: 6

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_15
nearestTick
Name: nearestTick, Num: 15

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_14
ticks
Name: ticks, Num: 14

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
swapFee_2(uint24) := ϕ(['swapFee_0', 'swapFee_1', 'swapFee_3'])
Phi
[i]Type for swapFee

Name: swapFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_15(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_16(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_10(uint128) := ϕ(['liquidity_0', 'liquidity_5', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9', 'liquidity_4', 'liquidity_3'])
Phi
[i]Type for liquidity

Name: liquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsPerLiquidity_7(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lastObservation_1(uint32) := ϕ(['lastObservation_2', 'lastObservation_0', 'lastObservation_3'])
Phi
[i]Type for lastObservation

Name: lastObservation Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_7(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_7(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_2(uint256) := ϕ(['barFee_1', 'barFee_0', 'barFee_4', 'barFee_3'])
Phi
[i]Type for barFee

Name: barFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_6(uint160) := ϕ(['price_8', 'price_3', 'price_1', 'price_5', 'price_0'])
Phi
[i]Type for price

Name: price Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_15(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_14(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
data_1
data_1
data
p.norm: u
Name: data, Num: 1

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
Name: unwrapBento, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
zeroForOne_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
zeroForOne_1
zeroForOne
Name: zeroForOne, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1
inAmount
Name: inAmount, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient
Name: recipient, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
TUPLE_8(bool,uint256,address,bool) = SOLIDITY_CALL abi.decode()(data_1(bool,uint256,address,bool))
[i]Type for TUPLE_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
zeroForOne_1(bool)= UNPACK TUPLE_8 index: 0 
Finding type for zeroForOne(bool ... )
[i]Type for zeroForOne

Name: zeroForOne Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
inAmount_1(uint256)= UNPACK TUPLE_8 index: 1 
Finding type for inAmount(uint256 ... )
[i]Type for inAmount

Name: inAmount Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address)= UNPACK TUPLE_8 index: 2 
Finding type for recipient(address ... )
prev address? u
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
[i]Type for recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool)= UNPACK TUPLE_8 index: 3 
Finding type for unwrapBento(bool ... )
[i]Type for unwrapBento

Name: unwrapBento Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne

Name: zeroForOne Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
inAmount_1
inAmount_1
inAmount

Name: inAmount Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_11
liquidity_11
liquidity
Name: liquidity, Num: 11

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_16
nearestTick_16
nearestTick
Name: nearestTick, Num: 16

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_7
price_7
price
Name: price, Num: 7

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_15
ticks_15
ticks
Name: ticks, Num: 15

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal0_8
feeGrowthGlobal0_8
feeGrowthGlobal0
Name: feeGrowthGlobal0, Num: 8

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_1
cache
Name: cache, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
TMP_149 = CONVERT price_7 to uint256
Converting price_7

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_149

Name: TMP_149 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_150 = CONVERT liquidity_11 to uint256
Converting liquidity_11

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_150

Name: TMP_150 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_133(Ticks.Tick) -> ticks_15[nearestTick_16]
INDEX
[i]Type for REF_133

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_134(int24) -> REF_133.nextTick
MEMBER
init
end
init
end

Name: REF_133 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Typing member
OUT KEY: swap_REF_133_nextTick
OUT KEY: swap_REF_nextTick
No field found
[i]Type for REF_134

Name: REF_133.nextTick Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_133, Field: nextTick
init
end
Finance type key: (-1, -1)
XXXX
TMP_151 = new SwapCache(0,0,0,feeGrowthGlobal0_8,TMP_149,TMP_150,inAmount_1,REF_134)
[i]Type for TMP_151

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_1(ConcentratedLiquidityPool.SwapCache) := TMP_151(ConcentratedLiquidityPool.SwapCache)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
inAmount_1
inAmount_1
inAmount

Name: inAmount Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_11
liquidity_11
liquidity

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_16
nearestTick_16
nearestTick

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal1_8
feeGrowthGlobal1_8
feeGrowthGlobal1
Name: feeGrowthGlobal1, Num: 8

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_7
price_7
price

Name: price Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_2
cache
Name: cache, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_146 = CONVERT price_7 to uint256
Converting price_7

Name: price Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_146

Name: TMP_146 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_147 = CONVERT liquidity_11 to uint256
Converting liquidity_11

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_147

Name: TMP_147 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_148 = new SwapCache(0,0,0,feeGrowthGlobal1_8,TMP_146,TMP_147,inAmount_1,nearestTick_16)
[i]Type for TMP_148

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_2(ConcentratedLiquidityPool.SwapCache) := TMP_148(ConcentratedLiquidityPool.SwapCache)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
cache_3
cache
Name: cache, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cache_3(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_1', 'cache_2'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
timestamp_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
timestamp_1
timestamp
Name: timestamp, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
timestamp_1(uint256) := block.timestamp(uint256)
asgn
init
[i]Type for timestamp

Name: timestamp Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
timestamp_1
timestamp_1
timestamp
Name: timestamp, Num: 1

Name: timestamp Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lastObservation_2
lastObservation_2
lastObservation
Name: lastObservation, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
diff_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
diff_1
diff
Name: diff, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_96 = CONVERT lastObservation_2 to uint256
Converting lastObservation_2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_96

Name: TMP_96 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_97(uint256) = timestamp_1 (c)- TMP_96
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: timestamp Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_96 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_97

Name: TMP_97 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
diff_1(uint256) := TMP_97(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for diff

Name: diff Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidity_11
liquidity_11
liquidity

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
diff_1
diff_1
diff

Name: diff Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_98(bool) = diff_1 > 0
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
[i]Type for TMP_98

Name: TMP_98 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_99(bool) = liquidity_11 > 0
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
[i]Type for TMP_99

Name: TMP_99 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_100(bool) = TMP_98 && TMP_99
[i]Type for TMP_100

Name: TMP_100 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
timestamp_1
timestamp_1
timestamp
Name: timestamp, Num: 1

Name: timestamp Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lastObservation_3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lastObservation_3
lastObservation
Name: lastObservation, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_101 = CONVERT timestamp_1 to uint32
Converting timestamp_1

Name: timestamp Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_101

Name: TMP_101 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lastObservation_3(uint32) := TMP_101(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lastObservation

Name: lastObservation Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied lastObservation
 To type: None

Name: lastObservation Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidity_11
liquidity_11
liquidity

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsPerLiquidity_8
secondsPerLiquidity_8
secondsPerLiquidity
Name: secondsPerLiquidity, Num: 8

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
diff_1
diff_1
diff

Name: diff Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsPerLiquidity_9

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsPerLiquidity_9
secondsPerLiquidity
Name: secondsPerLiquidity, Num: 9

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_102(uint256) = diff_1 << 128
[i]Type for TMP_102

Name: TMP_102 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_103(uint256) = TMP_102 (c)/ liquidity_11
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_103

Name: TMP_103 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_104 = CONVERT TMP_103 to uint160
Converting TMP_103

Name: TMP_103 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_104

Name: TMP_104 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsPerLiquidity_9(uint160) = secondsPerLiquidity_8 (c)+ TMP_104

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_104 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied secondsPerLiquidity
 To type: None

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_4
cache
Name: cache, Num: 4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cache_4
cache
Name: cache, Num: 4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
weee
weee
amountOut_1(uint256) := ϕ(['amountOut_0', 'amountOut_2'])
Phi
[i]Type for amountOut

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_4(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_0', 'cache_14'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_61(uint256) -> cache_4.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Typing member
OUT KEY: swap_cache_input
OUT KEY: swap_cache_input
No field found
[i]Type for REF_61

Name: cache.input Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: input
init
end
Finance type key: (-1, -1)
XXXX
TMP_105(bool) = REF_61 != 0
[i]Type for TMP_105

Name: TMP_105 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input
Finance Type: undef
price_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_8
price
Name: price, Num: 8

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_129(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input
Finance Type: undef
Typing member
OUT KEY: swap_cache_currentPrice
OUT KEY: swap_cache_currentPrice
No field found
[i]Type for REF_129

Name: cache.currentPrice Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
init
end
Finance type key: (-1, -1)
XXXX
TMP_134 = CONVERT REF_129 to uint160
Converting REF_129

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_134

Name: TMP_134 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_8(uint160) := TMP_134(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for price

Name: price Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied price
 To type: None

Name: price Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice
Finance Type: undef
nextTickPrice_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nextTickPrice_1
nextTickPrice
Name: nextTickPrice, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_63(int24) -> cache_4.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice
Finance Type: undef
Typing member
OUT KEY: swap_cache_nextTickToCross
OUT KEY: swap_cache_nextTickToCross
No field found
[i]Type for REF_63

Name: cache.nextTickToCross Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: nextTickToCross
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)
XXXX
TMP_106(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_63'] 
Written func info: TickMath, getSqrtRatioAtTick
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_106

Name: TMP_106 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_107 = CONVERT TMP_106 to uint256
Converting TMP_106

Name: TMP_106 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_107

Name: TMP_107 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nextTickPrice_1(uint256) := TMP_107(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne

Name: zeroForOne Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_15
ticks_15
ticks

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick
Finance Type: undef
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross
Finance Type: undef
newNearestTick_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newNearestTick_2
newNearestTick
Name: newNearestTick, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_136(int24) -> cache_4.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross
Finance Type: undef
Typing member

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_136

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: nextTickToCross
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_137(Ticks.Tick) -> ticks_15[REF_136]
INDEX
[i]Type for REF_137

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick
Finance Type: undef
Root: None, Field: None
XXXX
REF_138(int24) -> REF_137.previousTick
MEMBER
init
end
init
end

Name: REF_137 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick
Finance Type: undef
Typing member
OUT KEY: swap_REF_137_previousTick
OUT KEY: swap_REF_previousTick
No field found
[i]Type for REF_138

Name: REF_137.previousTick Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_137, Field: previousTick
F: nextTick
init
end
Finance type key: (-1, -1)
XXXX
newNearestTick_2(int24) := REF_138(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
output_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_1
output
Name: output, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
output_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross
Finance Type: undef
newNearestTick_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newNearestTick_1
newNearestTick
Name: newNearestTick, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_135(int24) -> cache_4.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross
Finance Type: undef
Typing member

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_135

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: nextTickToCross
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newNearestTick_1(int24) := REF_135(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cross_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cross_1
cross
Name: cross, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
cross_1(bool) := False(bool)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
newNearestTick_3
newNearestTick
Name: newNearestTick, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
newNearestTick_3(int24) := ϕ(['newNearestTick_1', 'newNearestTick_2'])
Phi
init
end
[i]Type for newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_16
nearestTick_16
nearestTick

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newNearestTick_3
newNearestTick_3
newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_135(bool) = nearestTick_16 != newNearestTick_3
[i]Type for TMP_135

Name: TMP_135 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne

Name: zeroForOne Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newNearestTick_3
newNearestTick_3
newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_17
nearestTick
Name: nearestTick, Num: 17

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
nearestTick_17(int24) := newNearestTick_3(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for nearestTick

Name: nearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied nearestTick
 To type: None

Name: nearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross
Finance Type: undef
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxDx_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxDx_1
maxDx
Name: maxDx, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_65(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross
Finance Type: undef
Typing member
OUT KEY: swap_cache_currentLiquidity
OUT KEY: swap_cache_currentLiquidity
No field found
[i]Type for REF_65

Name: cache.currentLiquidity Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)
XXXX
REF_66(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_66

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_108(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_65', 'nextTickPrice_1', 'REF_66', 'False'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_108

Name: TMP_108 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
maxDx_1(uint256) := TMP_108(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for maxDx

Name: maxDx Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxDy_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxDy_1
maxDy
Name: maxDy, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_88(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_88

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_89(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_89

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_125(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_88', 'REF_89', 'nextTickPrice_1', 'False'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_125

Name: TMP_125 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
maxDy_1(uint256) := TMP_125(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for maxDy

Name: maxDy Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
maxDy_1
maxDy_1
maxDy

Name: maxDy Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
End popogation
weee
weee
weee
REF_90(uint256) -> cache_4.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_90

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_126(bool) = REF_90 <= maxDy_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_126

Name: TMP_126 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
newPrice_scope_0_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newPrice_scope_0_1
newPrice_scope_0
Name: newPrice_scope_0, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
REF_91(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_91

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_93(uint256) -> cache_4.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_93

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_94(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_94

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_127(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['REF_93', '79228162514264337593543950336', 'REF_94'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_127

Name: TMP_127 Function: swap
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_128(uint256) = REF_91 (c)+ TMP_127

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_127 Function: swap
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
init
end
lval:u rval:'u'
[i]Type for TMP_128

Name: TMP_128 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newPrice_scope_0_1(uint256) := TMP_128(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newPrice_scope_0

Name: newPrice_scope_0 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
liquidity_12

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_12
liquidity
Name: liquidity, Num: 12

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_130(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_130

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_136 = CONVERT REF_130 to uint128
Converting REF_130

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_136

Name: TMP_136 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_12(uint128) := TMP_136(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied liquidity
 To type: None

Name: liquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_6

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_6
output
Name: output, Num: 6

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_101(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_101

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_102(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_102

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_130(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_101', 'REF_102', 'nextTickPrice_1', 'False'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_130

Name: TMP_130 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
output_6(uint256) := TMP_130(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
maxDx_1
maxDx_1
maxDx

Name: maxDx Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
End popogation
weee
weee
weee
REF_67(uint256) -> cache_4.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_67

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_109(bool) = REF_67 <= maxDx_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_109

Name: TMP_109 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_12

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_12
cache
Name: cache, Num: 12

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
cache_12
cache
Name: cache, Num: 12

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_103(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_103

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
init
end
Finance type key: (-1, -1)
XXXX
cache_12(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
XXXX
REF_103 (->cache_12) := nextTickPrice_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_103

Name: REF_103 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
liquidityPadded_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidityPadded_1
liquidityPadded
Name: liquidityPadded, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_68(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_68

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_110(uint256) = REF_68 << 96
[i]Type for TMP_110

Name: TMP_110 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidityPadded_1(uint256) := TMP_110(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for liquidityPadded

Name: liquidityPadded Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newPrice_scope_0_1
newPrice_scope_0_1
newPrice_scope_0

Name: newPrice_scope_0 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
output_5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_5
output
Name: output, Num: 5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_96(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_96

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_97(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_97

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_129(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_96', 'REF_97', 'newPrice_scope_0_1', 'False'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_129

Name: TMP_129 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
output_5(uint256) := TMP_129(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_3
output
Name: output, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_83(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_83

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_84(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_84

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_124(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_83', 'nextTickPrice_1', 'REF_84', 'False'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_124

Name: TMP_124 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
output_3(uint256) := TMP_124(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cross_4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cross_4
cross
Name: cross, Num: 4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
cross_4(bool) := True(bool)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newPrice_scope_0_1
newPrice_scope_0_1
newPrice_scope_0

Name: newPrice_scope_0 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
cache_10

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_10
cache
Name: cache, Num: 10

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
cache_10
cache
Name: cache, Num: 10

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_98(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_98

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
init
end
Finance type key: (-1, -1)
XXXX
cache_10(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
XXXX
REF_98 (->cache_10) := newPrice_scope_0_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_98

Name: REF_98 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_7

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_7
cache
Name: cache, Num: 7

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
cache_7
cache
Name: cache, Num: 7

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_85(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_85

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
init
end
Finance type key: (-1, -1)
XXXX
cache_7(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
XXXX
REF_85 (->cache_7) := nextTickPrice_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_85

Name: REF_85 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidityPadded_1
liquidityPadded_1
liquidityPadded
Name: liquidityPadded, Num: 1

Name: liquidityPadded Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
newPrice_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newPrice_1
newPrice
Name: newPrice, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
weee
REF_70(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_70

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_71

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_72(uint256) -> cache_4.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_72

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_111(uint256) = REF_71 (c)* REF_72
init
end
init
end
A: 'u' B: u
x
lnorm: 'u' rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_111

Name: TMP_111 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_112(uint256) = liquidityPadded_1 (c)+ TMP_111

Name: liquidityPadded Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_111 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
init
end
lval:u rval:u
[i]Type for TMP_112

Name: TMP_112 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_113(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDivRoundingUp(uint256,uint256,uint256), arguments:['liquidityPadded_1', 'REF_70', 'TMP_112'] 
Written func info: FullMath, mulDivRoundingUp
Retvar: ('t', ['1', '2'], ['3'], 0, "'u'", None)
([-1, -1], [-1, -1], 0, "'u'", None, -1)
[i]Type for TMP_113

Name: TMP_113 Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_114 = CONVERT TMP_113 to uint256
Converting TMP_113

Name: TMP_113 Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_114

Name: TMP_114 Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
newPrice_1(uint256) := TMP_114(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
zeroForOne_1
zeroForOne_1
zeroForOne

Name: zeroForOne Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1
inAmount_1
inAmount

Name: inAmount Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
token0_17
token0
Name: token0, Num: 17

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_18
token1
Name: token1, Num: 18

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_137 = CONVERT inAmount_1 to uint128
Converting inAmount_1

Name: inAmount Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_137

Name: TMP_137 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ConcentratedLiquidityPool._updateReserves(bool,uint128,uint256)(zeroForOne_1,TMP_137,amountOut_1)
init
end
init
end
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
zeroForOne_1
zeroForOne
p.norm: u

Name: zeroForOne_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
inAmount_1
inAmount
p.norm: u

Name: inAmount_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
amountOut_1
amountOut
p.norm: u
Name: amountOut, Num: 1

Name: amountOut_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_24
token0
Name: token0, Num: 24

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_26
token1
Name: token1, Num: 26

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
reserve0_25
reserve0
Name: reserve0, Num: 25

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_27
reserve1
Name: reserve1, Num: 27

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
inAmount_1(uint128) := ϕ(['TMP_137'])
Phi
[i]Type for inAmount

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := ϕ(['amountOut_1'])
Phi
[i]Type for amountOut

Name: amountOut Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_24(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _updateReserves
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_26(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _updateReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_25(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
Phi
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_27(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
Phi
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne

Name: zeroForOne Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
token0_24
token0_24
token0

Name: token0 Function: _updateReserves
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
balance0_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0
Name: balance0, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_190(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_24)
init
end
init
end
[i]Type for TMP_190

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance0_1(uint256) := TMP_190(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance0

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve0_26
reserve0_26
reserve0
Name: reserve0, Num: 26

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1
inAmount_1
inAmount

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_1
newBalance
Name: newBalance, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_191(uint128) = reserve0_26 (c)+ inAmount_1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_191

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newBalance_1(uint128) := TMP_191(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
token1_26
token1_26
token1

Name: token1 Function: _updateReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance1_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1
Name: balance1, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_196(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_26)
init
end
[[-1], [-1], 'u', 'token1', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_9', 'token1_26', 'token0_24', 'token1_10'])
Phi
[i]Type for token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_2
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance_1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balance_1
balance
Name: balance, Num: 1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_3
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_213 = CONVERT this to address
Converting this
4
[i]Type for TMP_213

Name: TMP_213 Function: _balance
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
High Call: balanceOf
Running querryfc
Written func info: BentoBoxMinimal, balanceOf
Retvar: ('t', ['1'], ['-1'], "'u'", "'u'", None)
([-1, 2], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_214

Name: TMP_214 Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
bento_3(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_2', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_214(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_9', 'token1_26', 'token0_24', 'token1_10'])
Phi
[i]Type for token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_2
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance_1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balance_1
balance
Name: balance, Num: 1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_3
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_213 = CONVERT this to address
Converting this
4
[i]Type for TMP_213

Name: TMP_213 Function: _balance
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
High Call: balanceOf
Running querryfc
Written func info: BentoBoxMinimal, balanceOf
Retvar: ('t', ['1'], ['-1'], "'u'", "'u'", None)
([-1, 2], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_214

Name: TMP_214 Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
bento_3(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_2', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_214(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_196

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance1_1(uint256) := TMP_196(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_1
newBalance_1
newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0
Name: balance0, Num: 1

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_192 = CONVERT newBalance_1 to uint256
Converting newBalance_1

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_192

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(bool) = TMP_192 <= balance0_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_193

Name: TMP_193 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_194(None) = SOLIDITY_CALL require(bool,string)(TMP_193,TOKEN0_MISSING)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve1_30
reserve1_30
reserve1
Name: reserve1, Num: 30

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1
inAmount_1
inAmount

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_scope_0_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_scope_0_1
newBalance_scope_0
Name: newBalance_scope_0, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_197(uint128) = reserve1_30 (c)+ inAmount_1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_197

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newBalance_scope_0_1(uint128) := TMP_197(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_1
newBalance_1
newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_27

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_27
reserve0
Name: reserve0, Num: 27

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve0_27(uint128) := newBalance_1(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_scope_0_1
newBalance_scope_0_1
newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1
Name: balance1, Num: 1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_198 = CONVERT newBalance_scope_0_1 to uint256
Converting newBalance_scope_0_1

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_198

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_199(bool) = TMP_198 <= balance1_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_199

Name: TMP_199 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_200(None) = SOLIDITY_CALL require(bool,string)(TMP_199,TOKEN1_MISSING)
[i]Type for TMP_200

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
p.norm: u
Name: amountOut, Num: 1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_28
reserve1_28
reserve1
Name: reserve1, Num: 28

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_29

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_29
reserve1
Name: reserve1, Num: 29

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_195 = CONVERT amountOut_1 to uint128
Converting amountOut_1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_195

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_29(uint128) = reserve1_28 (c)- TMP_195
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_scope_0_1
newBalance_scope_0_1
newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_31
reserve1
Name: reserve1, Num: 31

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve1_31(uint128) := newBalance_scope_0_1(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
reserve0_30
reserve0
Name: reserve0, Num: 30

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_32
reserve1
Name: reserve1, Num: 32

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve0_30(uint128) := ϕ(['reserve0_27', 'reserve0_29'])
Phi
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_32(uint128) := ϕ(['reserve1_31', 'reserve1_29'])
Phi
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
p.norm: u
Name: amountOut, Num: 1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_28
reserve0_28
reserve0
Name: reserve0, Num: 28

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_29

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_29
reserve0
Name: reserve0, Num: 29

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_201 = CONVERT amountOut_1 to uint128
Converting amountOut_1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_201

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_29(uint128) = reserve0_28 (c)- TMP_201
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
zeroForOne_1
zeroForOne
p.norm: u

Name: zeroForOne_1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
inAmount_1
inAmount
p.norm: u

Name: inAmount_1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
amountOut_1
amountOut
p.norm: u
Name: amountOut, Num: 1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_24
token0

Name: token0 Function: _updateReserves
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_26
token1

Name: token1 Function: _updateReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
reserve0_25
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_27
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
inAmount_1(uint128) := ϕ(['TMP_137'])
Phi
[i]Type for inAmount

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := ϕ(['amountOut_1'])
Phi
[i]Type for amountOut

Name: amountOut Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_24(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _updateReserves
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_26(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _updateReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_25(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
Phi
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_27(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
Phi
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne

Name: zeroForOne Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
token0_24
token0_24
token0

Name: token0 Function: _updateReserves
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
balance0_1

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0
Name: balance0, Num: 1

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_190(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_24)
init
end
init
end
[i]Type for TMP_190

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance0_1(uint256) := TMP_190(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance0

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve0_26
reserve0_26
reserve0

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1
inAmount_1
inAmount

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_1

Name: newBalance Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_1
newBalance
Name: newBalance, Num: 1

Name: newBalance Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_191(uint128) = reserve0_26 (c)+ inAmount_1

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_191

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newBalance_1(uint128) := TMP_191(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
token1_26
token1_26
token1

Name: token1 Function: _updateReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance1_1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1
Name: balance1, Num: 1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_196(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_26)
init
end
[[-1], [-1], 'u', 'token1', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_9', 'token1_26', 'token0_24', 'token1_10'])
Phi
[i]Type for token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_2
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance_1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balance_1
balance
Name: balance, Num: 1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_3
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_213 = CONVERT this to address
Converting this
4
[i]Type for TMP_213

Name: TMP_213 Function: _balance
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
High Call: balanceOf
Running querryfc
Written func info: BentoBoxMinimal, balanceOf
Retvar: ('t', ['1'], ['-1'], "'u'", "'u'", None)
([-1, 2], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_214

Name: TMP_214 Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
bento_3(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_2', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_214(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_9', 'token1_26', 'token0_24', 'token1_10'])
Phi
[i]Type for token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_2
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance_1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balance_1
balance
Name: balance, Num: 1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_3
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_213 = CONVERT this to address
Converting this
4
[i]Type for TMP_213

Name: TMP_213 Function: _balance
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
High Call: balanceOf
Running querryfc
Written func info: BentoBoxMinimal, balanceOf
Retvar: ('t', ['1'], ['-1'], "'u'", "'u'", None)
([-1, 2], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_214

Name: TMP_214 Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
bento_3(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_2', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_214(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_196

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance1_1(uint256) := TMP_196(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_1
newBalance_1
newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0
Name: balance0, Num: 1

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_192 = CONVERT newBalance_1 to uint256
Converting newBalance_1

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_192

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(bool) = TMP_192 <= balance0_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_193

Name: TMP_193 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_194(None) = SOLIDITY_CALL require(bool,string)(TMP_193,TOKEN0_MISSING)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve1_30
reserve1_30
reserve1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1
inAmount_1
inAmount

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_scope_0_1

Name: newBalance_scope_0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_scope_0_1
newBalance_scope_0
Name: newBalance_scope_0, Num: 1

Name: newBalance_scope_0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_197(uint128) = reserve1_30 (c)+ inAmount_1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_197

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newBalance_scope_0_1(uint128) := TMP_197(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_1
newBalance_1
newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_27

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_27
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve0_27(uint128) := newBalance_1(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_scope_0_1
newBalance_scope_0_1
newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1
Name: balance1, Num: 1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_198 = CONVERT newBalance_scope_0_1 to uint256
Converting newBalance_scope_0_1

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_198

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_199(bool) = TMP_198 <= balance1_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_199

Name: TMP_199 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_200(None) = SOLIDITY_CALL require(bool,string)(TMP_199,TOKEN1_MISSING)
[i]Type for TMP_200

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
p.norm: u
Name: amountOut, Num: 1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_28
reserve1_28
reserve1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_29

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_29
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_195 = CONVERT amountOut_1 to uint128
Converting amountOut_1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_195

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_29(uint128) = reserve1_28 (c)- TMP_195
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_scope_0_1
newBalance_scope_0_1
newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_31

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_31
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve1_31(uint128) := newBalance_scope_0_1(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
reserve0_30
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_32
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve0_30(uint128) := ϕ(['reserve0_27', 'reserve0_29'])
Phi
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_32(uint128) := ϕ(['reserve1_31', 'reserve1_29'])
Phi
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
p.norm: u
Name: amountOut, Num: 1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_28
reserve0_28
reserve0

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_29

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_29
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_201 = CONVERT amountOut_1 to uint128
Converting amountOut_1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_201

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_29(uint128) = reserve0_28 (c)- TMP_201
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_17(address) := ϕ(['token0_25'])
Phi
[i]Type for token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_18(address) := ϕ(['token1_27'])
Phi
[i]Type for token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_13
cache_13
cache
Name: cache, Num: 13

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxDy_1
maxDy_1
maxDy

Name: maxDy Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
cache_13

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_13
cache
Name: cache, Num: 13

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
cache_13
cache
Name: cache, Num: 13

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_104(uint256) -> cache_12.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_104

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_12, Field: input
init
end
Finance type key: (-1, -1)
XXXX
cache_13(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_12'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
XXXX
REF_104(-> cache_13) = REF_104 (c)- maxDy_1
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: REF_104 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: maxDy Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:u rval:u
[i]Type for REF_104

Name: REF_104 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: cache_12, Field: input
F: input
init
end
Finance type key: (0, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_11

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_11
cache
Name: cache, Num: 11

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
cache_11
cache
Name: cache, Num: 11

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_99(uint256) -> cache_10.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for REF_99

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: cache_10, Field: input
init
end
Finance type key: (0, -1)
XXXX
cache_11(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_10'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
XXXX
REF_99 (->cache_11) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_99

Name: REF_99 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Root: cache_10, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cross_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cross_2
cross
Name: cross, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
cross_2(bool) := True(bool)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newPrice_1
newPrice_1
newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
TMP_115(bool) = nextTickPrice_1 <= newPrice_1
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
[i]Type for TMP_115

Name: TMP_115 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_73(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_73

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_116(bool) = newPrice_1 < REF_73
init
end
init
end
A: 0 B: 'u'
x
y
A: 0 B: 'u'
<class 'int'>
<class 'str'>
lnorm: 0 rnorm: 'u'
[i]Type for TMP_116

Name: TMP_116 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117(bool) = TMP_115 && TMP_116
[i]Type for TMP_117

Name: TMP_117 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_118 = ! TMP_117 
[i]Type for TMP_118

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_8
cache_8
cache
Name: cache, Num: 8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxDx_1
maxDx_1
maxDx

Name: maxDx Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
cache_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_8
cache
Name: cache, Num: 8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
cache_8
cache
Name: cache, Num: 8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_86(uint256) -> cache_7.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_86

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_7, Field: input
init
end
Finance type key: (-1, -1)
XXXX
cache_8(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_7'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
XXXX
REF_86(-> cache_8) = REF_86 (c)- maxDx_1
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: REF_86 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: maxDx Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:u rval:u
[i]Type for REF_86

Name: REF_86 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: cache_7, Field: input
F: input
init
end
Finance type key: (0, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne

Name: zeroForOne Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_131(uint256) -> cache_4.feeGrowthGlobal
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member
OUT KEY: swap_cache_feeGrowthGlobal
OUT KEY: swap_cache_feeGrowthGlobal
No field found
[i]Type for REF_131

Name: cache.feeGrowthGlobal Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: feeGrowthGlobal
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)
XXXX
REF_132(uint256) -> cache_4.protocolFee
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal
Finance Type: undef
Typing member
OUT KEY: swap_cache_protocolFee
OUT KEY: swap_cache_protocolFee
No field found
[i]Type for REF_132

Name: cache.protocolFee Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: protocolFee
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
init
end
Finance type key: (-1, -1)
XXXX
TMP_139 = CONVERT REF_132 to uint128
Converting REF_132

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_139

Name: TMP_139 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ConcentratedLiquidityPool._updateFees(bool,uint256,uint128)(zeroForOne_1,REF_131,TMP_139)
init
end
init
end
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
zeroForOne_1
zeroForOne
p.norm: u

Name: zeroForOne_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal_1
feeGrowthGlobal
p.norm: u

Name: feeGrowthGlobal_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
protocolFee_1
protocolFee
p.norm: u

Name: protocolFee_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0ProtocolFee_4
token0ProtocolFee
Name: token0ProtocolFee, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1ProtocolFee_5
token1ProtocolFee
Name: token1ProtocolFee, Num: 5

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal_1(uint256) := ϕ(['REF_131'])
Phi
[i]Type for feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
protocolFee_1(uint128) := ϕ(['TMP_139'])
Phi
[i]Type for protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0ProtocolFee_4(uint128) := ϕ(['token0ProtocolFee_0', 'token0ProtocolFee_5', 'token0ProtocolFee_2', 'token0ProtocolFee_3'])
Phi
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1ProtocolFee_5(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_0', 'token1ProtocolFee_6', 'token1ProtocolFee_2'])
Phi
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne

Name: zeroForOne Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal_1
feeGrowthGlobal_1
feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal0_9

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal0_9
feeGrowthGlobal0
Name: feeGrowthGlobal0, Num: 9

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
feeGrowthGlobal0_9(uint256) := feeGrowthGlobal_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied feeGrowthGlobal0
 To type: None

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
protocolFee_1
protocolFee_1
protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0ProtocolFee_4
token0ProtocolFee_4
token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0ProtocolFee_5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0ProtocolFee_5
token0ProtocolFee
Name: token0ProtocolFee, Num: 5

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
token0ProtocolFee_5(uint128) = token0ProtocolFee_4 (c)+ protocolFee_1

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token0ProtocolFee
 To type: None

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal_1
feeGrowthGlobal_1
feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal1_9

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal1_9
feeGrowthGlobal1
Name: feeGrowthGlobal1, Num: 9

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
feeGrowthGlobal1_9(uint256) := feeGrowthGlobal_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied feeGrowthGlobal1
 To type: None

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
protocolFee_1
protocolFee_1
protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1ProtocolFee_5
token1ProtocolFee_5
token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1ProtocolFee_6

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1ProtocolFee_6
token1ProtocolFee
Name: token1ProtocolFee, Num: 6

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
token1ProtocolFee_6(uint128) = token1ProtocolFee_5 (c)+ protocolFee_1

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token1ProtocolFee
 To type: None

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
zeroForOne_1
zeroForOne
p.norm: u

Name: zeroForOne_1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal_1
feeGrowthGlobal
p.norm: u

Name: feeGrowthGlobal_1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
protocolFee_1
protocolFee
p.norm: u

Name: protocolFee_1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0ProtocolFee_4
token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1ProtocolFee_5
token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal_1(uint256) := ϕ(['REF_131'])
Phi
[i]Type for feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
protocolFee_1(uint128) := ϕ(['TMP_139'])
Phi
[i]Type for protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0ProtocolFee_4(uint128) := ϕ(['token0ProtocolFee_0', 'token0ProtocolFee_5', 'token0ProtocolFee_2', 'token0ProtocolFee_3'])
Phi
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1ProtocolFee_5(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_0', 'token1ProtocolFee_6', 'token1ProtocolFee_2'])
Phi
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne

Name: zeroForOne Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal_1
feeGrowthGlobal_1
feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal0_9

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal0_9
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
feeGrowthGlobal0_9(uint256) := feeGrowthGlobal_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied feeGrowthGlobal0
 To type: None

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
protocolFee_1
protocolFee_1
protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0ProtocolFee_4
token0ProtocolFee_4
token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0ProtocolFee_5

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0ProtocolFee_5
token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
token0ProtocolFee_5(uint128) = token0ProtocolFee_4 (c)+ protocolFee_1

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token0ProtocolFee
 To type: None

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal_1
feeGrowthGlobal_1
feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal1_9

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal1_9
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
feeGrowthGlobal1_9(uint256) := feeGrowthGlobal_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied feeGrowthGlobal1
 To type: None

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: zeroForOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
protocolFee_1
protocolFee_1
protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1ProtocolFee_5
token1ProtocolFee_5
token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1ProtocolFee_6

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1ProtocolFee_6
token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
token1ProtocolFee_6(uint128) = token1ProtocolFee_5 (c)+ protocolFee_1

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token1ProtocolFee
 To type: None

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
cache_14
cache
Name: cache, Num: 14

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
output_7
output
Name: output, Num: 7

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cross_5
cross
Name: cross, Num: 5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cache_14(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_13', 'cache_11'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
XXXX
output_7(uint256) := ϕ(['output_6', 'output_5'])
Phi
init
end
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cross_5(bool) := ϕ(['cross_1', 'cross_4'])
Phi
init
end
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne

Name: zeroForOne Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_19
token1_19
token1
Name: token1, Num: 19

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_19,amountOut_1,recipient_1,unwrapBento_1)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', 'token1', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -995, 'u']

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: u
Name: shares, Num: 1

Name: shares_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
init
end
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: u
Name: shares, Num: 1

Name: shares_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
init
end
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
newPrice_3
newPrice
Name: newPrice, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
newPrice_3(uint256) := ϕ(['newPrice_2', 'newPrice_1'])
Phi
[i]Type for newPrice

Name: newPrice Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_18
token0_18
token0
Name: token0, Num: 18

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_18,amountOut_1,recipient_1,unwrapBento_1)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', 'token0', [], -1, 1, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -995, 'u']

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: u
Name: shares, Num: 1

Name: shares_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
init
end
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: u
Name: shares, Num: 1

Name: shares_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
init
end
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidityPadded_1
liquidityPadded_1
liquidityPadded
Name: liquidityPadded, Num: 1

Name: liquidityPadded Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
newPrice_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newPrice_2
newPrice
Name: newPrice, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
REF_75(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_75

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_119(uint256) = liquidityPadded_1 (c)/ REF_75
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
init
end
lval:u rval:u
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
[i]Type for TMP_119

Name: TMP_119 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_76(uint256) -> cache_4.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for REF_76

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: cache_4, Field: input
F: input
init
end
Finance type key: (0, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_120(uint256) = TMP_119 (c)+ REF_76

Name: TMP_119 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
A: 'u' B: u
x
lnorm: 'u' rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_120

Name: TMP_120 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_121(uint256) = LIBRARY_CALL, dest:UnsafeMath, function:UnsafeMath.divRoundingUp(uint256,uint256), arguments:['liquidityPadded_1', 'TMP_120'] 
Written func info: UnsafeMath, divRoundingUp
Retvar: ('t', ['1'], ['2'], 0, "'u'", None)
([-1], [-1], 0, "'u'", None, -1)
[i]Type for TMP_121

Name: TMP_121 Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_122 = CONVERT TMP_121 to uint160
Converting TMP_121

Name: TMP_121 Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_122

Name: TMP_122 Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
newPrice_2(uint256) := TMP_122(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
cache_9
cache
Name: cache, Num: 9

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
output_4
output
Name: output, Num: 4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cross_3
cross
Name: cross, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cache_9(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_6', 'cache_0', 'cache_8'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
output_4(uint256) := ϕ(['output_3', 'output_1', 'output_2'])
Phi
init
end
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cross_3(bool) := ϕ(['cross_2', 'cross_1'])
Phi
init
end
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
inAmount_1
inAmount_1
inAmount

Name: inAmount Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_20
token1_20
token1
Name: token1, Num: 20

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
token0_19
token0_19
token0
Name: token0, Num: 19

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
inAmount_1
inAmount_1
inAmount

Name: inAmount Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_20
token0_20
token0
Name: token0, Num: 20

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_21
token1_21
token1
Name: token1, Num: 21

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
newPrice_3
newPrice_3
newPrice
Name: newPrice, Num: 3

Name: newPrice Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_2
output
Name: output, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_78(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_78

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_79(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_79

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_123(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_78', 'newPrice_3', 'REF_79', 'False'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_123

Name: TMP_123 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
output_2(uint256) := TMP_123(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
barFee_3
barFee_3
barFee
Name: barFee, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_14
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
output_7
output_7
output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_3
swapFee_3
swapFee
Name: swapFee, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
amountOut_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_2
amountOut
Name: amountOut, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
weee
weee
weee
weee
weee
REF_105(uint256) -> cache_14.totalFeeAmount
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
Typing member
OUT KEY: swap_cache_totalFeeAmount
OUT KEY: swap_cache_totalFeeAmount
No field found
[i]Type for REF_105

Name: cache.totalFeeAmount Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)
XXXX
REF_106(uint256) -> cache_14.protocolFee
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount
Finance Type: undef
Typing member
OUT KEY: swap_cache_protocolFee
OUT KEY: swap_cache_protocolFee
No field found
[i]Type for REF_106

Name: cache.protocolFee Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: protocolFee
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: totalFeeAmount
init
end
Finance type key: (-1, -1)
XXXX
REF_107(uint256) -> cache_14.feeGrowthGlobal
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee
Finance Type: undef
Typing member
OUT KEY: swap_cache_feeGrowthGlobal
OUT KEY: swap_cache_feeGrowthGlobal
No field found
[i]Type for REF_107

Name: cache.feeGrowthGlobal Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: feeGrowthGlobal
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: totalFeeAmount
F: protocolFee
init
end
Finance type key: (-1, -1)
XXXX
REF_109(uint256) -> cache_14.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
Typing member

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_109

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_110(uint256) -> cache_14.totalFeeAmount
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
Typing member

Name: totalFeeAmount Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_110

Name: cache.totalFeeAmount Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: totalFeeAmount
init
end
Finance type key: (-1, -1)

Name: totalFeeAmount Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_111(uint256) -> cache_14.protocolFee
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
Typing member

Name: protocolFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_111

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: protocolFee
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: totalFeeAmount
F: protocolFee
init
end
Finance type key: (-1, -1)

Name: protocolFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_112(uint256) -> cache_14.feeGrowthGlobal
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
Typing member

Name: feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_112

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: feeGrowthGlobal
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: totalFeeAmount
F: protocolFee
F: feeGrowthGlobal
init
end
Finance type key: (-1, -1)

Name: feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_9(uint256,uint256,uint256,uint256) = LIBRARY_CALL, dest:SwapLib, function:SwapLib.handleFees(uint256,uint24,uint256,uint256,uint256,uint256,uint256,uint256), arguments:['output_7', 'swapFee_3', 'barFee_3', 'REF_109', 'REF_110', 'amountOut_1', 'REF_111', 'REF_112'] 
Written func info: SwapLib, handleFees
Retvar: ('c', [-1], [-1], 'u', 'u', None)
Retvar: ('c', [-1], [-1], 'u', 'u', None)
Retvar: ('c', [-1], [-1], 'u', 'u', None)
Retvar: ('c', [-1], [-1], 'u', 'u', None)
[i]Type for TUPLE_9

Name: TUPLE_9 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_105(uint256)= UNPACK TUPLE_9 index: 0 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_105

Name: REF_105 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: totalFeeAmount
init
end
Finance type key: (-1, -1)

Name: totalFeeAmount Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_2(uint256)= UNPACK TUPLE_9 index: 1 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for amountOut

Name: amountOut Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_106(uint256)= UNPACK TUPLE_9 index: 2 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_106

Name: REF_106 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: protocolFee
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: totalFeeAmount
F: protocolFee
init
end
Finance type key: (-1, -1)

Name: protocolFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_107(uint256)= UNPACK TUPLE_9 index: 3 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_107

Name: REF_107 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: feeGrowthGlobal
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: totalFeeAmount
F: protocolFee
F: feeGrowthGlobal
init
end
Finance type key: (-1, -1)

Name: feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newPrice_3
newPrice_3
newPrice
Name: newPrice, Num: 3

Name: newPrice Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_5
cache
Name: cache, Num: 5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
cache_5
cache
Name: cache, Num: 5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_80(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_80

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
init
end
Finance type key: (-1, -1)
XXXX
cache_5(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_80 (->cache_5) := newPrice_3(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_80

Name: REF_80 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_6

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_6
cache
Name: cache, Num: 6

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
cache_6
cache
Name: cache, Num: 6

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_81(uint256) -> cache_5.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for REF_81

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: cache_5, Field: input
init
end
Finance type key: (0, -1)
XXXX
cache_6(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_5'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_81 (->cache_6) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_81

Name: REF_81 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Root: cache_5, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cross_5
cross_5
cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
cache_17
cache
Name: cache, Num: 17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cache_17(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14', 'cache_14'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
secondsPerLiquidity_9
secondsPerLiquidity_9
secondsPerLiquidity

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
zeroForOne_1
zeroForOne_1
zeroForOne

Name: zeroForOne Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_14
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
ticks_15
ticks_15
ticks

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick, previousTick
Finance Type: undef
cache_14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
weee
REF_113(uint256) -> cache_14.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
Typing member

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_113

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_114(int24) -> cache_14.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
Typing member

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_114

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: nextTickToCross
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_116(int24) -> cache_14.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
Typing member

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_116

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: nextTickToCross
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_117(uint256) -> cache_14.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
Typing member

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_117

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_118(uint256) -> cache_14.feeGrowthGlobal
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
Typing member

Name: feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_118

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: feeGrowthGlobal
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: totalFeeAmount
F: protocolFee
F: feeGrowthGlobal
init
end
Finance type key: (-1, -1)

Name: feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_10(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_116', 'secondsPerLiquidity_9', 'REF_117', 'REF_118', 'zeroForOne_1'] 
Written func info: Ticks, cross
Retvar: ('c', [-1], [-1], 'u', 'u', None)
Retvar: ('c', [-1], [-1], 'u', 'u', None)
[i]Type for TUPLE_10

Name: TUPLE_10 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_113(uint256)= UNPACK TUPLE_10 index: 0 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_113

Name: REF_113 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_114(int24)= UNPACK TUPLE_10 index: 1 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_114

Name: REF_114 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: nextTickToCross
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_14
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
End popogation
weee
weee
weee
REF_119(uint256) -> cache_14.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
Typing member

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_119

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_131(bool) = REF_119 == 0
[i]Type for TMP_131

Name: TMP_131 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
cache_16
cache
Name: cache, Num: 16

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cache_16(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14', 'cache_15'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_14
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
cache_15

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_15
cache
Name: cache, Num: 15

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
cache_15
cache
Name: cache, Num: 15

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_120(uint256) -> cache_14.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
Typing member

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_120

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentPrice
init
end
Finance type key: (-1, -1)
XXXX
REF_122(int24) -> cache_14.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
Typing member

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_122

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: nextTickToCross
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_132(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_122'] 
Written func info: TickMath, getSqrtRatioAtTick
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_132

Name: TMP_132 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_133 = CONVERT TMP_132 to uint256
Converting TMP_132

Name: TMP_132 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_133

Name: TMP_133 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_15(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
XXXX
REF_120 (->cache_15) := TMP_133(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_120

Name: REF_120 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
secondsPerLiquidity_9
secondsPerLiquidity_9
secondsPerLiquidity

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_15
cache_15
cache
Name: cache, Num: 15

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
zeroForOne_1
zeroForOne_1
zeroForOne

Name: zeroForOne Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_15
ticks_15
ticks

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick, previousTick
Finance Type: undef
cache_15

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
cache_15
cache
Name: cache, Num: 15

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
weee
REF_123(uint256) -> cache_15.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
Typing member

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_123

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_124(int24) -> cache_15.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
Typing member

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_124

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: nextTickToCross
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_126(int24) -> cache_15.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
Typing member

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_126

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: nextTickToCross
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_127(uint256) -> cache_15.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
Typing member

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_127

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_128(uint256) -> cache_15.feeGrowthGlobal
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
Typing member

Name: feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_128

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: feeGrowthGlobal
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: totalFeeAmount
F: protocolFee
F: feeGrowthGlobal
init
end
Finance type key: (-1, -1)

Name: feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_11(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_126', 'secondsPerLiquidity_9', 'REF_127', 'REF_128', 'zeroForOne_1'] 
Written func info: Ticks, cross
Retvar: ('c', [-1], [-1], 'u', 'u', None)
Retvar: ('c', [-1], [-1], 'u', 'u', None)
[i]Type for TUPLE_11

Name: TUPLE_11 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_123(uint256)= UNPACK TUPLE_11 index: 0 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_123

Name: REF_123 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_124(int24)= UNPACK TUPLE_11 index: 1 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_124

Name: REF_124 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: nextTickToCross
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


swapFee_2(uint24) := ϕ(['swapFee_0', 'swapFee_1', 'swapFee_3'])
token0_15(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
token1_16(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
liquidity_10(uint128) := ϕ(['liquidity_0', 'liquidity_5', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9', 'liquidity_4', 'liquidity_3'])
secondsPerLiquidity_7(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
lastObservation_1(uint32) := ϕ(['lastObservation_2', 'lastObservation_0', 'lastObservation_3'])
feeGrowthGlobal0_7(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
feeGrowthGlobal1_7(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
barFee_2(uint256) := ϕ(['barFee_1', 'barFee_0', 'barFee_4', 'barFee_3'])
price_6(uint160) := ϕ(['price_8', 'price_3', 'price_1', 'price_5', 'price_0'])
nearestTick_15(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
ticks_14(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
TUPLE_8(bool,uint256,address,bool) = SOLIDITY_CALL abi.decode()(data_1(bool,uint256,address,bool))
zeroForOne_1(bool)= UNPACK TUPLE_8 index: 0 
inAmount_1(uint256)= UNPACK TUPLE_8 index: 1 
recipient_1(address)= UNPACK TUPLE_8 index: 2 
unwrapBento_1(bool)= UNPACK TUPLE_8 index: 3 
CONDITION zeroForOne_1
TMP_149 = CONVERT price_7 to uint256
TMP_150 = CONVERT liquidity_11 to uint256
REF_133(Ticks.Tick) -> ticks_15[nearestTick_16]
REF_134(int24) -> REF_133.nextTick
TMP_151 = new SwapCache(0,0,0,feeGrowthGlobal0_8,TMP_149,TMP_150,inAmount_1,REF_134)
cache_1(ConcentratedLiquidityPool.SwapCache) := TMP_151(ConcentratedLiquidityPool.SwapCache)
TMP_146 = CONVERT price_7 to uint256
TMP_147 = CONVERT liquidity_11 to uint256
TMP_148 = new SwapCache(0,0,0,feeGrowthGlobal1_8,TMP_146,TMP_147,inAmount_1,nearestTick_16)
cache_2(ConcentratedLiquidityPool.SwapCache) := TMP_148(ConcentratedLiquidityPool.SwapCache)
cache_3(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_1', 'cache_2'])
timestamp_1(uint256) := block.timestamp(uint256)
TMP_96 = CONVERT lastObservation_2 to uint256
TMP_97(uint256) = timestamp_1 (c)- TMP_96
diff_1(uint256) := TMP_97(uint256)
TMP_98(bool) = diff_1 > 0
TMP_99(bool) = liquidity_11 > 0
TMP_100(bool) = TMP_98 && TMP_99
CONDITION TMP_100
TMP_101 = CONVERT timestamp_1 to uint32
lastObservation_3(uint32) := TMP_101(uint32)
TMP_102(uint256) = diff_1 << 128
TMP_103(uint256) = TMP_102 (c)/ liquidity_11
TMP_104 = CONVERT TMP_103 to uint160
secondsPerLiquidity_9(uint160) = secondsPerLiquidity_8 (c)+ TMP_104
amountOut_1(uint256) := ϕ(['amountOut_0', 'amountOut_2'])
cache_4(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_0', 'cache_14'])
REF_61(uint256) -> cache_4.input
TMP_105(bool) = REF_61 != 0
CONDITION TMP_105
REF_129(uint256) -> cache_4.currentPrice
TMP_134 = CONVERT REF_129 to uint160
price_8(uint160) := TMP_134(uint160)
REF_63(int24) -> cache_4.nextTickToCross
TMP_106(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_63'] 
TMP_107 = CONVERT TMP_106 to uint256
nextTickPrice_1(uint256) := TMP_107(uint256)
CONDITION zeroForOne_1
REF_136(int24) -> cache_4.nextTickToCross
REF_137(Ticks.Tick) -> ticks_15[REF_136]
REF_138(int24) -> REF_137.previousTick
newNearestTick_2(int24) := REF_138(int24)
output_1(uint256) := 0(uint256)
REF_135(int24) -> cache_4.nextTickToCross
newNearestTick_1(int24) := REF_135(int24)
cross_1(bool) := False(bool)
newNearestTick_3(int24) := ϕ(['newNearestTick_1', 'newNearestTick_2'])
TMP_135(bool) = nearestTick_16 != newNearestTick_3
CONDITION TMP_135
CONDITION zeroForOne_1
nearestTick_17(int24) := newNearestTick_3(int24)
REF_65(uint256) -> cache_4.currentLiquidity
REF_66(uint256) -> cache_4.currentPrice
TMP_108(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_65', 'nextTickPrice_1', 'REF_66', 'False'] 
maxDx_1(uint256) := TMP_108(uint256)
REF_88(uint256) -> cache_4.currentLiquidity
REF_89(uint256) -> cache_4.currentPrice
TMP_125(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_88', 'REF_89', 'nextTickPrice_1', 'False'] 
maxDy_1(uint256) := TMP_125(uint256)
REF_90(uint256) -> cache_4.input
TMP_126(bool) = REF_90 <= maxDy_1
CONDITION TMP_126
REF_91(uint256) -> cache_4.currentPrice
REF_93(uint256) -> cache_4.input
REF_94(uint256) -> cache_4.currentLiquidity
TMP_127(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['REF_93', '79228162514264337593543950336', 'REF_94'] 
TMP_128(uint256) = REF_91 (c)+ TMP_127
newPrice_scope_0_1(uint256) := TMP_128(uint256)
REF_130(uint256) -> cache_4.currentLiquidity
TMP_136 = CONVERT REF_130 to uint128
liquidity_12(uint128) := TMP_136(uint128)
REF_101(uint256) -> cache_4.currentLiquidity
REF_102(uint256) -> cache_4.currentPrice
TMP_130(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_101', 'REF_102', 'nextTickPrice_1', 'False'] 
output_6(uint256) := TMP_130(uint256)
REF_67(uint256) -> cache_4.input
TMP_109(bool) = REF_67 <= maxDx_1
CONDITION TMP_109
REF_103(uint256) -> cache_4.currentPrice
cache_12(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
REF_103 (->cache_12) := nextTickPrice_1(uint256)
REF_68(uint256) -> cache_4.currentLiquidity
TMP_110(uint256) = REF_68 << 96
liquidityPadded_1(uint256) := TMP_110(uint256)
REF_96(uint256) -> cache_4.currentLiquidity
REF_97(uint256) -> cache_4.currentPrice
TMP_129(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_96', 'REF_97', 'newPrice_scope_0_1', 'False'] 
output_5(uint256) := TMP_129(uint256)
REF_83(uint256) -> cache_4.currentLiquidity
REF_84(uint256) -> cache_4.currentPrice
TMP_124(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_83', 'nextTickPrice_1', 'REF_84', 'False'] 
output_3(uint256) := TMP_124(uint256)
cross_4(bool) := True(bool)
REF_98(uint256) -> cache_4.currentPrice
cache_10(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
REF_98 (->cache_10) := newPrice_scope_0_1(uint256)
REF_85(uint256) -> cache_4.currentPrice
cache_7(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
REF_85 (->cache_7) := nextTickPrice_1(uint256)
REF_70(uint256) -> cache_4.currentPrice
REF_71(uint256) -> cache_4.currentPrice
REF_72(uint256) -> cache_4.input
TMP_111(uint256) = REF_71 (c)* REF_72
TMP_112(uint256) = liquidityPadded_1 (c)+ TMP_111
TMP_113(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDivRoundingUp(uint256,uint256,uint256), arguments:['liquidityPadded_1', 'REF_70', 'TMP_112'] 
TMP_114 = CONVERT TMP_113 to uint256
newPrice_1(uint256) := TMP_114(uint256)
TMP_137 = CONVERT inAmount_1 to uint128
INTERNAL_CALL, ConcentratedLiquidityPool._updateReserves(bool,uint128,uint256)(zeroForOne_1,TMP_137,amountOut_1)
token0_17(address) := ϕ(['token0_25'])
token1_18(address) := ϕ(['token1_27'])
REF_104(uint256) -> cache_12.input
cache_13(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_12'])
REF_104(-> cache_13) = REF_104 (c)- maxDy_1
REF_99(uint256) -> cache_10.input
cache_11(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_10'])
REF_99 (->cache_11) := 0(uint256)
cross_2(bool) := True(bool)
TMP_115(bool) = nextTickPrice_1 <= newPrice_1
REF_73(uint256) -> cache_4.currentPrice
TMP_116(bool) = newPrice_1 < REF_73
TMP_117(bool) = TMP_115 && TMP_116
TMP_118 = ! TMP_117 
CONDITION TMP_118
REF_86(uint256) -> cache_7.input
cache_8(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_7'])
REF_86(-> cache_8) = REF_86 (c)- maxDx_1
REF_131(uint256) -> cache_4.feeGrowthGlobal
REF_132(uint256) -> cache_4.protocolFee
TMP_139 = CONVERT REF_132 to uint128
INTERNAL_CALL, ConcentratedLiquidityPool._updateFees(bool,uint256,uint128)(zeroForOne_1,REF_131,TMP_139)
cache_14(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_13', 'cache_11'])
output_7(uint256) := ϕ(['output_6', 'output_5'])
cross_5(bool) := ϕ(['cross_1', 'cross_4'])
CONDITION zeroForOne_1
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_19,amountOut_1,recipient_1,unwrapBento_1)
newPrice_3(uint256) := ϕ(['newPrice_2', 'newPrice_1'])
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_18,amountOut_1,recipient_1,unwrapBento_1)
REF_75(uint256) -> cache_4.currentPrice
TMP_119(uint256) = liquidityPadded_1 (c)/ REF_75
REF_76(uint256) -> cache_4.input
TMP_120(uint256) = TMP_119 (c)+ REF_76
TMP_121(uint256) = LIBRARY_CALL, dest:UnsafeMath, function:UnsafeMath.divRoundingUp(uint256,uint256), arguments:['liquidityPadded_1', 'TMP_120'] 
TMP_122 = CONVERT TMP_121 to uint160
newPrice_2(uint256) := TMP_122(uint160)
cache_9(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_6', 'cache_0', 'cache_8'])
output_4(uint256) := ϕ(['output_3', 'output_1', 'output_2'])
cross_3(bool) := ϕ(['cross_2', 'cross_1'])
Emit Swap(recipient_1,token0_19,token1_20,inAmount_1,amountOut_1)
Emit Swap(recipient_1,token1_21,token0_20,inAmount_1,amountOut_1)
REF_78(uint256) -> cache_4.currentLiquidity
REF_79(uint256) -> cache_4.currentPrice
TMP_123(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_78', 'newPrice_3', 'REF_79', 'False'] 
output_2(uint256) := TMP_123(uint256)
REF_105(uint256) -> cache_14.totalFeeAmount
REF_106(uint256) -> cache_14.protocolFee
REF_107(uint256) -> cache_14.feeGrowthGlobal
REF_109(uint256) -> cache_14.currentLiquidity
REF_110(uint256) -> cache_14.totalFeeAmount
REF_111(uint256) -> cache_14.protocolFee
REF_112(uint256) -> cache_14.feeGrowthGlobal
TUPLE_9(uint256,uint256,uint256,uint256) = LIBRARY_CALL, dest:SwapLib, function:SwapLib.handleFees(uint256,uint24,uint256,uint256,uint256,uint256,uint256,uint256), arguments:['output_7', 'swapFee_3', 'barFee_3', 'REF_109', 'REF_110', 'amountOut_1', 'REF_111', 'REF_112'] 
REF_105(uint256)= UNPACK TUPLE_9 index: 0 
amountOut_2(uint256)= UNPACK TUPLE_9 index: 1 
REF_106(uint256)= UNPACK TUPLE_9 index: 2 
REF_107(uint256)= UNPACK TUPLE_9 index: 3 
REF_80(uint256) -> cache_4.currentPrice
cache_5(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
REF_80 (->cache_5) := newPrice_3(uint256)
REF_81(uint256) -> cache_5.input
cache_6(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_5'])
REF_81 (->cache_6) := 0(uint256)
CONDITION cross_5
cache_17(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14', 'cache_14'])
REF_113(uint256) -> cache_14.currentLiquidity
REF_114(int24) -> cache_14.nextTickToCross
REF_116(int24) -> cache_14.nextTickToCross
REF_117(uint256) -> cache_14.currentLiquidity
REF_118(uint256) -> cache_14.feeGrowthGlobal
TUPLE_10(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_116', 'secondsPerLiquidity_9', 'REF_117', 'REF_118', 'zeroForOne_1'] 
REF_113(uint256)= UNPACK TUPLE_10 index: 0 
REF_114(int24)= UNPACK TUPLE_10 index: 1 
REF_119(uint256) -> cache_14.currentLiquidity
TMP_131(bool) = REF_119 == 0
CONDITION TMP_131
cache_16(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14', 'cache_15'])
REF_120(uint256) -> cache_14.currentPrice
REF_122(int24) -> cache_14.nextTickToCross
TMP_132(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_122'] 
TMP_133 = CONVERT TMP_132 to uint256
cache_15(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14'])
REF_120 (->cache_15) := TMP_133(uint256)
REF_123(uint256) -> cache_15.currentLiquidity
REF_124(int24) -> cache_15.nextTickToCross
REF_126(int24) -> cache_15.nextTickToCross
REF_127(uint256) -> cache_15.currentLiquidity
REF_128(uint256) -> cache_15.feeGrowthGlobal
TUPLE_11(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_126', 'secondsPerLiquidity_9', 'REF_127', 'REF_128', 'zeroForOne_1'] 
REF_123(uint256)= UNPACK TUPLE_11 index: 0 
REF_124(int24)= UNPACK TUPLE_11 index: 1 


Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
swapFee_2
swapFee

Name: swapFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_15
token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_16
token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
liquidity_10
liquidity

Name: liquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
secondsPerLiquidity_7
secondsPerLiquidity

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lastObservation_1
lastObservation

Name: lastObservation Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_7
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_7
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
barFee_2
barFee

Name: barFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
price_6
price

Name: price Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_15
nearestTick

Name: nearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_14
ticks

Name: ticks Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
swapFee_2(uint24) := ϕ(['swapFee_0', 'swapFee_1', 'swapFee_3'])
Phi
[i]Type for swapFee

Name: swapFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_15(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_16(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_10(uint128) := ϕ(['liquidity_0', 'liquidity_5', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9', 'liquidity_4', 'liquidity_3'])
Phi
[i]Type for liquidity

Name: liquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsPerLiquidity_7(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lastObservation_1(uint32) := ϕ(['lastObservation_2', 'lastObservation_0', 'lastObservation_3'])
Phi
[i]Type for lastObservation

Name: lastObservation Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_7(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_7(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_2(uint256) := ϕ(['barFee_1', 'barFee_0', 'barFee_4', 'barFee_3'])
Phi
[i]Type for barFee

Name: barFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_6(uint160) := ϕ(['price_8', 'price_3', 'price_1', 'price_5', 'price_0'])
Phi
[i]Type for price

Name: price Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_15(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_14(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
data_1
data_1
data
p.norm: u
Name: data, Num: 1

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1

Name: unwrapBento Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
Name: unwrapBento, Num: 1

Name: unwrapBento Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
zeroForOne_1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
zeroForOne_1
zeroForOne
Name: zeroForOne, Num: 1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1

Name: inAmount Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1
inAmount
Name: inAmount, Num: 1

Name: inAmount Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1

Name: recipient Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient
Name: recipient, Num: 1

Name: recipient Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
TUPLE_8(bool,uint256,address,bool) = SOLIDITY_CALL abi.decode()(data_1(bool,uint256,address,bool))
[i]Type for TUPLE_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
zeroForOne_1(bool)= UNPACK TUPLE_8 index: 0 
Finding type for zeroForOne(bool ... )
[i]Type for zeroForOne

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
inAmount_1(uint256)= UNPACK TUPLE_8 index: 1 
Finding type for inAmount(uint256 ... )
[i]Type for inAmount

Name: inAmount Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address)= UNPACK TUPLE_8 index: 2 
Finding type for recipient(address ... )
prev address? u
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
[i]Type for recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool)= UNPACK TUPLE_8 index: 3 
Finding type for unwrapBento(bool ... )
[i]Type for unwrapBento

Name: unwrapBento Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne
Name: zeroForOne, Num: 1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
inAmount_1
inAmount_1
inAmount
Name: inAmount, Num: 1

Name: inAmount Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_11
liquidity_11
liquidity

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_16
nearestTick_16
nearestTick

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_7
price_7
price

Name: price Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_15
ticks_15
ticks

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick, previousTick
Finance Type: undef
feeGrowthGlobal0_8
feeGrowthGlobal0_8
feeGrowthGlobal0

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_1

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_1
cache
Name: cache, Num: 1

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
TMP_149 = CONVERT price_7 to uint256
Converting price_7

Name: price Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_149

Name: TMP_149 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_150 = CONVERT liquidity_11 to uint256
Converting liquidity_11

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_150

Name: TMP_150 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_133(Ticks.Tick) -> ticks_15[nearestTick_16]
INDEX
[i]Type for REF_133

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick, previousTick
Finance Type: undef
Root: None, Field: None
XXXX
REF_134(int24) -> REF_133.nextTick
MEMBER
init
end
init
end

Name: REF_133 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick, previousTick
Finance Type: undef
Typing member
init
end
[i]Type for REF_134

Name: REF_133.nextTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_133, Field: nextTick
F: nextTick
init
end
Finance type key: (-1, -1)

Name: nextTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_151 = new SwapCache(0,0,0,feeGrowthGlobal0_8,TMP_149,TMP_150,inAmount_1,REF_134)
[i]Type for TMP_151

Name: TMP_151 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_1(ConcentratedLiquidityPool.SwapCache) := TMP_151(ConcentratedLiquidityPool.SwapCache)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
inAmount_1
inAmount_1
inAmount
Name: inAmount, Num: 1

Name: inAmount Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_11
liquidity_11
liquidity

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_16
nearestTick_16
nearestTick

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal1_8
feeGrowthGlobal1_8
feeGrowthGlobal1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_7
price_7
price

Name: price Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_2

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_2
cache
Name: cache, Num: 2

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_146 = CONVERT price_7 to uint256
Converting price_7

Name: price Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_146

Name: TMP_146 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_147 = CONVERT liquidity_11 to uint256
Converting liquidity_11

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_147

Name: TMP_147 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_148 = new SwapCache(0,0,0,feeGrowthGlobal1_8,TMP_146,TMP_147,inAmount_1,nearestTick_16)
[i]Type for TMP_148

Name: TMP_148 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_2(ConcentratedLiquidityPool.SwapCache) := TMP_148(ConcentratedLiquidityPool.SwapCache)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
cache_3
cache
Name: cache, Num: 3

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cache_3(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_1', 'cache_2'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
timestamp_1

Name: timestamp Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
timestamp_1
timestamp
Name: timestamp, Num: 1

Name: timestamp Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
timestamp_1(uint256) := block.timestamp(uint256)
asgn
init
[i]Type for timestamp

Name: timestamp Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
timestamp_1
timestamp_1
timestamp
Name: timestamp, Num: 1

Name: timestamp Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lastObservation_2
lastObservation_2
lastObservation

Name: lastObservation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
diff_1

Name: diff Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
diff_1
diff
Name: diff, Num: 1

Name: diff Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_96 = CONVERT lastObservation_2 to uint256
Converting lastObservation_2

Name: lastObservation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_96

Name: TMP_96 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_97(uint256) = timestamp_1 (c)- TMP_96
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: timestamp Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_96 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_97

Name: TMP_97 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
diff_1(uint256) := TMP_97(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for diff

Name: diff Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidity_11
liquidity_11
liquidity

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
diff_1
diff_1
diff

Name: diff Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_98(bool) = diff_1 > 0
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
[i]Type for TMP_98

Name: TMP_98 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_99(bool) = liquidity_11 > 0
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
[i]Type for TMP_99

Name: TMP_99 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_100(bool) = TMP_98 && TMP_99
[i]Type for TMP_100

Name: TMP_100 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
timestamp_1
timestamp_1
timestamp
Name: timestamp, Num: 1

Name: timestamp Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lastObservation_3

Name: lastObservation Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lastObservation_3
lastObservation

Name: lastObservation Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_101 = CONVERT timestamp_1 to uint32
Converting timestamp_1

Name: timestamp Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_101

Name: TMP_101 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lastObservation_3(uint32) := TMP_101(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lastObservation

Name: lastObservation Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied lastObservation
 To type: None

Name: lastObservation Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidity_11
liquidity_11
liquidity

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsPerLiquidity_8
secondsPerLiquidity_8
secondsPerLiquidity

Name: secondsPerLiquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
diff_1
diff_1
diff

Name: diff Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsPerLiquidity_9

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsPerLiquidity_9
secondsPerLiquidity

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_102(uint256) = diff_1 << 128
[i]Type for TMP_102

Name: TMP_102 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_103(uint256) = TMP_102 (c)/ liquidity_11
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_103

Name: TMP_103 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_104 = CONVERT TMP_103 to uint160
Converting TMP_103

Name: TMP_103 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_104

Name: TMP_104 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsPerLiquidity_9(uint160) = secondsPerLiquidity_8 (c)+ TMP_104

Name: secondsPerLiquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_104 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied secondsPerLiquidity
 To type: None

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
amountOut_1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
weee
weee
weee
weee
amountOut_1(uint256) := ϕ(['amountOut_0', 'amountOut_2'])
Phi
[i]Type for amountOut

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_4(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_0', 'cache_14'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_61(uint256) -> cache_4.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_61

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_105(bool) = REF_61 != 0
[i]Type for TMP_105

Name: TMP_105 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
price_8

Name: price Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_8
price

Name: price Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_129(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_129

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_134 = CONVERT REF_129 to uint160
Converting REF_129

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_134

Name: TMP_134 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_8(uint160) := TMP_134(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for price

Name: price Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied price
 To type: None

Name: price Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
nextTickPrice_1

Name: nextTickPrice Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nextTickPrice_1
nextTickPrice
Name: nextTickPrice, Num: 1

Name: nextTickPrice Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_63(int24) -> cache_4.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_63

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: nextTickToCross
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_106(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_63'] 
Written func info: TickMath, getSqrtRatioAtTick
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_106

Name: TMP_106 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_107 = CONVERT TMP_106 to uint256
Converting TMP_106

Name: TMP_106 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_107

Name: TMP_107 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nextTickPrice_1(uint256) := TMP_107(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne
Name: zeroForOne, Num: 1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_15
ticks_15
ticks

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick, previousTick
Finance Type: undef
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
newNearestTick_2

Name: newNearestTick Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newNearestTick_2
newNearestTick
Name: newNearestTick, Num: 2

Name: newNearestTick Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_136(int24) -> cache_4.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_136

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: nextTickToCross
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_137(Ticks.Tick) -> ticks_15[REF_136]
INDEX
[i]Type for REF_137

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick, previousTick
Finance Type: undef
Root: None, Field: None
XXXX
REF_138(int24) -> REF_137.previousTick
MEMBER
init
end
init
end

Name: REF_137 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick, previousTick
Finance Type: undef
Typing member
init
end
[i]Type for REF_138

Name: REF_137.previousTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_137, Field: previousTick
F: nextTick
F: previousTick
init
end
Finance type key: (-1, -1)

Name: previousTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newNearestTick_2(int24) := REF_138(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
output_1

Name: output Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
output_1
output
Name: output, Num: 1

Name: output Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
weee
output_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
newNearestTick_1

Name: newNearestTick Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newNearestTick_1
newNearestTick
Name: newNearestTick, Num: 1

Name: newNearestTick Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_135(int24) -> cache_4.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_135

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: nextTickToCross
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newNearestTick_1(int24) := REF_135(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cross_1

Name: cross Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
cross_1
cross
Name: cross, Num: 1

Name: cross Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
End popogation
weee
cross_1(bool) := False(bool)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
newNearestTick_3
newNearestTick
Name: newNearestTick, Num: 3

Name: newNearestTick Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
newNearestTick_3(int24) := ϕ(['newNearestTick_1', 'newNearestTick_2'])
Phi
init
end
[i]Type for newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_16
nearestTick_16
nearestTick

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newNearestTick_3
newNearestTick_3
newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_135(bool) = nearestTick_16 != newNearestTick_3
[i]Type for TMP_135

Name: TMP_135 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne
Name: zeroForOne, Num: 1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newNearestTick_3
newNearestTick_3
newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_17

Name: nearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_17
nearestTick

Name: nearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
nearestTick_17(int24) := newNearestTick_3(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for nearestTick

Name: nearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied nearestTick
 To type: None

Name: nearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxDx_1

Name: maxDx Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
maxDx_1
maxDx
Name: maxDx, Num: 1

Name: maxDx Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
REF_65(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_65

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_66(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_66

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_108(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_65', 'nextTickPrice_1', 'REF_66', 'False'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_108

Name: TMP_108 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
maxDx_1(uint256) := TMP_108(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for maxDx

Name: maxDx Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxDy_1

Name: maxDy Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
maxDy_1
maxDy
Name: maxDy, Num: 1

Name: maxDy Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
REF_88(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_88

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_89(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_89

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_125(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_88', 'REF_89', 'nextTickPrice_1', 'False'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_125

Name: TMP_125 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
maxDy_1(uint256) := TMP_125(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for maxDy

Name: maxDy Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
maxDy_1
maxDy_1
maxDy

Name: maxDy Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
weee
weee
REF_90(uint256) -> cache_4.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_90

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_126(bool) = REF_90 <= maxDy_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_126

Name: TMP_126 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
newPrice_scope_0_1

Name: newPrice_scope_0 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newPrice_scope_0_1
newPrice_scope_0
Name: newPrice_scope_0, Num: 1

Name: newPrice_scope_0 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
REF_91(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_91

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_93(uint256) -> cache_4.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_93

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_94(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_94

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_127(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['REF_93', '79228162514264337593543950336', 'REF_94'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_127

Name: TMP_127 Function: swap
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_128(uint256) = REF_91 (c)+ TMP_127

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_127 Function: swap
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
init
end
lval:u rval:'u'
[i]Type for TMP_128

Name: TMP_128 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newPrice_scope_0_1(uint256) := TMP_128(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newPrice_scope_0

Name: newPrice_scope_0 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
liquidity_12

Name: liquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_12
liquidity

Name: liquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_130(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_130

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_136 = CONVERT REF_130 to uint128
Converting REF_130

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_136

Name: TMP_136 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_12(uint128) := TMP_136(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied liquidity
 To type: None

Name: liquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_6

Name: output Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
output_6
output
Name: output, Num: 6

Name: output Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
REF_101(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_101

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_102(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_102

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_130(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_101', 'REF_102', 'nextTickPrice_1', 'False'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_130

Name: TMP_130 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
output_6(uint256) := TMP_130(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
maxDx_1
maxDx_1
maxDx

Name: maxDx Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
weee
weee
REF_67(uint256) -> cache_4.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_67

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_109(bool) = REF_67 <= maxDx_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_109

Name: TMP_109 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_12

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
cache_12
cache
Name: cache, Num: 12

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
End popogation
weee
cache_12
cache
Name: cache, Num: 12

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
weee
weee
REF_103(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_103

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_12(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_103 (->cache_12) := nextTickPrice_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_103

Name: REF_103 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
liquidityPadded_1

Name: liquidityPadded Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidityPadded_1
liquidityPadded
Name: liquidityPadded, Num: 1

Name: liquidityPadded Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_68(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_68

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_110(uint256) = REF_68 << 96
[i]Type for TMP_110

Name: TMP_110 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidityPadded_1(uint256) := TMP_110(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for liquidityPadded

Name: liquidityPadded Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newPrice_scope_0_1
newPrice_scope_0_1
newPrice_scope_0

Name: newPrice_scope_0 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
output_5

Name: output Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
output_5
output
Name: output, Num: 5

Name: output Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
REF_96(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_96

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_97(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_97

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_129(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_96', 'REF_97', 'newPrice_scope_0_1', 'False'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_129

Name: TMP_129 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
output_5(uint256) := TMP_129(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_3

Name: output Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
output_3
output
Name: output, Num: 3

Name: output Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
REF_83(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_83

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_84(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_84

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_124(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_83', 'nextTickPrice_1', 'REF_84', 'False'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_124

Name: TMP_124 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
output_3(uint256) := TMP_124(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cross_4

Name: cross Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
cross_4
cross
Name: cross, Num: 4

Name: cross Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
End popogation
weee
cross_4(bool) := True(bool)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newPrice_scope_0_1
newPrice_scope_0_1
newPrice_scope_0

Name: newPrice_scope_0 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
cache_10

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
cache_10
cache
Name: cache, Num: 10

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
End popogation
weee
cache_10
cache
Name: cache, Num: 10

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
weee
weee
REF_98(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_98

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_10(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_98 (->cache_10) := newPrice_scope_0_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_98

Name: REF_98 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_7

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
cache_7
cache
Name: cache, Num: 7

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
End popogation
weee
cache_7
cache
Name: cache, Num: 7

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
weee
weee
REF_85(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_85

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_7(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_85 (->cache_7) := nextTickPrice_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_85

Name: REF_85 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidityPadded_1
liquidityPadded_1
liquidityPadded
Name: liquidityPadded, Num: 1

Name: liquidityPadded Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
newPrice_1

Name: newPrice Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
newPrice_1
newPrice
Name: newPrice, Num: 1

Name: newPrice Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
weee
REF_70(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_70

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_71

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_72(uint256) -> cache_4.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_72

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_111(uint256) = REF_71 (c)* REF_72
init
end
init
end
A: 'u' B: u
x
lnorm: 'u' rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_111

Name: TMP_111 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_112(uint256) = liquidityPadded_1 (c)+ TMP_111

Name: liquidityPadded Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_111 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
init
end
lval:u rval:u
[i]Type for TMP_112

Name: TMP_112 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_113(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDivRoundingUp(uint256,uint256,uint256), arguments:['liquidityPadded_1', 'REF_70', 'TMP_112'] 
Written func info: FullMath, mulDivRoundingUp
Retvar: ('t', ['1', '2'], ['3'], 0, "'u'", None)
([-1, -1], [-1, -1], 0, "'u'", None, -1)
[i]Type for TMP_113

Name: TMP_113 Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_114 = CONVERT TMP_113 to uint256
Converting TMP_113

Name: TMP_113 Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_114

Name: TMP_114 Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
newPrice_1(uint256) := TMP_114(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
zeroForOne_1
zeroForOne_1
zeroForOne
Name: zeroForOne, Num: 1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1
inAmount_1
inAmount
Name: inAmount, Num: 1

Name: inAmount Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
token0_17
token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_18
token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_137 = CONVERT inAmount_1 to uint128
Converting inAmount_1

Name: inAmount Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_137

Name: TMP_137 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ConcentratedLiquidityPool._updateReserves(bool,uint128,uint256)(zeroForOne_1,TMP_137,amountOut_1)
init
end
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
zeroForOne_1
zeroForOne
p.norm: u
Name: zeroForOne, Num: 1

Name: zeroForOne_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
inAmount_1
inAmount
p.norm: u
Name: inAmount, Num: 1

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
amountOut_1
amountOut
p.norm: u
Name: amountOut, Num: 1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_24
token0

Name: token0 Function: _updateReserves
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_26
token1

Name: token1 Function: _updateReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
reserve0_25
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_27
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
inAmount_1(uint128) := ϕ(['TMP_137'])
Phi
[i]Type for inAmount

Name: inAmount Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := ϕ(['amountOut_1'])
Phi
[i]Type for amountOut

Name: amountOut Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_24(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _updateReserves
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_26(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _updateReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_25(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
Phi
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_27(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
Phi
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne
p.norm: u
Name: zeroForOne, Num: 1

Name: zeroForOne_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
token0_24
token0_24
token0

Name: token0 Function: _updateReserves
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
balance0_1

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0
Name: balance0, Num: 1

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_190(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_24)
init
end
init
end
[i]Type for TMP_190

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance0_1(uint256) := TMP_190(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance0

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve0_26
reserve0_26
reserve0

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1
inAmount_1
inAmount
p.norm: u
Name: inAmount, Num: 1

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_1

Name: newBalance Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_1
newBalance
Name: newBalance, Num: 1

Name: newBalance Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_191(uint128) = reserve0_26 (c)+ inAmount_1

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_191

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newBalance_1(uint128) := TMP_191(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
token1_26
token1_26
token1

Name: token1 Function: _updateReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance1_1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1
Name: balance1, Num: 1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_196(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_26)
init
end
[[-1], [-1], 'u', 'token1', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_9', 'token1_26', 'token0_24', 'token1_10'])
Phi
[i]Type for token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_2
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance_1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balance_1
balance
Name: balance, Num: 1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_3
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_213 = CONVERT this to address
Converting this
4
[i]Type for TMP_213

Name: TMP_213 Function: _balance
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
High Call: balanceOf
Running querryfc
Written func info: BentoBoxMinimal, balanceOf
Retvar: ('t', ['1'], ['-1'], "'u'", "'u'", None)
([-1, 2], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_214

Name: TMP_214 Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
bento_3(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_2', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_214(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_9', 'token1_26', 'token0_24', 'token1_10'])
Phi
[i]Type for token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_2
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance_1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balance_1
balance
Name: balance, Num: 1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_3
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_213 = CONVERT this to address
Converting this
4
[i]Type for TMP_213

Name: TMP_213 Function: _balance
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
High Call: balanceOf
Running querryfc
Written func info: BentoBoxMinimal, balanceOf
Retvar: ('t', ['1'], ['-1'], "'u'", "'u'", None)
([-1, 2], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_214

Name: TMP_214 Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
bento_3(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_2', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_214(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_196

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance1_1(uint256) := TMP_196(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_1
newBalance_1
newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0
Name: balance0, Num: 1

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_192 = CONVERT newBalance_1 to uint256
Converting newBalance_1

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_192

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(bool) = TMP_192 <= balance0_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_193

Name: TMP_193 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_194(None) = SOLIDITY_CALL require(bool,string)(TMP_193,TOKEN0_MISSING)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve1_30
reserve1_30
reserve1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1
inAmount_1
inAmount
p.norm: u
Name: inAmount, Num: 1

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_scope_0_1

Name: newBalance_scope_0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_scope_0_1
newBalance_scope_0
Name: newBalance_scope_0, Num: 1

Name: newBalance_scope_0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_197(uint128) = reserve1_30 (c)+ inAmount_1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_197

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newBalance_scope_0_1(uint128) := TMP_197(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_1
newBalance_1
newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_27

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_27
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve0_27(uint128) := newBalance_1(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_scope_0_1
newBalance_scope_0_1
newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1
Name: balance1, Num: 1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_198 = CONVERT newBalance_scope_0_1 to uint256
Converting newBalance_scope_0_1

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_198

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_199(bool) = TMP_198 <= balance1_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_199

Name: TMP_199 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_200(None) = SOLIDITY_CALL require(bool,string)(TMP_199,TOKEN1_MISSING)
[i]Type for TMP_200

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
p.norm: u
Name: amountOut, Num: 1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_28
reserve1_28
reserve1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_29

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_29
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_195 = CONVERT amountOut_1 to uint128
Converting amountOut_1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_195

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_29(uint128) = reserve1_28 (c)- TMP_195
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_scope_0_1
newBalance_scope_0_1
newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_31

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_31
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve1_31(uint128) := newBalance_scope_0_1(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
reserve0_30
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_32
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve0_30(uint128) := ϕ(['reserve0_27', 'reserve0_29'])
Phi
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_32(uint128) := ϕ(['reserve1_31', 'reserve1_29'])
Phi
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
p.norm: u
Name: amountOut, Num: 1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_28
reserve0_28
reserve0

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_29

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_29
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_201 = CONVERT amountOut_1 to uint128
Converting amountOut_1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_201

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_29(uint128) = reserve0_28 (c)- TMP_201
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
zeroForOne_1
zeroForOne
p.norm: u
Name: zeroForOne, Num: 1

Name: zeroForOne_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
inAmount_1
inAmount
p.norm: u
Name: inAmount, Num: 1

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
amountOut_1
amountOut
p.norm: u
Name: amountOut, Num: 1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_24
token0

Name: token0 Function: _updateReserves
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_26
token1

Name: token1 Function: _updateReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
reserve0_25
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_27
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
inAmount_1(uint128) := ϕ(['TMP_137'])
Phi
[i]Type for inAmount

Name: inAmount Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := ϕ(['amountOut_1'])
Phi
[i]Type for amountOut

Name: amountOut Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_24(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _updateReserves
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_26(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _updateReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_25(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
Phi
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_27(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
Phi
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne
p.norm: u
Name: zeroForOne, Num: 1

Name: zeroForOne_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
token0_24
token0_24
token0

Name: token0 Function: _updateReserves
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
balance0_1

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0
Name: balance0, Num: 1

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_190(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_24)
init
end
init
end
[i]Type for TMP_190

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance0_1(uint256) := TMP_190(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance0

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve0_26
reserve0_26
reserve0

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1
inAmount_1
inAmount
p.norm: u
Name: inAmount, Num: 1

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_1

Name: newBalance Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_1
newBalance
Name: newBalance, Num: 1

Name: newBalance Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_191(uint128) = reserve0_26 (c)+ inAmount_1

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_191

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newBalance_1(uint128) := TMP_191(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
token1_26
token1_26
token1

Name: token1 Function: _updateReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance1_1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1
Name: balance1, Num: 1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_196(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_26)
init
end
[[-1], [-1], 'u', 'token1', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_9', 'token1_26', 'token0_24', 'token1_10'])
Phi
[i]Type for token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_2
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance_1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balance_1
balance
Name: balance, Num: 1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_3
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_213 = CONVERT this to address
Converting this
4
[i]Type for TMP_213

Name: TMP_213 Function: _balance
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
High Call: balanceOf
Running querryfc
Written func info: BentoBoxMinimal, balanceOf
Retvar: ('t', ['1'], ['-1'], "'u'", "'u'", None)
([-1, 2], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_214

Name: TMP_214 Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
bento_3(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_2', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_214(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_9', 'token1_26', 'token0_24', 'token1_10'])
Phi
[i]Type for token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_2
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance_1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balance_1
balance
Name: balance, Num: 1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_3
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_213 = CONVERT this to address
Converting this
4
[i]Type for TMP_213

Name: TMP_213 Function: _balance
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
High Call: balanceOf
Running querryfc
Written func info: BentoBoxMinimal, balanceOf
Retvar: ('t', ['1'], ['-1'], "'u'", "'u'", None)
([-1, 2], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_214

Name: TMP_214 Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
bento_3(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_2', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_214(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_196

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance1_1(uint256) := TMP_196(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_1
newBalance_1
newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0
Name: balance0, Num: 1

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_192 = CONVERT newBalance_1 to uint256
Converting newBalance_1

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_192

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(bool) = TMP_192 <= balance0_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_193

Name: TMP_193 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_194(None) = SOLIDITY_CALL require(bool,string)(TMP_193,TOKEN0_MISSING)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve1_30
reserve1_30
reserve1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1
inAmount_1
inAmount
p.norm: u
Name: inAmount, Num: 1

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_scope_0_1

Name: newBalance_scope_0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_scope_0_1
newBalance_scope_0
Name: newBalance_scope_0, Num: 1

Name: newBalance_scope_0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_197(uint128) = reserve1_30 (c)+ inAmount_1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_197

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newBalance_scope_0_1(uint128) := TMP_197(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_1
newBalance_1
newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_27

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_27
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve0_27(uint128) := newBalance_1(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_scope_0_1
newBalance_scope_0_1
newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1
Name: balance1, Num: 1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_198 = CONVERT newBalance_scope_0_1 to uint256
Converting newBalance_scope_0_1

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_198

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_199(bool) = TMP_198 <= balance1_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_199

Name: TMP_199 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_200(None) = SOLIDITY_CALL require(bool,string)(TMP_199,TOKEN1_MISSING)
[i]Type for TMP_200

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
p.norm: u
Name: amountOut, Num: 1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_28
reserve1_28
reserve1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_29

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_29
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_195 = CONVERT amountOut_1 to uint128
Converting amountOut_1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_195

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_29(uint128) = reserve1_28 (c)- TMP_195
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_scope_0_1
newBalance_scope_0_1
newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_31

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_31
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve1_31(uint128) := newBalance_scope_0_1(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
reserve0_30
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_32
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve0_30(uint128) := ϕ(['reserve0_27', 'reserve0_29'])
Phi
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_32(uint128) := ϕ(['reserve1_31', 'reserve1_29'])
Phi
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
p.norm: u
Name: amountOut, Num: 1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_28
reserve0_28
reserve0

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_29

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_29
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_201 = CONVERT amountOut_1 to uint128
Converting amountOut_1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_201

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_29(uint128) = reserve0_28 (c)- TMP_201
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_17(address) := ϕ(['token0_25'])
Phi
[i]Type for token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_18(address) := ϕ(['token1_27'])
Phi
[i]Type for token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_13
cache_13
cache
Name: cache, Num: 13

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
maxDy_1
maxDy_1
maxDy

Name: maxDy Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
cache_13

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
cache_13
cache
Name: cache, Num: 13

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
End popogation
weee
cache_13
cache
Name: cache, Num: 13

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
weee
weee
REF_104(uint256) -> cache_12.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_104

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: cache_12, Field: input
F: input
init
end
Finance type key: (0, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
cache_13(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_12'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_104(-> cache_13) = REF_104 (c)- maxDy_1
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
Finance type key: (0, 0)
SUB

Name: REF_104 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: maxDy Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:u rval:u
[i]Type for REF_104

Name: REF_104 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: cache_12, Field: input
F: input
init
end
Finance type key: (0, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_11

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
cache_11
cache
Name: cache, Num: 11

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
End popogation
weee
cache_11
cache
Name: cache, Num: 11

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
weee
weee
REF_99(uint256) -> cache_10.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_99

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Root: cache_10, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_11(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_10'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_99 (->cache_11) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_99

Name: REF_99 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Root: cache_10, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cross_2

Name: cross Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
cross_2
cross
Name: cross, Num: 2

Name: cross Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
End popogation
weee
cross_2(bool) := True(bool)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newPrice_1
newPrice_1
newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
TMP_115(bool) = nextTickPrice_1 <= newPrice_1
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
[i]Type for TMP_115

Name: TMP_115 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_73(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_73

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_116(bool) = newPrice_1 < REF_73
init
end
init
end
A: 0 B: 'u'
x
y
A: 0 B: 'u'
<class 'int'>
<class 'str'>
lnorm: 0 rnorm: 'u'
[i]Type for TMP_116

Name: TMP_116 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117(bool) = TMP_115 && TMP_116
[i]Type for TMP_117

Name: TMP_117 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_118 = ! TMP_117 
[i]Type for TMP_118

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_8
cache_8
cache
Name: cache, Num: 8

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
maxDx_1
maxDx_1
maxDx

Name: maxDx Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
cache_8

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
cache_8
cache
Name: cache, Num: 8

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
End popogation
weee
cache_8
cache
Name: cache, Num: 8

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity
Finance Type: undef
weee
weee
REF_86(uint256) -> cache_7.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_86

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: cache_7, Field: input
F: input
init
end
Finance type key: (0, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
cache_8(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_7'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_86(-> cache_8) = REF_86 (c)- maxDx_1
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
Finance type key: (0, 0)
SUB

Name: REF_86 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: maxDx Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:u rval:u
[i]Type for REF_86

Name: REF_86 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: cache_7, Field: input
F: input
init
end
Finance type key: (0, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne
Name: zeroForOne, Num: 1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_131(uint256) -> cache_4.feeGrowthGlobal
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_131

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: feeGrowthGlobal
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
init
end
Finance type key: (-1, -1)

Name: feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_132(uint256) -> cache_4.protocolFee
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_132

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: protocolFee
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
F: protocolFee
init
end
Finance type key: (-1, -1)

Name: protocolFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_139 = CONVERT REF_132 to uint128
Converting REF_132

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_139

Name: TMP_139 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ConcentratedLiquidityPool._updateFees(bool,uint256,uint128)(zeroForOne_1,REF_131,TMP_139)
init
end
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
zeroForOne_1
zeroForOne
p.norm: u
Name: zeroForOne, Num: 1

Name: zeroForOne_1 Function: _updateFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal_1
feeGrowthGlobal
p.norm: u

Name: feeGrowthGlobal_1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
protocolFee_1
protocolFee
p.norm: u

Name: protocolFee_1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0ProtocolFee_4
token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1ProtocolFee_5
token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal_1(uint256) := ϕ(['REF_131'])
Phi
[i]Type for feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
protocolFee_1(uint128) := ϕ(['TMP_139'])
Phi
[i]Type for protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0ProtocolFee_4(uint128) := ϕ(['token0ProtocolFee_0', 'token0ProtocolFee_5', 'token0ProtocolFee_2', 'token0ProtocolFee_3'])
Phi
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1ProtocolFee_5(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_0', 'token1ProtocolFee_6', 'token1ProtocolFee_2'])
Phi
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne
p.norm: u
Name: zeroForOne, Num: 1

Name: zeroForOne_1 Function: _updateFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal_1
feeGrowthGlobal_1
feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal0_9

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal0_9
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
feeGrowthGlobal0_9(uint256) := feeGrowthGlobal_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied feeGrowthGlobal0
 To type: None

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
protocolFee_1
protocolFee_1
protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0ProtocolFee_4
token0ProtocolFee_4
token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0ProtocolFee_5

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0ProtocolFee_5
token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
token0ProtocolFee_5(uint128) = token0ProtocolFee_4 (c)+ protocolFee_1

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token0ProtocolFee
 To type: None

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal_1
feeGrowthGlobal_1
feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal1_9

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal1_9
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
feeGrowthGlobal1_9(uint256) := feeGrowthGlobal_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied feeGrowthGlobal1
 To type: None

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
protocolFee_1
protocolFee_1
protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1ProtocolFee_5
token1ProtocolFee_5
token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1ProtocolFee_6

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1ProtocolFee_6
token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
token1ProtocolFee_6(uint128) = token1ProtocolFee_5 (c)+ protocolFee_1

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token1ProtocolFee
 To type: None

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
zeroForOne_1
zeroForOne
p.norm: u
Name: zeroForOne, Num: 1

Name: zeroForOne_1 Function: _updateFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal_1
feeGrowthGlobal
p.norm: u

Name: feeGrowthGlobal_1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
protocolFee_1
protocolFee
p.norm: u

Name: protocolFee_1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0ProtocolFee_4
token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1ProtocolFee_5
token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal_1(uint256) := ϕ(['REF_131'])
Phi
[i]Type for feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
protocolFee_1(uint128) := ϕ(['TMP_139'])
Phi
[i]Type for protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0ProtocolFee_4(uint128) := ϕ(['token0ProtocolFee_0', 'token0ProtocolFee_5', 'token0ProtocolFee_2', 'token0ProtocolFee_3'])
Phi
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1ProtocolFee_5(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_0', 'token1ProtocolFee_6', 'token1ProtocolFee_2'])
Phi
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne
p.norm: u
Name: zeroForOne, Num: 1

Name: zeroForOne_1 Function: _updateFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal_1
feeGrowthGlobal_1
feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal0_9

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal0_9
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
feeGrowthGlobal0_9(uint256) := feeGrowthGlobal_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied feeGrowthGlobal0
 To type: None

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
protocolFee_1
protocolFee_1
protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0ProtocolFee_4
token0ProtocolFee_4
token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0ProtocolFee_5

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0ProtocolFee_5
token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
token0ProtocolFee_5(uint128) = token0ProtocolFee_4 (c)+ protocolFee_1

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token0ProtocolFee
 To type: None

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal_1
feeGrowthGlobal_1
feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal1_9

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal1_9
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
feeGrowthGlobal1_9(uint256) := feeGrowthGlobal_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied feeGrowthGlobal1
 To type: None

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
protocolFee_1
protocolFee_1
protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1ProtocolFee_5
token1ProtocolFee_5
token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1ProtocolFee_6

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1ProtocolFee_6
token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
token1ProtocolFee_6(uint128) = token1ProtocolFee_5 (c)+ protocolFee_1

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token1ProtocolFee
 To type: None

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
weee
output_7
output
Name: output, Num: 7

Name: output Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cross_5
cross
Name: cross, Num: 5

Name: cross Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
weee
cache_14(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_13', 'cache_11'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
output_7(uint256) := ϕ(['output_6', 'output_5'])
Phi
init
end
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cross_5(bool) := ϕ(['cross_1', 'cross_4'])
Phi
init
end
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne
Name: zeroForOne, Num: 1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento
Name: unwrapBento, Num: 1

Name: unwrapBento Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_19
token1_19
token1

Name: token1 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_19,amountOut_1,recipient_1,unwrapBento_1)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', 'token1', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -995, 'u']

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: u
Name: shares, Num: 1

Name: shares_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
init
end
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: u
Name: shares, Num: 1

Name: shares_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
init
end
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
newPrice_3
newPrice
Name: newPrice, Num: 3

Name: newPrice Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
newPrice_3(uint256) := ϕ(['newPrice_2', 'newPrice_1'])
Phi
init
end
[i]Type for newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento
Name: unwrapBento, Num: 1

Name: unwrapBento Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_18
token0_18
token0

Name: token0 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_18,amountOut_1,recipient_1,unwrapBento_1)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', 'token0', [], -1, 1, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -995, 'u']

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: u
Name: shares, Num: 1

Name: shares_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
init
end
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: u
Name: shares, Num: 1

Name: shares_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
init
end
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidityPadded_1
liquidityPadded_1
liquidityPadded
Name: liquidityPadded, Num: 1

Name: liquidityPadded Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
newPrice_2

Name: newPrice Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
newPrice_2
newPrice
Name: newPrice, Num: 2

Name: newPrice Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
REF_75(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_75

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_119(uint256) = liquidityPadded_1 (c)/ REF_75
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
init
end
lval:u rval:u
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
[i]Type for TMP_119

Name: TMP_119 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_76(uint256) -> cache_4.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_76

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: cache_4, Field: input
F: input
init
end
Finance type key: (0, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_120(uint256) = TMP_119 (c)+ REF_76

Name: TMP_119 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
A: 'u' B: u
x
lnorm: 'u' rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_120

Name: TMP_120 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_121(uint256) = LIBRARY_CALL, dest:UnsafeMath, function:UnsafeMath.divRoundingUp(uint256,uint256), arguments:['liquidityPadded_1', 'TMP_120'] 
Written func info: UnsafeMath, divRoundingUp
Retvar: ('t', ['1'], ['2'], 0, "'u'", None)
([-1], [-1], 0, "'u'", None, -1)
[i]Type for TMP_121

Name: TMP_121 Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_122 = CONVERT TMP_121 to uint160
Converting TMP_121

Name: TMP_121 Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_122

Name: TMP_122 Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
newPrice_2(uint256) := TMP_122(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
cache_9
cache
Name: cache, Num: 9

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
output_4
output
Name: output, Num: 4

Name: output Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cross_3
cross
Name: cross, Num: 3

Name: cross Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
weee
cache_9(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_6', 'cache_0', 'cache_8'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
output_4(uint256) := ϕ(['output_3', 'output_1', 'output_2'])
Phi
init
end
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cross_3(bool) := ϕ(['cross_2', 'cross_1'])
Phi
init
end
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
inAmount_1
inAmount_1
inAmount
Name: inAmount, Num: 1

Name: inAmount Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_20
token1_20
token1

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
token0_19
token0_19
token0

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
inAmount_1
inAmount_1
inAmount
Name: inAmount, Num: 1

Name: inAmount Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_20
token0_20
token0

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_21
token1_21
token1

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
newPrice_3
newPrice_3
newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
output_2

Name: output Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
output_2
output
Name: output, Num: 2

Name: output Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
REF_78(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_78

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_79(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_79

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_123(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_78', 'newPrice_3', 'REF_79', 'False'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_123

Name: TMP_123 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
output_2(uint256) := TMP_123(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
barFee_3
barFee_3
barFee

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_14
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
output_7
output_7
output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_3
swapFee_3
swapFee

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
amountOut_2

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_2
amountOut
Name: amountOut, Num: 2

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
weee
weee
weee
weee
weee
REF_105(uint256) -> cache_14.totalFeeAmount
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_105

Name: cache.totalFeeAmount Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: totalFeeAmount
F: totalFeeAmount
init
end
Finance type key: (-1, -1)

Name: totalFeeAmount Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_106(uint256) -> cache_14.protocolFee
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_106

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: protocolFee
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
F: protocolFee
init
end
Finance type key: (-1, -1)

Name: protocolFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_107(uint256) -> cache_14.feeGrowthGlobal
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_107

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: feeGrowthGlobal
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
init
end
Finance type key: (-1, -1)

Name: feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_109(uint256) -> cache_14.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_109

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentLiquidity
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_110(uint256) -> cache_14.totalFeeAmount
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_110

Name: cache.totalFeeAmount Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: totalFeeAmount
F: totalFeeAmount
init
end
Finance type key: (-1, -1)

Name: totalFeeAmount Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_111(uint256) -> cache_14.protocolFee
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_111

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: protocolFee
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
F: protocolFee
init
end
Finance type key: (-1, -1)

Name: protocolFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_112(uint256) -> cache_14.feeGrowthGlobal
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_112

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: feeGrowthGlobal
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
init
end
Finance type key: (-1, -1)

Name: feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_9(uint256,uint256,uint256,uint256) = LIBRARY_CALL, dest:SwapLib, function:SwapLib.handleFees(uint256,uint24,uint256,uint256,uint256,uint256,uint256,uint256), arguments:['output_7', 'swapFee_3', 'barFee_3', 'REF_109', 'REF_110', 'amountOut_1', 'REF_111', 'REF_112'] 
Written func info: SwapLib, handleFees
Retvar: ('c', [-1], [-1], 'u', 'u', None)
Retvar: ('c', [-1], [-1], 'u', 'u', None)
Retvar: ('c', [-1], [-1], 'u', 'u', None)
Retvar: ('c', [-1], [-1], 'u', 'u', None)
[i]Type for TUPLE_9

Name: TUPLE_9 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_105(uint256)= UNPACK TUPLE_9 index: 0 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_105

Name: REF_105 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: totalFeeAmount
F: totalFeeAmount
init
end
Finance type key: (-1, -1)

Name: totalFeeAmount Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_2(uint256)= UNPACK TUPLE_9 index: 1 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for amountOut

Name: amountOut Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_106(uint256)= UNPACK TUPLE_9 index: 2 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_106

Name: REF_106 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: protocolFee
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
F: protocolFee
init
end
Finance type key: (-1, -1)

Name: protocolFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_107(uint256)= UNPACK TUPLE_9 index: 3 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_107

Name: REF_107 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: feeGrowthGlobal
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
init
end
Finance type key: (-1, -1)

Name: feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newPrice_3
newPrice_3
newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
cache_5

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_5
cache
Name: cache, Num: 5

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
cache_5
cache
Name: cache, Num: 5

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
weee
weee
REF_80(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_80

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_5(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_80 (->cache_5) := newPrice_3(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_80

Name: REF_80 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_6

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_6
cache
Name: cache, Num: 6

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
cache_6
cache
Name: cache, Num: 6

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
weee
weee
REF_81(uint256) -> cache_5.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_81

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Root: cache_5, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_6(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_5'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_81 (->cache_6) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_81

Name: REF_81 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Root: cache_5, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cross_5
cross_5
cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
cache_17
cache
Name: cache, Num: 17

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
weee
cache_17(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14', 'cache_14'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
secondsPerLiquidity_9
secondsPerLiquidity_9
secondsPerLiquidity

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
zeroForOne_1
zeroForOne_1
zeroForOne
Name: zeroForOne, Num: 1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_14
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
ticks_15
ticks_15
ticks

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick, previousTick
Finance Type: undef
cache_14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
weee
REF_113(uint256) -> cache_14.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_113

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentLiquidity
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_114(int24) -> cache_14.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_114

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: nextTickToCross
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_116(int24) -> cache_14.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_116

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: nextTickToCross
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_117(uint256) -> cache_14.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_117

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentLiquidity
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_118(uint256) -> cache_14.feeGrowthGlobal
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_118

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: feeGrowthGlobal
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
init
end
Finance type key: (-1, -1)

Name: feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_10(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_116', 'secondsPerLiquidity_9', 'REF_117', 'REF_118', 'zeroForOne_1'] 
Written func info: Ticks, cross
Retvar: ('c', [-1], [-1], 'u', 'u', None)
Retvar: ('c', [-1], [-1], 'u', 'u', None)
[i]Type for TUPLE_10

Name: TUPLE_10 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_113(uint256)= UNPACK TUPLE_10 index: 0 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_113

Name: REF_113 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentLiquidity
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_114(int24)= UNPACK TUPLE_10 index: 1 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_114

Name: REF_114 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: nextTickToCross
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_14
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
weee
weee
REF_119(uint256) -> cache_14.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_119

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentLiquidity
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_131(bool) = REF_119 == 0
[i]Type for TMP_131

Name: TMP_131 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
cache_16
cache
Name: cache, Num: 16

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
weee
cache_16(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14', 'cache_15'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_14
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_15

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
cache_15
cache
Name: cache, Num: 15

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
End popogation
weee
weee
weee
weee
cache_15
cache
Name: cache, Num: 15

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, totalFeeAmount, protocolFee, feeGrowthGlobal
Finance Type: undef
weee
weee
REF_120(uint256) -> cache_14.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_120

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_122(int24) -> cache_14.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_122

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: nextTickToCross
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_132(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_122'] 
Written func info: TickMath, getSqrtRatioAtTick
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_132

Name: TMP_132 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_133 = CONVERT TMP_132 to uint256
Converting TMP_132

Name: TMP_132 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_133

Name: TMP_133 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_15(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_120 (->cache_15) := TMP_133(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_120

Name: REF_120 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentPrice
F: totalFeeAmount
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
secondsPerLiquidity_9
secondsPerLiquidity_9
secondsPerLiquidity

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_15
cache_15
cache
Name: cache, Num: 15

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
zeroForOne_1
zeroForOne_1
zeroForOne
Name: zeroForOne, Num: 1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_15
ticks_15
ticks

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick, previousTick
Finance Type: undef
cache_15

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_15
cache
Name: cache, Num: 15

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
weee
REF_123(uint256) -> cache_15.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_123

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: currentLiquidity
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_124(int24) -> cache_15.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_124

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: nextTickToCross
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_126(int24) -> cache_15.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_126

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: nextTickToCross
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_127(uint256) -> cache_15.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_127

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: currentLiquidity
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_128(uint256) -> cache_15.feeGrowthGlobal
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_128

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: feeGrowthGlobal
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
init
end
Finance type key: (-1, -1)

Name: feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_11(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_126', 'secondsPerLiquidity_9', 'REF_127', 'REF_128', 'zeroForOne_1'] 
Written func info: Ticks, cross
Retvar: ('c', [-1], [-1], 'u', 'u', None)
Retvar: ('c', [-1], [-1], 'u', 'u', None)
[i]Type for TUPLE_11

Name: TUPLE_11 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_123(uint256)= UNPACK TUPLE_11 index: 0 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_123

Name: REF_123 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: currentLiquidity
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_124(int24)= UNPACK TUPLE_11 index: 1 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_124

Name: REF_124 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: nextTickToCross
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


swapFee_2(uint24) := ϕ(['swapFee_0', 'swapFee_1', 'swapFee_3'])
token0_15(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
token1_16(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
liquidity_10(uint128) := ϕ(['liquidity_0', 'liquidity_5', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9', 'liquidity_4', 'liquidity_3'])
secondsPerLiquidity_7(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
lastObservation_1(uint32) := ϕ(['lastObservation_2', 'lastObservation_0', 'lastObservation_3'])
feeGrowthGlobal0_7(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
feeGrowthGlobal1_7(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
barFee_2(uint256) := ϕ(['barFee_1', 'barFee_0', 'barFee_4', 'barFee_3'])
price_6(uint160) := ϕ(['price_8', 'price_3', 'price_1', 'price_5', 'price_0'])
nearestTick_15(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
ticks_14(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
TUPLE_8(bool,uint256,address,bool) = SOLIDITY_CALL abi.decode()(data_1(bool,uint256,address,bool))
zeroForOne_1(bool)= UNPACK TUPLE_8 index: 0 
inAmount_1(uint256)= UNPACK TUPLE_8 index: 1 
recipient_1(address)= UNPACK TUPLE_8 index: 2 
unwrapBento_1(bool)= UNPACK TUPLE_8 index: 3 
CONDITION zeroForOne_1
TMP_149 = CONVERT price_7 to uint256
TMP_150 = CONVERT liquidity_11 to uint256
REF_133(Ticks.Tick) -> ticks_15[nearestTick_16]
REF_134(int24) -> REF_133.nextTick
TMP_151 = new SwapCache(0,0,0,feeGrowthGlobal0_8,TMP_149,TMP_150,inAmount_1,REF_134)
cache_1(ConcentratedLiquidityPool.SwapCache) := TMP_151(ConcentratedLiquidityPool.SwapCache)
TMP_146 = CONVERT price_7 to uint256
TMP_147 = CONVERT liquidity_11 to uint256
TMP_148 = new SwapCache(0,0,0,feeGrowthGlobal1_8,TMP_146,TMP_147,inAmount_1,nearestTick_16)
cache_2(ConcentratedLiquidityPool.SwapCache) := TMP_148(ConcentratedLiquidityPool.SwapCache)
cache_3(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_1', 'cache_2'])
timestamp_1(uint256) := block.timestamp(uint256)
TMP_96 = CONVERT lastObservation_2 to uint256
TMP_97(uint256) = timestamp_1 (c)- TMP_96
diff_1(uint256) := TMP_97(uint256)
TMP_98(bool) = diff_1 > 0
TMP_99(bool) = liquidity_11 > 0
TMP_100(bool) = TMP_98 && TMP_99
CONDITION TMP_100
TMP_101 = CONVERT timestamp_1 to uint32
lastObservation_3(uint32) := TMP_101(uint32)
TMP_102(uint256) = diff_1 << 128
TMP_103(uint256) = TMP_102 (c)/ liquidity_11
TMP_104 = CONVERT TMP_103 to uint160
secondsPerLiquidity_9(uint160) = secondsPerLiquidity_8 (c)+ TMP_104
amountOut_1(uint256) := ϕ(['amountOut_0', 'amountOut_2'])
cache_4(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_0', 'cache_14'])
REF_61(uint256) -> cache_4.input
TMP_105(bool) = REF_61 != 0
CONDITION TMP_105
REF_129(uint256) -> cache_4.currentPrice
TMP_134 = CONVERT REF_129 to uint160
price_8(uint160) := TMP_134(uint160)
REF_63(int24) -> cache_4.nextTickToCross
TMP_106(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_63'] 
TMP_107 = CONVERT TMP_106 to uint256
nextTickPrice_1(uint256) := TMP_107(uint256)
CONDITION zeroForOne_1
REF_136(int24) -> cache_4.nextTickToCross
REF_137(Ticks.Tick) -> ticks_15[REF_136]
REF_138(int24) -> REF_137.previousTick
newNearestTick_2(int24) := REF_138(int24)
output_1(uint256) := 0(uint256)
REF_135(int24) -> cache_4.nextTickToCross
newNearestTick_1(int24) := REF_135(int24)
cross_1(bool) := False(bool)
newNearestTick_3(int24) := ϕ(['newNearestTick_1', 'newNearestTick_2'])
TMP_135(bool) = nearestTick_16 != newNearestTick_3
CONDITION TMP_135
CONDITION zeroForOne_1
nearestTick_17(int24) := newNearestTick_3(int24)
REF_65(uint256) -> cache_4.currentLiquidity
REF_66(uint256) -> cache_4.currentPrice
TMP_108(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_65', 'nextTickPrice_1', 'REF_66', 'False'] 
maxDx_1(uint256) := TMP_108(uint256)
REF_88(uint256) -> cache_4.currentLiquidity
REF_89(uint256) -> cache_4.currentPrice
TMP_125(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_88', 'REF_89', 'nextTickPrice_1', 'False'] 
maxDy_1(uint256) := TMP_125(uint256)
REF_90(uint256) -> cache_4.input
TMP_126(bool) = REF_90 <= maxDy_1
CONDITION TMP_126
REF_91(uint256) -> cache_4.currentPrice
REF_93(uint256) -> cache_4.input
REF_94(uint256) -> cache_4.currentLiquidity
TMP_127(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['REF_93', '79228162514264337593543950336', 'REF_94'] 
TMP_128(uint256) = REF_91 (c)+ TMP_127
newPrice_scope_0_1(uint256) := TMP_128(uint256)
REF_130(uint256) -> cache_4.currentLiquidity
TMP_136 = CONVERT REF_130 to uint128
liquidity_12(uint128) := TMP_136(uint128)
REF_101(uint256) -> cache_4.currentLiquidity
REF_102(uint256) -> cache_4.currentPrice
TMP_130(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_101', 'REF_102', 'nextTickPrice_1', 'False'] 
output_6(uint256) := TMP_130(uint256)
REF_67(uint256) -> cache_4.input
TMP_109(bool) = REF_67 <= maxDx_1
CONDITION TMP_109
REF_103(uint256) -> cache_4.currentPrice
cache_12(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
REF_103 (->cache_12) := nextTickPrice_1(uint256)
REF_68(uint256) -> cache_4.currentLiquidity
TMP_110(uint256) = REF_68 << 96
liquidityPadded_1(uint256) := TMP_110(uint256)
REF_96(uint256) -> cache_4.currentLiquidity
REF_97(uint256) -> cache_4.currentPrice
TMP_129(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_96', 'REF_97', 'newPrice_scope_0_1', 'False'] 
output_5(uint256) := TMP_129(uint256)
REF_83(uint256) -> cache_4.currentLiquidity
REF_84(uint256) -> cache_4.currentPrice
TMP_124(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_83', 'nextTickPrice_1', 'REF_84', 'False'] 
output_3(uint256) := TMP_124(uint256)
cross_4(bool) := True(bool)
REF_98(uint256) -> cache_4.currentPrice
cache_10(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
REF_98 (->cache_10) := newPrice_scope_0_1(uint256)
REF_85(uint256) -> cache_4.currentPrice
cache_7(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
REF_85 (->cache_7) := nextTickPrice_1(uint256)
REF_70(uint256) -> cache_4.currentPrice
REF_71(uint256) -> cache_4.currentPrice
REF_72(uint256) -> cache_4.input
TMP_111(uint256) = REF_71 (c)* REF_72
TMP_112(uint256) = liquidityPadded_1 (c)+ TMP_111
TMP_113(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDivRoundingUp(uint256,uint256,uint256), arguments:['liquidityPadded_1', 'REF_70', 'TMP_112'] 
TMP_114 = CONVERT TMP_113 to uint256
newPrice_1(uint256) := TMP_114(uint256)
TMP_137 = CONVERT inAmount_1 to uint128
INTERNAL_CALL, ConcentratedLiquidityPool._updateReserves(bool,uint128,uint256)(zeroForOne_1,TMP_137,amountOut_1)
token0_17(address) := ϕ(['token0_25'])
token1_18(address) := ϕ(['token1_27'])
REF_104(uint256) -> cache_12.input
cache_13(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_12'])
REF_104(-> cache_13) = REF_104 (c)- maxDy_1
REF_99(uint256) -> cache_10.input
cache_11(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_10'])
REF_99 (->cache_11) := 0(uint256)
cross_2(bool) := True(bool)
TMP_115(bool) = nextTickPrice_1 <= newPrice_1
REF_73(uint256) -> cache_4.currentPrice
TMP_116(bool) = newPrice_1 < REF_73
TMP_117(bool) = TMP_115 && TMP_116
TMP_118 = ! TMP_117 
CONDITION TMP_118
REF_86(uint256) -> cache_7.input
cache_8(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_7'])
REF_86(-> cache_8) = REF_86 (c)- maxDx_1
REF_131(uint256) -> cache_4.feeGrowthGlobal
REF_132(uint256) -> cache_4.protocolFee
TMP_139 = CONVERT REF_132 to uint128
INTERNAL_CALL, ConcentratedLiquidityPool._updateFees(bool,uint256,uint128)(zeroForOne_1,REF_131,TMP_139)
cache_14(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_13', 'cache_11'])
output_7(uint256) := ϕ(['output_6', 'output_5'])
cross_5(bool) := ϕ(['cross_1', 'cross_4'])
CONDITION zeroForOne_1
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_19,amountOut_1,recipient_1,unwrapBento_1)
newPrice_3(uint256) := ϕ(['newPrice_2', 'newPrice_1'])
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_18,amountOut_1,recipient_1,unwrapBento_1)
REF_75(uint256) -> cache_4.currentPrice
TMP_119(uint256) = liquidityPadded_1 (c)/ REF_75
REF_76(uint256) -> cache_4.input
TMP_120(uint256) = TMP_119 (c)+ REF_76
TMP_121(uint256) = LIBRARY_CALL, dest:UnsafeMath, function:UnsafeMath.divRoundingUp(uint256,uint256), arguments:['liquidityPadded_1', 'TMP_120'] 
TMP_122 = CONVERT TMP_121 to uint160
newPrice_2(uint256) := TMP_122(uint160)
cache_9(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_6', 'cache_0', 'cache_8'])
output_4(uint256) := ϕ(['output_3', 'output_1', 'output_2'])
cross_3(bool) := ϕ(['cross_2', 'cross_1'])
Emit Swap(recipient_1,token0_19,token1_20,inAmount_1,amountOut_1)
Emit Swap(recipient_1,token1_21,token0_20,inAmount_1,amountOut_1)
REF_78(uint256) -> cache_4.currentLiquidity
REF_79(uint256) -> cache_4.currentPrice
TMP_123(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_78', 'newPrice_3', 'REF_79', 'False'] 
output_2(uint256) := TMP_123(uint256)
REF_105(uint256) -> cache_14.totalFeeAmount
REF_106(uint256) -> cache_14.protocolFee
REF_107(uint256) -> cache_14.feeGrowthGlobal
REF_109(uint256) -> cache_14.currentLiquidity
REF_110(uint256) -> cache_14.totalFeeAmount
REF_111(uint256) -> cache_14.protocolFee
REF_112(uint256) -> cache_14.feeGrowthGlobal
TUPLE_9(uint256,uint256,uint256,uint256) = LIBRARY_CALL, dest:SwapLib, function:SwapLib.handleFees(uint256,uint24,uint256,uint256,uint256,uint256,uint256,uint256), arguments:['output_7', 'swapFee_3', 'barFee_3', 'REF_109', 'REF_110', 'amountOut_1', 'REF_111', 'REF_112'] 
REF_105(uint256)= UNPACK TUPLE_9 index: 0 
amountOut_2(uint256)= UNPACK TUPLE_9 index: 1 
REF_106(uint256)= UNPACK TUPLE_9 index: 2 
REF_107(uint256)= UNPACK TUPLE_9 index: 3 
REF_80(uint256) -> cache_4.currentPrice
cache_5(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
REF_80 (->cache_5) := newPrice_3(uint256)
REF_81(uint256) -> cache_5.input
cache_6(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_5'])
REF_81 (->cache_6) := 0(uint256)
CONDITION cross_5
cache_17(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14', 'cache_14'])
REF_113(uint256) -> cache_14.currentLiquidity
REF_114(int24) -> cache_14.nextTickToCross
REF_116(int24) -> cache_14.nextTickToCross
REF_117(uint256) -> cache_14.currentLiquidity
REF_118(uint256) -> cache_14.feeGrowthGlobal
TUPLE_10(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_116', 'secondsPerLiquidity_9', 'REF_117', 'REF_118', 'zeroForOne_1'] 
REF_113(uint256)= UNPACK TUPLE_10 index: 0 
REF_114(int24)= UNPACK TUPLE_10 index: 1 
REF_119(uint256) -> cache_14.currentLiquidity
TMP_131(bool) = REF_119 == 0
CONDITION TMP_131
cache_16(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14', 'cache_15'])
REF_120(uint256) -> cache_14.currentPrice
REF_122(int24) -> cache_14.nextTickToCross
TMP_132(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_122'] 
TMP_133 = CONVERT TMP_132 to uint256
cache_15(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14'])
REF_120 (->cache_15) := TMP_133(uint256)
REF_123(uint256) -> cache_15.currentLiquidity
REF_124(int24) -> cache_15.nextTickToCross
REF_126(int24) -> cache_15.nextTickToCross
REF_127(uint256) -> cache_15.currentLiquidity
REF_128(uint256) -> cache_15.feeGrowthGlobal
TUPLE_11(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_126', 'secondsPerLiquidity_9', 'REF_127', 'REF_128', 'zeroForOne_1'] 
REF_123(uint256)= UNPACK TUPLE_11 index: 0 
REF_124(int24)= UNPACK TUPLE_11 index: 1 


Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
swapFee_2
swapFee

Name: swapFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_15
token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_16
token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
liquidity_10
liquidity

Name: liquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
secondsPerLiquidity_7
secondsPerLiquidity

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lastObservation_1
lastObservation

Name: lastObservation Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_7
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_7
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
barFee_2
barFee

Name: barFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
price_6
price

Name: price Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_15
nearestTick

Name: nearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_14
ticks

Name: ticks Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
swapFee_2(uint24) := ϕ(['swapFee_0', 'swapFee_1', 'swapFee_3'])
Phi
[i]Type for swapFee

Name: swapFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_15(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_16(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_10(uint128) := ϕ(['liquidity_0', 'liquidity_5', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9', 'liquidity_4', 'liquidity_3'])
Phi
[i]Type for liquidity

Name: liquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsPerLiquidity_7(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lastObservation_1(uint32) := ϕ(['lastObservation_2', 'lastObservation_0', 'lastObservation_3'])
Phi
[i]Type for lastObservation

Name: lastObservation Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_7(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_7(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_2(uint256) := ϕ(['barFee_1', 'barFee_0', 'barFee_4', 'barFee_3'])
Phi
[i]Type for barFee

Name: barFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_6(uint160) := ϕ(['price_8', 'price_3', 'price_1', 'price_5', 'price_0'])
Phi
[i]Type for price

Name: price Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_15(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_14(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
data_1
data_1
data
p.norm: u
Name: data, Num: 1

Name: data_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1

Name: unwrapBento Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento
Name: unwrapBento, Num: 1

Name: unwrapBento Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
zeroForOne_1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
zeroForOne_1
zeroForOne
Name: zeroForOne, Num: 1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1

Name: inAmount Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1
inAmount
Name: inAmount, Num: 1

Name: inAmount Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1

Name: recipient Function: swap
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
TUPLE_8(bool,uint256,address,bool) = SOLIDITY_CALL abi.decode()(data_1(bool,uint256,address,bool))
[i]Type for TUPLE_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
zeroForOne_1(bool)= UNPACK TUPLE_8 index: 0 
Finding type for zeroForOne(bool ... )
[i]Type for zeroForOne

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
inAmount_1(uint256)= UNPACK TUPLE_8 index: 1 
Finding type for inAmount(uint256 ... )
[i]Type for inAmount

Name: inAmount Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address)= UNPACK TUPLE_8 index: 2 
Finding type for recipient(address ... )
prev address? -995
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
[i]Type for recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool)= UNPACK TUPLE_8 index: 3 
Finding type for unwrapBento(bool ... )
[i]Type for unwrapBento

Name: unwrapBento Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne
Name: zeroForOne, Num: 1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
inAmount_1
inAmount_1
inAmount
Name: inAmount, Num: 1

Name: inAmount Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_11
liquidity_11
liquidity

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_16
nearestTick_16
nearestTick

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_7
price_7
price

Name: price Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_15
ticks_15
ticks

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick, previousTick
Finance Type: undef
feeGrowthGlobal0_8
feeGrowthGlobal0_8
feeGrowthGlobal0

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_1

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_1
cache
Name: cache, Num: 1

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
TMP_149 = CONVERT price_7 to uint256
Converting price_7

Name: price Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_149

Name: TMP_149 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_150 = CONVERT liquidity_11 to uint256
Converting liquidity_11

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_150

Name: TMP_150 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_133(Ticks.Tick) -> ticks_15[nearestTick_16]
INDEX
[i]Type for REF_133

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick, previousTick
Finance Type: undef
Root: None, Field: None
XXXX
REF_134(int24) -> REF_133.nextTick
MEMBER
init
end
init
end

Name: REF_133 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick, previousTick
Finance Type: undef
Typing member
init
end
[i]Type for REF_134

Name: REF_133.nextTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_133, Field: nextTick
F: nextTick
init
end
Finance type key: (-1, -1)

Name: nextTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_151 = new SwapCache(0,0,0,feeGrowthGlobal0_8,TMP_149,TMP_150,inAmount_1,REF_134)
[i]Type for TMP_151

Name: TMP_151 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_1(ConcentratedLiquidityPool.SwapCache) := TMP_151(ConcentratedLiquidityPool.SwapCache)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
inAmount_1
inAmount_1
inAmount
Name: inAmount, Num: 1

Name: inAmount Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_11
liquidity_11
liquidity

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_16
nearestTick_16
nearestTick

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal1_8
feeGrowthGlobal1_8
feeGrowthGlobal1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_7
price_7
price

Name: price Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_2

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_2
cache
Name: cache, Num: 2

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_146 = CONVERT price_7 to uint256
Converting price_7

Name: price Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_146

Name: TMP_146 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_147 = CONVERT liquidity_11 to uint256
Converting liquidity_11

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_147

Name: TMP_147 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_148 = new SwapCache(0,0,0,feeGrowthGlobal1_8,TMP_146,TMP_147,inAmount_1,nearestTick_16)
[i]Type for TMP_148

Name: TMP_148 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_2(ConcentratedLiquidityPool.SwapCache) := TMP_148(ConcentratedLiquidityPool.SwapCache)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
cache_3
cache
Name: cache, Num: 3

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cache_3(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_1', 'cache_2'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
timestamp_1

Name: timestamp Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
timestamp_1
timestamp
Name: timestamp, Num: 1

Name: timestamp Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
timestamp_1(uint256) := block.timestamp(uint256)
asgn
init
[i]Type for timestamp

Name: timestamp Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
timestamp_1
timestamp_1
timestamp
Name: timestamp, Num: 1

Name: timestamp Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lastObservation_2
lastObservation_2
lastObservation

Name: lastObservation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
diff_1

Name: diff Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
diff_1
diff

Name: diff Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_96 = CONVERT lastObservation_2 to uint256
Converting lastObservation_2

Name: lastObservation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_96

Name: TMP_96 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_97(uint256) = timestamp_1 (c)- TMP_96
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: timestamp Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_96 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_97

Name: TMP_97 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
diff_1(uint256) := TMP_97(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for diff

Name: diff Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidity_11
liquidity_11
liquidity

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
diff_1
diff_1
diff

Name: diff Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_98(bool) = diff_1 > 0
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
[i]Type for TMP_98

Name: TMP_98 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_99(bool) = liquidity_11 > 0
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
[i]Type for TMP_99

Name: TMP_99 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_100(bool) = TMP_98 && TMP_99
[i]Type for TMP_100

Name: TMP_100 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
timestamp_1
timestamp_1
timestamp
Name: timestamp, Num: 1

Name: timestamp Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lastObservation_3

Name: lastObservation Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lastObservation_3
lastObservation

Name: lastObservation Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_101 = CONVERT timestamp_1 to uint32
Converting timestamp_1

Name: timestamp Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_101

Name: TMP_101 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lastObservation_3(uint32) := TMP_101(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lastObservation

Name: lastObservation Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied lastObservation
 To type: None

Name: lastObservation Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidity_11
liquidity_11
liquidity

Name: liquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsPerLiquidity_8
secondsPerLiquidity_8
secondsPerLiquidity

Name: secondsPerLiquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
diff_1
diff_1
diff

Name: diff Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsPerLiquidity_9

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsPerLiquidity_9
secondsPerLiquidity

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_102(uint256) = diff_1 << 128
[i]Type for TMP_102

Name: TMP_102 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_103(uint256) = TMP_102 (c)/ liquidity_11
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_103

Name: TMP_103 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_104 = CONVERT TMP_103 to uint160
Converting TMP_103

Name: TMP_103 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_104

Name: TMP_104 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsPerLiquidity_9(uint160) = secondsPerLiquidity_8 (c)+ TMP_104

Name: secondsPerLiquidity Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_104 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied secondsPerLiquidity
 To type: None

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
amountOut_1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
weee
weee
weee
weee
amountOut_1(uint256) := ϕ(['amountOut_0', 'amountOut_2'])
Phi
[i]Type for amountOut

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_4(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_0', 'cache_14'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_61(uint256) -> cache_4.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_61

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_105(bool) = REF_61 != 0
[i]Type for TMP_105

Name: TMP_105 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
price_8

Name: price Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_8
price

Name: price Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_129(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_129

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_134 = CONVERT REF_129 to uint160
Converting REF_129

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_134

Name: TMP_134 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_8(uint160) := TMP_134(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for price

Name: price Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied price
 To type: None

Name: price Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
nextTickPrice_1

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_63(int24) -> cache_4.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_63

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: nextTickToCross
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_106(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_63'] 
Written func info: TickMath, getSqrtRatioAtTick
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_106

Name: TMP_106 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_107 = CONVERT TMP_106 to uint256
Converting TMP_106

Name: TMP_106 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_107

Name: TMP_107 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nextTickPrice_1(uint256) := TMP_107(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne
Name: zeroForOne, Num: 1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_15
ticks_15
ticks

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick, previousTick
Finance Type: undef
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
newNearestTick_2

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newNearestTick_2
newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_136(int24) -> cache_4.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_136

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: nextTickToCross
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_137(Ticks.Tick) -> ticks_15[REF_136]
INDEX
[i]Type for REF_137

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick, previousTick
Finance Type: undef
Root: None, Field: None
XXXX
REF_138(int24) -> REF_137.previousTick
MEMBER
init
end
init
end

Name: REF_137 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick, previousTick
Finance Type: undef
Typing member
init
end
[i]Type for REF_138

Name: REF_137.previousTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_137, Field: previousTick
F: nextTick
F: previousTick
init
end
Finance type key: (-1, -1)

Name: previousTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newNearestTick_2(int24) := REF_138(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
output_1

Name: output Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
output_1
output

Name: output Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
End popogation
weee
output_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
newNearestTick_1

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newNearestTick_1
newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_135(int24) -> cache_4.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_135

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: nextTickToCross
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newNearestTick_1(int24) := REF_135(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cross_1

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
cross_1
cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
End popogation
weee
cross_1(bool) := False(bool)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
newNearestTick_3
newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
newNearestTick_3(int24) := ϕ(['newNearestTick_1', 'newNearestTick_2'])
Phi
[i]Type for newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_16
nearestTick_16
nearestTick

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newNearestTick_3
newNearestTick_3
newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_135(bool) = nearestTick_16 != newNearestTick_3
[i]Type for TMP_135

Name: TMP_135 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne
Name: zeroForOne, Num: 1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newNearestTick_3
newNearestTick_3
newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_17

Name: nearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nearestTick_17
nearestTick

Name: nearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
nearestTick_17(int24) := newNearestTick_3(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for nearestTick

Name: nearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied nearestTick
 To type: None

Name: nearestTick Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxDx_1

Name: maxDx Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
maxDx_1
maxDx

Name: maxDx Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
REF_65(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_65

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_66(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_66

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_108(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_65', 'nextTickPrice_1', 'REF_66', 'False'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_108

Name: TMP_108 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
maxDx_1(uint256) := TMP_108(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for maxDx

Name: maxDx Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxDy_1

Name: maxDy Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
maxDy_1
maxDy

Name: maxDy Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
REF_88(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_88

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_89(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_89

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_125(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_88', 'REF_89', 'nextTickPrice_1', 'False'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_125

Name: TMP_125 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
maxDy_1(uint256) := TMP_125(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for maxDy

Name: maxDy Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
maxDy_1
maxDy_1
maxDy

Name: maxDy Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
weee
weee
REF_90(uint256) -> cache_4.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_90

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_126(bool) = REF_90 <= maxDy_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_126

Name: TMP_126 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
newPrice_scope_0_1

Name: newPrice_scope_0 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
newPrice_scope_0_1
newPrice_scope_0

Name: newPrice_scope_0 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
REF_91(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_91

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_93(uint256) -> cache_4.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_93

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_94(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_94

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_127(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['REF_93', '79228162514264337593543950336', 'REF_94'] 
Written func info: FullMath, mulDiv
Retvar: ('t', ['1', ' 2'], ['3'], "'u'", "'u'", None)
([-1, -1], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_127

Name: TMP_127 Function: swap
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_128(uint256) = REF_91 (c)+ TMP_127

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_127 Function: swap
Num: -1
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
init
end
lval:u rval:'u'
[i]Type for TMP_128

Name: TMP_128 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newPrice_scope_0_1(uint256) := TMP_128(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newPrice_scope_0

Name: newPrice_scope_0 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
liquidity_12

Name: liquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_12
liquidity

Name: liquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_130(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_130

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_136 = CONVERT REF_130 to uint128
Converting REF_130

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_136

Name: TMP_136 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidity_12(uint128) := TMP_136(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied liquidity
 To type: None

Name: liquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_6

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
output_6
output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
REF_101(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_101

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_102(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_102

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_130(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_101', 'REF_102', 'nextTickPrice_1', 'False'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_130

Name: TMP_130 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
output_6(uint256) := TMP_130(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
maxDx_1
maxDx_1
maxDx

Name: maxDx Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
weee
weee
REF_67(uint256) -> cache_4.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_67

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_109(bool) = REF_67 <= maxDx_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_109

Name: TMP_109 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_12

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_12
cache
Name: cache, Num: 12

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
cache_12
cache
Name: cache, Num: 12

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
weee
weee
REF_103(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_103

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_12(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_103 (->cache_12) := nextTickPrice_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_103

Name: REF_103 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
liquidityPadded_1

Name: liquidityPadded Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidityPadded_1
liquidityPadded
Name: liquidityPadded, Num: 1

Name: liquidityPadded Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_68(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_68

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_110(uint256) = REF_68 << 96
[i]Type for TMP_110

Name: TMP_110 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
liquidityPadded_1(uint256) := TMP_110(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for liquidityPadded

Name: liquidityPadded Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newPrice_scope_0_1
newPrice_scope_0_1
newPrice_scope_0

Name: newPrice_scope_0 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
output_5

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
output_5
output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
REF_96(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_96

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_97(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_97

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_129(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_96', 'REF_97', 'newPrice_scope_0_1', 'False'] 
Written func info: DyDxMath, getDx
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_129

Name: TMP_129 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
output_5(uint256) := TMP_129(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
output_3

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
output_3
output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
REF_83(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_83

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_84(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_84

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_124(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_83', 'nextTickPrice_1', 'REF_84', 'False'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_124

Name: TMP_124 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
output_3(uint256) := TMP_124(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cross_4

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
cross_4
cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
End popogation
weee
cross_4(bool) := True(bool)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newPrice_scope_0_1
newPrice_scope_0_1
newPrice_scope_0

Name: newPrice_scope_0 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
cache_10

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_10
cache
Name: cache, Num: 10

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
cache_10
cache
Name: cache, Num: 10

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
weee
weee
REF_98(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_98

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_10(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_98 (->cache_10) := newPrice_scope_0_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_98

Name: REF_98 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_7

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_7
cache
Name: cache, Num: 7

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
cache_7
cache
Name: cache, Num: 7

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
weee
weee
REF_85(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_85

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_7(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_85 (->cache_7) := nextTickPrice_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_85

Name: REF_85 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidityPadded_1
liquidityPadded_1
liquidityPadded
Name: liquidityPadded, Num: 1

Name: liquidityPadded Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
newPrice_1

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
newPrice_1
newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
weee
REF_70(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_70

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_71

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_72(uint256) -> cache_4.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_72

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_111(uint256) = REF_71 (c)* REF_72
init
end
init
end
A: 'u' B: u
x
lnorm: 'u' rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_111

Name: TMP_111 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_112(uint256) = liquidityPadded_1 (c)+ TMP_111

Name: liquidityPadded Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_111 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
init
end
lval:u rval:u
[i]Type for TMP_112

Name: TMP_112 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_113(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDivRoundingUp(uint256,uint256,uint256), arguments:['liquidityPadded_1', 'REF_70', 'TMP_112'] 
Written func info: FullMath, mulDivRoundingUp
Retvar: ('t', ['1', '2'], ['3'], 0, "'u'", None)
([-1, -1], [-1, -1], 0, "'u'", None, -1)
[i]Type for TMP_113

Name: TMP_113 Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_114 = CONVERT TMP_113 to uint256
Converting TMP_113

Name: TMP_113 Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_114

Name: TMP_114 Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
newPrice_1(uint256) := TMP_114(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
zeroForOne_1
zeroForOne_1
zeroForOne
Name: zeroForOne, Num: 1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1
inAmount_1
inAmount
Name: inAmount, Num: 1

Name: inAmount Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
token0_17
token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_18
token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
TMP_137 = CONVERT inAmount_1 to uint128
Converting inAmount_1

Name: inAmount Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_137

Name: TMP_137 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ConcentratedLiquidityPool._updateReserves(bool,uint128,uint256)(zeroForOne_1,TMP_137,amountOut_1)
init
end
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
zeroForOne_1
zeroForOne
p.norm: u
Name: zeroForOne, Num: 1

Name: zeroForOne_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
inAmount_1
inAmount
p.norm: u
Name: inAmount, Num: 1

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
amountOut_1
amountOut
p.norm: u
Name: amountOut, Num: 1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_24
token0

Name: token0 Function: _updateReserves
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_26
token1

Name: token1 Function: _updateReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
reserve0_25
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_27
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
inAmount_1(uint128) := ϕ(['TMP_137'])
Phi
[i]Type for inAmount

Name: inAmount Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := ϕ(['amountOut_1'])
Phi
[i]Type for amountOut

Name: amountOut Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_24(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _updateReserves
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_26(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _updateReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_25(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
Phi
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_27(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
Phi
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne
p.norm: u
Name: zeroForOne, Num: 1

Name: zeroForOne_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
token0_24
token0_24
token0

Name: token0 Function: _updateReserves
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
balance0_1

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0
Name: balance0, Num: 1

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_190(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_24)
init
end
init
end
[i]Type for TMP_190

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance0_1(uint256) := TMP_190(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance0

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve0_26
reserve0_26
reserve0

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1
inAmount_1
inAmount
p.norm: u
Name: inAmount, Num: 1

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_1

Name: newBalance Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_1
newBalance
Name: newBalance, Num: 1

Name: newBalance Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_191(uint128) = reserve0_26 (c)+ inAmount_1

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_191

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newBalance_1(uint128) := TMP_191(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
token1_26
token1_26
token1

Name: token1 Function: _updateReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance1_1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1
Name: balance1, Num: 1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_196(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_26)
init
end
[[-1], [-1], 'u', 'token1', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_9', 'token1_26', 'token0_24', 'token1_10'])
Phi
[i]Type for token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_2
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance_1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balance_1
balance
Name: balance, Num: 1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_3
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_213 = CONVERT this to address
Converting this
4
[i]Type for TMP_213

Name: TMP_213 Function: _balance
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
High Call: balanceOf
Running querryfc
Written func info: BentoBoxMinimal, balanceOf
Retvar: ('t', ['1'], ['-1'], "'u'", "'u'", None)
([-1, 2], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_214

Name: TMP_214 Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
bento_3(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_2', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_214(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_9', 'token1_26', 'token0_24', 'token1_10'])
Phi
[i]Type for token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_2
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance_1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balance_1
balance
Name: balance, Num: 1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_3
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_213 = CONVERT this to address
Converting this
4
[i]Type for TMP_213

Name: TMP_213 Function: _balance
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
High Call: balanceOf
Running querryfc
Written func info: BentoBoxMinimal, balanceOf
Retvar: ('t', ['1'], ['-1'], "'u'", "'u'", None)
([-1, 2], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_214

Name: TMP_214 Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
bento_3(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_2', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_214(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_196

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance1_1(uint256) := TMP_196(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_1
newBalance_1
newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0
Name: balance0, Num: 1

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_192 = CONVERT newBalance_1 to uint256
Converting newBalance_1

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_192

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(bool) = TMP_192 <= balance0_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_193

Name: TMP_193 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_194(None) = SOLIDITY_CALL require(bool,string)(TMP_193,TOKEN0_MISSING)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve1_30
reserve1_30
reserve1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1
inAmount_1
inAmount
p.norm: u
Name: inAmount, Num: 1

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_scope_0_1

Name: newBalance_scope_0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_scope_0_1
newBalance_scope_0
Name: newBalance_scope_0, Num: 1

Name: newBalance_scope_0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_197(uint128) = reserve1_30 (c)+ inAmount_1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_197

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newBalance_scope_0_1(uint128) := TMP_197(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_1
newBalance_1
newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_27

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_27
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve0_27(uint128) := newBalance_1(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_scope_0_1
newBalance_scope_0_1
newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1
Name: balance1, Num: 1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_198 = CONVERT newBalance_scope_0_1 to uint256
Converting newBalance_scope_0_1

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_198

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_199(bool) = TMP_198 <= balance1_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_199

Name: TMP_199 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_200(None) = SOLIDITY_CALL require(bool,string)(TMP_199,TOKEN1_MISSING)
[i]Type for TMP_200

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
p.norm: u
Name: amountOut, Num: 1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_28
reserve1_28
reserve1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_29

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_29
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_195 = CONVERT amountOut_1 to uint128
Converting amountOut_1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_195

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_29(uint128) = reserve1_28 (c)- TMP_195
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_scope_0_1
newBalance_scope_0_1
newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_31

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_31
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve1_31(uint128) := newBalance_scope_0_1(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
reserve0_30
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_32
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve0_30(uint128) := ϕ(['reserve0_27', 'reserve0_29'])
Phi
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_32(uint128) := ϕ(['reserve1_31', 'reserve1_29'])
Phi
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
p.norm: u
Name: amountOut, Num: 1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_28
reserve0_28
reserve0

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_29

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_29
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_201 = CONVERT amountOut_1 to uint128
Converting amountOut_1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_201

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_29(uint128) = reserve0_28 (c)- TMP_201
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
zeroForOne_1
zeroForOne
p.norm: u
Name: zeroForOne, Num: 1

Name: zeroForOne_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
inAmount_1
inAmount
p.norm: u
Name: inAmount, Num: 1

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
amountOut_1
amountOut
p.norm: u
Name: amountOut, Num: 1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_24
token0

Name: token0 Function: _updateReserves
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_26
token1

Name: token1 Function: _updateReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
reserve0_25
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_27
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
inAmount_1(uint128) := ϕ(['TMP_137'])
Phi
[i]Type for inAmount

Name: inAmount Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_1(uint256) := ϕ(['amountOut_1'])
Phi
[i]Type for amountOut

Name: amountOut Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_24(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: _updateReserves
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_26(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: _updateReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_25(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
Phi
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_27(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
Phi
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne
p.norm: u
Name: zeroForOne, Num: 1

Name: zeroForOne_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
token0_24
token0_24
token0

Name: token0 Function: _updateReserves
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
balance0_1

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0
Name: balance0, Num: 1

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_190(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_24)
init
end
init
end
[i]Type for TMP_190

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance0_1(uint256) := TMP_190(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance0

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve0_26
reserve0_26
reserve0

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1
inAmount_1
inAmount
p.norm: u
Name: inAmount, Num: 1

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_1

Name: newBalance Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_1
newBalance
Name: newBalance, Num: 1

Name: newBalance Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_191(uint128) = reserve0_26 (c)+ inAmount_1

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_191

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newBalance_1(uint128) := TMP_191(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
token1_26
token1_26
token1

Name: token1 Function: _updateReserves
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance1_1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1
Name: balance1, Num: 1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_196(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_26)
init
end
[[-1], [-1], 'u', 'token1', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_9', 'token1_26', 'token0_24', 'token1_10'])
Phi
[i]Type for token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_2
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance_1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balance_1
balance
Name: balance, Num: 1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_3
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_213 = CONVERT this to address
Converting this
4
[i]Type for TMP_213

Name: TMP_213 Function: _balance
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
High Call: balanceOf
Running querryfc
Written func info: BentoBoxMinimal, balanceOf
Retvar: ('t', ['1'], ['-1'], "'u'", "'u'", None)
([-1, 2], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_214

Name: TMP_214 Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
bento_3(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_2', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_214(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_9', 'token1_26', 'token0_24', 'token1_10'])
Phi
[i]Type for token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
bento_2(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_2
bento_2
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _balance
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
balance_1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balance_1
balance
Name: balance, Num: 1

Name: balance Function: _balance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_3
bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_213 = CONVERT this to address
Converting this
4
[i]Type for TMP_213

Name: TMP_213 Function: _balance
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
High Call: balanceOf
Running querryfc
Written func info: BentoBoxMinimal, balanceOf
Retvar: ('t', ['1'], ['-1'], "'u'", "'u'", None)
([-1, 2], [-1, -1], "'u'", "'u'", None, -1)
[i]Type for TMP_214

Name: TMP_214 Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
bento_3(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_2', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _balance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_214(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: _balance
Num: 2
Den: -1
Address: None
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_196

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance1_1(uint256) := TMP_196(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balance1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_1
newBalance_1
newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance0_1
balance0_1
balance0
Name: balance0, Num: 1

Name: balance0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_192 = CONVERT newBalance_1 to uint256
Converting newBalance_1

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_192

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_193(bool) = TMP_192 <= balance0_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_193

Name: TMP_193 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_194(None) = SOLIDITY_CALL require(bool,string)(TMP_193,TOKEN0_MISSING)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
reserve1_30
reserve1_30
reserve1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
inAmount_1
inAmount_1
inAmount
p.norm: u
Name: inAmount, Num: 1

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_scope_0_1

Name: newBalance_scope_0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newBalance_scope_0_1
newBalance_scope_0
Name: newBalance_scope_0, Num: 1

Name: newBalance_scope_0 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_197(uint128) = reserve1_30 (c)+ inAmount_1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_197

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newBalance_scope_0_1(uint128) := TMP_197(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_1
newBalance_1
newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_27

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_27
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve0_27(uint128) := newBalance_1(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_scope_0_1
newBalance_scope_0_1
newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance1_1
balance1_1
balance1
Name: balance1, Num: 1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_198 = CONVERT newBalance_scope_0_1 to uint256
Converting newBalance_scope_0_1

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_198

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_199(bool) = TMP_198 <= balance1_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_199

Name: TMP_199 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_200(None) = SOLIDITY_CALL require(bool,string)(TMP_199,TOKEN1_MISSING)
[i]Type for TMP_200

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
p.norm: u
Name: amountOut, Num: 1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_28
reserve1_28
reserve1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_29

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_29
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_195 = CONVERT amountOut_1 to uint128
Converting amountOut_1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_195

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_29(uint128) = reserve1_28 (c)- TMP_195
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newBalance_scope_0_1
newBalance_scope_0_1
newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_31

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_31
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve1_31(uint128) := newBalance_scope_0_1(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
reserve0_30
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_32
reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve0_30(uint128) := ϕ(['reserve0_27', 'reserve0_29'])
Phi
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_32(uint128) := ϕ(['reserve1_31', 'reserve1_29'])
Phi
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: inAmount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amountOut Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
p.norm: u
Name: amountOut, Num: 1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_28
reserve0_28
reserve0

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_29

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_29
reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_201 = CONVERT amountOut_1 to uint128
Converting amountOut_1

Name: amountOut_1 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_201

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_29(uint128) = reserve0_28 (c)- TMP_201
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_17(address) := ϕ(['token0_25'])
Phi
[i]Type for token0

Name: token0 Function: swap
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_18(address) := ϕ(['token1_27'])
Phi
[i]Type for token1

Name: token1 Function: swap
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_13
cache_13
cache
Name: cache, Num: 13

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
maxDy_1
maxDy_1
maxDy

Name: maxDy Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
cache_13

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_13
cache
Name: cache, Num: 13

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
cache_13
cache
Name: cache, Num: 13

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
weee
weee
REF_104(uint256) -> cache_12.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_104

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: cache_12, Field: input
F: input
init
end
Finance type key: (0, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
cache_13(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_12'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_104(-> cache_13) = REF_104 (c)- maxDy_1
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
Finance type key: (0, 0)
SUB

Name: REF_104 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: maxDy Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:u rval:u
[i]Type for REF_104

Name: REF_104 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: cache_12, Field: input
F: input
init
end
Finance type key: (0, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_11

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_11
cache
Name: cache, Num: 11

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
cache_11
cache
Name: cache, Num: 11

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
weee
weee
REF_99(uint256) -> cache_10.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_99

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Root: cache_10, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_11(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_10'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_99 (->cache_11) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_99

Name: REF_99 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Root: cache_10, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cross_2

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
cross_2
cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
End popogation
weee
cross_2(bool) := True(bool)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newPrice_1
newPrice_1
newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
nextTickPrice_1
nextTickPrice_1
nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
TMP_115(bool) = nextTickPrice_1 <= newPrice_1
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
[i]Type for TMP_115

Name: TMP_115 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_73(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_73

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_116(bool) = newPrice_1 < REF_73
init
end
init
end
A: 0 B: 'u'
x
y
A: 0 B: 'u'
<class 'int'>
<class 'str'>
lnorm: 0 rnorm: 'u'
[i]Type for TMP_116

Name: TMP_116 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117(bool) = TMP_115 && TMP_116
[i]Type for TMP_117

Name: TMP_117 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_118 = ! TMP_117 
[i]Type for TMP_118

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_8
cache_8
cache
Name: cache, Num: 8

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
maxDx_1
maxDx_1
maxDx

Name: maxDx Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
cache_8

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_8
cache
Name: cache, Num: 8

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
cache_8
cache
Name: cache, Num: 8

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
weee
weee
REF_86(uint256) -> cache_7.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_86

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: cache_7, Field: input
F: input
init
end
Finance type key: (0, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
cache_8(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_7'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_86(-> cache_8) = REF_86 (c)- maxDx_1
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
Finance type key: (0, 0)
SUB

Name: REF_86 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: maxDx Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:u rval:u
[i]Type for REF_86

Name: REF_86 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: cache_7, Field: input
F: input
init
end
Finance type key: (0, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne
Name: zeroForOne, Num: 1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
weee
weee
weee
REF_131(uint256) -> cache_4.feeGrowthGlobal
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_131

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: feeGrowthGlobal
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
init
end
Finance type key: (-1, -1)

Name: feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_132(uint256) -> cache_4.protocolFee
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_132

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: protocolFee
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
F: protocolFee
init
end
Finance type key: (-1, -1)

Name: protocolFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_139 = CONVERT REF_132 to uint128
Converting REF_132

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_139

Name: TMP_139 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ConcentratedLiquidityPool._updateFees(bool,uint256,uint128)(zeroForOne_1,REF_131,TMP_139)
init
end
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
zeroForOne_1
zeroForOne
p.norm: u
Name: zeroForOne, Num: 1

Name: zeroForOne_1 Function: _updateFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal_1
feeGrowthGlobal
p.norm: u

Name: feeGrowthGlobal_1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
protocolFee_1
protocolFee
p.norm: u

Name: protocolFee_1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0ProtocolFee_4
token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1ProtocolFee_5
token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal_1(uint256) := ϕ(['REF_131'])
Phi
[i]Type for feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
protocolFee_1(uint128) := ϕ(['TMP_139'])
Phi
[i]Type for protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0ProtocolFee_4(uint128) := ϕ(['token0ProtocolFee_0', 'token0ProtocolFee_5', 'token0ProtocolFee_2', 'token0ProtocolFee_3'])
Phi
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1ProtocolFee_5(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_0', 'token1ProtocolFee_6', 'token1ProtocolFee_2'])
Phi
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne
p.norm: u
Name: zeroForOne, Num: 1

Name: zeroForOne_1 Function: _updateFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal_1
feeGrowthGlobal_1
feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal0_9

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal0_9
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
feeGrowthGlobal0_9(uint256) := feeGrowthGlobal_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied feeGrowthGlobal0
 To type: None

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
protocolFee_1
protocolFee_1
protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0ProtocolFee_4
token0ProtocolFee_4
token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0ProtocolFee_5

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0ProtocolFee_5
token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
token0ProtocolFee_5(uint128) = token0ProtocolFee_4 (c)+ protocolFee_1

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token0ProtocolFee
 To type: None

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal_1
feeGrowthGlobal_1
feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal1_9

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal1_9
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
feeGrowthGlobal1_9(uint256) := feeGrowthGlobal_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied feeGrowthGlobal1
 To type: None

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
protocolFee_1
protocolFee_1
protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1ProtocolFee_5
token1ProtocolFee_5
token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1ProtocolFee_6

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1ProtocolFee_6
token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
token1ProtocolFee_6(uint128) = token1ProtocolFee_5 (c)+ protocolFee_1

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token1ProtocolFee
 To type: None

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
zeroForOne_1
zeroForOne
p.norm: u
Name: zeroForOne, Num: 1

Name: zeroForOne_1 Function: _updateFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal_1
feeGrowthGlobal
p.norm: u

Name: feeGrowthGlobal_1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
protocolFee_1
protocolFee
p.norm: u

Name: protocolFee_1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0ProtocolFee_4
token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1ProtocolFee_5
token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal_1(uint256) := ϕ(['REF_131'])
Phi
[i]Type for feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
protocolFee_1(uint128) := ϕ(['TMP_139'])
Phi
[i]Type for protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0ProtocolFee_4(uint128) := ϕ(['token0ProtocolFee_0', 'token0ProtocolFee_5', 'token0ProtocolFee_2', 'token0ProtocolFee_3'])
Phi
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1ProtocolFee_5(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_0', 'token1ProtocolFee_6', 'token1ProtocolFee_2'])
Phi
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne
p.norm: u
Name: zeroForOne, Num: 1

Name: zeroForOne_1 Function: _updateFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal_1
feeGrowthGlobal_1
feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal0_9

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal0_9
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
feeGrowthGlobal0_9(uint256) := feeGrowthGlobal_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied feeGrowthGlobal0
 To type: None

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
protocolFee_1
protocolFee_1
protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0ProtocolFee_4
token0ProtocolFee_4
token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0ProtocolFee_5

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0ProtocolFee_5
token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
token0ProtocolFee_5(uint128) = token0ProtocolFee_4 (c)+ protocolFee_1

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token0ProtocolFee
 To type: None

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal_1
feeGrowthGlobal_1
feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal1_9

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthGlobal1_9
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
feeGrowthGlobal1_9(uint256) := feeGrowthGlobal_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied feeGrowthGlobal1
 To type: None

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: zeroForOne Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
protocolFee_1
protocolFee_1
protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1ProtocolFee_5
token1ProtocolFee_5
token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1ProtocolFee_6

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1ProtocolFee_6
token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
token1ProtocolFee_6(uint128) = token1ProtocolFee_5 (c)+ protocolFee_1

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied token1ProtocolFee
 To type: None

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
weee
output_7
output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cross_5
cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
weee
cache_14(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_13', 'cache_11'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
output_7(uint256) := ϕ(['output_6', 'output_5'])
Phi
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cross_5(bool) := ϕ(['cross_1', 'cross_4'])
Phi
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
zeroForOne_1
zeroForOne_1
zeroForOne
Name: zeroForOne, Num: 1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento
Name: unwrapBento, Num: 1

Name: unwrapBento Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_19
token1_19
token1

Name: token1 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_19,amountOut_1,recipient_1,unwrapBento_1)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', 'token1', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -995, 'u']

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: u
Name: shares, Num: 1

Name: shares_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
init
end
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: u
Name: shares, Num: 1

Name: shares_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
init
end
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
newPrice_3
newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
weee
newPrice_3(uint256) := ϕ(['newPrice_2', 'newPrice_1'])
Phi
[i]Type for newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amountOut_1
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
unwrapBento_1
unwrapBento_1
unwrapBento
Name: unwrapBento, Num: 1

Name: unwrapBento Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_18
token0_18
token0

Name: token0 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_18,amountOut_1,recipient_1,unwrapBento_1)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', 'token0', [], -1, 1, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, -995, 'u']

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: u
Name: shares, Num: 1

Name: shares_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
init
end
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: u
Name: shares, Num: 1

Name: shares_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
init
end
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento
p.norm: u
Name: unwrapBento, Num: 1

Name: unwrapBento_1 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: -1
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
liquidityPadded_1
liquidityPadded_1
liquidityPadded
Name: liquidityPadded, Num: 1

Name: liquidityPadded Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
newPrice_2

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
newPrice_2
newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
REF_75(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_75

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_119(uint256) = liquidityPadded_1 (c)/ REF_75
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
init
end
init
end
A: u B: 'u'
x
lnorm: u rnorm: 'u'
[i]Type for TMP_119

Name: TMP_119 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_76(uint256) -> cache_4.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_76

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: cache_4, Field: input
F: input
init
end
Finance type key: (0, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_120(uint256) = TMP_119 (c)+ REF_76

Name: TMP_119 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
A: 'u' B: u
x
lnorm: 'u' rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_120

Name: TMP_120 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_121(uint256) = LIBRARY_CALL, dest:UnsafeMath, function:UnsafeMath.divRoundingUp(uint256,uint256), arguments:['liquidityPadded_1', 'TMP_120'] 
Written func info: UnsafeMath, divRoundingUp
Retvar: ('t', ['1'], ['2'], 0, "'u'", None)
([-1], [-1], 0, "'u'", None, -1)
[i]Type for TMP_121

Name: TMP_121 Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_122 = CONVERT TMP_121 to uint160
Converting TMP_121

Name: TMP_121 Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_122

Name: TMP_122 Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
newPrice_2(uint256) := TMP_122(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
cache_9
cache
Name: cache, Num: 9

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
weee
output_4
output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cross_3
cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
weee
cache_9(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_6', 'cache_0', 'cache_8'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
output_4(uint256) := ϕ(['output_3', 'output_1', 'output_2'])
Phi
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cross_3(bool) := ϕ(['cross_2', 'cross_1'])
Phi
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
inAmount_1
inAmount_1
inAmount
Name: inAmount, Num: 1

Name: inAmount Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_20
token1_20
token1

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
token0_19
token0_19
token0

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
inAmount_1
inAmount_1
inAmount
Name: inAmount, Num: 1

Name: inAmount Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0_20
token0_20
token0

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
recipient_1
recipient_1
recipient

Name: recipient Function: swap
Num: 
Den: 
Address: -995
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1_21
token1_21
token1

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_4
cache_4
cache
Name: cache, Num: 4

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
newPrice_3
newPrice_3
newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
output_2

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
output_2
output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
REF_78(uint256) -> cache_4.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_78

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentLiquidity
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_79(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_79

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_123(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_78', 'newPrice_3', 'REF_79', 'False'] 
Written func info: DyDxMath, getDy
Retvar: ('c', [-1], [-1], 'u', 'u', None, 0)
([-1], [-1], 'u', 'u', None, 0)
[i]Type for TMP_123

Name: TMP_123 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
output_2(uint256) := TMP_123(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
barFee_3
barFee_3
barFee

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_14
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
output_7
output_7
output

Name: output Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1
amountOut_1
amountOut
Name: amountOut, Num: 1

Name: amountOut Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
swapFee_3
swapFee_3
swapFee

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
amountOut_2

Name: amountOut Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_2
amountOut

Name: amountOut Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
weee
weee
weee
weee
weee
REF_105(uint256) -> cache_14.totalFeeAmount
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_105

Name: cache.totalFeeAmount Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: totalFeeAmount
F: totalFeeAmount
init
end
Finance type key: (-1, -1)

Name: totalFeeAmount Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_106(uint256) -> cache_14.protocolFee
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_106

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: protocolFee
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
F: protocolFee
init
end
Finance type key: (-1, -1)

Name: protocolFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_107(uint256) -> cache_14.feeGrowthGlobal
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_107

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: feeGrowthGlobal
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
init
end
Finance type key: (-1, -1)

Name: feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_109(uint256) -> cache_14.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_109

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentLiquidity
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_110(uint256) -> cache_14.totalFeeAmount
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_110

Name: cache.totalFeeAmount Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: totalFeeAmount
F: totalFeeAmount
init
end
Finance type key: (-1, -1)

Name: totalFeeAmount Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_111(uint256) -> cache_14.protocolFee
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_111

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: protocolFee
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
F: protocolFee
init
end
Finance type key: (-1, -1)

Name: protocolFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_112(uint256) -> cache_14.feeGrowthGlobal
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_112

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: feeGrowthGlobal
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
init
end
Finance type key: (-1, -1)

Name: feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_9(uint256,uint256,uint256,uint256) = LIBRARY_CALL, dest:SwapLib, function:SwapLib.handleFees(uint256,uint24,uint256,uint256,uint256,uint256,uint256,uint256), arguments:['output_7', 'swapFee_3', 'barFee_3', 'REF_109', 'REF_110', 'amountOut_1', 'REF_111', 'REF_112'] 
Written func info: SwapLib, handleFees
Retvar: ('c', [-1], [-1], 'u', 'u', None)
Retvar: ('c', [-1], [-1], 'u', 'u', None)
Retvar: ('c', [-1], [-1], 'u', 'u', None)
Retvar: ('c', [-1], [-1], 'u', 'u', None)
[i]Type for TUPLE_9

Name: TUPLE_9 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_105(uint256)= UNPACK TUPLE_9 index: 0 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_105

Name: REF_105 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: totalFeeAmount
F: totalFeeAmount
init
end
Finance type key: (-1, -1)

Name: totalFeeAmount Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountOut_2(uint256)= UNPACK TUPLE_9 index: 1 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for amountOut

Name: amountOut Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_106(uint256)= UNPACK TUPLE_9 index: 2 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_106

Name: REF_106 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: protocolFee
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
F: protocolFee
init
end
Finance type key: (-1, -1)

Name: protocolFee Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_107(uint256)= UNPACK TUPLE_9 index: 3 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_107

Name: REF_107 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: feeGrowthGlobal
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
init
end
Finance type key: (-1, -1)

Name: feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newPrice_3
newPrice_3
newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
cache_5

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_5
cache
Name: cache, Num: 5

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
cache_5
cache
Name: cache, Num: 5

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
weee
weee
REF_80(uint256) -> cache_4.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_80

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_5(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_80 (->cache_5) := newPrice_3(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_80

Name: REF_80 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: cache_4, Field: currentPrice
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_6

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_6
cache
Name: cache, Num: 6

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
cache_6
cache
Name: cache, Num: 6

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
weee
weee
REF_81(uint256) -> cache_5.input
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_81

Name: cache.input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Root: cache_5, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_6(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_5'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_81 (->cache_6) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_81

Name: REF_81 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Root: cache_5, Field: input
F: input
init
end
Finance type key: (-1, -1)

Name: input Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cross_5
cross_5
cross

Name: cross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
cache_17
cache
Name: cache, Num: 17

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
weee
cache_17(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14', 'cache_14'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
secondsPerLiquidity_9
secondsPerLiquidity_9
secondsPerLiquidity

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
zeroForOne_1
zeroForOne_1
zeroForOne
Name: zeroForOne, Num: 1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_14
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
ticks_15
ticks_15
ticks

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick, previousTick
Finance Type: undef
cache_14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
weee
REF_113(uint256) -> cache_14.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_113

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentLiquidity
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_114(int24) -> cache_14.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_114

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: nextTickToCross
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_116(int24) -> cache_14.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_116

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: nextTickToCross
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_117(uint256) -> cache_14.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_117

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentLiquidity
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_118(uint256) -> cache_14.feeGrowthGlobal
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_118

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: feeGrowthGlobal
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
init
end
Finance type key: (-1, -1)

Name: feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_10(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_116', 'secondsPerLiquidity_9', 'REF_117', 'REF_118', 'zeroForOne_1'] 
Written func info: Ticks, cross
Retvar: ('c', [-1], [-1], 'u', 'u', None)
Retvar: ('c', [-1], [-1], 'u', 'u', None)
[i]Type for TUPLE_10

Name: TUPLE_10 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_113(uint256)= UNPACK TUPLE_10 index: 0 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_113

Name: REF_113 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentLiquidity
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_114(int24)= UNPACK TUPLE_10 index: 1 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_114

Name: REF_114 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: nextTickToCross
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_14
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
weee
weee
REF_119(uint256) -> cache_14.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_119

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentLiquidity
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_131(bool) = REF_119 == 0
[i]Type for TMP_131

Name: TMP_131 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
cache_16
cache
Name: cache, Num: 16

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
weee
cache_16(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14', 'cache_15'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cache_14
cache_14
cache
Name: cache, Num: 14

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_15

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_15
cache
Name: cache, Num: 15

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
weee
weee
weee
cache_15
cache
Name: cache, Num: 15

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
weee
weee
REF_120(uint256) -> cache_14.currentPrice
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_120

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentPrice
F: totalFeeAmount
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_122(int24) -> cache_14.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_122

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: nextTickToCross
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_132(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_122'] 
Written func info: TickMath, getSqrtRatioAtTick
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_132

Name: TMP_132 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_133 = CONVERT TMP_132 to uint256
Converting TMP_132

Name: TMP_132 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_133

Name: TMP_133 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cache_15(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14'])
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
XXXX
REF_120 (->cache_15) := TMP_133(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_120

Name: REF_120 Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_14, Field: currentPrice
F: totalFeeAmount
F: input
F: currentPrice
init
end
Finance type key: (-1, -1)

Name: currentPrice Function: swap
Num: -1
Den: -1
Address: u
Norm: 'u'
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: data Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
secondsPerLiquidity_9
secondsPerLiquidity_9
secondsPerLiquidity

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cache_15
cache_15
cache
Name: cache, Num: 15

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
zeroForOne_1
zeroForOne_1
zeroForOne
Name: zeroForOne, Num: 1

Name: zeroForOne Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_15
ticks_15
ticks

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: nextTick, previousTick
Finance Type: undef
cache_15

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
cache_15
cache
Name: cache, Num: 15

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
End popogation
weee
weee
weee
weee
weee
weee
weee
weee
REF_123(uint256) -> cache_15.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_123

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: currentLiquidity
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_124(int24) -> cache_15.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_124

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: nextTickToCross
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_126(int24) -> cache_15.nextTickToCross
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_126

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: nextTickToCross
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_127(uint256) -> cache_15.currentLiquidity
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_127

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: currentLiquidity
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_128(uint256) -> cache_15.feeGrowthGlobal
MEMBER
init
end
init
end

Name: cache Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalFeeAmount, input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
Typing member
init
end
[i]Type for REF_128

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: feeGrowthGlobal
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
F: feeGrowthGlobal
init
end
Finance type key: (-1, -1)

Name: feeGrowthGlobal Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_11(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_126', 'secondsPerLiquidity_9', 'REF_127', 'REF_128', 'zeroForOne_1'] 
Written func info: Ticks, cross
Retvar: ('c', [-1], [-1], 'u', 'u', None)
Retvar: ('c', [-1], [-1], 'u', 'u', None)
[i]Type for TUPLE_11

Name: TUPLE_11 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_123(uint256)= UNPACK TUPLE_11 index: 0 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_123

Name: REF_123 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: currentLiquidity
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
F: currentLiquidity
init
end
Finance type key: (-1, -1)

Name: currentLiquidity Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_124(int24)= UNPACK TUPLE_11 index: 1 
([-1], [-1], 'u', 'u', None, -1)
[i]Type for REF_124

Name: REF_124 Function: swap
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: cache_15, Field: nextTickToCross
F: totalFeeAmount
F: input
F: currentPrice
F: nextTickToCross
init
end
Finance type key: (-1, -1)

Name: nextTickToCross Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX



flashSwap
Finding type for (bytes ... )
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


TMP_152(None) = SOLIDITY_CALL revert()()


Rembmered parameters?

Name:  Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name:  Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
TMP_152(None) = SOLIDITY_CALL revert()()
[i]Type for TMP_152

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


TMP_152(None) = SOLIDITY_CALL revert()()


Rembmered parameters?

Name:  Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name:  Function: flashSwap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
TMP_152(None) = SOLIDITY_CALL revert()()
[i]Type for TMP_152

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX



updateBarFee


masterDeployer_2(IMasterDeployer) := ϕ(['masterDeployer_3', 'masterDeployer_0', 'masterDeployer_1'])
TMP_153 = CONVERT masterDeployer_2 to IMasterDeployer
TMP_154(uint256) = HIGH_LEVEL_CALL, dest:TMP_153(IMasterDeployer), function:barFee, arguments:[]  
masterDeployer_3(IMasterDeployer) := ϕ(['masterDeployer_3', 'masterDeployer_2', 'masterDeployer_1'])
barFee_4(uint256) := TMP_154(uint256)


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
masterDeployer_2
masterDeployer
Name: masterDeployer, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
masterDeployer_2(IMasterDeployer) := ϕ(['masterDeployer_3', 'masterDeployer_0', 'masterDeployer_1'])
Phi
[i]Type for masterDeployer

Name: masterDeployer Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
masterDeployer_2
masterDeployer_2
masterDeployer

Name: masterDeployer Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFee_4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFee_4
barFee
Name: barFee, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
masterDeployer_3
masterDeployer
Name: masterDeployer, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_153 = CONVERT masterDeployer_2 to IMasterDeployer
Converting masterDeployer_2

Name: masterDeployer Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_153

Name: TMP_153 Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_154(uint256) = HIGH_LEVEL_CALL, dest:TMP_153(IMasterDeployer), function:barFee, arguments:[]  
High Call: barFee
Running querryfc
Written func info: MasterDeployer, barFee
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_154

Name: TMP_154 Function: updateBarFee
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masterDeployer_3(IMasterDeployer) := ϕ(['masterDeployer_3', 'masterDeployer_2', 'masterDeployer_1'])
Phi
[i]Type for masterDeployer

Name: masterDeployer Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_4(uint256) := TMP_154(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for barFee

Name: barFee Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied barFee
 To type: None

Name: barFee Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


masterDeployer_2(IMasterDeployer) := ϕ(['masterDeployer_3', 'masterDeployer_0', 'masterDeployer_1'])
TMP_153 = CONVERT masterDeployer_2 to IMasterDeployer
TMP_154(uint256) = HIGH_LEVEL_CALL, dest:TMP_153(IMasterDeployer), function:barFee, arguments:[]  
masterDeployer_3(IMasterDeployer) := ϕ(['masterDeployer_3', 'masterDeployer_2', 'masterDeployer_1'])
barFee_4(uint256) := TMP_154(uint256)


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
masterDeployer_2
masterDeployer

Name: masterDeployer Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
masterDeployer_2(IMasterDeployer) := ϕ(['masterDeployer_3', 'masterDeployer_0', 'masterDeployer_1'])
Phi
[i]Type for masterDeployer

Name: masterDeployer Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
masterDeployer_2
masterDeployer_2
masterDeployer

Name: masterDeployer Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFee_4

Name: barFee Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
barFee_4
barFee

Name: barFee Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
masterDeployer_3
masterDeployer

Name: masterDeployer Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_153 = CONVERT masterDeployer_2 to IMasterDeployer
Converting masterDeployer_2

Name: masterDeployer Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_153

Name: TMP_153 Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_154(uint256) = HIGH_LEVEL_CALL, dest:TMP_153(IMasterDeployer), function:barFee, arguments:[]  
High Call: barFee
Running querryfc
Written func info: MasterDeployer, barFee
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TMP_154

Name: TMP_154 Function: updateBarFee
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masterDeployer_3(IMasterDeployer) := ϕ(['masterDeployer_3', 'masterDeployer_2', 'masterDeployer_1'])
Phi
[i]Type for masterDeployer

Name: masterDeployer Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFee_4(uint256) := TMP_154(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for barFee

Name: barFee Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied barFee
 To type: None

Name: barFee Function: updateBarFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef



collectProtocolFee


barFeeTo_2(address) := ϕ(['barFeeTo_3', 'barFeeTo_4', 'barFeeTo_5', 'barFeeTo_0', 'barFeeTo_1'])
token0_21(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
token1_22(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
token0ProtocolFee_1(uint128) := ϕ(['token0ProtocolFee_0', 'token0ProtocolFee_5', 'token0ProtocolFee_2', 'token0ProtocolFee_3'])
token1ProtocolFee_1(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_0', 'token1ProtocolFee_6', 'token1ProtocolFee_2'])
reserve0_22(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
reserve1_23(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
TMP_155(bool) = token0ProtocolFee_2 > 1
CONDITION TMP_155
TMP_156(uint128) = token0ProtocolFee_2 (c)- 1
amount0_1(uint128) := TMP_156(uint128)
token0ProtocolFee_3(uint128) := 1(uint256)
reserve0_24(uint128) = reserve0_23 (c)- amount0_1
TMP_158(bool) = token1ProtocolFee_3 > 1
CONDITION TMP_158
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_22,amount0_1,barFeeTo_3,False)
TMP_159(uint128) = token1ProtocolFee_3 (c)- 1
amount1_1(uint128) := TMP_159(uint128)
token1ProtocolFee_4(uint128) := 1(uint256)
reserve1_26(uint128) = reserve1_25 (c)- amount1_1
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_24,amount1_1,barFeeTo_4,False)


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
barFeeTo_2
barFeeTo
Name: barFeeTo, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
weee
token0_21
token0
Name: token0, Num: 21

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_22
token1
Name: token1, Num: 22

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
token0ProtocolFee_1
token0ProtocolFee
Name: token0ProtocolFee, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1ProtocolFee_1
token1ProtocolFee
Name: token1ProtocolFee, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve0_22
reserve0
Name: reserve0, Num: 22

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_23
reserve1
Name: reserve1, Num: 23

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
barFeeTo_2(address) := ϕ(['barFeeTo_3', 'barFeeTo_4', 'barFeeTo_5', 'barFeeTo_0', 'barFeeTo_1'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: collectProtocolFee
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
token0_21(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: collectProtocolFee
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_22(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: collectProtocolFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
token0ProtocolFee_1(uint128) := ϕ(['token0ProtocolFee_0', 'token0ProtocolFee_5', 'token0ProtocolFee_2', 'token0ProtocolFee_3'])
Phi
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1ProtocolFee_1(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_0', 'token1ProtocolFee_6', 'token1ProtocolFee_2'])
Phi
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_22(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
Phi
[i]Type for reserve0

Name: reserve0 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_23(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
Phi
[i]Type for reserve1

Name: reserve1 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token0ProtocolFee_2
token0ProtocolFee_2
token0ProtocolFee
Name: token0ProtocolFee, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_155(bool) = token0ProtocolFee_2 > 1
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
[i]Type for TMP_155

Name: TMP_155 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token0ProtocolFee_2
token0ProtocolFee_2
token0ProtocolFee

Name: token0ProtocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0
Name: amount0, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_156(uint128) = token0ProtocolFee_2 (c)- 1
SUB1
init
end
init
end
A: u B: 0
lnorm: u rnorm: 0
SUB

Name: token0ProtocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:1
[i]Type for TMP_156

Name: TMP_156 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0_1(uint128) := TMP_156(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount0

Name: amount0 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token0ProtocolFee_3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token0ProtocolFee_3
token0ProtocolFee
Name: token0ProtocolFee, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
token0ProtocolFee_3(uint128) := 1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Copied token0ProtocolFee
 To type: None

Name: token0ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Rembmered parameters?
Propogating parameters and globals to SSA variables...
reserve0_23
reserve0_23
reserve0
Name: reserve0, Num: 23

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_24
reserve0
Name: reserve0, Num: 24

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve0_24(uint128) = reserve0_23 (c)- amount0_1
SUB1
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
SUB

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount0 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve0

Name: reserve0 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token1ProtocolFee_3
token1ProtocolFee_3
token1ProtocolFee
Name: token1ProtocolFee, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_158(bool) = token1ProtocolFee_3 > 1
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
[i]Type for TMP_158

Name: TMP_158 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token0_22
token0_22
token0
Name: token0, Num: 22

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
barFeeTo_3
barFeeTo_3
barFeeTo
Name: barFeeTo, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_22,amount0_1,barFeeTo_3,False)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', 'token0', [], -1, 1, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 3, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: 0

Name: shares_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: 0

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: 0

Name: shares_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: 0

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token1ProtocolFee_3
token1ProtocolFee_3
token1ProtocolFee

Name: token1ProtocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1
Name: amount1, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_159(uint128) = token1ProtocolFee_3 (c)- 1
SUB1
init
end
init
end
A: u B: 0
lnorm: u rnorm: 0
SUB

Name: token1ProtocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:1
[i]Type for TMP_159

Name: TMP_159 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1_1(uint128) := TMP_159(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount1

Name: amount1 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token1ProtocolFee_4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token1ProtocolFee_4
token1ProtocolFee
Name: token1ProtocolFee, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
token1ProtocolFee_4(uint128) := 1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Copied token1ProtocolFee
 To type: None

Name: token1ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
amount1_1
amount1_1
amount1

Name: amount1 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_25
reserve1_25
reserve1
Name: reserve1, Num: 25

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_26

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_26
reserve1
Name: reserve1, Num: 26

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve1_26(uint128) = reserve1_25 (c)- amount1_1
SUB1
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
SUB

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount1 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve1

Name: reserve1 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?
Propogating parameters and globals to SSA variables...
amount1_1
amount1_1
amount1

Name: amount1 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_4
barFeeTo_4
barFeeTo
Name: barFeeTo, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token1_24
token1_24
token1
Name: token1, Num: 24

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_24,amount1_1,barFeeTo_4,False)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', 'token1', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 3, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: 0

Name: shares_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: 0

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: 0

Name: shares_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: 0

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation


barFeeTo_2(address) := ϕ(['barFeeTo_3', 'barFeeTo_4', 'barFeeTo_5', 'barFeeTo_0', 'barFeeTo_1'])
token0_21(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
token1_22(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
token0ProtocolFee_1(uint128) := ϕ(['token0ProtocolFee_0', 'token0ProtocolFee_5', 'token0ProtocolFee_2', 'token0ProtocolFee_3'])
token1ProtocolFee_1(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_0', 'token1ProtocolFee_6', 'token1ProtocolFee_2'])
reserve0_22(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
reserve1_23(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
TMP_155(bool) = token0ProtocolFee_2 > 1
CONDITION TMP_155
TMP_156(uint128) = token0ProtocolFee_2 (c)- 1
amount0_1(uint128) := TMP_156(uint128)
token0ProtocolFee_3(uint128) := 1(uint256)
reserve0_24(uint128) = reserve0_23 (c)- amount0_1
TMP_158(bool) = token1ProtocolFee_3 > 1
CONDITION TMP_158
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_22,amount0_1,barFeeTo_3,False)
TMP_159(uint128) = token1ProtocolFee_3 (c)- 1
amount1_1(uint128) := TMP_159(uint128)
token1ProtocolFee_4(uint128) := 1(uint256)
reserve1_26(uint128) = reserve1_25 (c)- amount1_1
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_24,amount1_1,barFeeTo_4,False)


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
barFeeTo_2
barFeeTo

Name: barFeeTo Function: collectProtocolFee
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
weee
token0_21
token0

Name: token0 Function: collectProtocolFee
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_22
token1

Name: token1 Function: collectProtocolFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
token0ProtocolFee_1
token0ProtocolFee

Name: token0ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token1ProtocolFee_1
token1ProtocolFee

Name: token1ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve0_22
reserve0

Name: reserve0 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_23
reserve1

Name: reserve1 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
barFeeTo_2(address) := ϕ(['barFeeTo_3', 'barFeeTo_4', 'barFeeTo_5', 'barFeeTo_0', 'barFeeTo_1'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: collectProtocolFee
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
token0_21(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: collectProtocolFee
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_22(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: collectProtocolFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
token0ProtocolFee_1(uint128) := ϕ(['token0ProtocolFee_0', 'token0ProtocolFee_5', 'token0ProtocolFee_2', 'token0ProtocolFee_3'])
Phi
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token1ProtocolFee_1(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_0', 'token1ProtocolFee_6', 'token1ProtocolFee_2'])
Phi
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve0_22(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
Phi
[i]Type for reserve0

Name: reserve0 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_23(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
Phi
[i]Type for reserve1

Name: reserve1 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token0ProtocolFee_2
token0ProtocolFee_2
token0ProtocolFee

Name: token0ProtocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_155(bool) = token0ProtocolFee_2 > 1
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
[i]Type for TMP_155

Name: TMP_155 Function: collectProtocolFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token0ProtocolFee_2
token0ProtocolFee_2
token0ProtocolFee

Name: token0ProtocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1

Name: amount0 Function: collectProtocolFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0
Name: amount0, Num: 1

Name: amount0 Function: collectProtocolFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_156(uint128) = token0ProtocolFee_2 (c)- 1
SUB1
init
end
init
end
A: u B: 0
lnorm: u rnorm: 0
SUB

Name: token0ProtocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:1
[i]Type for TMP_156

Name: TMP_156 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount0_1(uint128) := TMP_156(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount0

Name: amount0 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token0ProtocolFee_3

Name: token0ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
token0ProtocolFee_3
token0ProtocolFee

Name: token0ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
weee
token0ProtocolFee_3(uint128) := 1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Copied token0ProtocolFee
 To type: None

Name: token0ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Rembmered parameters?
Propogating parameters and globals to SSA variables...
reserve0_23
reserve0_23
reserve0

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_24

Name: reserve0 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_24
reserve0

Name: reserve0 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve0_24(uint128) = reserve0_23 (c)- amount0_1
SUB1
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
SUB

Name: reserve0 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount0 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve0

Name: reserve0 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve0
 To type: None

Name: reserve0 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token1ProtocolFee_3
token1ProtocolFee_3
token1ProtocolFee

Name: token1ProtocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_158(bool) = token1ProtocolFee_3 > 1
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
[i]Type for TMP_158

Name: TMP_158 Function: collectProtocolFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token0_22
token0_22
token0

Name: token0 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
barFeeTo_3
barFeeTo_3
barFeeTo

Name: barFeeTo Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
amount0_1
amount0_1
amount0

Name: amount0 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_22,amount0_1,barFeeTo_3,False)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', 'token0', [], -1, 1, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 3, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: 0

Name: shares_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: 0

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: 0

Name: shares_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: 0

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token1ProtocolFee_3
token1ProtocolFee_3
token1ProtocolFee

Name: token1ProtocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1

Name: amount1 Function: collectProtocolFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount1_1
amount1
Name: amount1, Num: 1

Name: amount1 Function: collectProtocolFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_159(uint128) = token1ProtocolFee_3 (c)- 1
SUB1
init
end
init
end
A: u B: 0
lnorm: u rnorm: 0
SUB

Name: token1ProtocolFee Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:1
[i]Type for TMP_159

Name: TMP_159 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount1_1(uint128) := TMP_159(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amount1

Name: amount1 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token1ProtocolFee_4

Name: token1ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
token1ProtocolFee_4
token1ProtocolFee

Name: token1ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
weee
token1ProtocolFee_4(uint128) := 1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Copied token1ProtocolFee
 To type: None

Name: token1ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
amount1_1
amount1_1
amount1

Name: amount1 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_25
reserve1_25
reserve1

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_26

Name: reserve1 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
reserve1_26
reserve1

Name: reserve1 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
reserve1_26(uint128) = reserve1_25 (c)- amount1_1
SUB1
init
end
init
end
A: u B: 0
x
lnorm: u rnorm: 0
SUB

Name: reserve1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: amount1 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for reserve1

Name: reserve1 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserve1
 To type: None

Name: reserve1 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?
Propogating parameters and globals to SSA variables...
amount1_1
amount1_1
amount1

Name: amount1 Function: collectProtocolFee
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
barFeeTo_4
barFeeTo_4
barFeeTo

Name: barFeeTo Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token1_24
token1_24
token1

Name: token1 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_24,amount1_1,barFeeTo_4,False)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', 'token1', [], -1, 2, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'barFeeTo', [], -1, 3, 'u']

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: 0

Name: shares_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: 0

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: u

Name: token_1 Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
shares_1
shares
p.norm: 0

Name: shares_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
to_1
to
p.norm: u

Name: to_1 Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
weee
unwrapBento_1
unwrapBento
p.norm: 0

Name: unwrapBento_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
weee
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['token0_22', 'token0_18', 'token1_5', 'token1_24', 'token1_19', 'token0_4'])
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := ϕ(['amount1fees_1', 'amount0_1', 'amount1_1', 'amountOut_1', 'amount0fees_1'])
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['REF_27', 'REF_28', 'barFeeTo_3', 'barFeeTo_4', 'recipient_1'])
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_4(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
unwrapBento_1
unwrapBento_1
unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_5
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_215 = CONVERT this to address
Converting this
4
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
High Call: withdraw
Running querryfc
Written func info: BentoBoxMinimal, withdraw
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bento_5(IBentoBoxMinimal) := ϕ(['bento_4', 'bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
bento_4
bento_4
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
shares_1
shares_1
shares

Name: shares Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
to_1
to_1
to

Name: to Function: _transfer
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _transfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
bento_6
bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_216 = CONVERT this to address
Converting this
4
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Address: 4
Norm: u
LF: ConcentratedLiquidityPool
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
bento_6(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef

Name: shares Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: to Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef

Name: unwrapBento Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation



_ensureTickSpacing



_getAmountsForLiquidity



_updateReserves



_updateFees



_updatePosition



_balance



_transfer



_transferBothTokens



rangeFeeGrowth
Finding type for lowerTick(int24 ... )
Finding type for upperTick(int24 ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
currentTick_1(int24) := nearestTick_18(int24)
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
TMP_224(bool) = lowerTick_1 <= currentTick_1
CONDITION TMP_224
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
feeGrowthBelow0_2(uint256) := REF_167(uint256)
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
feeGrowthBelow1_2(uint256) := REF_168(uint256)
TMP_227(bool) = currentTick_1 < upperTick_1
CONDITION TMP_227
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
feeGrowthAbove0_1(uint256) := REF_171(uint256)
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
feeGrowthAbove1_1(uint256) := REF_172(uint256)
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
feeGrowthInside0_1(uint256) := TMP_231(uint256)
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
feeGrowthInside1_1(uint256) := TMP_233(uint256)
RETURN feeGrowthInside0_1,feeGrowthInside1_1


Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
lowerTick_1
lowerTick
p.norm: u
Name: lowerTick, Num: 1

Name: lowerTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Phi
init
end
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_18
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick
Name: currentTick, Num: 1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_18(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
lower_1 (-> ['ticks'])
lower
Name: lower, Num: 1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
INDEX
[i]Type for REF_165

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
upper_1 (-> ['ticks'])
upper
Name: upper, Num: 1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
INDEX
[i]Type for REF_166

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal0_10
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1
_feeGrowthGlobal0
Name: _feeGrowthGlobal0, Num: 1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal1_10
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1
Name: _feeGrowthGlobal1, Num: 1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_224(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_1
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_2
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_2(uint256) := REF_167(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthBelow0_3
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 3

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow1_3
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 3

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Phi
init
end
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
Phi
init
end
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow1_2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_2
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_2(uint256) := REF_168(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_227(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_1
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_1(uint256) := REF_171(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_2
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove1_1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_1
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_1(uint256) := REF_172(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthAbove0_3
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 3

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove1_3
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 3

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Phi
init
end
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Phi
init
end
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_3
feeGrowthBelow0_3
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_3
feeGrowthAbove0_3
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1
feeGrowthInside0
Name: feeGrowthInside0, Num: 1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside0_1(uint256) := TMP_231(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthBelow1_3
feeGrowthBelow1_3
feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_3
feeGrowthAbove1_3
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1
Name: feeGrowthInside1, Num: 1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside1_1(uint256) := TMP_233(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthInside0_1
feeGrowthInside0_1
feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1_1
feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN feeGrowthInside0_1,feeGrowthInside1_1
init
end
init
end


lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
currentTick_1(int24) := nearestTick_18(int24)
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
TMP_224(bool) = lowerTick_1 <= currentTick_1
CONDITION TMP_224
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
feeGrowthBelow0_2(uint256) := REF_167(uint256)
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
feeGrowthBelow1_2(uint256) := REF_168(uint256)
TMP_227(bool) = currentTick_1 < upperTick_1
CONDITION TMP_227
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
feeGrowthAbove0_1(uint256) := REF_171(uint256)
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
feeGrowthAbove1_1(uint256) := REF_172(uint256)
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
feeGrowthInside0_1(uint256) := TMP_231(uint256)
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
feeGrowthInside1_1(uint256) := TMP_233(uint256)
RETURN feeGrowthInside0_1,feeGrowthInside1_1


Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
lowerTick_1
lowerTick
p.norm: u
Name: lowerTick, Num: 1

Name: lowerTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Phi
init
end
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
upperTick_1(int24) := ϕ(['upper_1', 'REF_45'])
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_6', 'feeGrowthGlobal0_0', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_8'])
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_0', 'feeGrowthGlobal1_6'])
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_18(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_18
nearestTick_18
nearestTick

Name: nearestTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick
Name: currentTick, Num: 1

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_18(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
lower_1 (-> ['ticks'])
lower
Name: lower, Num: 1 (-> ['ticks'])

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
INDEX
[i]Type for REF_165

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ticks_16
ticks_16
ticks

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
upper_1 (-> ['ticks'])
upper
Name: upper, Num: 1 (-> ['ticks'])

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
End popogation
weee
weee
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
INDEX
[i]Type for REF_166

Name: ticks Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal0_10
feeGrowthGlobal0_10
feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal0_1
_feeGrowthGlobal0
Name: _feeGrowthGlobal0, Num: 1

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthGlobal1_10
feeGrowthGlobal1_10
feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1
Name: _feeGrowthGlobal1, Num: 1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_224(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_1
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 1

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_1(uint256) := TMP_225(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_1
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_1(uint256) := TMP_226(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow0_2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_2
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 2

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow0_2(uint256) := REF_167(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthBelow0_3
feeGrowthBelow0
Name: feeGrowthBelow0, Num: 3

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow1_3
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 3

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Phi
init
end
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_2', 'feeGrowthBelow1_1'])
Phi
init
end
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthBelow1_2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow1_2
feeGrowthBelow1
Name: feeGrowthBelow1, Num: 2

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthBelow1_2(uint256) := REF_168(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_227(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_1
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 1

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_1(uint256) := REF_171(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove0_2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_2
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 2

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside0
F: feeGrowthOutside0
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
feeGrowthAbove1_1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_1
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_1(uint256) := REF_172(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_2
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 2

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
MEMBER
init
end
init
end

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Typing member
init
end
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: feeGrowthOutside1
F: feeGrowthOutside0
F: feeGrowthOutside1
init
end
Finance type key: (-1, -1)

Name: feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
feeGrowthAbove0_3
feeGrowthAbove0
Name: feeGrowthAbove0, Num: 3

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove1_3
feeGrowthAbove1
Name: feeGrowthAbove1, Num: 3

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Phi
init
end
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Phi
init
end
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeGrowthGlobal0_1
_feeGrowthGlobal0_1
_feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthBelow0_3
feeGrowthBelow0_3
feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove0_3
feeGrowthAbove0_3
feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside0_1
feeGrowthInside0
Name: feeGrowthInside0, Num: 1

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside0_1(uint256) := TMP_231(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthBelow1_3
feeGrowthBelow1_3
feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthAbove1_3
feeGrowthAbove1_3
feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_feeGrowthGlobal1_1
_feeGrowthGlobal1_1
_feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1
Name: feeGrowthInside1, Num: 1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
feeGrowthInside1_1(uint256) := TMP_233(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeFeeGrowth
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeGrowthInside0_1
feeGrowthInside0_1
feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeGrowthInside1_1
feeGrowthInside1_1
feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN feeGrowthInside0_1,feeGrowthInside1_1
init
end
init
end



rangeSecondsInside
Finding type for lowerTick(int24 ... )
Finding type for upperTick(int24 ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


secondsPerLiquidity_10(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
nearestTick_19(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
ticks_17(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
currentTick_1(int24) := nearestTick_19(int24)
REF_175(Ticks.Tick) -> ticks_17[lowerTick_1]
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_175(Ticks.Tick)
REF_176(Ticks.Tick) -> ticks_17[upperTick_1]
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_176(Ticks.Tick)
secondsGlobal_1(uint256) := secondsPerLiquidity_10(uint160)
TMP_234(bool) = lowerTick_1 <= currentTick_1
CONDITION TMP_234
REF_177(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
secondsBelow_2(uint256) := REF_177(uint160)
secondsBelow_3(uint256) := ϕ(['secondsBelow_2', 'secondsBelow_1'])
REF_178(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
TMP_235(uint256) = secondsGlobal_1 (c)- REF_178
secondsBelow_1(uint256) := TMP_235(uint256)
TMP_236(bool) = currentTick_1 < upperTick_1
CONDITION TMP_236
REF_179(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
secondsAbove_2(uint256) := REF_179(uint160)
secondsAbove_3(uint256) := ϕ(['secondsAbove_2', 'secondsAbove_1'])
REF_180(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
TMP_237(uint256) = secondsGlobal_1 (c)- REF_180
secondsAbove_1(uint256) := TMP_237(uint256)
TMP_238(uint256) = secondsGlobal_1 (c)- secondsBelow_3
TMP_239(uint256) = TMP_238 (c)- secondsAbove_3
secondsInside_1(uint256) := TMP_239(uint256)


Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
secondsPerLiquidity_10
secondsPerLiquidity
Name: secondsPerLiquidity, Num: 10

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_19
nearestTick
Name: nearestTick, Num: 19

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_17
ticks
Name: ticks, Num: 17

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
secondsPerLiquidity_10(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_19(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_17(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_19
nearestTick_19
nearestTick

Name: nearestTick Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick
Name: currentTick, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_19(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_17
ticks_17
ticks

Name: ticks Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick
p.norm: u
Name: lowerTick, Num: 1

Name: lowerTick_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])
lower
Name: lower, Num: 1 (-> ['ticks'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_175(Ticks.Tick) -> ticks_17[lowerTick_1]
INDEX
[i]Type for REF_175

Name: ticks Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_175(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_17
ticks_17
ticks

Name: ticks Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])
upper
Name: upper, Num: 1 (-> ['ticks'])

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_176(Ticks.Tick) -> ticks_17[upperTick_1]
INDEX
[i]Type for REF_176

Name: ticks Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_176(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
secondsPerLiquidity_10
secondsPerLiquidity_10
secondsPerLiquidity

Name: secondsPerLiquidity Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsGlobal_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsGlobal_1
secondsGlobal
Name: secondsGlobal, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
secondsGlobal_1(uint256) := secondsPerLiquidity_10(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for secondsGlobal

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick
p.norm: u
Name: lowerTick, Num: 1

Name: lowerTick_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_234(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_234

Name: TMP_234 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsBelow_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsBelow_2
secondsBelow
Name: secondsBelow, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_177(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
MEMBER
init
end
init
end

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Typing member
OUT KEY: rangeSecondsInside_lower_secondsPerLiquidityOutside
OUT KEY: rangeSecondsInside_lower_secondsPerLiquidityOutside
No field found
[i]Type for REF_177

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: secondsPerLiquidityOutside
init
end
Finance type key: (-1, -1)
XXXX
secondsBelow_2(uint256) := REF_177(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
secondsBelow_3
secondsBelow
Name: secondsBelow, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
secondsBelow_3(uint256) := ϕ(['secondsBelow_2', 'secondsBelow_1'])
Phi
init
end
[i]Type for secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
secondsGlobal_1
secondsGlobal_1
secondsGlobal

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsBelow_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsBelow_1
secondsBelow
Name: secondsBelow, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_178(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
MEMBER
init
end
init
end

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
Typing member

Name: secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_178

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: secondsPerLiquidityOutside
F: secondsPerLiquidityOutside
init
end
Finance type key: (-1, -1)

Name: secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_235(uint256) = secondsGlobal_1 (c)- REF_178
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_235

Name: TMP_235 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsBelow_1(uint256) := TMP_235(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick
p.norm: u
Name: upperTick, Num: 1

Name: upperTick_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_236(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_236

Name: TMP_236 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsAbove_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsAbove_2
secondsAbove
Name: secondsAbove, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_179(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
MEMBER
init
end
init
end

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Typing member
OUT KEY: rangeSecondsInside_upper_secondsPerLiquidityOutside
OUT KEY: rangeSecondsInside_upper_secondsPerLiquidityOutside
No field found
[i]Type for REF_179

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: secondsPerLiquidityOutside
init
end
Finance type key: (-1, -1)
XXXX
secondsAbove_2(uint256) := REF_179(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
secondsAbove_3
secondsAbove
Name: secondsAbove, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
secondsAbove_3(uint256) := ϕ(['secondsAbove_2', 'secondsAbove_1'])
Phi
init
end
[i]Type for secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
secondsGlobal_1
secondsGlobal_1
secondsGlobal

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsAbove_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsAbove_1
secondsAbove
Name: secondsAbove, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_180(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
MEMBER
init
end
init
end

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
Typing member

Name: secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_180

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: secondsPerLiquidityOutside
F: secondsPerLiquidityOutside
init
end
Finance type key: (-1, -1)

Name: secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_237(uint256) = secondsGlobal_1 (c)- REF_180
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_237

Name: TMP_237 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsAbove_1(uint256) := TMP_237(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
secondsAbove_3
secondsAbove_3
secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsBelow_3
secondsBelow_3
secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsGlobal_1
secondsGlobal_1
secondsGlobal

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsInside_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsInside_1
secondsInside
Name: secondsInside, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_238(uint256) = secondsGlobal_1 (c)- secondsBelow_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_238

Name: TMP_238 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_239(uint256) = TMP_238 (c)- secondsAbove_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_238 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_239

Name: TMP_239 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsInside_1(uint256) := TMP_239(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for secondsInside

Name: secondsInside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


secondsPerLiquidity_10(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
nearestTick_19(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
ticks_17(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
currentTick_1(int24) := nearestTick_19(int24)
REF_175(Ticks.Tick) -> ticks_17[lowerTick_1]
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_175(Ticks.Tick)
REF_176(Ticks.Tick) -> ticks_17[upperTick_1]
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_176(Ticks.Tick)
secondsGlobal_1(uint256) := secondsPerLiquidity_10(uint160)
TMP_234(bool) = lowerTick_1 <= currentTick_1
CONDITION TMP_234
REF_177(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
secondsBelow_2(uint256) := REF_177(uint160)
secondsBelow_3(uint256) := ϕ(['secondsBelow_2', 'secondsBelow_1'])
REF_178(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
TMP_235(uint256) = secondsGlobal_1 (c)- REF_178
secondsBelow_1(uint256) := TMP_235(uint256)
TMP_236(bool) = currentTick_1 < upperTick_1
CONDITION TMP_236
REF_179(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
secondsAbove_2(uint256) := REF_179(uint160)
secondsAbove_3(uint256) := ϕ(['secondsAbove_2', 'secondsAbove_1'])
REF_180(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
TMP_237(uint256) = secondsGlobal_1 (c)- REF_180
secondsAbove_1(uint256) := TMP_237(uint256)
TMP_238(uint256) = secondsGlobal_1 (c)- secondsBelow_3
TMP_239(uint256) = TMP_238 (c)- secondsAbove_3
secondsInside_1(uint256) := TMP_239(uint256)


Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
secondsPerLiquidity_10
secondsPerLiquidity

Name: secondsPerLiquidity Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_19
nearestTick

Name: nearestTick Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_17
ticks

Name: ticks Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
secondsPerLiquidity_10(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_19(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_17(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_19
nearestTick_19
nearestTick

Name: nearestTick Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: currentTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick
Name: currentTick, Num: 1

Name: currentTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_19(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_17
ticks_17
ticks

Name: ticks Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: lower Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
lower_1 (-> ['ticks'])
lower
Name: lower, Num: 1 (-> ['ticks'])

Name: lower Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
End popogation
weee
weee
REF_175(Ticks.Tick) -> ticks_17[lowerTick_1]
INDEX
[i]Type for REF_175

Name: ticks Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_175(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_17
ticks_17
ticks

Name: ticks Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: upper Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
upper_1 (-> ['ticks'])
upper
Name: upper, Num: 1 (-> ['ticks'])

Name: upper Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
End popogation
weee
weee
REF_176(Ticks.Tick) -> ticks_17[upperTick_1]
INDEX
[i]Type for REF_176

Name: ticks Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_176(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
secondsPerLiquidity_10
secondsPerLiquidity_10
secondsPerLiquidity

Name: secondsPerLiquidity Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsGlobal_1

Name: secondsGlobal Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsGlobal_1
secondsGlobal
Name: secondsGlobal, Num: 1

Name: secondsGlobal Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
secondsGlobal_1(uint256) := secondsPerLiquidity_10(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for secondsGlobal

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_234(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_234

Name: TMP_234 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
secondsBelow_2

Name: secondsBelow Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsBelow_2
secondsBelow
Name: secondsBelow, Num: 2

Name: secondsBelow Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_177(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
MEMBER
init
end
init
end

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
Typing member
init
end
[i]Type for REF_177

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: secondsPerLiquidityOutside
F: secondsPerLiquidityOutside
init
end
Finance type key: (-1, -1)

Name: secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsBelow_2(uint256) := REF_177(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
secondsBelow_3
secondsBelow
Name: secondsBelow, Num: 3

Name: secondsBelow Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
secondsBelow_3(uint256) := ϕ(['secondsBelow_2', 'secondsBelow_1'])
Phi
init
end
[i]Type for secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
secondsGlobal_1
secondsGlobal_1
secondsGlobal

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsBelow_1

Name: secondsBelow Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsBelow_1
secondsBelow
Name: secondsBelow, Num: 1

Name: secondsBelow Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_178(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
MEMBER
init
end
init
end

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
Typing member
init
end
[i]Type for REF_178

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: secondsPerLiquidityOutside
F: secondsPerLiquidityOutside
init
end
Finance type key: (-1, -1)

Name: secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_235(uint256) = secondsGlobal_1 (c)- REF_178
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_235

Name: TMP_235 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsBelow_1(uint256) := TMP_235(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_236(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_236

Name: TMP_236 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
secondsAbove_2

Name: secondsAbove Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsAbove_2
secondsAbove
Name: secondsAbove, Num: 2

Name: secondsAbove Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_179(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
MEMBER
init
end
init
end

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
Typing member
init
end
[i]Type for REF_179

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: secondsPerLiquidityOutside
F: secondsPerLiquidityOutside
init
end
Finance type key: (-1, -1)

Name: secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsAbove_2(uint256) := REF_179(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
secondsAbove_3
secondsAbove
Name: secondsAbove, Num: 3

Name: secondsAbove Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
secondsAbove_3(uint256) := ϕ(['secondsAbove_2', 'secondsAbove_1'])
Phi
init
end
[i]Type for secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
secondsGlobal_1
secondsGlobal_1
secondsGlobal

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsAbove_1

Name: secondsAbove Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsAbove_1
secondsAbove
Name: secondsAbove, Num: 1

Name: secondsAbove Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_180(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
MEMBER
init
end
init
end

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
Typing member
init
end
[i]Type for REF_180

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: secondsPerLiquidityOutside
F: secondsPerLiquidityOutside
init
end
Finance type key: (-1, -1)

Name: secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_237(uint256) = secondsGlobal_1 (c)- REF_180
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_237

Name: TMP_237 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsAbove_1(uint256) := TMP_237(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
secondsAbove_3
secondsAbove_3
secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsBelow_3
secondsBelow_3
secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsGlobal_1
secondsGlobal_1
secondsGlobal

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsInside_1

Name: secondsInside Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsInside_1
secondsInside
Name: secondsInside, Num: 1

Name: secondsInside Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_238(uint256) = secondsGlobal_1 (c)- secondsBelow_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_238

Name: TMP_238 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_239(uint256) = TMP_238 (c)- secondsAbove_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_238 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_239

Name: TMP_239 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsInside_1(uint256) := TMP_239(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for secondsInside

Name: secondsInside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


secondsPerLiquidity_10(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
nearestTick_19(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
ticks_17(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
currentTick_1(int24) := nearestTick_19(int24)
REF_175(Ticks.Tick) -> ticks_17[lowerTick_1]
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_175(Ticks.Tick)
REF_176(Ticks.Tick) -> ticks_17[upperTick_1]
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_176(Ticks.Tick)
secondsGlobal_1(uint256) := secondsPerLiquidity_10(uint160)
TMP_234(bool) = lowerTick_1 <= currentTick_1
CONDITION TMP_234
REF_177(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
secondsBelow_2(uint256) := REF_177(uint160)
secondsBelow_3(uint256) := ϕ(['secondsBelow_2', 'secondsBelow_1'])
REF_178(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
TMP_235(uint256) = secondsGlobal_1 (c)- REF_178
secondsBelow_1(uint256) := TMP_235(uint256)
TMP_236(bool) = currentTick_1 < upperTick_1
CONDITION TMP_236
REF_179(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
secondsAbove_2(uint256) := REF_179(uint160)
secondsAbove_3(uint256) := ϕ(['secondsAbove_2', 'secondsAbove_1'])
REF_180(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
TMP_237(uint256) = secondsGlobal_1 (c)- REF_180
secondsAbove_1(uint256) := TMP_237(uint256)
TMP_238(uint256) = secondsGlobal_1 (c)- secondsBelow_3
TMP_239(uint256) = TMP_238 (c)- secondsAbove_3
secondsInside_1(uint256) := TMP_239(uint256)


Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
secondsPerLiquidity_10
secondsPerLiquidity

Name: secondsPerLiquidity Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_19
nearestTick

Name: nearestTick Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
ticks_17
ticks

Name: ticks Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
secondsPerLiquidity_10(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_19(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticks_17(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8', 'ticks_16', 'ticks_15'])
Phi
[i]Type for ticks

Name: ticks Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
nearestTick_19
nearestTick_19
nearestTick

Name: nearestTick Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1

Name: currentTick Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentTick_1
currentTick

Name: currentTick Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
currentTick_1(int24) := nearestTick_19(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for currentTick

Name: currentTick Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_17
ticks_17
ticks

Name: ticks Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lower_1 (-> ['ticks'])

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
End popogation
weee
weee
REF_175(Ticks.Tick) -> ticks_17[lowerTick_1]
INDEX
[i]Type for REF_175

Name: ticks Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_175(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lower

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
ticks_17
ticks_17
ticks

Name: ticks Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upper_1 (-> ['ticks'])

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
End popogation
weee
weee
REF_176(Ticks.Tick) -> ticks_17[upperTick_1]
INDEX
[i]Type for REF_176

Name: ticks Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_176(Ticks.Tick)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for upper

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
secondsPerLiquidity_10
secondsPerLiquidity_10
secondsPerLiquidity

Name: secondsPerLiquidity Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsGlobal_1

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsGlobal_1
secondsGlobal

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
secondsGlobal_1(uint256) := secondsPerLiquidity_10(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for secondsGlobal

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lowerTick_1
lowerTick_1
lowerTick

Name: lowerTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_234(bool) = lowerTick_1 <= currentTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_234

Name: TMP_234 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
secondsBelow_2

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsBelow_2
secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_177(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
MEMBER
init
end
init
end

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
Typing member
init
end
[i]Type for REF_177

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: secondsPerLiquidityOutside
F: secondsPerLiquidityOutside
init
end
Finance type key: (-1, -1)

Name: secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsBelow_2(uint256) := REF_177(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
secondsBelow_3
secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
secondsBelow_3(uint256) := ϕ(['secondsBelow_2', 'secondsBelow_1'])
Phi
[i]Type for secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
lower_1 (-> ['ticks'])
lower_1 (-> ['ticks'])
lower

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
secondsGlobal_1
secondsGlobal_1
secondsGlobal

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsBelow_1

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsBelow_1
secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_178(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
MEMBER
init
end
init
end

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
Typing member
init
end
[i]Type for REF_178

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: lower_1 (-> ['ticks']), Field: secondsPerLiquidityOutside
F: secondsPerLiquidityOutside
init
end
Finance type key: (-1, -1)

Name: secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_235(uint256) = secondsGlobal_1 (c)- REF_178
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_235

Name: TMP_235 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsBelow_1(uint256) := TMP_235(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
currentTick_1
currentTick_1
currentTick

Name: currentTick Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
upperTick_1
upperTick_1
upperTick

Name: upperTick Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_236(bool) = currentTick_1 < upperTick_1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
[i]Type for TMP_236

Name: TMP_236 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
secondsAbove_2

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsAbove_2
secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_179(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
MEMBER
init
end
init
end

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
Typing member
init
end
[i]Type for REF_179

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: secondsPerLiquidityOutside
F: secondsPerLiquidityOutside
init
end
Finance type key: (-1, -1)

Name: secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsAbove_2(uint256) := REF_179(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
secondsAbove_3
secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
secondsAbove_3(uint256) := ϕ(['secondsAbove_2', 'secondsAbove_1'])
Phi
[i]Type for secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
upper_1 (-> ['ticks'])
upper_1 (-> ['ticks'])
upper

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
secondsGlobal_1
secondsGlobal_1
secondsGlobal

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsAbove_1

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsAbove_1
secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
REF_180(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
MEMBER
init
end
init
end

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: secondsPerLiquidityOutside
Finance Type: undef
Typing member
init
end
[i]Type for REF_180

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: upper_1 (-> ['ticks']), Field: secondsPerLiquidityOutside
F: secondsPerLiquidityOutside
init
end
Finance type key: (-1, -1)

Name: secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_237(uint256) = secondsGlobal_1 (c)- REF_180
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_237

Name: TMP_237 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsAbove_1(uint256) := TMP_237(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: lowerTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: upperTick Function: rangeSecondsInside
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
secondsAbove_3
secondsAbove_3
secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsBelow_3
secondsBelow_3
secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsGlobal_1
secondsGlobal_1
secondsGlobal

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsInside_1

Name: secondsInside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
secondsInside_1
secondsInside

Name: secondsInside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_238(uint256) = secondsGlobal_1 (c)- secondsBelow_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_238

Name: TMP_238 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_239(uint256) = TMP_238 (c)- secondsAbove_3
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: TMP_238 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_239

Name: TMP_239 Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
secondsInside_1(uint256) := TMP_239(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for secondsInside

Name: secondsInside Function: rangeSecondsInside
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX



getAssets


token0_29(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
token1_33(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
TMP_241 = new address[](2)
assets_1(address[]) := TMP_241(address)
REF_181(address) -> assets_1[0]
assets_2(address[]) := ϕ(['assets_1'])
REF_181 (->assets_2) := token0_29(address)
REF_182(address) -> assets_2[1]
assets_3(address[]) := ϕ(['assets_2'])
REF_182 (->assets_3) := token1_33(address)


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
token0_29
token0
Name: token0, Num: 29

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_33
token1
Name: token1, Num: 33

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
token0_29(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: getAssets
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_33(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: getAssets
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
assets_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assets_1
assets
Name: assets, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_241 = new address[](2)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assets_1(address[]) := TMP_241(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for assets

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token0_29
token0_29
token0

Name: token0 Function: getAssets
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
assets_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assets_2
assets
Name: assets, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
assets_2
assets
Name: assets, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_181(address) -> assets_1[0]
INDEX
[i]Type for REF_181

Name: REF_181 Function: getAssets
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
assets_2(address[]) := ϕ(['assets_1'])
Phi
[i]Type for assets

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_181 (->assets_2) := token0_29(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_181

Name: REF_181 Function: getAssets
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token1_33
token1_33
token1

Name: token1 Function: getAssets
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
assets_3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assets_3
assets
Name: assets, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
assets_3
assets
Name: assets, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_182(address) -> assets_2[1]
INDEX
[i]Type for REF_182

Name: REF_182 Function: getAssets
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
assets_3(address[]) := ϕ(['assets_2'])
Phi
[i]Type for assets

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_182 (->assets_3) := token1_33(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_182

Name: REF_182 Function: getAssets
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX


token0_29(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
token1_33(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
TMP_241 = new address[](2)
assets_1(address[]) := TMP_241(address)
REF_181(address) -> assets_1[0]
assets_2(address[]) := ϕ(['assets_1'])
REF_181 (->assets_2) := token0_29(address)
REF_182(address) -> assets_2[1]
assets_3(address[]) := ϕ(['assets_2'])
REF_182 (->assets_3) := token1_33(address)


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
token0_29
token0

Name: token0 Function: getAssets
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_33
token1

Name: token1 Function: getAssets
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
token0_29(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: getAssets
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_33(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: getAssets
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
assets_1

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assets_1
assets
Name: assets, Num: 1

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_241 = new address[](2)
[i]Type for TMP_241

Name: TMP_241 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
assets_1(address[]) := TMP_241(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for assets

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token0_29
token0_29
token0

Name: token0 Function: getAssets
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
assets_2

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assets_2
assets
Name: assets, Num: 2

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
assets_2
assets
Name: assets, Num: 2

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_181(address) -> assets_1[0]
INDEX
[i]Type for REF_181

Name: REF_181 Function: getAssets
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
assets_2(address[]) := ϕ(['assets_1'])
Phi
[i]Type for assets

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_181 (->assets_2) := token0_29(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_181

Name: REF_181 Function: getAssets
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token1_33
token1_33
token1

Name: token1 Function: getAssets
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
assets_3

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assets_3
assets
Name: assets, Num: 3

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
assets_3
assets
Name: assets, Num: 3

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_182(address) -> assets_2[1]
INDEX
[i]Type for REF_182

Name: REF_182 Function: getAssets
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
assets_3(address[]) := ϕ(['assets_2'])
Phi
[i]Type for assets

Name: assets Function: getAssets
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_182 (->assets_3) := token1_33(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_182

Name: REF_182 Function: getAssets
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX



getAmountOut
Finding type for (bytes ... )
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


TMP_242(None) = SOLIDITY_CALL revert()()


Rembmered parameters?

Name:  Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name:  Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
TMP_242(None) = SOLIDITY_CALL revert()()
[i]Type for TMP_242

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


TMP_242(None) = SOLIDITY_CALL revert()()


Rembmered parameters?

Name:  Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name:  Function: getAmountOut
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
TMP_242(None) = SOLIDITY_CALL revert()()
[i]Type for TMP_242

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX



getImmutables


MAX_TICK_LIQUIDITY_6(uint128) := ϕ(['MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_3'])
tickSpacing_3(uint24) := ϕ(['tickSpacing_0', 'tickSpacing_1'])
swapFee_4(uint24) := ϕ(['swapFee_0', 'swapFee_1', 'swapFee_3'])
barFeeTo_6(address) := ϕ(['barFeeTo_3', 'barFeeTo_4', 'barFeeTo_5', 'barFeeTo_0', 'barFeeTo_1'])
bento_12(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
masterDeployer_4(IMasterDeployer) := ϕ(['masterDeployer_3', 'masterDeployer_0', 'masterDeployer_1'])
token0_30(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
token1_34(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
_MAX_TICK_LIQUIDITY_1(uint128) := MAX_TICK_LIQUIDITY_6(uint128)
_tickSpacing_1(uint24) := tickSpacing_3(uint24)
_swapFee_1(uint24) := swapFee_4(uint24)
_barFeeTo_1(address) := barFeeTo_6(address)
_bento_1(IBentoBoxMinimal) := bento_12(IBentoBoxMinimal)
_masterDeployer_1(IMasterDeployer) := masterDeployer_4(IMasterDeployer)
_token0_1(address) := token0_30(address)
_token1_1(address) := token1_34(address)


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
MAX_TICK_LIQUIDITY_6
MAX_TICK_LIQUIDITY
Name: MAX_TICK_LIQUIDITY, Num: 6

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
tickSpacing_3
tickSpacing
Name: tickSpacing, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
swapFee_4
swapFee
Name: swapFee, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
barFeeTo_6
barFeeTo
Name: barFeeTo, Num: 6

Name: None Function: None
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
weee
bento_12
bento
Name: bento, Num: 12

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
masterDeployer_4
masterDeployer
Name: masterDeployer, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_30
token0
Name: token0, Num: 30

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_34
token1
Name: token1, Num: 34

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
MAX_TICK_LIQUIDITY_6(uint128) := ϕ(['MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_3'])
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tickSpacing_3(uint24) := ϕ(['tickSpacing_0', 'tickSpacing_1'])
Phi
[i]Type for tickSpacing

Name: tickSpacing Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_4(uint24) := ϕ(['swapFee_0', 'swapFee_1', 'swapFee_3'])
Phi
[i]Type for swapFee

Name: swapFee Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_6(address) := ϕ(['barFeeTo_3', 'barFeeTo_4', 'barFeeTo_5', 'barFeeTo_0', 'barFeeTo_1'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: getImmutables
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
bento_12(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masterDeployer_4(IMasterDeployer) := ϕ(['masterDeployer_3', 'masterDeployer_0', 'masterDeployer_1'])
Phi
[i]Type for masterDeployer

Name: masterDeployer Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_30(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: getImmutables
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_34(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: getImmutables
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
MAX_TICK_LIQUIDITY_6
MAX_TICK_LIQUIDITY_6
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_MAX_TICK_LIQUIDITY_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_MAX_TICK_LIQUIDITY_1
_MAX_TICK_LIQUIDITY
Name: _MAX_TICK_LIQUIDITY, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_MAX_TICK_LIQUIDITY_1(uint128) := MAX_TICK_LIQUIDITY_6(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _MAX_TICK_LIQUIDITY

Name: _MAX_TICK_LIQUIDITY Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
tickSpacing_3
tickSpacing_3
tickSpacing

Name: tickSpacing Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_tickSpacing_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_tickSpacing_1
_tickSpacing
Name: _tickSpacing, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_tickSpacing_1(uint24) := tickSpacing_3(uint24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _tickSpacing

Name: _tickSpacing Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
swapFee_4
swapFee_4
swapFee

Name: swapFee Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_swapFee_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_swapFee_1
_swapFee
Name: _swapFee, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_swapFee_1(uint24) := swapFee_4(uint24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _swapFee

Name: _swapFee Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
barFeeTo_6
barFeeTo_6
barFeeTo

Name: barFeeTo Function: getImmutables
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
_barFeeTo_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_barFeeTo_1
_barFeeTo
Name: _barFeeTo, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_barFeeTo_1(address) := barFeeTo_6(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _barFeeTo

Name: _barFeeTo Function: getImmutables
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
bento_12
bento_12
bento

Name: bento Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_bento_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_bento_1
_bento
Name: _bento, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_bento_1(IBentoBoxMinimal) := bento_12(IBentoBoxMinimal)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _bento

Name: _bento Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
masterDeployer_4
masterDeployer_4
masterDeployer

Name: masterDeployer Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_masterDeployer_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_masterDeployer_1
_masterDeployer
Name: _masterDeployer, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_masterDeployer_1(IMasterDeployer) := masterDeployer_4(IMasterDeployer)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _masterDeployer

Name: _masterDeployer Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token0_30
token0_30
token0

Name: token0 Function: getImmutables
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_token0_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token0_1
_token0
Name: _token0, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_token0_1(address) := token0_30(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _token0

Name: _token0 Function: getImmutables
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token1_34
token1_34
token1

Name: token1 Function: getImmutables
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_token1_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token1_1
_token1
Name: _token1, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_token1_1(address) := token1_34(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _token1

Name: _token1 Function: getImmutables
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX


MAX_TICK_LIQUIDITY_6(uint128) := ϕ(['MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_3'])
tickSpacing_3(uint24) := ϕ(['tickSpacing_0', 'tickSpacing_1'])
swapFee_4(uint24) := ϕ(['swapFee_0', 'swapFee_1', 'swapFee_3'])
barFeeTo_6(address) := ϕ(['barFeeTo_3', 'barFeeTo_4', 'barFeeTo_5', 'barFeeTo_0', 'barFeeTo_1'])
bento_12(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
masterDeployer_4(IMasterDeployer) := ϕ(['masterDeployer_3', 'masterDeployer_0', 'masterDeployer_1'])
token0_30(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
token1_34(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
_MAX_TICK_LIQUIDITY_1(uint128) := MAX_TICK_LIQUIDITY_6(uint128)
_tickSpacing_1(uint24) := tickSpacing_3(uint24)
_swapFee_1(uint24) := swapFee_4(uint24)
_barFeeTo_1(address) := barFeeTo_6(address)
_bento_1(IBentoBoxMinimal) := bento_12(IBentoBoxMinimal)
_masterDeployer_1(IMasterDeployer) := masterDeployer_4(IMasterDeployer)
_token0_1(address) := token0_30(address)
_token1_1(address) := token1_34(address)


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
MAX_TICK_LIQUIDITY_6
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
tickSpacing_3
tickSpacing

Name: tickSpacing Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
swapFee_4
swapFee

Name: swapFee Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
barFeeTo_6
barFeeTo

Name: barFeeTo Function: getImmutables
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
weee
bento_12
bento

Name: bento Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
masterDeployer_4
masterDeployer

Name: masterDeployer Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token0_30
token0

Name: token0 Function: getImmutables
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
weee
token1_34
token1

Name: token1 Function: getImmutables
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
weee
MAX_TICK_LIQUIDITY_6(uint128) := ϕ(['MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_0', 'MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_3'])
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tickSpacing_3(uint24) := ϕ(['tickSpacing_0', 'tickSpacing_1'])
Phi
[i]Type for tickSpacing

Name: tickSpacing Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
swapFee_4(uint24) := ϕ(['swapFee_0', 'swapFee_1', 'swapFee_3'])
Phi
[i]Type for swapFee

Name: swapFee Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
barFeeTo_6(address) := ϕ(['barFeeTo_3', 'barFeeTo_4', 'barFeeTo_5', 'barFeeTo_0', 'barFeeTo_1'])
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: getImmutables
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
bento_12(IBentoBoxMinimal) := ϕ(['bento_3', 'bento_0', 'bento_9', 'bento_1', 'bento_5', 'bento_11', 'bento_6'])
Phi
[i]Type for bento

Name: bento Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masterDeployer_4(IMasterDeployer) := ϕ(['masterDeployer_3', 'masterDeployer_0', 'masterDeployer_1'])
Phi
[i]Type for masterDeployer

Name: masterDeployer Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token0_30(address) := ϕ(['token0_22', 'token0_14', 'token0_23', 'token0_0', 'token0_1', 'token0_20', 'token0_25', 'token0_28', 'token0_10', 'token0_19', 'token0_9', 'token0_27'])
Phi
[i]Type for token0

Name: token0 Function: getImmutables
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
token1_34(address) := ϕ(['token1_25', 'token1_27', 'token1_10', 'token1_20', 'token1_30', 'token1_9', 'token1_32', 'token1_23', 'token1_0', 'token1_15', 'token1_24', 'token1_11', 'token1_1', 'token1_21'])
Phi
[i]Type for token1

Name: token1 Function: getImmutables
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
MAX_TICK_LIQUIDITY_6
MAX_TICK_LIQUIDITY_6
MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_MAX_TICK_LIQUIDITY_1

Name: _MAX_TICK_LIQUIDITY Function: getImmutables
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_MAX_TICK_LIQUIDITY_1
_MAX_TICK_LIQUIDITY
Name: _MAX_TICK_LIQUIDITY, Num: 1

Name: _MAX_TICK_LIQUIDITY Function: getImmutables
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_MAX_TICK_LIQUIDITY_1(uint128) := MAX_TICK_LIQUIDITY_6(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _MAX_TICK_LIQUIDITY

Name: _MAX_TICK_LIQUIDITY Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
tickSpacing_3
tickSpacing_3
tickSpacing

Name: tickSpacing Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_tickSpacing_1

Name: _tickSpacing Function: getImmutables
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_tickSpacing_1
_tickSpacing
Name: _tickSpacing, Num: 1

Name: _tickSpacing Function: getImmutables
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_tickSpacing_1(uint24) := tickSpacing_3(uint24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _tickSpacing

Name: _tickSpacing Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
swapFee_4
swapFee_4
swapFee

Name: swapFee Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_swapFee_1

Name: _swapFee Function: getImmutables
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_swapFee_1
_swapFee
Name: _swapFee, Num: 1

Name: _swapFee Function: getImmutables
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_swapFee_1(uint24) := swapFee_4(uint24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _swapFee

Name: _swapFee Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
barFeeTo_6
barFeeTo_6
barFeeTo

Name: barFeeTo Function: getImmutables
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
_barFeeTo_1

Name: _barFeeTo Function: getImmutables
Num: 
Den: 
Address: u
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
_barFeeTo_1
_barFeeTo
Name: _barFeeTo, Num: 1

Name: _barFeeTo Function: getImmutables
Num: 
Den: 
Address: u
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_barFeeTo_1(address) := barFeeTo_6(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _barFeeTo

Name: _barFeeTo Function: getImmutables
Num: -1
Den: -1
Address: 3
Norm: u
LF: barFeeTo
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
bento_12
bento_12
bento

Name: bento Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_bento_1

Name: _bento Function: getImmutables
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_bento_1
_bento
Name: _bento, Num: 1

Name: _bento Function: getImmutables
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_bento_1(IBentoBoxMinimal) := bento_12(IBentoBoxMinimal)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _bento

Name: _bento Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
masterDeployer_4
masterDeployer_4
masterDeployer

Name: masterDeployer Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_masterDeployer_1

Name: _masterDeployer Function: getImmutables
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_masterDeployer_1
_masterDeployer
Name: _masterDeployer, Num: 1

Name: _masterDeployer Function: getImmutables
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_masterDeployer_1(IMasterDeployer) := masterDeployer_4(IMasterDeployer)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _masterDeployer

Name: _masterDeployer Function: getImmutables
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token0_30
token0_30
token0

Name: token0 Function: getImmutables
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_token0_1

Name: _token0 Function: getImmutables
Num: 
Den: 
Address: u
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
_token0_1
_token0
Name: _token0, Num: 1

Name: _token0 Function: getImmutables
Num: 
Den: 
Address: u
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_token0_1(address) := token0_30(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _token0

Name: _token0 Function: getImmutables
Num: -1
Den: -1
Address: 1
Norm: u
LF: token0
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token1_34
token1_34
token1

Name: token1 Function: getImmutables
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_token1_1

Name: _token1 Function: getImmutables
Num: 
Den: 
Address: u
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
_token1_1
_token1
Name: _token1, Num: 1

Name: _token1 Function: getImmutables
Num: 
Den: 
Address: u
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_token1_1(address) := token1_34(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _token1

Name: _token1 Function: getImmutables
Num: -1
Den: -1
Address: 2
Norm: u
LF: token1
Value: u
Fields: 
Finance Type: undef
XXXX



getPriceAndNearestTicks


price_9(uint160) := ϕ(['price_8', 'price_3', 'price_1', 'price_5', 'price_0'])
nearestTick_20(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
_price_1(uint160) := price_9(uint160)
_nearestTick_1(int24) := nearestTick_20(int24)


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
price_9
price
Name: price, Num: 9

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_20
nearestTick
Name: nearestTick, Num: 20

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
price_9(uint160) := ϕ(['price_8', 'price_3', 'price_1', 'price_5', 'price_0'])
Phi
[i]Type for price

Name: price Function: getPriceAndNearestTicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_20(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: getPriceAndNearestTicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
price_9
price_9
price

Name: price Function: getPriceAndNearestTicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_price_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_price_1
_price
Name: _price, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_price_1(uint160) := price_9(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _price

Name: _price Function: getPriceAndNearestTicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
nearestTick_20
nearestTick_20
nearestTick

Name: nearestTick Function: getPriceAndNearestTicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_nearestTick_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_nearestTick_1
_nearestTick
Name: _nearestTick, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_nearestTick_1(int24) := nearestTick_20(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _nearestTick

Name: _nearestTick Function: getPriceAndNearestTicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


price_9(uint160) := ϕ(['price_8', 'price_3', 'price_1', 'price_5', 'price_0'])
nearestTick_20(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
_price_1(uint160) := price_9(uint160)
_nearestTick_1(int24) := nearestTick_20(int24)


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
price_9
price

Name: price Function: getPriceAndNearestTicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
nearestTick_20
nearestTick

Name: nearestTick Function: getPriceAndNearestTicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
price_9(uint160) := ϕ(['price_8', 'price_3', 'price_1', 'price_5', 'price_0'])
Phi
[i]Type for price

Name: price Function: getPriceAndNearestTicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nearestTick_20(int24) := ϕ(['nearestTick_0', 'nearestTick_16', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1', 'nearestTick_17'])
Phi
[i]Type for nearestTick

Name: nearestTick Function: getPriceAndNearestTicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
price_9
price_9
price

Name: price Function: getPriceAndNearestTicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_price_1

Name: _price Function: getPriceAndNearestTicks
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_price_1
_price
Name: _price, Num: 1

Name: _price Function: getPriceAndNearestTicks
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_price_1(uint160) := price_9(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _price

Name: _price Function: getPriceAndNearestTicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
nearestTick_20
nearestTick_20
nearestTick

Name: nearestTick Function: getPriceAndNearestTicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_nearestTick_1

Name: _nearestTick Function: getPriceAndNearestTicks
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_nearestTick_1
_nearestTick
Name: _nearestTick, Num: 1

Name: _nearestTick Function: getPriceAndNearestTicks
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_nearestTick_1(int24) := nearestTick_20(int24)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _nearestTick

Name: _nearestTick Function: getPriceAndNearestTicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX



getTokenProtocolFees


token0ProtocolFee_6(uint128) := ϕ(['token0ProtocolFee_0', 'token0ProtocolFee_5', 'token0ProtocolFee_2', 'token0ProtocolFee_3'])
token1ProtocolFee_7(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_0', 'token1ProtocolFee_6', 'token1ProtocolFee_2'])
_token0ProtocolFee_1(uint128) := token0ProtocolFee_6(uint128)
_token1ProtocolFee_1(uint128) := token1ProtocolFee_7(uint128)


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
token0ProtocolFee_6
token0ProtocolFee
Name: token0ProtocolFee, Num: 6

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
weee
token1ProtocolFee_7
token1ProtocolFee
Name: token1ProtocolFee, Num: 7

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
weee
token0ProtocolFee_6(uint128) := ϕ(['token0ProtocolFee_0', 'token0ProtocolFee_5', 'token0ProtocolFee_2', 'token0ProtocolFee_3'])
Phi
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: getTokenProtocolFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
token1ProtocolFee_7(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_0', 'token1ProtocolFee_6', 'token1ProtocolFee_2'])
Phi
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: getTokenProtocolFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token0ProtocolFee_6
token0ProtocolFee_6
token0ProtocolFee

Name: token0ProtocolFee Function: getTokenProtocolFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
_token0ProtocolFee_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token0ProtocolFee_1
_token0ProtocolFee
Name: _token0ProtocolFee, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_token0ProtocolFee_1(uint128) := token0ProtocolFee_6(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _token0ProtocolFee

Name: _token0ProtocolFee Function: getTokenProtocolFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token1ProtocolFee_7
token1ProtocolFee_7
token1ProtocolFee

Name: token1ProtocolFee Function: getTokenProtocolFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
_token1ProtocolFee_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token1ProtocolFee_1
_token1ProtocolFee
Name: _token1ProtocolFee, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_token1ProtocolFee_1(uint128) := token1ProtocolFee_7(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _token1ProtocolFee

Name: _token1ProtocolFee Function: getTokenProtocolFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX


token0ProtocolFee_6(uint128) := ϕ(['token0ProtocolFee_0', 'token0ProtocolFee_5', 'token0ProtocolFee_2', 'token0ProtocolFee_3'])
token1ProtocolFee_7(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_0', 'token1ProtocolFee_6', 'token1ProtocolFee_2'])
_token0ProtocolFee_1(uint128) := token0ProtocolFee_6(uint128)
_token1ProtocolFee_1(uint128) := token1ProtocolFee_7(uint128)


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
token0ProtocolFee_6
token0ProtocolFee

Name: token0ProtocolFee Function: getTokenProtocolFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
weee
token1ProtocolFee_7
token1ProtocolFee

Name: token1ProtocolFee Function: getTokenProtocolFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
weee
token0ProtocolFee_6(uint128) := ϕ(['token0ProtocolFee_0', 'token0ProtocolFee_5', 'token0ProtocolFee_2', 'token0ProtocolFee_3'])
Phi
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: getTokenProtocolFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
token1ProtocolFee_7(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_0', 'token1ProtocolFee_6', 'token1ProtocolFee_2'])
Phi
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: getTokenProtocolFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token0ProtocolFee_6
token0ProtocolFee_6
token0ProtocolFee

Name: token0ProtocolFee Function: getTokenProtocolFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
_token0ProtocolFee_1

Name: _token0ProtocolFee Function: getTokenProtocolFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
_token0ProtocolFee_1
_token0ProtocolFee
Name: _token0ProtocolFee, Num: 1

Name: _token0ProtocolFee Function: getTokenProtocolFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
weee
_token0ProtocolFee_1(uint128) := token0ProtocolFee_6(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _token0ProtocolFee

Name: _token0ProtocolFee Function: getTokenProtocolFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
token1ProtocolFee_7
token1ProtocolFee_7
token1ProtocolFee

Name: token1ProtocolFee Function: getTokenProtocolFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
_token1ProtocolFee_1

Name: _token1ProtocolFee Function: getTokenProtocolFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
_token1ProtocolFee_1
_token1ProtocolFee
Name: _token1ProtocolFee, Num: 1

Name: _token1ProtocolFee Function: getTokenProtocolFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
End popogation
weee
_token1ProtocolFee_1(uint128) := token1ProtocolFee_7(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _token1ProtocolFee

Name: _token1ProtocolFee Function: getTokenProtocolFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX



getReserves


reserve0_31(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
reserve1_33(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
_reserve0_1(uint128) := reserve0_31(uint128)
_reserve1_1(uint128) := reserve1_33(uint128)


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
reserve0_31
reserve0
Name: reserve0, Num: 31

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_33
reserve1
Name: reserve1, Num: 33

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve0_31(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
Phi
[i]Type for reserve0

Name: reserve0 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_33(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
Phi
[i]Type for reserve1

Name: reserve1 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
reserve0_31
reserve0_31
reserve0

Name: reserve0 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0
Name: _reserve0, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_reserve0_1(uint128) := reserve0_31(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _reserve0

Name: _reserve0 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
reserve1_33
reserve1_33
reserve1

Name: reserve1 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1
Name: _reserve1, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_reserve1_1(uint128) := reserve1_33(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _reserve1

Name: _reserve1 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


reserve0_31(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
reserve1_33(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
_reserve0_1(uint128) := reserve0_31(uint128)
_reserve1_1(uint128) := reserve1_33(uint128)


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
reserve0_31
reserve0

Name: reserve0 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve1_33
reserve1

Name: reserve1 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reserve0_31(uint128) := ϕ(['reserve0_23', 'reserve0_21', 'reserve0_24', 'reserve0_11', 'reserve0_16', 'reserve0_9', 'reserve0_0', 'reserve0_30'])
Phi
[i]Type for reserve0

Name: reserve0 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve1_33(uint128) := ϕ(['reserve1_17', 'reserve1_25', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_32', 'reserve1_22', 'reserve1_12', 'reserve1_24'])
Phi
[i]Type for reserve1

Name: reserve1 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
reserve0_31
reserve0_31
reserve0

Name: reserve0 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1

Name: _reserve0 Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve0_1
_reserve0
Name: _reserve0, Num: 1

Name: _reserve0 Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_reserve0_1(uint128) := reserve0_31(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _reserve0

Name: _reserve0 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
reserve1_33
reserve1_33
reserve1

Name: reserve1 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1

Name: _reserve1 Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserve1_1
_reserve1
Name: _reserve1, Num: 1

Name: _reserve1 Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_reserve1_1(uint128) := reserve1_33(uint128)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _reserve1

Name: _reserve1 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX



getLiquidityAndLastObservation


secondsPerLiquidity_11(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
lastObservation_4(uint32) := ϕ(['lastObservation_2', 'lastObservation_0', 'lastObservation_3'])
_secondsPerLiquidity_1(uint160) := secondsPerLiquidity_11(uint160)
_lastObservation_1(uint32) := lastObservation_4(uint32)


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
secondsPerLiquidity_11
secondsPerLiquidity
Name: secondsPerLiquidity, Num: 11

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lastObservation_4
lastObservation
Name: lastObservation, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
secondsPerLiquidity_11(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: getLiquidityAndLastObservation
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lastObservation_4(uint32) := ϕ(['lastObservation_2', 'lastObservation_0', 'lastObservation_3'])
Phi
[i]Type for lastObservation

Name: lastObservation Function: getLiquidityAndLastObservation
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
secondsPerLiquidity_11
secondsPerLiquidity_11
secondsPerLiquidity

Name: secondsPerLiquidity Function: getLiquidityAndLastObservation
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_secondsPerLiquidity_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_secondsPerLiquidity_1
_secondsPerLiquidity
Name: _secondsPerLiquidity, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_secondsPerLiquidity_1(uint160) := secondsPerLiquidity_11(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _secondsPerLiquidity

Name: _secondsPerLiquidity Function: getLiquidityAndLastObservation
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
lastObservation_4
lastObservation_4
lastObservation

Name: lastObservation Function: getLiquidityAndLastObservation
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_lastObservation_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_lastObservation_1
_lastObservation
Name: _lastObservation, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_lastObservation_1(uint32) := lastObservation_4(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _lastObservation

Name: _lastObservation Function: getLiquidityAndLastObservation
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


secondsPerLiquidity_11(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
lastObservation_4(uint32) := ϕ(['lastObservation_2', 'lastObservation_0', 'lastObservation_3'])
_secondsPerLiquidity_1(uint160) := secondsPerLiquidity_11(uint160)
_lastObservation_1(uint32) := lastObservation_4(uint32)


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
secondsPerLiquidity_11
secondsPerLiquidity

Name: secondsPerLiquidity Function: getLiquidityAndLastObservation
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
lastObservation_4
lastObservation

Name: lastObservation Function: getLiquidityAndLastObservation
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
secondsPerLiquidity_11(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: getLiquidityAndLastObservation
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lastObservation_4(uint32) := ϕ(['lastObservation_2', 'lastObservation_0', 'lastObservation_3'])
Phi
[i]Type for lastObservation

Name: lastObservation Function: getLiquidityAndLastObservation
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
secondsPerLiquidity_11
secondsPerLiquidity_11
secondsPerLiquidity

Name: secondsPerLiquidity Function: getLiquidityAndLastObservation
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_secondsPerLiquidity_1

Name: _secondsPerLiquidity Function: getLiquidityAndLastObservation
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_secondsPerLiquidity_1
_secondsPerLiquidity
Name: _secondsPerLiquidity, Num: 1

Name: _secondsPerLiquidity Function: getLiquidityAndLastObservation
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_secondsPerLiquidity_1(uint160) := secondsPerLiquidity_11(uint160)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _secondsPerLiquidity

Name: _secondsPerLiquidity Function: getLiquidityAndLastObservation
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
lastObservation_4
lastObservation_4
lastObservation

Name: lastObservation Function: getLiquidityAndLastObservation
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_lastObservation_1

Name: _lastObservation Function: getLiquidityAndLastObservation
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_lastObservation_1
_lastObservation
Name: _lastObservation, Num: 1

Name: _lastObservation Function: getLiquidityAndLastObservation
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
_lastObservation_1(uint32) := lastObservation_4(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _lastObservation

Name: _lastObservation Function: getLiquidityAndLastObservation
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX



slitherConstructorConstantVariables
Address: 1, Label: global:token0
Address: 2, Label: global:token1
Address: 3, Label: global:barFeeTo
Address: -999, Label: constructor:_token0
Address: -998, Label: constructor:_token1
Address: -997, Label: burn:recipient
Address: -996, Label: collect:recipient
Address: -995, Label: swap:recipient
Address: 4, Label: constructor:TMP_3
Address: 4, Label: global:this
Address: 5, Label: mint:TMP_49
Address: 5, Label: global:msg.sender
Head Addr: 1
    Norm: 6
    Set: {1}
    Fin: NULL
Head Addr: 2
    Norm: 18
    Set: {2}
    Fin: NULL
Head Addr: 3
    Norm: 0
    Set: {3}
    Fin: NULL
Head Addr: -999
    Norm: 6
    Set: {-999}
    Fin: NULL
Head Addr: -998
    Norm: 18
    Set: {-998}
    Fin: NULL
Head Addr: -997
    Norm: 0
    Set: {-997}
    Fin: NULL
Head Addr: -996
    Norm: 0
    Set: {-996}
    Fin: NULL
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
Head Addr: 4
    Norm: *
    Set: {4}
    Fin: NULL
Head Addr: 5
    Norm: *
    Set: {5}
    Fin: NULL
Function count: 67
Executing Group 11
[*] Tested 12 warnings for Sushi Trident
Group 11 complete
Testing complete
