Switched global version to 0.6.12
Checking ICoreOracle
Checking WrappedIbbtc
Checking ContextUpgradeable
Checking SafeMathUpgradeable
Checking Initializable
Checking ERC20Upgradeable
Checking IERC20Upgradeable
Checking AddressUpgradeable
Add to address_to_label {'global:pendingGovernance': 1}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995, 'transferFrom:sender': -994}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995, 'transferFrom:sender': -994, 'transferFrom:recipient': -993}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995, 'transferFrom:sender': -994, 'transferFrom:recipient': -993, 'transfer:recipient': -992}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995, 'transferFrom:sender': -994, 'transferFrom:recipient': -993, 'transfer:recipient': -992, 'sharesOf:account': -991}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995, 'transferFrom:sender': -994, 'transferFrom:recipient': -993, 'transfer:recipient': -992, 'sharesOf:account': -991, 'balanceOf:account': -990}
State_var: _decimals
Finding type for _decimals(uint8 ... )
State_var: oracle
Finding type for oracle(ICoreOracle ... )
State_var: pendingGovernance
Finding type for pendingGovernance(address ... )
prev address? u
Head Addr: 1
    Norm: 0
    Set: {1}
    Fin: NULL
State_var: _balances
Finding type for _balances(mapping(address => uint256) ... )
State_var: _allowances
Finding type for _allowances(mapping(address => mapping(address => uint256)) ... )
State_var: _totalSupply
Finding type for _totalSupply(uint256 ... )
State_var: _symbol
Finding type for _symbol(string ... )
State_var: _name
Finding type for _name(string ... )
State_var: ibbtc
Finding type for ibbtc(ERC20Upgradeable ... )
State_var: governance
Finding type for governance(address ... )
prev address? u
Head Addr: 2
    Norm: 0
    Set: {2}
    Fin: NULL
State_var: _initialized
Finding type for _initialized(bool ... )
State_var: _initializing
Finding type for _initializing(bool ... )



initialize
Finding type for _governance(address ... )
prev address? u
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
Finding type for _ibbtc(address ... )
prev address? u
Head Addr: -998
    Norm: 6
    Set: {-998}
    Fin: NULL
Finding type for _oracle(address ... )
prev address? u
Head Addr: -997
    Norm: 0
    Set: {-997}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: u
    link: _governance
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: _ibbtc
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: _oracle
    fields: []
    fintype: -1


MODIFIER_CALL, Initializable.initializer()()
INTERNAL_CALL, ERC20Upgradeable.__ERC20_init(string,string)(Wrapped Interest-Bearing Bitcoin,wibBTC)
governance_1(address) := _governance_1(address)
TMP_62 = CONVERT _oracle_1 to ICoreOracle
oracle_1(ICoreOracle) := TMP_62(ICoreOracle)
TMP_63 = CONVERT _ibbtc_1 to ERC20Upgradeable
ibbtc_1(ERC20Upgradeable) := TMP_63(ERC20Upgradeable)
Emit SetOracle(_oracle_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Initializable.initializer()()
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, ERC20Upgradeable.__ERC20_init(string,string)(Wrapped Interest-Bearing Bitcoin,wibBTC)
Propogating parameters and globals to SSA variables...
Name: governance, Num: 1
Globalname: governance
global...

Name: PIC_10 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
End popogation
governance_1(address) := _governance_1(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for governance

Name: governance Function: initialize
Num: -1
Den: -1
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
global...

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_62 = CONVERT _oracle_1 to ICoreOracle
Converting _oracle_1

Name: _oracle_1 Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: _oracle
Value: u
Fields: 
Finance Type: undef
init
end
CoreOracle
[i]Type for TMP_62

Name: TMP_62 Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
oracle_1(ICoreOracle) := TMP_62(ICoreOracle)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: initialize
Num: -1
Den: -1
Address: -997
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: ibbtc, Num: 1
Globalname: ibbtc
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_63 = CONVERT _ibbtc_1 to ERC20Upgradeable
Converting _ibbtc_1

Name: _ibbtc_1 Function: None
Num: 
Den: 
Address: -998
Norm: u
LF: _ibbtc
Value: u
Fields: 
Finance Type: undef
init
end
UNKNOWN
[i]Type for TMP_63

Name: TMP_63 Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
ibbtc_1(ERC20Upgradeable) := TMP_63(ERC20Upgradeable)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for ibbtc

Name: ibbtc Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation


MODIFIER_CALL, Initializable.initializer()()
INTERNAL_CALL, ERC20Upgradeable.__ERC20_init(string,string)(Wrapped Interest-Bearing Bitcoin,wibBTC)
governance_1(address) := _governance_1(address)
TMP_62 = CONVERT _oracle_1 to ICoreOracle
oracle_1(ICoreOracle) := TMP_62(ICoreOracle)
TMP_63 = CONVERT _ibbtc_1 to ERC20Upgradeable
ibbtc_1(ERC20Upgradeable) := TMP_63(ERC20Upgradeable)
Emit SetOracle(_oracle_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Initializable.initializer()()
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, ERC20Upgradeable.__ERC20_init(string,string)(Wrapped Interest-Bearing Bitcoin,wibBTC)
Propogating parameters and globals to SSA variables...
End popogation
governance_1(address) := _governance_1(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for governance

Name: governance Function: initialize
Num: -1
Den: -1
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_62 = CONVERT _oracle_1 to ICoreOracle
Converting _oracle_1

Name: _oracle Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: _oracle
Value: u
Fields: 
Finance Type: undef
init
end
CoreOracle
[i]Type for TMP_62

Name: TMP_62 Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
oracle_1(ICoreOracle) := TMP_62(ICoreOracle)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: initialize
Num: -1
Den: -1
Address: -997
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_63 = CONVERT _ibbtc_1 to ERC20Upgradeable
Converting _ibbtc_1

Name: _ibbtc Function: None
Num: 
Den: 
Address: -998
Norm: u
LF: _ibbtc
Value: u
Fields: 
Finance Type: undef
init
end
UNKNOWN
[i]Type for TMP_63

Name: TMP_63 Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
ibbtc_1(ERC20Upgradeable) := TMP_63(ERC20Upgradeable)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for ibbtc

Name: ibbtc Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
State_var: _decimals
State_var: oracle
State_var: pendingGovernance
State_var: _balances
State_var: _allowances
State_var: _totalSupply
State_var: _symbol
State_var: _name
State_var: ibbtc
State_var: governance
State_var: _initialized
State_var: _initializing



setPendingGovernance
Finding type for _pendingGovernance(address ... )
prev address? u
Head Addr: -996
    Norm: 0
    Set: {-996}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: u
    link: _pendingGovernance
    fields: []
    fintype: -1


MODIFIER_CALL, WrappedIbbtc.onlyGovernance()()
pendingGovernance_1(address) := _pendingGovernance_1(address)
Emit SetPendingGovernance(pendingGovernance_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, WrappedIbbtc.onlyGovernance()()
Propogating parameters and globals to SSA variables...
Name: pendingGovernance, Num: 1
Globalname: pendingGovernance
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: pendingGovernance
Value: u
Fields: 
Finance Type: undef
End popogation
pendingGovernance_1(address) := _pendingGovernance_1(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for pendingGovernance

Name: pendingGovernance Function: setPendingGovernance
Num: -1
Den: -1
Address: -996
Norm: u
LF: _pendingGovernance
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation


MODIFIER_CALL, WrappedIbbtc.onlyGovernance()()
pendingGovernance_1(address) := _pendingGovernance_1(address)
Emit SetPendingGovernance(pendingGovernance_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, WrappedIbbtc.onlyGovernance()()
Propogating parameters and globals to SSA variables...
End popogation
pendingGovernance_1(address) := _pendingGovernance_1(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for pendingGovernance

Name: pendingGovernance Function: setPendingGovernance
Num: -1
Den: -1
Address: -996
Norm: u
LF: _pendingGovernance
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
State_var: _decimals
State_var: oracle
State_var: pendingGovernance
State_var: _balances
State_var: _allowances
State_var: _totalSupply
State_var: _symbol
State_var: _name
State_var: ibbtc
State_var: governance
State_var: _initialized
State_var: _initializing



setOracle
Finding type for _oracle(address ... )
prev address? u
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: u
    link: _oracle
    fields: []
    fintype: -1


MODIFIER_CALL, WrappedIbbtc.onlyGovernance()()
TMP_68 = CONVERT _oracle_1 to ICoreOracle
oracle_2(ICoreOracle) := TMP_68(ICoreOracle)
Emit SetOracle(_oracle_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, WrappedIbbtc.onlyGovernance()()
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 2
Globalname: oracle
global...

Name: oracle Function: initialize
Num: -1
Den: -1
Address: -997
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_68 = CONVERT _oracle_1 to ICoreOracle
Converting _oracle_1

Name: _oracle_1 Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: _oracle
Value: u
Fields: 
Finance Type: undef
init
end
CoreOracle
[i]Type for TMP_68

Name: TMP_68 Function: setOracle
Num: 
Den: 
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
oracle_2(ICoreOracle) := TMP_68(ICoreOracle)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: setOracle
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation


MODIFIER_CALL, WrappedIbbtc.onlyGovernance()()
TMP_68 = CONVERT _oracle_1 to ICoreOracle
oracle_2(ICoreOracle) := TMP_68(ICoreOracle)
Emit SetOracle(_oracle_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, WrappedIbbtc.onlyGovernance()()
Propogating parameters and globals to SSA variables...
End popogation
TMP_68 = CONVERT _oracle_1 to ICoreOracle
Converting _oracle_1

Name: _oracle Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: _oracle
Value: u
Fields: 
Finance Type: undef
init
end
CoreOracle
[i]Type for TMP_68

Name: TMP_68 Function: setOracle
Num: 
Den: 
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
oracle_2(ICoreOracle) := TMP_68(ICoreOracle)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: setOracle
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
State_var: _decimals
State_var: oracle
State_var: pendingGovernance
State_var: _balances
State_var: _allowances
State_var: _totalSupply
State_var: _symbol
State_var: _name
State_var: ibbtc
State_var: governance
State_var: _initialized
State_var: _initializing



acceptPendingGovernance


pendingGovernance_2(address) := ϕ(['pendingGovernance_1', 'pendingGovernance_0', 'pendingGovernance_3'])
MODIFIER_CALL, WrappedIbbtc.onlyPendingGovernance()()
governance_2(address) := pendingGovernance_3(address)
Emit AcceptPendingGovernance(pendingGovernance_3)


Propogating parameters and globals to SSA variables...
End popogation
Name: pendingGovernance, Num: 2
Globalname: pendingGovernance
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: pendingGovernance
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: pendingGovernance
Value: u
Fields: 
Finance Type: undef
Phid
pendingGovernance_2(address) := ϕ(['pendingGovernance_1', 'pendingGovernance_0', 'pendingGovernance_3'])
Phi
[i]Type for pendingGovernance

Name: pendingGovernance Function: acceptPendingGovernance
Num: -1
Den: -1
Address: 1
Norm: u
LF: pendingGovernance
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, WrappedIbbtc.onlyPendingGovernance()()
Propogating parameters and globals to SSA variables...
Name: pendingGovernance, Num: 3
Globalname: pendingGovernance
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: pendingGovernance
Value: u
Fields: 
Finance Type: undef
Name: governance, Num: 2
Globalname: governance
global...

Name: PIC_10 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
End popogation
governance_2(address) := pendingGovernance_3(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for governance

Name: governance Function: acceptPendingGovernance
Num: -1
Den: -1
Address: 2
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation


pendingGovernance_2(address) := ϕ(['pendingGovernance_1', 'pendingGovernance_0', 'pendingGovernance_3'])
MODIFIER_CALL, WrappedIbbtc.onlyPendingGovernance()()
governance_2(address) := pendingGovernance_3(address)
Emit AcceptPendingGovernance(pendingGovernance_3)


Propogating parameters and globals to SSA variables...
End popogation

Name: pendingGovernance Function: acceptPendingGovernance
Num: -1
Den: -1
Address: 1
Norm: u
LF: pendingGovernance
Value: u
Fields: 
Finance Type: undef
Phid
pendingGovernance_2(address) := ϕ(['pendingGovernance_1', 'pendingGovernance_0', 'pendingGovernance_3'])
Phi
[i]Type for pendingGovernance

Name: pendingGovernance Function: acceptPendingGovernance
Num: -1
Den: -1
Address: 1
Norm: u
LF: pendingGovernance
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, WrappedIbbtc.onlyPendingGovernance()()
Propogating parameters and globals to SSA variables...
End popogation
governance_2(address) := pendingGovernance_3(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for governance

Name: governance Function: acceptPendingGovernance
Num: -1
Den: -1
Address: 2
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
State_var: _decimals
State_var: oracle
State_var: pendingGovernance
State_var: _balances
State_var: _allowances
State_var: _totalSupply
State_var: _symbol
State_var: _name
State_var: ibbtc
State_var: governance
State_var: _initialized
State_var: _initializing



mint
Finding type for _shares(uint256 ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


ibbtc_2(ERC20Upgradeable) := ϕ(['ibbtc_0', 'ibbtc_1', 'ibbtc_4', 'ibbtc_9'])
TMP_73(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
TMP_74 = CONVERT this to address
TMP_75(bool) = HIGH_LEVEL_CALL, dest:ibbtc_3(ERC20Upgradeable), function:transferFrom, arguments:['TMP_73', 'TMP_74', '_shares_1']  
ibbtc_4(ERC20Upgradeable) := ϕ(['ibbtc_1', 'ibbtc_4', 'ibbtc_9', 'ibbtc_3'])
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)
TMP_77(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
INTERNAL_CALL, ERC20Upgradeable._mint(address,uint256)(TMP_77,_shares_1)


Propogating parameters and globals to SSA variables...
End popogation
Name: ibbtc, Num: 2
Globalname: ibbtc
global...

Name: ibbtc Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
Phid
ibbtc_2(ERC20Upgradeable) := ϕ(['ibbtc_0', 'ibbtc_1', 'ibbtc_4', 'ibbtc_9'])
Phi
[i]Type for ibbtc

Name: ibbtc Function: mint
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: ibbtc, Num: 3
Globalname: ibbtc
global...

Name: ibbtc Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
Name: _shares, Num: 1
Globalname: _shares
End popogation
Name: ibbtc, Num: 4
Globalname: ibbtc
global...

Name: ibbtc Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
Phid
TMP_73(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_73

Name: TMP_73 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_74 = CONVERT this to address
Converting this
new address made for this
prev address? u
global assignment: 3
3
3
[i]Type for TMP_74

Name: TMP_74 Function: mint
Num: -1
Den: -1
Address: 3
Norm: u
LF: WrappedIbbtc
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75(bool) = HIGH_LEVEL_CALL, dest:ibbtc_3(ERC20Upgradeable), function:transferFrom, arguments:['TMP_73', 'TMP_74', '_shares_1']  
High Call: transferFrom
Running querryfc
[i]Type for TMP_75

Name: TMP_75 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ibbtc_4(ERC20Upgradeable) := ϕ(['ibbtc_1', 'ibbtc_4', 'ibbtc_9', 'ibbtc_3'])
Phi
[i]Type for ibbtc

Name: ibbtc Function: mint
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)
[i]Type for TMP_76

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _shares, Num: 1
Globalname: _shares
End popogation
TMP_77(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_77

Name: TMP_77 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC20Upgradeable._mint(address,uint256)(TMP_77,_shares_1)


ibbtc_2(ERC20Upgradeable) := ϕ(['ibbtc_0', 'ibbtc_1', 'ibbtc_4', 'ibbtc_9'])
TMP_73(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
TMP_74 = CONVERT this to address
TMP_75(bool) = HIGH_LEVEL_CALL, dest:ibbtc_3(ERC20Upgradeable), function:transferFrom, arguments:['TMP_73', 'TMP_74', '_shares_1']  
ibbtc_4(ERC20Upgradeable) := ϕ(['ibbtc_1', 'ibbtc_4', 'ibbtc_9', 'ibbtc_3'])
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)
TMP_77(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
INTERNAL_CALL, ERC20Upgradeable._mint(address,uint256)(TMP_77,_shares_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: ibbtc Function: mint
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
Phid
ibbtc_2(ERC20Upgradeable) := ϕ(['ibbtc_0', 'ibbtc_1', 'ibbtc_4', 'ibbtc_9'])
Phi
[i]Type for ibbtc

Name: ibbtc Function: mint
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _shares, Num: 1
Globalname: _shares
End popogation

Name: ibbtc Function: mint
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
Phid
TMP_73(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_73

Name: TMP_73 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_74 = CONVERT this to address
Converting this
3
[i]Type for TMP_74

Name: TMP_74 Function: mint
Num: 
Den: 
Address: 3
Norm: u
LF: WrappedIbbtc
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75(bool) = HIGH_LEVEL_CALL, dest:ibbtc_3(ERC20Upgradeable), function:transferFrom, arguments:['TMP_73', 'TMP_74', '_shares_1']  
High Call: transferFrom
Running querryfc
[i]Type for TMP_75

Name: TMP_75 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ibbtc_4(ERC20Upgradeable) := ϕ(['ibbtc_1', 'ibbtc_4', 'ibbtc_9', 'ibbtc_3'])
Phi
[i]Type for ibbtc

Name: ibbtc Function: mint
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)
[i]Type for TMP_76

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _shares, Num: 1
Globalname: _shares
End popogation
TMP_77(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_77

Name: TMP_77 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC20Upgradeable._mint(address,uint256)(TMP_77,_shares_1)
State_var: _decimals
State_var: oracle
State_var: pendingGovernance
State_var: _balances
State_var: _allowances
State_var: _totalSupply
State_var: _symbol
State_var: _name
State_var: ibbtc
State_var: governance
State_var: _initialized
State_var: _initializing



burn
Finding type for _shares(uint256 ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


ibbtc_5(ERC20Upgradeable) := ϕ(['ibbtc_0', 'ibbtc_1', 'ibbtc_4', 'ibbtc_9'])
TMP_79(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
INTERNAL_CALL, ERC20Upgradeable._burn(address,uint256)(TMP_79,_shares_1)
TMP_81(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
TMP_82(bool) = HIGH_LEVEL_CALL, dest:ibbtc_8(ERC20Upgradeable), function:transfer, arguments:['TMP_81', '_shares_1']  
ibbtc_9(ERC20Upgradeable) := ϕ(['ibbtc_8', 'ibbtc_1', 'ibbtc_4', 'ibbtc_9'])
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)


Propogating parameters and globals to SSA variables...
End popogation
Name: ibbtc, Num: 5
Globalname: ibbtc
global...

Name: ibbtc Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
Phid
ibbtc_5(ERC20Upgradeable) := ϕ(['ibbtc_0', 'ibbtc_1', 'ibbtc_4', 'ibbtc_9'])
Phi
[i]Type for ibbtc

Name: ibbtc Function: burn
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _shares, Num: 1
Globalname: _shares
End popogation
TMP_79(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_79

Name: TMP_79 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC20Upgradeable._burn(address,uint256)(TMP_79,_shares_1)
Propogating parameters and globals to SSA variables...
Name: ibbtc, Num: 8
Globalname: ibbtc
global...

Name: ibbtc Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
Name: _shares, Num: 1
Globalname: _shares
End popogation
Name: ibbtc, Num: 9
Globalname: ibbtc
global...

Name: ibbtc Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
Phid
TMP_81(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_81

Name: TMP_81 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_82(bool) = HIGH_LEVEL_CALL, dest:ibbtc_8(ERC20Upgradeable), function:transfer, arguments:['TMP_81', '_shares_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_82

Name: TMP_82 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ibbtc_9(ERC20Upgradeable) := ϕ(['ibbtc_8', 'ibbtc_1', 'ibbtc_4', 'ibbtc_9'])
Phi
[i]Type for ibbtc

Name: ibbtc Function: burn
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)
[i]Type for TMP_83

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


ibbtc_5(ERC20Upgradeable) := ϕ(['ibbtc_0', 'ibbtc_1', 'ibbtc_4', 'ibbtc_9'])
TMP_79(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
INTERNAL_CALL, ERC20Upgradeable._burn(address,uint256)(TMP_79,_shares_1)
TMP_81(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
TMP_82(bool) = HIGH_LEVEL_CALL, dest:ibbtc_8(ERC20Upgradeable), function:transfer, arguments:['TMP_81', '_shares_1']  
ibbtc_9(ERC20Upgradeable) := ϕ(['ibbtc_8', 'ibbtc_1', 'ibbtc_4', 'ibbtc_9'])
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)


Propogating parameters and globals to SSA variables...
End popogation

Name: ibbtc Function: burn
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
Phid
ibbtc_5(ERC20Upgradeable) := ϕ(['ibbtc_0', 'ibbtc_1', 'ibbtc_4', 'ibbtc_9'])
Phi
[i]Type for ibbtc

Name: ibbtc Function: burn
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _shares, Num: 1
Globalname: _shares
End popogation
TMP_79(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_79

Name: TMP_79 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC20Upgradeable._burn(address,uint256)(TMP_79,_shares_1)
Propogating parameters and globals to SSA variables...
Name: _shares, Num: 1
Globalname: _shares
End popogation

Name: ibbtc Function: burn
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
Phid
TMP_81(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_81

Name: TMP_81 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_82(bool) = HIGH_LEVEL_CALL, dest:ibbtc_8(ERC20Upgradeable), function:transfer, arguments:['TMP_81', '_shares_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_82

Name: TMP_82 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ibbtc_9(ERC20Upgradeable) := ϕ(['ibbtc_8', 'ibbtc_1', 'ibbtc_4', 'ibbtc_9'])
Phi
[i]Type for ibbtc

Name: ibbtc Function: burn
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)
[i]Type for TMP_83

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
State_var: _decimals
State_var: oracle
State_var: pendingGovernance
State_var: _balances
State_var: _allowances
State_var: _totalSupply
State_var: _symbol
State_var: _name
State_var: ibbtc
State_var: governance
State_var: _initialized
State_var: _initializing



transferFrom
Finding type for sender(address ... )
prev address? u
Head Addr: -994
    Norm: 0
    Set: {-994}
    Fin: NULL
Finding type for recipient(address ... )
prev address? u
Changed here
Head Addr: -993
    Norm: 0
    Set: {-993}
    Fin: NULL
Finding type for amount(uint256 ... )
Param: 0
    num: []
    den: []
    norm: u
    link: sender
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: recipient
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


_allowances_16(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_1', '_allowances_14', '_allowances_6', '_allowances_21', '_allowances_0', '_allowances_15', '_allowances_10'])
TMP_84(uint256) = INTERNAL_CALL, WrappedIbbtc.balanceToShares(uint256)(amount_1)
amountInShares_1(uint256) := TMP_84(uint256)
INTERNAL_CALL, ERC20Upgradeable._transfer(address,address,uint256)(sender_1,recipient_1,amountInShares_1)
TMP_86(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
REF_31(mapping(address => uint256)) -> _allowances_19[sender_1]
TMP_87(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
REF_32(uint256) -> REF_31[TMP_87]
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256,string), arguments:['REF_32', 'amountInShares_1', 'ERC20: transfer amount exceeds allowance'] 
INTERNAL_CALL, ERC20Upgradeable._approve(address,address,uint256)(sender_1,TMP_86,TMP_88)
_allowances_21(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_15'])
RETURN True


Propogating parameters and globals to SSA variables...
End popogation
Name: _allowances, Num: 16
Globalname: _allowances
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_allowances_16(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_1', '_allowances_14', '_allowances_6', '_allowances_21', '_allowances_0', '_allowances_15', '_allowances_10'])
Phi
[i]Type for _allowances

Name: _allowances Function: transferFrom
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
Name: amountInShares, Num: 1
Globalname: amountInShares
End popogation
TMP_84(uint256) = INTERNAL_CALL, WrappedIbbtc.balanceToShares(uint256)(amount_1)
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: balance Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: balance, Num: 1
Globalname: balance

Name: balance_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
balance_1(uint256) := ϕ(['amount_1', 'amount_1'])
Phi
init
end
[i]Type for balance

Name: balance Function: balanceToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: balance, Num: 1
Globalname: balance
End popogation
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['balance_1', '1000000000000000000'] 
testing mul...
init
end
init
end

Name: balance_1 Function: balanceToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
[i]Type for TMP_102

Name: TMP_102 Function: balanceToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_103(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
Propogating parameters and globals to SSA variables...
End popogation
Name: oracle, Num: 3
Globalname: oracle
global...

Name: oracle Function: setOracle
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
Phid
oracle_3(ICoreOracle) := ϕ(['oracle_4', 'oracle_2', 'oracle_1', 'oracle_0'])
Phi
[i]Type for oracle

Name: oracle Function: pricePerShare
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: oracle, Num: 4
Globalname: oracle
global...

Name: oracle Function: setOracle
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
Phid
TMP_93(uint256) = HIGH_LEVEL_CALL, dest:oracle_3(ICoreOracle), function:pricePerShare, arguments:[]  
High Call: pricePerShare
Running querryfc
Written func info: CoreOracle, pricePerShare
Retvar: ('c', ['global:token'], ['global:share'], 0, "'u'", None)
{'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995, 'transferFrom:sender': -994, 'transferFrom:recipient': -993, 'transfer:recipient': -992, 'sharesOf:account': -991, 'balanceOf:account': -990, 'mint:TMP_74': 3, 'global:this': 3}
Executing Group 14
[*] Tested 1 warnings for Badger Dao p2
Group 14 complete
Testing complete
